<?xml version="1.0" encoding="utf-8"?><span>
<doc>
  <assembly>
    <name>System</name>
  </assembly>
  <members>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary>Represents a reference to a type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference"></see> class using the specified code type parameter.</summary>
      <param name="typeParameter">A <see cref="T:System.CodeDom.CodeTypeParameter"></see> that represents the type of the type parameter.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference"></see> class using the specified type name.</summary>
      <param name="typeName">The name of the type to reference.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference"></see> class using the specified type.</summary>
      <param name="type">The <see cref="T:System.Type"></see> to reference.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference"></see> class using the specified array type and rank.</summary>
      <param name="arrayType">A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the type of the array.</param>
      <param name="rank">The number of dimensions in the array.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference"></see> class using the specified type name and type arguments.</summary>
      <param name="typeName">The name of the type to reference.</param>
      <param name="typeArguments">An array of <see cref="T:System.CodeDom.CodeTypeReference"></see> values.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference"></see> class using the specified type name and code type reference option.</summary>
      <param name="typeName">The name of the type to reference.</param>
      <param name="codeTypeReferenceOption">The code type reference option, one of the <see cref="T:System.CodeDom.CodeTypeReferenceOptions"></see> values.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference"></see> class using the specified array type name and rank.</summary>
      <param name="baseType">The name of the type of the elements of the array.</param>
      <param name="rank">The number of dimensions of the array.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference"></see> class using the specified type and code type reference.</summary>
      <param name="type">The <see cref="T:System.Type"></see> to reference.</param>
      <param name="codeTypeReferenceOption">The code type reference option, one of the <see cref="T:System.CodeDom.CodeTypeReferenceOptions"></see> values.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary>Gets or sets the type of the elements in the array.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the type of the array elements.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary>Gets or sets the array rank of the array.</summary>
      <returns>The number of dimensions of the array.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary>Gets or sets the name of the type being referenced.</summary>
      <returns>The name of the type being referenced.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.Options">
      <summary>Gets or sets the code type reference option.</summary>
      <returns>A bitwise combination of the <see cref="T:System.CodeDom.CodeTypeReferenceOptions"></see> values.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.TypeArguments">
      <summary>Gets the type arguments for the current generic type reference.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReferenceCollection"></see> containing the type arguments for the current <see cref="T:System.CodeDom.CodeTypeReference"></see> object.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary>Represents a collection of <see cref="T:System.CodeDom.CodeTypeReference"></see> objects.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReferenceCollection"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReferenceCollection"></see> class containing the specified array of <see cref="T:System.CodeDom.CodeTypeReference"></see> objects.</summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeTypeReference"></see> objects with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReferenceCollection"></see> class containing the elements of the specified source collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeTypeReferenceCollection"></see> with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary>Adds the specified <see cref="T:System.CodeDom.CodeTypeReference"></see> to the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeReference"></see> to add.</param>
      <returns>The index at which the new element was inserted.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary>Adds a <see cref="T:System.CodeDom.CodeTypeReference"></see> to the collection using the specified data type name.</summary>
      <param name="value">The name of a data type for which to add a <see cref="T:System.CodeDom.CodeTypeReference"></see> to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary>Adds a <see cref="T:System.CodeDom.CodeTypeReference"></see> to the collection using the specified data type.</summary>
      <param name="value">The data type for which to add a <see cref="T:System.CodeDom.CodeTypeReference"></see> to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary>Copies the elements of the specified <see cref="T:System.CodeDom.CodeTypeReference"></see> array to the end of the collection.</summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeTypeReference"></see> containing the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>Adds the contents of the specified <see cref="T:System.CodeDom.CodeTypeReferenceCollection"></see> to the end of the collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeTypeReferenceCollection"></see> containing the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary>Gets a value indicating whether the collection contains the specified <see cref="T:System.CodeDom.CodeTypeReference"></see>.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeReference"></see> to search for in the collection.</param>
      <returns>true if the <see cref="T:System.CodeDom.CodeTypeReference"></see> is contained in the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary>Copies the items in the collection to the specified one-dimensional <see cref="T:System.Array"></see> at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the values copied from the collection.</param>
      <param name="index">The index of the array at which to begin inserting.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="array">array</paramref> parameter is multidimensional.   -or-   The number of elements in the <see cref="T:System.CodeDom.CodeTypeReferenceCollection"></see> is greater than the available space between the index of the target array specified by the <paramref name="index">index</paramref> parameter and the end of the target array.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array">array</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is less than the target array's minimum index.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary>Gets the index in the collection of the specified <see cref="T:System.CodeDom.CodeTypeReference"></see>, if it exists in the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeReference"></see> to locate in the collection.</param>
      <returns>The index of the specified <see cref="T:System.CodeDom.CodeTypeReference"></see> in the collection if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary>Inserts a <see cref="T:System.CodeDom.CodeTypeReference"></see> into the collection at the specified index.</summary>
      <param name="index">The zero-based index where the item should be inserted.</param>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeReference"></see> to insert.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.CodeDom.CodeTypeReference"></see> at the specified index in the collection.</summary>
      <param name="index">The index of the collection to access.</param>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> at each valid index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary>Removes the specified <see cref="T:System.CodeDom.CodeTypeReference"></see> from the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeReference"></see> to remove from the collection.</param>
      <exception cref="T:System.ArgumentException">The specified object is not found in the collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary>Represents a reference to a data type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReferenceExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReferenceExpression"></see> class using the specified type.</summary>
      <param name="type">A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the data type to reference.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReferenceExpression"></see> class using the specified data type name.</summary>
      <param name="type">The name of the data type to reference.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReferenceExpression"></see> class using the specified data type.</summary>
      <param name="type">An instance of the data type to reference.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary>Gets or sets the data type to reference.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the data type to reference.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceOptions">
      <summary>Specifies how the code type reference is to be resolved.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
      <summary>Resolve the type from the type parameter.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GlobalReference">
      <summary>Resolve the type from the root namespace.</summary>
      <returns></returns>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary>Represents a variable declaration.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeVariableDeclarationStatement"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeVariableDeclarationStatement"></see> class using the specified type and name.</summary>
      <param name="type">A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the data type of the variable.</param>
      <param name="name">The name of the variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeVariableDeclarationStatement"></see> class using the specified data type name and variable name.</summary>
      <param name="type">The name of the data type of the variable.</param>
      <param name="name">The name of the variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeVariableDeclarationStatement"></see> class using the specified data type and variable name.</summary>
      <param name="type">The data type for the variable.</param>
      <param name="name">The name of the variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeVariableDeclarationStatement"></see> class using the specified data type, variable name, and initialization expression.</summary>
      <param name="type">A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the type of the variable.</param>
      <param name="name">The name of the variable.</param>
      <param name="initExpression">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the initialization expression for the variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeVariableDeclarationStatement"></see> class using the specified data type, variable name, and initialization expression.</summary>
      <param name="type">The name of the data type of the variable.</param>
      <param name="name">The name of the variable.</param>
      <param name="initExpression">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the initialization expression for the variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeVariableDeclarationStatement"></see> class using the specified data type, variable name, and initialization expression.</summary>
      <param name="type">The data type of the variable.</param>
      <param name="name">The name of the variable.</param>
      <param name="initExpression">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the initialization expression for the variable.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary>Gets or sets the initialization expression for the variable.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the initialization expression for the variable.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary>Gets or sets the name of the variable.</summary>
      <returns>The name of the variable.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary>Gets or sets the data type of the variable.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the data type of the variable.</returns>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary>Represents a reference to a local variable.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeVariableReferenceExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeVariableReferenceExpression"></see> class using the specified local variable name.</summary>
      <param name="variableName">The name of the local variable to reference.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary>Gets or sets the name of the local variable to reference.</summary>
      <returns>The name of the local variable to reference.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary>Provides an example implementation of the <see cref="T:System.CodeDom.Compiler.ICodeCompiler"></see> interface.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CodeCompiler"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary>Gets the command arguments to be passed to the compiler from the specified <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see>.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> that indicates the compiler options.</param>
      <returns>The command arguments.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary>Gets the name of the compiler executable.</summary>
      <returns>The name of the compiler executable.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary>Gets the file name extension to use for source files.</summary>
      <returns>The file name extension to use for source files.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>Compiles the specified compile unit using the specified options, and returns the results from the compilation.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the compiler options.</param>
      <param name="e">A <see cref="T:System.CodeDom.CodeCompileUnit"></see> object that indicates the source to compile.</param>
      <returns>The results of compilation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="options">options</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Compiles the specified compile units using the specified options, and returns the results from the compilation.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the compiler options.</param>
      <param name="ea">An array of <see cref="T:System.CodeDom.CodeCompileUnit"></see> objects that indicates the source to compile.</param>
      <returns>The results of compilation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="options">options</paramref> is null.   -or-  <paramref name="ea">ea</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Compiles the specified file using the specified options, and returns the results from the compilation.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the compiler options.</param>
      <param name="fileName">The file name to compile.</param>
      <returns>The results of compilation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="options">options</paramref> is null.   -or-  <paramref name="fileName">fileName</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compiles the specified files using the specified options, and returns the results from the compilation.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the compiler options.</param>
      <param name="fileNames">An array of strings that indicates the file names of the files to compile.</param>
      <returns>The results of compilation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="options">options</paramref> is null.   -or-  <paramref name="fileNames">fileNames</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Compiles the specified source code string using the specified options, and returns the results from the compilation.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the compiler options.</param>
      <param name="source">The source code string to compile.</param>
      <returns>The results of compilation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="options">options</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compiles the specified source code strings using the specified options, and returns the results from the compilation.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the compiler options.</param>
      <param name="sources">An array of strings containing the source code to compile.</param>
      <returns>The results of compilation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="options">options</paramref> is null.   -or-  <paramref name="sources">sources</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Gets the command arguments to use when invoking the compiler to generate a response file.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the compiler options.</param>
      <param name="cmdArgs">A command arguments string.</param>
      <returns>The command arguments to use to generate a response file, or null if there are no response file arguments.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary>Joins the specified string arrays.</summary>
      <param name="sa">The array of strings to join.</param>
      <param name="separator">The separator to use.</param>
      <returns>The concatenated string.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary>Processes the specified line from the specified <see cref="T:System.CodeDom.Compiler.CompilerResults"></see>.</summary>
      <param name="results">A <see cref="T:System.CodeDom.Compiler.CompilerResults"></see> that indicates the results of compilation.</param>
      <param name="line">The line to process.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>For a description of this member, see <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)"></see>.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the compiler options.</param>
      <param name="e">A <see cref="T:System.CodeDom.CodeCompileUnit"></see> that indicates the source to compile.</param>
      <returns>The results of compilation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="options">options</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>For a description of this member, see <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])"></see>.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the compiler options.</param>
      <param name="ea">An array of <see cref="T:System.CodeDom.CodeCompileUnit"></see> objects that indicates the source to compile.</param>
      <returns>The results of compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>For a description of this member, see <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)"></see>.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the compiler options.</param>
      <param name="fileName">The file name to compile.</param>
      <returns>The results of compilation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="options">options</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>For a description of this member, see <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])"></see>.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the compiler options.</param>
      <param name="fileNames">An array of strings that indicates the file names to compile.</param>
      <returns>The results of compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>For a description of this member, see <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)"></see>.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the compiler options.</param>
      <param name="source">A string that indicates the source code to compile.</param>
      <returns>The results of compilation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="options">options</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>For a description of this member, see <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])"></see>.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the compiler options.</param>
      <param name="sources">An array of strings that indicates the source code to compile.</param>
      <returns>The results of compilation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="options">options</paramref> is null.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary>Provides a base class for <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> implementations. This class is abstract.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Compiles an assembly based on the <see cref="N:System.CodeDom"></see> trees contained in the specified array of <see cref="T:System.CodeDom.CodeCompileUnit"></see> objects, using the specified compiler settings.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the settings for the compilation.</param>
      <param name="compilationUnits">An array of type <see cref="T:System.CodeDom.CodeCompileUnit"></see> that indicates the code to compile.</param>
      <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults"></see> object that indicates the results of the compilation.</returns>
      <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler"></see> method is overridden in a derived class.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the settings for the compilation.</param>
      <param name="fileNames">An array of the names of the files to compile.</param>
      <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults"></see> object that indicates the results of compilation.</returns>
      <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler"></see> method is overridden in a derived class.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the compiler settings for this compilation.</param>
      <param name="sources">An array of source code strings to compile.</param>
      <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults"></see> object that indicates the results of compilation.</returns>
      <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler"></see> method is overridden in a derived class.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary>When overridden in a derived class, creates a new code compiler.</summary>
      <returns>An <see cref="T:System.CodeDom.Compiler.ICodeCompiler"></see> that can be used for compilation of <see cref="N:System.CodeDom"></see> based source code representations.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
      <summary>Creates an escaped identifier for the specified value.</summary>
      <param name="value">The string for which to create an escaped identifier.</param>
      <returns>The escaped identifier for the value.</returns>
      <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"></see> method is overridden in a derived class.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary>When overridden in a derived class, creates a new code generator.</summary>
      <returns>An <see cref="T:System.CodeDom.Compiler.ICodeGenerator"></see> that can be used to generate <see cref="N:System.CodeDom"></see> based source code representations.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary>When overridden in a derived class, creates a new code generator using the specified <see cref="T:System.IO.TextWriter"></see> for output.</summary>
      <param name="output">A <see cref="T:System.IO.TextWriter"></see> to use to output.</param>
      <returns>An <see cref="T:System.CodeDom.Compiler.ICodeGenerator"></see> that can be used to generate <see cref="N:System.CodeDom"></see> based source code representations.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary>When overridden in a derived class, creates a new code generator using the specified file name for output.</summary>
      <param name="fileName">The file name to output to.</param>
      <returns>An <see cref="T:System.CodeDom.Compiler.ICodeGenerator"></see> that can be used to generate <see cref="N:System.CodeDom"></see> based source code representations.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary>When overridden in a derived class, creates a new code parser.</summary>
      <returns>An <see cref="T:System.CodeDom.Compiler.ICodeParser"></see> that can be used to parse source code. The base implementation always returns null.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
      <summary>Gets a <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> instance for the specified language.</summary>
      <param name="language">The language name.</param>
      <returns>A CodeDOM provider that is implemented for the specified language name.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The <paramref name="language">language</paramref> does not have a configured provider on this computer.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="language">language</paramref> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Gets a <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> instance for the specified language and provider options.</summary>
      <param name="language">The language name.</param>
      <param name="providerOptions">A collection of provider options from the configuration file.</param>
      <returns>A CodeDOM provider that is implemented for the specified language name and options.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
      <summary>Creates a valid identifier for the specified value.</summary>
      <param name="value">The string for which to generate a valid identifier.</param>
      <returns>A valid identifier for the specified value.</returns>
      <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"></see> method is overridden in a derived class.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary>Gets the default file name extension to use for source code files in the current language.</summary>
      <returns>A file name extension corresponding to the extension of the source files of the current language. The base implementation always returns <see cref="F:System.String.Empty"></see>.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.</summary>
      <param name="compileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit"></see> for which to generate code.</param>
      <param name="writer">The <see cref="T:System.IO.TextWriter"></see> to which the output code is sent.</param>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions"></see> that indicates the options to use for generating code.</param>
      <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"></see> method is overridden in a derived class.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.</summary>
      <param name="expression">A <see cref="T:System.CodeDom.CodeExpression"></see> object that indicates the expression for which to generate code.</param>
      <param name="writer">The <see cref="T:System.IO.TextWriter"></see> to which output code is sent.</param>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions"></see> that indicates the options to use for generating code.</param>
      <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"></see> method is overridden in a derived class.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.</summary>
      <param name="member">A <see cref="T:System.CodeDom.CodeTypeMember"></see> object that indicates the member for which to generate code.</param>
      <param name="writer">The <see cref="T:System.IO.TextWriter"></see> to which output code is sent.</param>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions"></see> that indicates the options to use for generating code.</param>
      <exception cref="T:System.NotImplementedException">This method is not overridden in a derived class.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.</summary>
      <param name="codeNamespace">A <see cref="T:System.CodeDom.CodeNamespace"></see> object that indicates the namespace for which to generate code.</param>
      <param name="writer">The <see cref="T:System.IO.TextWriter"></see> to which output code is sent.</param>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions"></see> that indicates the options to use for generating code.</param>
      <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"></see> method is overridden in a derived class.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.</summary>
      <param name="statement">A <see cref="T:System.CodeDom.CodeStatement"></see> containing the CodeDOM elements for which to generate code.</param>
      <param name="writer">The <see cref="T:System.IO.TextWriter"></see> to which output code is sent.</param>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions"></see> that indicates the options to use for generating code.</param>
      <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"></see> method is overridden in a derived class.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.</summary>
      <param name="codeType">A <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> object that indicates the type for which to generate code.</param>
      <param name="writer">The <see cref="T:System.IO.TextWriter"></see> to which output code is sent.</param>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions"></see> that indicates the options to use for generating code.</param>
      <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"></see> method is overridden in a derived class.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
      <summary>Returns the language provider and compiler configuration settings for this computer.</summary>
      <returns>An array of type <see cref="T:System.CodeDom.Compiler.CompilerInfo"></see> representing the settings of all configured <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> implementations.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
      <summary>Returns the language provider and compiler configuration settings for the specified language.</summary>
      <param name="language">A language name.</param>
      <returns>A <see cref="T:System.CodeDom.Compiler.CompilerInfo"></see> object populated with settings of the configured <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> implementation.</returns>
      <exception cref="T:System.Configuration.ConfigurationException">The <paramref name="language">language</paramref> does not have a configured provider on this computer.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The <paramref name="language">language</paramref> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary>Gets a <see cref="T:System.ComponentModel.TypeConverter"></see> for the specified data type.</summary>
      <param name="type">The type of object to retrieve a type converter for.</param>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter"></see> for the specified type, or null if a <see cref="T:System.ComponentModel.TypeConverter"></see> for the specified type cannot be found.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
      <summary>Returns a language name associated with the specified file name extension, as configured in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> compiler configuration section.</summary>
      <param name="extension">A file name extension.</param>
      <returns>A language name associated with the file name extension, as configured in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> compiler configuration settings.</returns>
      <exception cref="T:System.Configuration.ConfigurationException">The <paramref name="extension">extension</paramref> does not have a configured language provider on this computer.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The <paramref name="extension">extension</paramref> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Gets the type indicated by the specified <see cref="T:System.CodeDom.CodeTypeReference"></see>.</summary>
      <param name="type">A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the type to return.</param>
      <returns>A text representation of the specified type, formatted for the language in which code is generated by this code generator. In Visual Basic, for example, passing in a <see cref="T:System.CodeDom.CodeTypeReference"></see> for the <see cref="T:System.Int32"></see> type will return &quot;Integer&quot;.</returns>
      <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"></see> method is overridden in a derived class.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
      <summary>Tests whether a file name extension has an associated <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> implementation configured on the computer.</summary>
      <param name="extension">A file name extension.</param>
      <returns>true if a <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> implementation is configured for the specified file name extension; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="extension">extension</paramref> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
      <summary>Tests whether a language has a <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> implementation configured on the computer.</summary>
      <param name="language">The language name.</param>
      <returns>true if a <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> implementation is configured for the specified language; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="language">language</paramref> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
      <summary>Returns a value that indicates whether the specified value is a valid identifier for the current language.</summary>
      <param name="value">The value to verify as a valid identifier.</param>
      <returns>true if the <paramref name="value">value</paramref> parameter is a valid identifier; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"></see> method is overridden in a derived class.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary>Gets a language features identifier.</summary>
      <returns>A <see cref="T:System.CodeDom.Compiler.LanguageOptions"></see> that indicates special features of the language.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
      <summary>Compiles the code read from the specified text stream into a <see cref="T:System.CodeDom.CodeCompileUnit"></see>.</summary>
      <param name="codeStream">A <see cref="T:System.IO.TextReader"></see> object that is used to read the code to be parsed.</param>
      <returns>A <see cref="T:System.CodeDom.CodeCompileUnit"></see> that contains a representation of the parsed code.</returns>
      <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"></see> method is overridden in a derived class.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Returns a value indicating whether the specified code generation support is provided.</summary>
      <param name="generatorSupport"></param>
      <returns>true if the specified code generation support is provided; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"></see> method is overridden in a derived class.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary>Provides an example implementation of the <see cref="T:System.CodeDom.Compiler.ICodeGenerator"></see> interface. This class is abstract.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CodeGenerator"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary>Generates a line-continuation character and outputs the specified string on a new line.</summary>
      <param name="st">The string to write on the new line.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>Creates an escaped identifier for the specified value.</summary>
      <param name="value">The string to create an escaped identifier for.</param>
      <returns>The escaped identifier for the value.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary>Creates a valid identifier for the specified value.</summary>
      <param name="value">A string to create a valid identifier for.</param>
      <returns>A valid identifier for the value.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass">
      <summary>Gets the code type declaration for the current class.</summary>
      <returns>The code type declaration for the current class.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary>Gets the current member of the class.</summary>
      <returns>The current member of the class.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary>Gets the current member name.</summary>
      <returns>The name of the current member.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary>Gets the current class name.</summary>
      <returns>The current class name.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary>Generates code for the specified argument reference expression.</summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeArgumentReferenceExpression"></see> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary>Generates code for the specified array creation expression.</summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeArrayCreateExpression"></see> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary>Generates code for the specified array indexer expression.</summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeArrayIndexerExpression"></see> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary>Generates code for the specified assignment statement.</summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeAssignStatement"></see> that indicates the statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary>Generates code for the specified attach event statement.</summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeAttachEventStatement"></see> that indicates the statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Generates code for the specified attribute block end.</summary>
      <param name="attributes">A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"></see> that indicates the end of the attribute block to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Generates code for the specified attribute block start.</summary>
      <param name="attributes">A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"></see> that indicates the start of the attribute block to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary>Generates code for the specified base reference expression.</summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeBaseReferenceExpression"></see> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary>Generates code for the specified binary operator expression.</summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeBinaryOperatorExpression"></see> that indicates the expression to generate code for.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="e">e</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary>Generates code for the specified cast expression.</summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeCastExpression"></see> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generates code for the specified class member using the specified text writer and code generator options.</summary>
      <param name="member">The class member to generate code for.</param>
      <param name="writer">The text writer to output code to.</param>
      <param name="options">The options to use when generating the code.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output"></see> property is not null.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary>Generates code for the specified comment.</summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeComment"></see> to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary>Generates code for the specified comment statement.</summary>
      <param name="e">The statement to generate code for.</param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.CodeDom.CodeCommentStatement.Comment"></see> property of <paramref name="e">e</paramref> is not set.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary>Generates code for the specified comment statements.</summary>
      <param name="e">The expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary>Generates code for the specified compile unit.</summary>
      <param name="e">The compile unit to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary>Generates code for the end of a compile unit.</summary>
      <param name="e">The compile unit to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary>Generates code for the start of a compile unit.</summary>
      <param name="e">The compile unit to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary>Generates code for the specified conditional statement.</summary>
      <param name="e">The statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary>Generates code for the specified constructor.</summary>
      <param name="e">The constructor to generate code for.</param>
      <param name="c">The type of the object that this constructor constructs.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary>Generates code for the specified decimal value.</summary>
      <param name="d">The decimal value to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
      <summary>Generates code for the specified reference to a default value.</summary>
      <param name="e">The reference to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary>Generates code for the specified delegate creation expression.</summary>
      <param name="e">The expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary>Generates code for the specified delegate invoke expression.</summary>
      <param name="e">The expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary>Generates code for the specified direction expression.</summary>
      <param name="e">The expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)">
      <summary>Generates code for the specified code directives.</summary>
      <param name="directives">The code directives to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary>Generates code for a double-precision floating point number.</summary>
      <param name="d">The value to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>Generates code for the specified entry point method.</summary>
      <param name="e">The entry point for the code.</param>
      <param name="c">The code that declares the type.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary>Generates code for the specified event.</summary>
      <param name="e">The member event to generate code for.</param>
      <param name="c">The type of the object that this event occurs on.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary>Generates code for the specified event reference expression.</summary>
      <param name="e">The expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary>Generates code for the specified code expression.</summary>
      <param name="e">The code expression to generate code for.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="e">e</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="e">e</paramref> is not a valid <see cref="T:System.CodeDom.CodeStatement"></see>.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary>Generates code for the specified expression statement.</summary>
      <param name="e">The statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary>Generates code for the specified member field.</summary>
      <param name="e">The field to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary>Generates code for the specified field reference expression.</summary>
      <param name="e">The expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary>Generates code for the specified goto statement.</summary>
      <param name="e">The expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary>Generates code for the specified indexer expression.</summary>
      <param name="e">The expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary>Generates code for the specified iteration statement.</summary>
      <param name="e">The statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary>Generates code for the specified labeled statement.</summary>
      <param name="e">The statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary>Generates code for the specified line pragma end.</summary>
      <param name="e">The end of the line pragma to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary>Generates code for the specified line pragma start.</summary>
      <param name="e">The start of the line pragma to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>Generates code for the specified method.</summary>
      <param name="e">The member method to generate code for.</param>
      <param name="c">The type of the object that this method occurs on.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary>Generates code for the specified method invoke expression.</summary>
      <param name="e">The expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary>Generates code for the specified method reference expression.</summary>
      <param name="e">The expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary>Generates code for the specified method return statement.</summary>
      <param name="e">The statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary>Generates code for the specified namespace.</summary>
      <param name="e">The namespace to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary>Generates code for the end of a namespace.</summary>
      <param name="e">The namespace to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary>Generates code for the specified namespace import.</summary>
      <param name="e">The namespace import to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary>Generates code for the specified namespace import.</summary>
      <param name="e">The namespace import to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary>Generates code for the namespaces in the specified compile unit.</summary>
      <param name="e">The compile unit to generate namespaces for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary>Generates code for the start of a namespace.</summary>
      <param name="e">The namespace to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary>Generates code for the specified object creation expression.</summary>
      <param name="e">The expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Generates code for the specified parameter declaration expression.</summary>
      <param name="e">The expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary>Generates code for the specified primitive expression.</summary>
      <param name="e">The expression to generate code for.</param>
      <exception cref="T:System.ArgumentException"><paramref name="e">e</paramref> uses an invalid data type. Only the following data types are valid:  string  char  byte  Int16  Int32  Int64  Single  Double  Decimal</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary>Generates code for the specified property.</summary>
      <param name="e">The property to generate code for.</param>
      <param name="c">The type of the object that this property occurs on.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary>Generates code for the specified property reference expression.</summary>
      <param name="e">The expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary>Generates code for the specified property set value reference expression.</summary>
      <param name="e">The expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary>Generates code for the specified remove event statement.</summary>
      <param name="e">The statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary>Generates code for a single-precision floating point number.</summary>
      <param name="s">The value to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary>Outputs the code of the specified literal code fragment compile unit.</summary>
      <param name="e">The literal code fragment compile unit to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary>Outputs the code of the specified literal code fragment expression.</summary>
      <param name="e">The expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary>Outputs the code of the specified literal code fragment class member.</summary>
      <param name="e">The member to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary>Outputs the code of the specified literal code fragment statement.</summary>
      <param name="e">The statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary>Generates code for the specified statement.</summary>
      <param name="e">The statement to generate code for.</param>
      <exception cref="T:System.ArgumentException"><paramref name="e">e</paramref> is not a valid <see cref="T:System.CodeDom.CodeStatement"></see>.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary>Generates code for the specified statement collection.</summary>
      <param name="stms">The statements to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary>Generates code for the specified this reference expression.</summary>
      <param name="e">The expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary>Generates code for the specified throw exception statement.</summary>
      <param name="e">The statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary>Generates code for the specified try...catch...finally statement.</summary>
      <param name="e">The statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary>Generates code for the specified class constructor.</summary>
      <param name="e">The class constructor to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary>Generates code for the specified end of the class.</summary>
      <param name="e">The end of the class to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary>Generates code for the specified type of expression.</summary>
      <param name="e">The expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary>Generates code for the specified type reference expression.</summary>
      <param name="e">The expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary>Generates code for the specified namespace and the classes it contains.</summary>
      <param name="e">The namespace to generate classes for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary>Generates code for the specified start of the class.</summary>
      <param name="e">The start of the class to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary>Generates code for the specified variable declaration statement.</summary>
      <param name="e">The statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary>Generates code for the specified variable reference expression.</summary>
      <param name="e">The expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Gets the name of the specified data type.</summary>
      <param name="value">The type whose name will be returned.</param>
      <returns>The name of the data type reference.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary>Gets or sets the amount of spaces to indent each indentation level.</summary>
      <returns>The number of spaces to indent for each indentation level.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary>Gets a value indicating whether the current object being generated is a class.</summary>
      <returns>true if the current object is a class; otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary>Gets a value indicating whether the current object being generated is a delegate.</summary>
      <returns>true if the current object is a delegate; otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary>Gets a value indicating whether the current object being generated is an enumeration.</summary>
      <returns>true if the current object is an enumeration; otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary>Gets a value indicating whether the current object being generated is an interface.</summary>
      <returns>true if the current object is an interface; otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary>Gets a value indicating whether the current object being generated is a value type or struct.</summary>
      <returns>true if the current object is a value type or struct; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary>Gets a value indicating whether the specified value is a valid identifier.</summary>
      <param name="value">The value to test for conflicts with valid identifiers.</param>
      <returns>true if the value is a valid identifier; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary>Gets a value indicating whether the specified string is a valid identifier.</summary>
      <param name="value">The string to test for validity.</param>
      <returns>true if the specified string is a valid identifier; otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary>Gets the token that represents null.</summary>
      <returns>The token that represents null.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary>Gets the options to be used by the code generator.</summary>
      <returns>An object that indicates the options for the code generator to use.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary>Gets the text writer to use for output.</summary>
      <returns>The text writer to use for output.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary>Outputs an argument in an attribute block.</summary>
      <param name="arg">The attribute argument to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Generates code for the specified attribute declaration collection.</summary>
      <param name="attributes">The attributes to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary>Generates code for the specified <see cref="T:System.CodeDom.FieldDirection"></see>.</summary>
      <param name="dir">One of the enumeration values that indicates the attribute of the field.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary>Generates code for the specified expression list.</summary>
      <param name="expressions">The expressions to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary>Generates code for the specified expression list.</summary>
      <param name="expressions">The expressions to generate code for.</param>
      <param name="newlineBetweenItems">true to insert a new line after each item; otherwise, false.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>Outputs a field scope modifier that corresponds to the specified attributes.</summary>
      <param name="attributes">One of the enumeration values that specifies the attributes.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary>Outputs the specified identifier.</summary>
      <param name="ident">The identifier to output.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary>Generates code for the specified member access modifier.</summary>
      <param name="attributes">One of the enumeration values that indicates the member access modifier to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>Generates code for the specified member scope modifier.</summary>
      <param name="attributes">One of the enumeration values that indicates the member scope modifier to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary>Generates code for the specified operator.</summary>
      <param name="op">The operator to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>Generates code for the specified parameters.</summary>
      <param name="parameters">The parameter declaration expressions to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary>Generates code for the specified type.</summary>
      <param name="typeRef">The type to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary>Generates code for the specified type attributes.</summary>
      <param name="attributes">One of the enumeration values that indicates the type attributes to generate code for.</param>
      <param name="isStruct">true if the type is a struct; otherwise, false.</param>
      <param name="isEnum">true if the type is an enum; otherwise, false.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Generates code for the specified object type and name pair.</summary>
      <param name="typeRef">The type.</param>
      <param name="name">The name for the object.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary>Converts the specified string by formatting it with escape codes.</summary>
      <param name="value">The string to convert.</param>
      <returns>The converted string.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Gets a value indicating whether the specified code generation support is provided.</summary>
      <param name="support">The type of code generation support to test for.</param>
      <returns>true if the specified code generation support is provided; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary>Throws an exception if the specified string is not a valid identifier.</summary>
      <param name="value">The identifier to test for validity as an identifier.</param>
      <exception cref="T:System.ArgumentException">If the specified identifier is invalid or conflicts with reserved or language keywords.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)">
      <summary>Attempts to validate each identifier field contained in the specified <see cref="T:System.CodeDom.CodeObject"></see> or <see cref="N:System.CodeDom"></see> tree.</summary>
      <param name="e">An object to test for invalid identifiers.</param>
      <exception cref="T:System.ArgumentException">The specified <see cref="T:System.CodeDom.CodeObject"></see> contains an invalid identifier.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)">
      <summary>Creates an escaped identifier for the specified value.</summary>
      <param name="value">The string to create an escaped identifier for.</param>
      <returns>The escaped identifier for the value.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)">
      <summary>Creates a valid identifier for the specified value.</summary>
      <param name="value">The string to generate a valid identifier for.</param>
      <returns>A valid identifier for the specified value.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.</summary>
      <param name="e">The CodeDOM compilation unit to generate code for.</param>
      <param name="w">The text writer to output code to.</param>
      <param name="o">The options to use for generating code.</param>
      <exception cref="T:System.InvalidOperationException"><paramref name="w">w</paramref> is not available. <paramref name="w">w</paramref> may have been closed before the method call was made.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.</summary>
      <param name="e">The expression to generate code for.</param>
      <param name="w">The text writer to output code to.</param>
      <param name="o">The options to use for generating code.</param>
      <exception cref="T:System.InvalidOperationException"><paramref name="w">w</paramref> is not available. <paramref name="w">w</paramref> may have been closed before the method call was made.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.</summary>
      <param name="e">The namespace to generate code for.</param>
      <param name="w">The text writer to output code to.</param>
      <param name="o">The options to use for generating code.</param>
      <exception cref="T:System.InvalidOperationException"><paramref name="w">w</paramref> is not available. <paramref name="w">w</paramref> may have been closed before the method call was made.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.</summary>
      <param name="e">The statement that contains the CodeDOM elements to translate.</param>
      <param name="w">The text writer to output code to.</param>
      <param name="o">The options to use for generating code.</param>
      <exception cref="T:System.InvalidOperationException"><paramref name="w">w</paramref> is not available. <paramref name="w">w</paramref> may have been closed before the method call was made.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.</summary>
      <param name="e">The type to generate code for.</param>
      <param name="w">The text writer to output code to.</param>
      <param name="o">The options to use for generating code.</param>
      <exception cref="T:System.InvalidOperationException"><paramref name="w">w</paramref> is not available. <paramref name="w">w</paramref> may have been closed before the method call was made.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Gets the type indicated by the specified <see cref="T:System.CodeDom.CodeTypeReference"></see>.</summary>
      <param name="type">The type to return.</param>
      <returns>The name of the data type reference.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)">
      <summary>Gets a value that indicates whether the specified value is a valid identifier for the current language.</summary>
      <param name="value">The value to test.</param>
      <returns>true if the <paramref name="value">value</paramref> parameter is a valid identifier; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Gets a value indicating whether the generator provides support for the language features represented by the specified <see cref="T:System.CodeDom.Compiler.GeneratorSupport"></see> object.</summary>
      <param name="support">The capabilities to test the generator for.</param>
      <returns>true if the specified capabilities are supported; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)">
      <summary>Throws an exception if the specified value is not a valid identifier.</summary>
      <param name="value">The identifier to validate.</param>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary>Represents a set of options used by a code generator.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions"></see> class.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary>Gets or sets a value indicating whether to insert blank lines between members.</summary>
      <returns>true if blank lines should be inserted; otherwise, false. By default, the value of this property is true.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary>Gets or sets the style to use for bracing.</summary>
      <returns>A string containing the bracing style to use.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary>Gets or sets a value indicating whether to append an else, catch, or finally block, including brackets, at the closing line of each previous if or try block.</summary>
      <returns>true if an else should be appended; otherwise, false. The default value of this property is false.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary>Gets or sets the string to use for indentations.</summary>
      <returns>A string containing the characters to use for indentations.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary>Gets or sets the object at the specified index.</summary>
      <param name="index">The name associated with the object to retrieve.</param>
      <returns>The object associated with the specified name. If no object associated with the specified name exists in the collection, null.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
      <summary>Gets or sets a value indicating whether to generate members in the order in which they occur in member collections.</summary>
      <returns>true to generate the members in the order in which they occur in the member collection; otherwise, false. The default value of this property is false.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary>Provides an empty implementation of the <see cref="T:System.CodeDom.Compiler.ICodeParser"></see> interface.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CodeParser"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary>Compiles the specified text stream into a <see cref="T:System.CodeDom.CodeCompileUnit"></see>.</summary>
      <param name="codeStream">A <see cref="T:System.IO.TextReader"></see> that is used to read the code to be parsed.</param>
      <returns>A <see cref="T:System.CodeDom.CodeCompileUnit"></see> containing the code model produced from parsing the code.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary>Represents a compiler error or warning.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CompilerError"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CompilerError"></see> class using the specified file name, line, column, error number, and error text.</summary>
      <param name="fileName">The file name of the file that the compiler was compiling when it encountered the error.</param>
      <param name="line">The line of the source of the error.</param>
      <param name="column">The column of the source of the error.</param>
      <param name="errorNumber">The error number of the error.</param>
      <param name="errorText">The error message text.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary>Gets or sets the column number where the source of the error occurs.</summary>
      <returns>The column number of the source file where the compiler encountered the error.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary>Gets or sets the error number.</summary>
      <returns>The error number as a string.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary>Gets or sets the text of the error message.</summary>
      <returns>The text of the error message.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary>Gets or sets the file name of the source file that contains the code which caused the error.</summary>
      <returns>The file name of the source file that contains the code which caused the error.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary>Gets or sets a value that indicates whether the error is a warning.</summary>
      <returns>true if the error is a warning; otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary>Gets or sets the line number where the source of the error occurs.</summary>
      <returns>The line number of the source file where the compiler encountered the error.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.ToString">
      <summary>Provides an implementation of Object's <see cref="M:System.Object.ToString"></see> method.</summary>
      <returns>A string representation of the compiler error.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary>Represents a collection of <see cref="T:System.CodeDom.Compiler.CompilerError"></see> objects.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary>Initializes a new instance of <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"></see> that contains the specified array of <see cref="T:System.CodeDom.Compiler.CompilerError"></see> objects.</summary>
      <param name="value">An array of <see cref="T:System.CodeDom.Compiler.CompilerError"></see> objects to initialize the collection with.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"></see> class that contains the contents of the specified <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"></see>.</summary>
      <param name="value">A <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"></see> object with which to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary>Adds the specified <see cref="T:System.CodeDom.Compiler.CompilerError"></see> object to the error collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.Compiler.CompilerError"></see> object to add.</param>
      <returns>The index at which the new element was inserted.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary>Copies the elements of an array to the end of the error collection.</summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.Compiler.CompilerError"></see> that contains the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>Adds the contents of the specified compiler error collection to the end of the error collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"></see> object that contains the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary>Gets a value that indicates whether the collection contains the specified <see cref="T:System.CodeDom.Compiler.CompilerError"></see> object.</summary>
      <param name="value">The <see cref="T:System.CodeDom.Compiler.CompilerError"></see> to locate.</param>
      <returns>true if the <see cref="T:System.CodeDom.Compiler.CompilerError"></see> is contained in the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary>Copies the collection values to a one-dimensional <see cref="T:System.Array"></see> instance at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the values copied from <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"></see>.</param>
      <param name="index">The index in the array at which to start copying.</param>
      <exception cref="T:System.ArgumentException">The array indicated by the <paramref name="array">array</paramref> parameter is multidimensional.   -or-   The number of elements in the <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"></see> is greater than the available space between the index value of the <paramref name="arrayIndex">arrayIndex</paramref> parameter in the array indicated by the <paramref name="array">array</paramref> parameter and the end of the array indicated by the <paramref name="array">array</paramref> parameter.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array">array</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is less than the lowbound of the array indicated by the <paramref name="array">array</paramref> parameter.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary>Gets a value that indicates whether the collection contains errors.</summary>
      <returns>true if the collection contains errors; otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary>Gets a value that indicates whether the collection contains warnings.</summary>
      <returns>true if the collection contains warnings; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary>Gets the index of the specified <see cref="T:System.CodeDom.Compiler.CompilerError"></see> object in the collection, if it exists in the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.Compiler.CompilerError"></see> to locate.</param>
      <returns>The index of the specified <see cref="T:System.CodeDom.Compiler.CompilerError"></see> in the <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"></see>, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary>Inserts the specified <see cref="T:System.CodeDom.Compiler.CompilerError"></see> into the collection at the specified index.</summary>
      <param name="index">The zero-based index where the compiler error should be inserted.</param>
      <param name="value">The <see cref="T:System.CodeDom.Compiler.CompilerError"></see> to insert.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.CodeDom.Compiler.CompilerError"></see> at the specified index.</summary>
      <param name="index">The zero-based index of the entry to locate in the collection.</param>
      <returns>A <see cref="T:System.CodeDom.Compiler.CompilerError"></see> at each valid index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The index value indicated by the <paramref name="index">index</paramref> parameter is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary>Removes a specific <see cref="T:System.CodeDom.Compiler.CompilerError"></see> from the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.Compiler.CompilerError"></see> to remove from the <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"></see>.</param>
      <exception cref="T:System.ArgumentException">The specified object is not found in the collection.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerInfo">
      <summary>Represents the configuration settings of a language provider. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType">
      <summary>Gets the type of the configured <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> implementation.</summary>
      <returns>A read-only <see cref="T:System.Type"></see> instance that represents the configured language provider type.</returns>
      <exception cref="T:System.Configuration.ConfigurationException">The language provider is not configured on this computer.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">Cannot locate the type because it is a null or empty string.   -or-   Cannot locate the type because the name for the <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> cannot be found in the configuration file.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters">
      <summary>Gets the configured compiler settings for the language provider implementation.</summary>
      <returns>A read-only <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> instance that contains the compiler options and settings configured for the language provider.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider">
      <summary>Returns a <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> instance for the current language provider settings.</summary>
      <returns>A CodeDOM provider associated with the language provider configuration.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Returns a <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> instance for the current language provider settings and specified options.</summary>
      <param name="providerOptions">A collection of provider options from the configuration file.</param>
      <returns>A CodeDOM provider associated with the language provider configuration and specified options.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="providerOptions">providerOptions</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The provider does not support options.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)">
      <summary>Determines whether the specified object represents the same language provider and compiler settings as the current <see cref="T:System.CodeDom.Compiler.CompilerInfo"></see>.</summary>
      <param name="o">The object to compare with the current <see cref="T:System.CodeDom.Compiler.CompilerInfo"></see>.</param>
      <returns>true if <paramref name="o">o</paramref> is a <see cref="T:System.CodeDom.Compiler.CompilerInfo"></see> object and its value is the same as this instance; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions">
      <summary>Returns the file name extensions supported by the language provider.</summary>
      <returns>An array of file name extensions supported by the language provider.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>A 32-bit signed integer hash code for the current <see cref="T:System.CodeDom.Compiler.CompilerInfo"></see> instance, suitable for use in hashing algorithms and data structures such as a hash table.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages">
      <summary>Gets the language names supported by the language provider.</summary>
      <returns>An array of language names supported by the language provider.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid">
      <summary>Returns a value indicating whether the language provider implementation is configured on the computer.</summary>
      <returns>true if the language provider implementation type is configured on the computer; otherwise, false.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary>Represents the parameters used to invoke a compiler.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> class using the specified assembly names.</summary>
      <param name="assemblyNames">The names of the assemblies to reference.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> class using the specified assembly names and output file name.</summary>
      <param name="assemblyNames">The names of the assemblies to reference.</param>
      <param name="outputName">The output file name.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> class using the specified assembly names, output name, and a value indicating whether to include debug information.</summary>
      <param name="assemblyNames">The names of the assemblies to reference.</param>
      <param name="outputName">The output file name.</param>
      <param name="includeDebugInformation">true to include debug information; false to exclude debug information.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary>Gets or sets optional command-line arguments to use when invoking the compiler.</summary>
      <returns>Any additional command-line arguments for the compiler.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName">
      <summary>Gets or sets the name of the core or standard assembly that contains basic types such as <see cref="T:System.Object"></see>, <see cref="T:System.String"></see>, or <see cref="T:System.Int32"></see>.</summary>
      <returns>The name of the core assembly that contains basic types.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources">
      <summary>Gets the .NET Framework resource files to include when compiling the assembly output.</summary>
      <returns>A collection that contains the file paths of .NET Framework resources to include in the generated assembly.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Evidence">
      <summary>Specifies an evidence object that represents the security policy permissions to grant the compiled assembly.</summary>
      <returns>An  object that represents the security policy permissions to grant the compiled assembly.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary>Gets or sets a value indicating whether to generate an executable.</summary>
      <returns>true if an executable should be generated; otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary>Gets or sets a value indicating whether to generate the output in memory.</summary>
      <returns>true if the compiler should generate the output in memory; otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary>Gets or sets a value indicating whether to include debug information in the compiled executable.</summary>
      <returns>true if debug information should be generated; otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources">
      <summary>Gets the .NET Framework resource files that are referenced in the current source.</summary>
      <returns>A collection that contains the file paths of .NET Framework resources that are referenced by the source.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary>Gets or sets the name of the main class.</summary>
      <returns>The name of the main class.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary>Gets or sets the name of the output assembly.</summary>
      <returns>The name of the output assembly.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary>Gets the assemblies referenced by the current project.</summary>
      <returns>A collection that contains the assembly names that are referenced by the source to compile.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary>Gets or sets the collection that contains the temporary files.</summary>
      <returns>A collection that contains the temporary files.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary>Gets or sets a value indicating whether to treat warnings as errors.</summary>
      <returns>true if warnings should be treated as errors; otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary>Gets or sets the user token to use when creating the compiler process.</summary>
      <returns>The user token to use.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary>Gets or sets the warning level at which the compiler aborts compilation.</summary>
      <returns>The warning level at which the compiler aborts compilation.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary>Gets or sets the file name of a Win32 resource file to link into the compiled assembly.</summary>
      <returns>A Win32 resource file that will be linked into the compiled assembly.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary>Represents the results of compilation that are returned from a compiler.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CompilerResults"></see> class that uses the specified temporary files.</summary>
      <param name="tempFiles">A <see cref="T:System.CodeDom.Compiler.TempFileCollection"></see> with which to manage and store references to intermediate files generated during compilation.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary>Gets or sets the compiled assembly.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly"></see> that indicates the compiled assembly.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary>Gets the collection of compiler errors and warnings.</summary>
      <returns>A <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"></see> that indicates the errors and warnings resulting from compilation, if any.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Evidence">
      <summary>Indicates the evidence object that represents the security policy permissions of the compiled assembly.</summary>
      <returns>An <see cref="T:System.Security.Policy.Evidence"></see> object that represents the security policy permissions of the compiled assembly.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary>Gets or sets the compiler's return value.</summary>
      <returns>The compiler's return value.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary>Gets the compiler output messages.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.StringCollection"></see> that contains the output messages.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary>Gets or sets the path of the compiled assembly.</summary>
      <returns>The path of the assembly, or null if the assembly was generated in memory.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary>Gets or sets the temporary file collection to use.</summary>
      <returns>A <see cref="T:System.CodeDom.Compiler.TempFileCollection"></see> with which to manage and store references to intermediate files generated during compilation.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary>Provides command execution functions for invoking compilers. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary>Executes the command using the specified temporary files and waits for the call to return.</summary>
      <param name="cmd">The command to execute.</param>
      <param name="tempFiles">A <see cref="T:System.CodeDom.Compiler.TempFileCollection"></see> with which to manage and store references to intermediate files generated during compilation.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Executes the specified command using the specified temporary files and waits for the call to return, storing output and error information from the compiler in the specified strings.</summary>
      <param name="cmd">The command to execute.</param>
      <param name="tempFiles">A <see cref="T:System.CodeDom.Compiler.TempFileCollection"></see> with which to manage and store references to intermediate files generated during compilation.</param>
      <param name="outputName">A reference to a string that will store the compiler's message output.</param>
      <param name="errorName">A reference to a string that will store the name of the error or errors encountered.</param>
      <returns>The return value from the compiler.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Executes the specified command using the specified user token and temporary files, and waits for the call to return, storing output and error information from the compiler in the specified strings.</summary>
      <param name="userToken">The token to start the compiler process with.</param>
      <param name="cmd">The command to execute.</param>
      <param name="tempFiles">A <see cref="T:System.CodeDom.Compiler.TempFileCollection"></see> with which to manage and store references to intermediate files generated during compilation.</param>
      <param name="outputName">A reference to a string that will store the compiler's message output.</param>
      <param name="errorName">A reference to a string that will store the name of the error or errors encountered.</param>
      <returns>The return value from the compiler.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Executes the specified command using the specified current directory and temporary files, and waits for the call to return, storing output and error information from the compiler in the specified strings.</summary>
      <param name="cmd">The command to execute.</param>
      <param name="currentDir">The current directory.</param>
      <param name="tempFiles">A <see cref="T:System.CodeDom.Compiler.TempFileCollection"></see> with which to manage and store references to intermediate files generated during compilation.</param>
      <param name="outputName">A reference to a string that will store the compiler's message output.</param>
      <param name="errorName">A reference to a string that will store the name of the error or errors encountered.</param>
      <returns>The return value from the compiler.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Executes the specified command using the specified user token, current directory, and temporary files; then waits for the call to return, storing output and error information from the compiler in the specified strings.</summary>
      <param name="userToken">The token to start the compiler process with.</param>
      <param name="cmd">The command to execute.</param>
      <param name="currentDir">The directory to start the process in.</param>
      <param name="tempFiles">A <see cref="T:System.CodeDom.Compiler.TempFileCollection"></see> with which to manage and store references to intermediate files generated during compilation.</param>
      <param name="outputName">A reference to a string that will store the compiler's message output.</param>
      <param name="errorName">A reference to a string that will store the name of the error or errors encountered.</param>
      <returns>The return value from the compiler.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratedCodeAttribute">
      <summary>Identifies code generated by a tool. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.GeneratedCodeAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.GeneratedCodeAttribute"></see> class specifying the name and version of the tool that generated the code.</summary>
      <param name="tool">The name of the tool that generated the code.</param>
      <param name="version">The version of the tool that generated the code.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Tool">
      <summary>Gets the name of the tool that generated the code.</summary>
      <returns>The name of the tool that generated to code.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Version">
      <summary>Gets the version of the tool that generated the code.</summary>
      <returns>The version of the tool that generated the code.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary>Defines identifiers used to determine whether a code generator supports certain types of code elements.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary>Indicates the generator supports arrays of arrays.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary>Indicates the generator supports assembly attributes.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary>Indicates the generator supports chained constructor arguments.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary>Indicates the generator supports complex expressions.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary>Indicates the generator supports delegate declarations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary>Indicates the generator supports enumeration declarations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary>Indicates the generator supports event declarations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
      <summary>Indicates the generator supports the declaration of indexer properties.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary>Indicates the generator supports interface declarations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary>Indicates the generator supports value type declarations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary>Indicates the generator supports a program entry point method designation. This is used when building executables.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
      <summary>Indicates the generator supports generic type declarations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
      <summary>Indicates the generator supports generic type references.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary>Indicates the generator supports goto statements.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary>Indicates the generator supports referencing multidimensional arrays. Currently, the CodeDom cannot be used to instantiate multidimensional arrays.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary>Indicates the generator supports the declaration of members that implement multiple interfaces.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary>Indicates the generator supports the declaration of nested types.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary>Indicates the generator supports parameter attributes.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes">
      <summary>Indicates the generator supports partial type declarations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary>Indicates the generator supports public static members.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary>Indicates the generator supports reference and out parameters.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Resources">
      <summary>Indicates the generator supports compilation with .NET Framework resources. These can be default resources compiled directly into an assembly, or resources referenced in a satellite assembly.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary>Indicates the generator supports return type attribute declarations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary>Indicates the generator supports static constructors.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary>Indicates the generator supports try...catch statements.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary>Indicates the generator supports compilation with Win32 resources.</summary>
      <returns></returns>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary>Defines an interface for invoking compilation of source code or a CodeDOM tree using a specific compiler.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>Compiles an assembly from the <see cref="N:System.CodeDom"></see> tree contained in the specified <see cref="T:System.CodeDom.CodeCompileUnit"></see>, using the specified compiler settings.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the settings for compilation.</param>
      <param name="compilationUnit">A <see cref="T:System.CodeDom.CodeCompileUnit"></see> that indicates the code to compile.</param>
      <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults"></see> object that indicates the results of compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Compiles an assembly based on the <see cref="N:System.CodeDom"></see> trees contained in the specified array of <see cref="T:System.CodeDom.CodeCompileUnit"></see> objects, using the specified compiler settings.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the settings for compilation.</param>
      <param name="compilationUnits">An array of type <see cref="T:System.CodeDom.CodeCompileUnit"></see> that indicates the code to compile.</param>
      <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults"></see> object that indicates the results of compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Compiles an assembly from the source code contained within the specified file, using the specified compiler settings.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the settings for compilation.</param>
      <param name="fileName">The file name of the file that contains the source code to compile.</param>
      <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults"></see> object that indicates the results of compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compiles an assembly from the source code contained within the specified files, using the specified compiler settings.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the settings for compilation.</param>
      <param name="fileNames">The file names of the files to compile.</param>
      <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults"></see> object that indicates the results of compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Compiles an assembly from the specified string containing source code, using the specified compiler settings.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the settings for compilation.</param>
      <param name="source">The source code to compile.</param>
      <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults"></see> object that indicates the results of compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.</summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> object that indicates the settings for compilation.</param>
      <param name="sources">The source code strings to compile.</param>
      <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults"></see> object that indicates the results of compilation.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary>Defines an interface for generating code.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>Creates an escaped identifier for the specified value.</summary>
      <param name="value">The string to create an escaped identifier for.</param>
      <returns>The escaped identifier for the value.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary>Creates a valid identifier for the specified value.</summary>
      <param name="value">The string to generate a valid identifier for.</param>
      <returns>A valid identifier for the specified value.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.</summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeCompileUnit"></see> to generate code for.</param>
      <param name="w">The <see cref="T:System.IO.TextWriter"></see> to output code to.</param>
      <param name="o">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions"></see> that indicates the options to use for generating code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.</summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the expression to generate code for.</param>
      <param name="w">The <see cref="T:System.IO.TextWriter"></see> to output code to.</param>
      <param name="o">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions"></see> that indicates the options to use for generating code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.</summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeNamespace"></see> that indicates the namespace to generate code for.</param>
      <param name="w">The <see cref="T:System.IO.TextWriter"></see> to output code to.</param>
      <param name="o">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions"></see> that indicates the options to use for generating code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.</summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeStatement"></see> containing the CodeDOM elements to translate.</param>
      <param name="w">The <see cref="T:System.IO.TextWriter"></see> to output code to.</param>
      <param name="o">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions"></see> that indicates the options to use for generating code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.</summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> that indicates the type to generate code for.</param>
      <param name="w">The <see cref="T:System.IO.TextWriter"></see> to output code to.</param>
      <param name="o">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions"></see> that indicates the options to use for generating code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Gets the type indicated by the specified <see cref="T:System.CodeDom.CodeTypeReference"></see>.</summary>
      <param name="type">A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the type to return.</param>
      <returns>A text representation of the specified type for the language this code generator is designed to generate code in. For example, in Visual Basic, passing in type System.Int32 will return &quot;Integer&quot;.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary>Gets a value that indicates whether the specified value is a valid identifier for the current language.</summary>
      <param name="value">The value to test for being a valid identifier.</param>
      <returns>true if the <paramref name="value">value</paramref> parameter is a valid identifier; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Gets a value indicating whether the generator provides support for the language features represented by the specified <see cref="T:System.CodeDom.Compiler.GeneratorSupport"></see> object.</summary>
      <param name="supports">The capabilities to test the generator for.</param>
      <returns>true if the specified capabilities are supported; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary>Throws an exception if the specified value is not a valid identifier.</summary>
      <param name="value">The identifier to validate.</param>
      <exception cref="T:System.ArgumentException">The identifier is not valid.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary>Defines an interface for parsing code into a <see cref="T:System.CodeDom.CodeCompileUnit"></see>.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary>When implemented in a derived class, compiles the specified text stream into a <see cref="T:System.CodeDom.CodeCompileUnit"></see>.</summary>
      <param name="codeStream">A <see cref="T:System.IO.TextReader"></see> that can be used to read the code to be compiled.</param>
      <returns>A <see cref="T:System.CodeDom.CodeCompileUnit"></see> that contains a representation of the parsed code.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.IndentedTextWriter">
      <summary>Provides a text writer that can indent new lines by a tab string token.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.IndentedTextWriter"></see> class using the specified text writer and default tab string.</summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter"></see> to use for output.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.IndentedTextWriter"></see> class using the specified text writer and tab string.</summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter"></see> to use for output.</param>
      <param name="tabString">The tab string to use for indentation.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Close">
      <summary>Closes the document being written to.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.IndentedTextWriter.DefaultTabString">
      <summary>Specifies the default tab string. This field is constant.</summary>
      <returns></returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Encoding">
      <summary>Gets the encoding for the text writer to use.</summary>
      <returns>An <see cref="T:System.Text.Encoding"></see> that indicates the encoding for the text writer to use.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Flush">
      <summary>Flushes the stream.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Indent">
      <summary>Gets or sets the number of spaces to indent.</summary>
      <returns>The number of spaces to indent.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.InnerWriter">
      <summary>Gets the <see cref="T:System.IO.TextWriter"></see> to use.</summary>
      <returns>The <see cref="T:System.IO.TextWriter"></see> to use.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.NewLine">
      <summary>Gets or sets the new line character to use.</summary>
      <returns>The new line character to use.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.OutputTabs">
      <summary>Outputs the tab string once for each level of indentation according to the <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent"></see> property.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>Writes out a formatted string, using the same semantics as specified.</summary>
      <param name="format">The formatting string to use.</param>
      <param name="arg0">The first object to write into the formatted string.</param>
      <param name="arg1">The second object to write into the formatted string.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a subarray of characters to the text stream.</summary>
      <param name="buffer">The character array to write data from.</param>
      <param name="index">Starting index in the buffer.</param>
      <param name="count">The number of characters to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>Writes out a formatted string, using the same semantics as specified.</summary>
      <param name="format">The formatting string to use.</param>
      <param name="arg">The argument array to output.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String)">
      <summary>Writes the specified string to the text stream.</summary>
      <param name="s">The string to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Single)">
      <summary>Writes the text representation of a Single to the text stream.</summary>
      <param name="value">The single to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Object)">
      <summary>Writes the text representation of an object to the text stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>Writes out a formatted string, using the same semantics as specified.</summary>
      <param name="format">The formatting string.</param>
      <param name="arg0">The object to write into the formatted string.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int32)">
      <summary>Writes the text representation of an integer to the text stream.</summary>
      <param name="value">The integer to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Double)">
      <summary>Writes the text representation of a Double to the text stream.</summary>
      <param name="value">The double to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[])">
      <summary>Writes a character array to the text stream.</summary>
      <param name="buffer">The character array to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char)">
      <summary>Writes a character to the text stream.</summary>
      <param name="value">The character to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Boolean)">
      <summary>Writes the text representation of a Boolean value to the text stream.</summary>
      <param name="value">The Boolean value to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int64)">
      <summary>Writes the text representation of an 8-byte integer to the text stream.</summary>
      <param name="value">The 8-byte integer to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a subarray of characters, followed by a line terminator, to the text stream.</summary>
      <param name="buffer">The character array to write data from.</param>
      <param name="index">Starting index in the buffer.</param>
      <param name="count">The number of characters to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>Writes out a formatted string, followed by a line terminator, using the same semantics as specified.</summary>
      <param name="format">The formatting string to use.</param>
      <param name="arg">The argument array to output.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>Writes out a formatted string, followed by a line terminator, using the same semantics as specified.</summary>
      <param name="format">The formatting string.</param>
      <param name="arg0">The object to write into the formatted string.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>Writes the text representation of a UInt32, followed by a line terminator, to the text stream.</summary>
      <param name="value">A UInt32 to output.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String)">
      <summary>Writes the specified string, followed by a line terminator, to the text stream.</summary>
      <param name="s">The string to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Single)">
      <summary>Writes the text representation of a Single, followed by a line terminator, to the text stream.</summary>
      <param name="value">The single to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Object)">
      <summary>Writes the text representation of an object, followed by a line terminator, to the text stream.</summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Double)">
      <summary>Writes the text representation of a Double, followed by a line terminator, to the text stream.</summary>
      <param name="value">The double to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>Writes the text representation of an integer, followed by a line terminator, to the text stream.</summary>
      <param name="value">The integer to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>Writes a character array, followed by a line terminator, to the text stream.</summary>
      <param name="buffer">The character array to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char)">
      <summary>Writes a character, followed by a line terminator, to the text stream.</summary>
      <param name="value">The character to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>Writes the text representation of a Boolean, followed by a line terminator, to the text stream.</summary>
      <param name="value">The Boolean to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine">
      <summary>Writes a line terminator.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>Writes out a formatted string, followed by a line terminator, using the same semantics as specified.</summary>
      <param name="format">The formatting string to use.</param>
      <param name="arg0">The first object to write into the formatted string.</param>
      <param name="arg1">The second object to write into the formatted string.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>Writes the text representation of an 8-byte integer, followed by a line terminator, to the text stream.</summary>
      <param name="value">The 8-byte integer to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>Writes the specified string to a line without tabs.</summary>
      <param name="s">The string to write.</param>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary>Defines identifiers that indicate special features of a language.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary>The language is case-insensitive.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary>The language has default characteristics.</summary>
      <returns></returns>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary>Represents a collection of temporary files.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.TempFileCollection"></see> class with default values.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.TempFileCollection"></see> class using the specified temporary directory that is set to delete the temporary files after their generation and use, by default.</summary>
      <param name="tempDir">A path to the temporary directory to use for storing the temporary files.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.TempFileCollection"></see> class using the specified temporary directory and specified value indicating whether to keep or delete the temporary files after their generation and use, by default.</summary>
      <param name="tempDir">A path to the temporary directory to use for storing the temporary files.</param>
      <param name="keepFiles">true if the temporary files should be kept after use; false if the temporary files should be deleted.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary>Adds a file name with the specified file name extension to the collection.</summary>
      <param name="fileExtension">The file name extension for the auto-generated temporary file name to add to the collection.</param>
      <returns>A file name with the specified extension that was just added to the collection.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary>Adds a file name with the specified file name extension to the collection, using the specified value indicating whether the file should be deleted or retained.</summary>
      <param name="fileExtension">The file name extension for the auto-generated temporary file name to add to the collection.</param>
      <param name="keepFile">true if the file should be kept after use; false if the file should be deleted.</param>
      <returns>A file name with the specified extension that was just added to the collection.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="fileExtension">fileExtension</paramref> is null or an empty string.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary>Adds the specified file to the collection, using the specified value indicating whether to keep the file after the collection is disposed or when the <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete"></see> method is called.</summary>
      <param name="fileName">The name of the file to add to the collection.</param>
      <param name="keepFile">true if the file should be kept after use; false if the file should be deleted.</param>
      <exception cref="T:System.ArgumentException"><paramref name="fileName">fileName</paramref> is null or an empty string.   -or-  <paramref name="fileName">fileName</paramref> is a duplicate.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary>Gets the full path to the base file name, without a file name extension, on the temporary directory path, that is used to generate temporary file names for the collection.</summary>
      <returns>The full path to the base file name, without a file name extension, on the temporary directory path, that is used to generate temporary file names for the collection.</returns>
      <exception cref="T:System.Security.SecurityException">If the <see cref="P:System.CodeDom.Compiler.TempFileCollection.BasePath"></see> property has not been set or is set to null, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess"></see> is not granted for the temporary directory indicated by the <see cref="P:System.CodeDom.Compiler.TempFileCollection.TempDir"></see> property.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary>Copies the members of the collection to the specified string, beginning at the specified index.</summary>
      <param name="fileNames">The array of strings to copy to.</param>
      <param name="start">The index of the array to begin copying to.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary>Gets the number of files in the collection.</summary>
      <returns>The number of files in the collection.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary>Deletes the temporary files within this collection that were not marked to be kept.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.CodeDom.Compiler.TempFileCollection"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Finalize">
      <summary>Attempts to delete the temporary files before this object is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary>Gets an enumerator that can enumerate the members of the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that contains the collection's members.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary>Gets or sets a value indicating whether to keep the files, by default, when the <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete"></see> method is called or the collection is disposed.</summary>
      <returns>true if the files should be kept; otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary>Gets the temporary directory to store the temporary files in.</summary>
      <returns>The temporary directory to store the temporary files in.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the collection to an array, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="start">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#Count">
      <summary>Gets the number of elements contained in the collection.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the collection is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#IDisposable#Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary>Defines identifiers used to indicate the direction of parameter and argument declarations.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary>An incoming field.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary>An outgoing field.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary>A field by reference.</summary>
      <returns></returns>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary>Defines member attribute identifiers for class members.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary>An abstract member.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary>An access mask.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary>A member that is accessible to any class within the same assembly.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary>A constant member.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary>A member that is accessible within the family of its class and derived classes.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary>A member that is accessible within its class, and derived classes in the same assembly.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary>A member that is accessible within its class, its derived classes in any assembly, and any class in the same assembly.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary>A member that cannot be overridden in a derived class.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary>A new member.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary>An overloaded member. Some languages, such as Visual Basic, require overloaded members to be explicitly indicated.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary>A member that overrides a base class member.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary>A private member.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary>A public member.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary>A scope mask.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary>A static member. In Visual Basic, this is equivalent to the Shared keyword.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary>A VTable mask.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary>Provides a simple default implementation of the <see cref="T:System.ComponentModel.ICustomTypeDescriptor"></see> interface.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CustomTypeDescriptor"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CustomTypeDescriptor"></see> class using a parent custom type descriptor.</summary>
      <param name="parent">The parent custom type descriptor.</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary>Returns a collection of custom attributes for the type represented by this type descriptor.</summary>
      <returns>An <see cref="T:System.ComponentModel.AttributeCollection"></see> containing the attributes for the type. The default is <see cref="F:System.ComponentModel.AttributeCollection.Empty"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary>Returns the fully qualified name of the class represented by this type descriptor.</summary>
      <returns>A <see cref="T:System.String"></see> containing the fully qualified class name of the type this type descriptor is describing. The default is null.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary>Returns the name of the class represented by this type descriptor.</summary>
      <returns>A <see cref="T:System.String"></see> containing the name of the component instance this type descriptor is describing. The default is null.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary>Returns a type converter for the type represented by this type descriptor.</summary>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter"></see> for the type represented by this type descriptor. The default is a newly created <see cref="T:System.ComponentModel.TypeConverter"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary>Returns the event descriptor for the default event of the object represented by this type descriptor.</summary>
      <returns>The <see cref="T:System.ComponentModel.EventDescriptor"></see> for the default event on the object represented by this type descriptor. The default is null.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary>Returns the property descriptor for the default property of the object represented by this type descriptor.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> for the default property on the object represented by this type descriptor. The default is null.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary>Returns an editor of the specified type that is to be associated with the class represented by this type descriptor.</summary>
      <param name="editorBaseType">The base type of the editor to retrieve.</param>
      <returns>An editor of the given type that is to be associated with the class represented by this type descriptor. The default is null.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary>Returns a collection of event descriptors for the object represented by this type descriptor.</summary>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> containing the event descriptors for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>Returns a filtered collection of event descriptors for the object represented by this type descriptor.</summary>
      <param name="attributes">An array of attributes to use as a filter. This can be null.</param>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> containing the event descriptions for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary>Returns a collection of property descriptors for the object represented by this type descriptor.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> containing the property descriptions for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>Returns a filtered collection of property descriptors for the object represented by this type descriptor.</summary>
      <param name="attributes">An array of attributes to use as a filter. This can be null.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> containing the property descriptions for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Returns an object that contains the property described by the specified property descriptor.</summary>
      <param name="pd">The property descriptor for which to retrieve the owning object.</param>
      <returns>An <see cref="T:System.Object"></see> that owns the given property specified by the type descriptor. The default is null.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary>Indicates the base serializer to use for a root designer object. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute"></see> class using the specified attributes.</summary>
      <param name="serializerTypeName">The fully qualified name of the data type of the serializer.</param>
      <param name="baseSerializerTypeName">The name of the base type of the serializer. A class can include multiple serializers as they all have different base types.</param>
      <param name="reloadable">true if this serializer supports dynamic reloading of the document; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute"></see> class using the specified attributes.</summary>
      <param name="serializerTypeName">The fully qualified name of the data type of the serializer.</param>
      <param name="baseSerializerType">The name of the base type of the serializer. A class can include multiple serializers, as they all have different base types.</param>
      <param name="reloadable">true if this serializer supports dynamic reloading of the document; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute"></see> class using the specified attributes.</summary>
      <param name="serializerType">The data type of the serializer.</param>
      <param name="baseSerializerType">The base type of the serializer. A class can include multiple serializers as they all have different base types.</param>
      <param name="reloadable">true if this serializer supports dynamic reloading of the document; otherwise, false.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary>Gets a value indicating whether the root serializer supports reloading of the design document without first disposing the designer host.</summary>
      <returns>true if the root serializer supports reloading; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>Gets the fully qualified type name of the base type of the serializer.</summary>
      <returns>The name of the base type of the serializer.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary>Gets the fully qualified type name of the serializer.</summary>
      <returns>The name of the type of the serializer.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary>Gets a unique ID for this attribute type.</summary>
      <returns>An object containing a unique ID for this attribute type.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary>Provides the base class for storing serialization data for the <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService"></see>.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary>Closes the serialization store.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary>Gets a collection of errors that occurred during serialization or deserialization.</summary>
      <returns>An <see cref="T:System.Collections.ICollection"></see> that contains errors that occurred during serialization or deserialization.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary>Saves the store to the given stream.</summary>
      <param name="stream">The stream to which the store will be serialized.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary>Releases all resources used by the <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore"></see>.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary>Provides a simple implementation of the <see cref="T:System.ComponentModel.Design.IServiceContainer"></see> interface. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ServiceContainer"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ServiceContainer"></see> class using the specified parent service provider.</summary>
      <param name="parentProvider">A parent service provider.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>Adds the specified service to the service container.</summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="callback">A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="serviceType">serviceType</paramref> or <paramref name="callback">callback</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">A service of type <paramref name="serviceType">serviceType</paramref> already exists in the container.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary>Adds the specified service to the service container.</summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="serviceInstance">An instance of the service to add. This object must implement or inherit from the type indicated by the serviceType parameter.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="serviceType">serviceType</paramref> or <paramref name="serviceInstance">serviceInstance</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">A service of type <paramref name="serviceType">serviceType</paramref> already exists in the container.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>Adds the specified service to the service container.</summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="callback">A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.</param>
      <param name="promote">true if this service should be added to any parent service containers; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="serviceType">serviceType</paramref> or <paramref name="callback">callback</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">A service of type <paramref name="serviceType">serviceType</paramref> already exists in the container.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>Adds the specified service to the service container.</summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="serviceInstance">An instance of the service type to add. This object must implement or inherit from the type indicated by the serviceType parameter.</param>
      <param name="promote">true if this service should be added to any parent service containers; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="serviceType">serviceType</paramref> or <paramref name="serviceInstance">serviceInstance</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">A service of type <paramref name="serviceType">serviceType</paramref> already exists in the container.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary>Gets the default services implemented directly by <see cref="T:System.ComponentModel.Design.ServiceContainer"></see>.</summary>
      <returns>The default services.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary>Disposes this service container.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary>Disposes this service container.</summary>
      <param name="disposing">true if the <see cref="T:System.ComponentModel.Design.ServiceContainer"></see> is in the process of being disposed of; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary>Gets the requested service.</summary>
      <param name="serviceType">The type of service to retrieve.</param>
      <returns>An instance of the service if it could be found, or null if it could not be found.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary>Removes the specified service type from the service container.</summary>
      <param name="serviceType">The type of service to remove.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="serviceType">serviceType</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>Removes the specified service type from the service container.</summary>
      <param name="serviceType">The type of service to remove.</param>
      <param name="promote">true if this service should be removed from any parent service containers; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="serviceType">serviceType</paramref> is null.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary>Provides a callback mechanism that can create an instance of a service on demand.</summary>
      <param name="container">The service container that requested the creation of the service.</param>
      <param name="serviceType">The type of service to create.</param>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary>Defines identifiers for the standard set of commands that are available to most applications.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.StandardCommands"></see> class.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the AlignBottom command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the AlignHorizontalCenters command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the AlignLeft command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the AlignRight command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the AlignToGrid command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the AlignTop command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the AlignVerticalCenters command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the ArrangeBottom command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the ArrangeIcons command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the ArrangeRight command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the BringForward command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the BringToFront command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the CenterHorizontally command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the CenterVertically command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the Copy command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the Cut command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the Delete command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the Document Outline command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the F1Help command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the Group command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the HorizSpaceConcatenate command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the HorizSpaceDecrease command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the HorizSpaceIncrease command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the HorizSpaceMakeEqual command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the LineupIcons command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the LockControls command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the MultiLevelRedo command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the MultiLevelUndo command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the Paste command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the Properties command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the PropertiesWindow command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the Redo command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the Replace command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the SelectAll command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the SendBackward command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the SendToBack command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the ShowGrid command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the ShowLargeIcons command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the SizeToControl command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the SizeToControlHeight command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the SizeToControlWidth command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the SizeToFit command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the SizeToGrid command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the SnapToGrid command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the TabOrder command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the Undo command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the Ungroup command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary>Gets the first of a set of verbs. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary>Gets the last of a set of verbs. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the VertSpaceConcatenate command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the VertSpaceDecrease command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the VertSpaceIncrease command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the VertSpaceMakeEqual command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the ViewCode command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> for the ViewGrid command. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary>Defines GUID identifiers that correspond to the standard set of tool windows that are available in the design environment.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.StandardToolWindows"></see> class.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary>Gets the GUID for the object browser. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary>Gets the GUID for the output window. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary>Gets the GUID for the solution explorer. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary>Gets the GUID for the Properties window. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary>Gets the GUID for the related links frame. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary>Gets the GUID for the server explorer. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary>Gets the GUID for the task list. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary>Gets the GUID for the Toolbox. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary>Provides a type description provider for a specified type.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary>Gets a type description provider for the specified object.</summary>
      <param name="instance">The object to get a type description provider for.</param>
      <returns>A <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see> that corresponds with <paramref name="instance">instance</paramref>.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary>Gets a type description provider for the specified type.</summary>
      <param name="type">The type to get a type description provider for.</param>
      <returns>A <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see> that corresponds with <paramref name="type">type</paramref>.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary>Defines identifiers for a set of technologies that designer hosts support.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary>Specifies the default view technology support.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary>Represents a mode in which the view object is passed directly to the development environment.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary>Represents a mode in which a Windows Forms control object provides the display for the root designer.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.DesignerAttribute">
      <summary>Specifies the class used to implement design-time services for a component.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DesignerAttribute"></see> class using the name of the type that provides design-time services.</summary>
      <param name="designerTypeName">The concatenation of the fully qualified name of the type that provides design-time services for the component this attribute is bound to, and the name of the assembly this type resides in.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DesignerAttribute"></see> class using the type that provides design-time services.</summary>
      <param name="designerType">A <see cref="T:System.Type"></see> that represents the class that provides design-time services for the component this attribute is bound to.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DesignerAttribute"></see> class using the designer type and the base class for the designer.</summary>
      <param name="designerTypeName">The concatenation of the fully qualified name of the type that provides design-time services for the component this attribute is bound to, and the name of the assembly this type resides in.</param>
      <param name="designerBaseTypeName">The fully qualified name of the base class to associate with the designer class.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DesignerAttribute"></see> class, using the name of the designer class and the base class for the designer.</summary>
      <param name="designerTypeName">The concatenation of the fully qualified name of the type that provides design-time services for the component this attribute is bound to, and the name of the assembly this type resides in.</param>
      <param name="designerBaseType">A <see cref="T:System.Type"></see> that represents the base class to associate with the designerTypeName.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DesignerAttribute"></see> class using the types of the designer and designer base class.</summary>
      <param name="designerType">A <see cref="T:System.Type"></see> that represents the class that provides design-time services for the component this attribute is bound to.</param>
      <param name="designerBaseType">A <see cref="T:System.Type"></see> that represents the base class to associate with the designerType.</param>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerBaseTypeName">
      <summary>Gets the name of the base type of this designer.</summary>
      <returns>The name of the base type of this designer.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerTypeName">
      <summary>Gets the name of the designer type associated with this designer attribute.</summary>
      <returns>The name of the designer type associated with this designer attribute.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.Equals(System.Object)">
      <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.DesignerAttribute"></see>.</summary>
      <param name="obj">The object to test the value equality of.</param>
      <returns>true if the value of the given object is equal to that of the current; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.TypeId">
      <summary>Gets a unique ID for this attribute type.</summary>
      <returns>A unique ID for this attribute type.</returns>
    </member>
    <member name="T:System.ComponentModel.DesignerCategoryAttribute">
      <summary>Specifies that the designer for a class belongs to a certain category.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DesignerCategoryAttribute"></see> class with an empty string (&quot;&quot;).</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DesignerCategoryAttribute"></see> class with the given category name.</summary>
      <param name="category">The name of the category.</param>
    </member>
    <member name="P:System.ComponentModel.DesignerCategoryAttribute.Category">
      <summary>Gets the name of the category.</summary>
      <returns>The name of the category.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Component">
      <summary>Specifies that a component marked with this category use a component designer. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Default">
      <summary>Specifies that a component marked with this category cannot use a visual designer. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.Equals(System.Object)">
      <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.DesignOnlyAttribute"></see>.</summary>
      <param name="obj">The object to test the value equality of.</param>
      <returns>true if the value of the given object is equal to that of the current; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Form">
      <summary>Specifies that a component marked with this category use a form designer. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Generic">
      <summary>Specifies that a component marked with this category use a generic designer. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.IsDefaultAttribute">
      <summary>Determines if this attribute is the default.</summary>
      <returns>true if the attribute is the default value for this attribute class; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerCategoryAttribute.TypeId">
      <summary>Gets a unique identifier for this attribute.</summary>
      <returns>An <see cref="T:System.Object"></see> that is a unique identifier for the attribute.</returns>
    </member>
    <member name="T:System.ComponentModel.DesignerSerializationVisibility">
      <summary>Specifies the visibility a property has to the design-time serializer.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibility.Content">
      <summary>The code generator produces code for the contents of the object, rather than for the object itself.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibility.Hidden">
      <summary>The code generator does not produce code for the object.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibility.Visible">
      <summary>The code generator produces code for the object.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.DesignerSerializationVisibilityAttribute">
      <summary>Specifies the type of persistence to use when serializing a property on a component at design time.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.#ctor(System.ComponentModel.DesignerSerializationVisibility)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute"></see> class using the specified <see cref="T:System.ComponentModel.DesignerSerializationVisibility"></see> value.</summary>
      <param name="visibility">One of the <see cref="T:System.ComponentModel.DesignerSerializationVisibility"></see> values.</param>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Content">
      <summary>Specifies that a serializer should serialize the contents of the property, rather than the property itself. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Default">
      <summary>Specifies the default value, which is <see cref="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Visible"></see>, that is, a visual designer uses default rules to generate the value of a property. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">Another object to compare to.</param>
      <returns>true if <paramref name="obj">obj</paramref> is equal to this instance; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.GetHashCode">
      <summary>Returns the hash code for this object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Hidden">
      <summary>Specifies that a serializer should not serialize the value of the property. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.IsDefaultAttribute">
      <summary>Gets a value indicating whether the current value of the attribute is the default value for the attribute.</summary>
      <returns>true if the attribute is set to the default value; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerSerializationVisibilityAttribute.Visibility">
      <summary>Gets a value indicating the basic serialization mode a serializer should use when determining whether and how to persist the value of a property.</summary>
      <returns>One of the <see cref="T:System.ComponentModel.DesignerSerializationVisibility"></see> values. The default is <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible"></see>.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Visible">
      <summary>Specifies that a serializer should be allowed to serialize the value of the property. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.DesignOnlyAttribute">
      <summary>Specifies whether a property can only be set at design time.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DesignOnlyAttribute"></see> class.</summary>
      <param name="isDesignOnly">true if a property can be set only at design time; false if the property can be set at design time and at run time.</param>
    </member>
    <member name="F:System.ComponentModel.DesignOnlyAttribute.Default">
      <summary>Specifies the default value for the <see cref="T:System.ComponentModel.DesignOnlyAttribute"></see>, which is <see cref="F:System.ComponentModel.DesignOnlyAttribute.No"></see>. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.Equals(System.Object)">
      <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.DesignOnlyAttribute"></see>.</summary>
      <param name="obj">The object to test the value equality of.</param>
      <returns>true if the value of the given object is equal to that of the current; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.IsDefaultAttribute">
      <summary>Determines if this attribute is the default.</summary>
      <returns>true if the attribute is the default value for this attribute class; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignOnlyAttribute.IsDesignOnly">
      <summary>Gets a value indicating whether a property can be set only at design time.</summary>
      <returns>true if a property can be set only at design time; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignOnlyAttribute.No">
      <summary>Specifies that a property can be set at design time or at run time. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.DesignOnlyAttribute.Yes">
      <summary>Specifies that a property can be set only at design time. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary><see cref="T:System.ComponentModel.DesignTimeVisibleAttribute"></see> marks a component's visibility. If <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes"></see> is present, a visual designer can show this component on a designer.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary>Creates a new <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute"></see> set to the default value of false.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary>Creates a new <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute"></see> with the <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible"></see> property set to the given value in <paramref name="visible">visible</paramref>.</summary>
      <param name="visible">The value that the <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible"></see> property will be set against.</param>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary>The default visibility which is Yes.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">An Object to compare with this instance or a null reference (Nothing in Visual Basic).</param>
      <returns>true if <paramref name="obj">obj</paramref> equals the type and value of this instance; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary>Gets a value indicating if this instance is equal to the <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default"></see> value.</summary>
      <returns>true, if this instance is equal to the <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default"></see> value; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary>Marks a component as not visible in a visual designer.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary>Gets or sets whether the component should be shown at design time.</summary>
      <returns>true if this component should be shown at design time, or false if it shouldn't.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary>Marks a component as visible in a visual designer.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.DisplayNameAttribute">
      <summary>Specifies the display name for a property, event, or public void method which takes no arguments.</summary>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DisplayNameAttribute"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DisplayNameAttribute"></see> class using the display name.</summary>
      <param name="displayName">The display name.</param>
    </member>
    <member name="F:System.ComponentModel.DisplayNameAttribute.Default">
      <summary>Specifies the default value for the <see cref="T:System.ComponentModel.DisplayNameAttribute"></see>. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.DisplayNameAttribute.DisplayName">
      <summary>Gets the display name for a property, event, or public void method that takes no arguments stored in this attribute.</summary>
      <returns>The display name.</returns>
    </member>
    <member name="P:System.ComponentModel.DisplayNameAttribute.DisplayNameValue">
      <summary>Gets or sets the display name.</summary>
      <returns>The display name.</returns>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:System.ComponentModel.DisplayNameAttribute"></see> instances are equal.</summary>
      <param name="obj">The <see cref="T:System.ComponentModel.DisplayNameAttribute"></see> to test the value equality of.</param>
      <returns>true if the value of the given object is equal to that of the current object; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.DisplayNameAttribute"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.IsDefaultAttribute">
      <summary>Determines if this attribute is the default.</summary>
      <returns>true if the attribute is the default value for this attribute class; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary>Provides a type converter to convert double-precision, floating point number objects to and from various other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DoubleConverter"></see> class.</summary>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork"></see> event handler.</summary>
    </member>
    <member name="M:System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DoWorkEventArgs"></see> class.</summary>
      <param name="argument">Specifies an argument for an asynchronous operation.</param>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Argument">
      <summary>Gets a value that represents the argument of an asynchronous operation.</summary>
      <returns>An <see cref="T:System.Object"></see> representing the argument of an asynchronous operation.</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Result">
      <summary>Gets or sets a value that represents the result of an asynchronous operation.</summary>
      <returns>An <see cref="T:System.Object"></see> representing the result of an asynchronous operation.</returns>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork"></see> event. This class cannot be inherited.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.DoWorkEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.EditorAttribute">
      <summary>Specifies the editor to use to change a property. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EditorAttribute"></see> class with the default editor, which is no editor.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EditorAttribute"></see> class with the type name and base type name of the editor.</summary>
      <param name="typeName">The fully qualified type name of the editor.</param>
      <param name="baseTypeName">The fully qualified type name of the base class or interface to use as a lookup key for the editor. This class must be or derive from <see cref="T:System.Drawing.Design.UITypeEditor"></see>.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EditorAttribute"></see> class with the type name and the base type.</summary>
      <param name="typeName">The fully qualified type name of the editor.</param>
      <param name="baseType">The <see cref="T:System.Type"></see> of the base class or interface to use as a lookup key for the editor. This class must be or derive from <see cref="T:System.Drawing.Design.UITypeEditor"></see>.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EditorAttribute"></see> class with the type and the base type.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type of the editor.</param>
      <param name="baseType">The <see cref="T:System.Type"></see> of the base class or interface to use as a lookup key for the editor. This class must be or derive from <see cref="T:System.Drawing.Design.UITypeEditor"></see>.</param>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorBaseTypeName">
      <summary>Gets the name of the base class or interface serving as a lookup key for this editor.</summary>
      <returns>The name of the base class or interface serving as a lookup key for this editor.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorTypeName">
      <summary>Gets the name of the editor class in the <see cref="P:System.Type.AssemblyQualifiedName"></see> format.</summary>
      <returns>The name of the editor class in the <see cref="P:System.Type.AssemblyQualifiedName"></see> format.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.Equals(System.Object)">
      <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.EditorAttribute"></see>.</summary>
      <param name="obj">The object to test the value equality of.</param>
      <returns>true if the value of the given object is equal to that of the current object; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.TypeId">
      <summary>Gets a unique ID for this attribute type.</summary>
      <returns>A unique ID for this attribute type.</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
      <summary>Specifies that a property or method is viewable in an editor. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EditorBrowsableAttribute"></see> class with <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State"></see> set to the default state.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EditorBrowsableAttribute"></see> class with an <see cref="T:System.ComponentModel.EditorBrowsableState"></see>.</summary>
      <param name="state">The <see cref="T:System.ComponentModel.EditorBrowsableState"></see> to set <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State"></see> to.</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
      <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.EditorBrowsableAttribute"></see>.</summary>
      <param name="obj">The object to test the value equality of.</param>
      <returns>true if the value of the given object is equal to that of the current; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
      <summary>Gets the browsable state of the property or method.</summary>
      <returns>An <see cref="T:System.ComponentModel.EditorBrowsableState"></see> that is the browsable state of the property or method.</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
      <summary>Specifies the browsable state of a property or method from within an editor.</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
      <summary>The property or method is a feature that only advanced users should see. An editor can either show or hide such properties.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
      <summary>The property or method is always browsable from within an editor.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
      <summary>The property or method is never browsable from within an editor.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary>Provides a type converter to convert <see cref="T:System.Enum"></see> objects to and from various other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EnumConverter"></see> class for the given type.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type of enumeration to associate with this enumeration converter.</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value indicating whether this converter can convert an object in the given source type to an enumeration object using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you wish to convert to.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary>Gets an <see cref="T:System.Collections.IComparer"></see> that can be used to sort the values of the enumeration.</summary>
      <returns>An <see cref="T:System.Collections.IComparer"></see> for sorting the enumeration values.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified value object to an enumeration object.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a valid value for the target type.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified destination type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value to.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> is not a valid value for the enumeration.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary>Specifies the type of the enumerator this converter is associated with.</summary>
      <returns>The type of the enumerator this converter is associated with.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a collection of standard values for the data type this validator is designed for.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> that holds a standard set of valid values, or null if the data type does not support a standard set of values.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a value indicating whether the list of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exclusive list using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true if the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exhaustive list of possible values; false if other values are possible.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true because <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> should be called to find a common set of values the object supports. This method never returns false.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Gets a value indicating whether the given object value is valid for this type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="value">The <see cref="T:System.Object"></see> to test.</param>
      <returns>true if the specified value is valid for this object; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary>Gets or sets a <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> that specifies the possible values for the enumeration.</summary>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> that specifies the possible values for the enumeration.</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary>Provides information about an event.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EventDescriptor"></see> class with the name and attributes in the specified <see cref="T:System.ComponentModel.MemberDescriptor"></see>.</summary>
      <param name="descr">A <see cref="T:System.ComponentModel.MemberDescriptor"></see> that contains the name of the event and its attributes.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EventDescriptor"></see> class with the name in the specified <see cref="T:System.ComponentModel.MemberDescriptor"></see> and the attributes in both the <see cref="T:System.ComponentModel.MemberDescriptor"></see> and the <see cref="T:System.Attribute"></see> array.</summary>
      <param name="descr">A <see cref="T:System.ComponentModel.MemberDescriptor"></see> that has the name of the member and its attributes.</param>
      <param name="attrs">An <see cref="T:System.Attribute"></see> array with the attributes you want to add to this event description.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EventDescriptor"></see> class with the specified name and attribute array.</summary>
      <param name="name">The name of the event.</param>
      <param name="attrs">An array of type <see cref="T:System.Attribute"></see> that contains the event attributes.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary>When overridden in a derived class, binds the event to the component.</summary>
      <param name="component">A component that provides events to the delegate.</param>
      <param name="value">A delegate that represents the method that handles the event.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary>When overridden in a derived class, gets the type of component this event is bound to.</summary>
      <returns>A <see cref="T:System.Type"></see> that represents the type of component the event is bound to.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary>When overridden in a derived class, gets the type of delegate for the event.</summary>
      <returns>A <see cref="T:System.Type"></see> that represents the type of delegate for the event.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary>When overridden in a derived class, gets a value indicating whether the event delegate is a multicast delegate.</summary>
      <returns>true if the event delegate is multicast; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>When overridden in a derived class, unbinds the delegate from the component so that the delegate will no longer receive events from the component.</summary>
      <param name="component">The component that the delegate is bound to.</param>
      <param name="value">The delegate to unbind from the component.</param>
    </member>
    <member name="T:System.Configuration.IApplicationSettingsProvider">
      <summary>Defines extended capabilities for client-based application settings providers.</summary>
    </member>
    <member name="M:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)">
      <summary>Returns the value of the specified settings property for the previous version of the same application.</summary>
      <param name="context">A <see cref="T:System.Configuration.SettingsContext"></see> describing the current application usage.</param>
      <param name="property">The <see cref="T:System.Configuration.SettingsProperty"></see> whose value is to be returned.</param>
      <returns>A <see cref="T:System.Configuration.SettingsPropertyValue"></see> containing the value of the specified property setting as it was last set in the previous version of the application; or null if the setting cannot be found.</returns>
    </member>
    <member name="M:System.Configuration.IApplicationSettingsProvider.Reset(System.Configuration.SettingsContext)">
      <summary>Resets the application settings associated with the specified application to their default values.</summary>
      <param name="context">A <see cref="T:System.Configuration.SettingsContext"></see> describing the current application usage.</param>
    </member>
    <member name="M:System.Configuration.IApplicationSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
      <summary>Indicates to the provider that the application has been upgraded. This offers the provider an opportunity to upgrade its stored settings as appropriate.</summary>
      <param name="context">A <see cref="T:System.Configuration.SettingsContext"></see> describing the current application usage.</param>
      <param name="properties">A <see cref="T:System.Configuration.SettingsPropertyCollection"></see> containing the settings property group whose values are to be retrieved.</param>
    </member>
    <member name="T:System.Configuration.IConfigurationSectionHandler">
      <summary>Handles the access to certain configuration sections.</summary>
    </member>
    <member name="M:System.Configuration.IConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>Creates a configuration section handler.</summary>
      <param name="parent">Parent object.</param>
      <param name="configContext">Configuration context object.</param>
      <param name="section">Section XML node.</param>
      <returns>The created section handler object.</returns>
    </member>
    <member name="T:System.Configuration.IConfigurationSystem">
      <summary>Provides standard configuration methods.</summary>
    </member>
    <member name="M:System.Configuration.IConfigurationSystem.GetConfig(System.String)">
      <summary>Gets the specified configuration.</summary>
      <param name="configKey">The configuration key.</param>
      <returns>The object representing the configuration.</returns>
    </member>
    <member name="M:System.Configuration.IConfigurationSystem.Init">
      <summary>Used for initialization.</summary>
    </member>
    <member name="T:System.Configuration.IdnElement">
      <summary>Provides the configuration setting for International Domain Name (IDN) processing in the <see cref="T:System.Uri"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.IdnElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.IdnElement"></see> class.</summary>
    </member>
    <member name="P:System.Configuration.IdnElement.Enabled">
      <summary>Gets or sets the value of the <see cref="T:System.Configuration.IdnElement"></see> configuration setting.</summary>
      <returns>A <see cref="T:System.UriIdnScope"></see> that contains the current configuration setting for IDN processing.</returns>
    </member>
    <member name="M:System.Configuration.IdnElement.Equals(System.Object)">
      <param name="o"></param>
      <returns></returns>
    </member>
    <member name="M:System.Configuration.IdnElement.GetHashCode">
      <returns></returns>
    </member>
    <member name="T:System.Configuration.IgnoreSectionHandler">
      <summary>Provides a legacy section-handler definition for configuration sections that are not handled by the <see cref="N:System.Configuration"></see> types.</summary>
    </member>
    <member name="M:System.Configuration.IgnoreSectionHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.IgnoreSectionHandler"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.IgnoreSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>Creates a new configuration handler and adds the specified configuration object to the section-handler collection.</summary>
      <param name="parent">The configuration settings in a corresponding parent configuration section.</param>
      <param name="configContext">The virtual path for which the configuration section handler computes configuration values. Normally this parameter is reserved and is null.</param>
      <param name="section">An <see cref="T:System.Xml.XmlNode"></see> that contains the configuration information to be handled. Provides direct access to the XML contents of the configuration section.</param>
      <returns>The created configuration handler object.</returns>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionAttribute">
      <summary>Allows declaritive permission checks for event logging.</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogPermissionAttribute"></see> class.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionAttribute.CreatePermission">
      <summary>Creates the permission based on the <see cref="P:System.Diagnostics.EventLogPermissionAttribute.MachineName"></see> property and the requested access levels that are set through the <see cref="P:System.Diagnostics.EventLogPermissionAttribute.PermissionAccess"></see> property on the attribute.</summary>
      <returns>An <see cref="T:System.Security.IPermission"></see> that represents the created permission.</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionAttribute.MachineName">
      <summary>Gets or sets the name of the computer on which events might be read.</summary>
      <returns>The name of the computer on which events might be read. The default is &quot;.&quot;.</returns>
      <exception cref="T:System.ArgumentException">The computer name is invalid.</exception>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionAttribute.PermissionAccess">
      <summary>Gets or sets the access levels used in the permissions request.</summary>
      <returns>A bitwise combination of the <see cref="T:System.Diagnostics.EventLogPermissionAccess"></see> values. The default is <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write"></see>.</returns>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionEntry">
      <summary>Defines the smallest unit of a code access security permission that is set for an <see cref="T:System.Diagnostics.EventLog"></see>.</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntry.#ctor(System.Diagnostics.EventLogPermissionAccess,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogPermissionEntry"></see> class.</summary>
      <param name="permissionAccess">A bitwise combination of the <see cref="T:System.Diagnostics.EventLogPermissionAccess"></see> values. The <see cref="P:System.Diagnostics.EventLogPermissionEntry.PermissionAccess"></see> property is set to this value.</param>
      <param name="machineName">The name of the computer on which to read or write events. The <see cref="P:System.Diagnostics.EventLogPermissionEntry.MachineName"></see> property is set to this value.</param>
      <exception cref="T:System.ArgumentException">The computer name is invalid.</exception>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionEntry.MachineName">
      <summary>Gets the name of the computer on which to read or write events.</summary>
      <returns>The name of the computer on which to read or write events.</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionEntry.PermissionAccess">
      <summary>Gets the permission access levels used in the permissions request.</summary>
      <returns>A bitwise combination of the <see cref="T:System.Diagnostics.EventLogPermissionAccess"></see> values.</returns>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionEntryCollection">
      <summary>Contains a strongly typed collection of <see cref="T:System.Diagnostics.EventLogPermissionEntry"></see> objects.</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Add(System.Diagnostics.EventLogPermissionEntry)">
      <summary>Adds a specified <see cref="T:System.Diagnostics.EventLogPermissionEntry"></see> to this collection.</summary>
      <param name="value">The <see cref="T:System.Diagnostics.EventLogPermissionEntry"></see> to add.</param>
      <returns>The zero-based index of the added <see cref="T:System.Diagnostics.EventLogPermissionEntry"></see>.</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.AddRange(System.Diagnostics.EventLogPermissionEntry[])">
      <summary>Appends a set of specified permission entries to this collection.</summary>
      <param name="value">An array of type <see cref="T:System.Diagnostics.EventLogPermissionEntry"></see> objects that contains the permission entries to add.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.AddRange(System.Diagnostics.EventLogPermissionEntryCollection)">
      <summary>Appends a set of specified permission entries to this collection.</summary>
      <param name="value">A <see cref="T:System.Diagnostics.EventLogPermissionEntryCollection"></see> that contains the permission entries to add.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Contains(System.Diagnostics.EventLogPermissionEntry)">
      <summary>Determines whether this collection contains a specified <see cref="T:System.Diagnostics.EventLogPermissionEntry"></see>.</summary>
      <param name="value">The <see cref="T:System.Diagnostics.EventLogPermissionEntry"></see> to find.</param>
      <returns>true if the specified <see cref="T:System.Diagnostics.EventLogPermissionEntry"></see> belongs to this collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.CopyTo(System.Diagnostics.EventLogPermissionEntry[],System.Int32)">
      <summary>Copies the permission entries from this collection to an array, starting at a particular index of the array.</summary>
      <param name="array">An array of type <see cref="T:System.Diagnostics.EventLogPermissionEntry"></see> that receives this collection's permission entries.</param>
      <param name="index">The zero-based index at which to begin copying the permission entries.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.IndexOf(System.Diagnostics.EventLogPermissionEntry)">
      <summary>Determines the index of a specified permission entry in this collection.</summary>
      <param name="value">The permission entry to search for.</param>
      <returns>The zero-based index of the specified permission entry, or -1 if the permission entry was not found in the collection.</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Insert(System.Int32,System.Diagnostics.EventLogPermissionEntry)">
      <summary>Inserts a permission entry into this collection at a specified index.</summary>
      <param name="index">The zero-based index of the collection at which to insert the permission entry.</param>
      <param name="value">The permission entry to insert into this collection.</param>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionEntryCollection.Item(System.Int32)">
      <summary>Gets or sets the object at a specified index.</summary>
      <param name="index">The zero-based index into the collection.</param>
      <returns>The <see cref="T:System.Diagnostics.EventLogPermissionEntry"></see> that exists at the specified index.</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnClear">
      <summary>Performs additional custom processes after clearing the contents of the collection.</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnInsert(System.Int32,System.Object)">
      <summary>Performs additional custom processes before a new permission entry is inserted into the collection.</summary>
      <param name="index">The zero-based index at which to insert value.</param>
      <param name="value">The new value of the permission entry at index.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnRemove(System.Int32,System.Object)">
      <summary>Performs additional custom processes when removing a new permission entry from the collection.</summary>
      <param name="index">The zero-based index at which value can be found.</param>
      <param name="value">The permission entry to remove from index.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>Performs additional custom processes before setting a value in the collection.</summary>
      <param name="index">The zero-based index at which oldValue can be found.</param>
      <param name="oldValue">The value to replace with newValue.</param>
      <param name="newValue">The new value of the permission entry at index.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Remove(System.Diagnostics.EventLogPermissionEntry)">
      <summary>Removes a specified permission entry from this collection.</summary>
      <param name="value">The permission entry to remove.</param>
    </member>
    <member name="T:System.Diagnostics.EventTypeFilter">
      <summary>Indicates whether a listener should trace based on the event type.</summary>
    </member>
    <member name="M:System.Diagnostics.EventTypeFilter.#ctor(System.Diagnostics.SourceLevels)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventTypeFilter"></see> class.</summary>
      <param name="level">A bitwise combination of the <see cref="T:System.Diagnostics.SourceLevels"></see> values that specifies the event type of the messages to trace.</param>
    </member>
    <member name="P:System.Diagnostics.EventTypeFilter.EventType">
      <summary>Gets or sets the event type of the messages to trace.</summary>
      <returns>A bitwise combination of the <see cref="T:System.Diagnostics.SourceLevels"></see> values.</returns>
    </member>
    <member name="M:System.Diagnostics.EventTypeFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])">
      <summary>Determines whether the trace listener should trace the event.</summary>
      <param name="cache">A <see cref="T:System.Diagnostics.TraceEventCache"></see> that represents the information cache for the trace event.</param>
      <param name="source">The name of the source.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"></see> values.</param>
      <param name="id">A trace identifier number.</param>
      <param name="formatOrMessage">The format to use for writing an array of arguments, or a message to write.</param>
      <param name="args">An array of argument objects.</param>
      <param name="data1">A trace data object.</param>
      <param name="data">An array of trace data objects.</param>
      <returns>true if the trace should be produced; otherwise, false.</returns>
    </member>
    <member name="T:System.Diagnostics.FileVersionInfo">
      <summary>Provides version information for a physical file on disk.</summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.Comments">
      <summary>Gets the comments associated with the file.</summary>
      <returns>The comments associated with the file or null if the file did not contain version information.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.CompanyName">
      <summary>Gets the name of the company that produced the file.</summary>
      <returns>The name of the company that produced the file or null if the file did not contain version information.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileBuildPart">
      <summary>Gets the build number of the file.</summary>
      <returns>A value representing the build number of the file or null if the file did not contain version information.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileDescription">
      <summary>Gets the description of the file.</summary>
      <returns>The description of the file or null if the file did not contain version information.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileMajorPart">
      <summary>Gets the major part of the version number.</summary>
      <returns>A value representing the major part of the version number or 0 (zero) if the file did not contain version information.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileMinorPart">
      <summary>Gets the minor part of the version number of the file.</summary>
      <returns>A value representing the minor part of the version number of the file or 0 (zero) if the file did not contain version information.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileName">
      <summary>Gets the name of the file that this instance of <see cref="T:System.Diagnostics.FileVersionInfo"></see> describes.</summary>
      <returns>The name of the file described by this instance of <see cref="T:System.Diagnostics.FileVersionInfo"></see>.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FilePrivatePart">
      <summary>Gets the file private part number.</summary>
      <returns>A value representing the file private part number or null if the file did not contain version information.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileVersion">
      <summary>Gets the file version number.</summary>
      <returns>The version number of the file or null if the file did not contain version information.</returns>
    </member>
    <member name="M:System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)">
      <summary>Returns a <see cref="T:System.Diagnostics.FileVersionInfo"></see> representing the version information associated with the specified file.</summary>
      <param name="fileName">The fully qualified path and name of the file to retrieve the version information for.</param>
      <returns>A <see cref="T:System.Diagnostics.FileVersionInfo"></see> containing information about the file. If the file did not contain version information, the <see cref="T:System.Diagnostics.FileVersionInfo"></see> contains only the name of the file requested.</returns>
      <exception cref="T:System.IO.FileNotFoundException">The file specified cannot be found.</exception>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.InternalName">
      <summary>Gets the internal name of the file, if one exists.</summary>
      <returns>The internal name of the file. If none exists, this property will contain the original name of the file without the extension.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsDebug">
      <summary>Gets a value that specifies whether the file contains debugging information or is compiled with debugging features enabled.</summary>
      <returns>true if the file contains debugging information or is compiled with debugging features enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsPatched">
      <summary>Gets a value that specifies whether the file has been modified and is not identical to the original shipping file of the same version number.</summary>
      <returns>true if the file is patched; otherwise, false.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsPreRelease">
      <summary>Gets a value that specifies whether the file is a development version, rather than a commercially released product.</summary>
      <returns>true if the file is prerelease; otherwise, false.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsPrivateBuild">
      <summary>Gets a value that specifies whether the file was built using standard release procedures.</summary>
      <returns>true if the file is a private build; false if the file was built using standard release procedures or if the file did not contain version information.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsSpecialBuild">
      <summary>Gets a value that specifies whether the file is a special build.</summary>
      <returns>true if the file is a special build; otherwise, false.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.Language">
      <summary>Gets the default language string for the version info block.</summary>
      <returns>The description string for the Microsoft Language Identifier in the version resource or null if the file did not contain version information.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.LegalCopyright">
      <summary>Gets all copyright notices that apply to the specified file.</summary>
      <returns>The copyright notices that apply to the specified file.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.LegalTrademarks">
      <summary>Gets the trademarks and registered trademarks that apply to the file.</summary>
      <returns>The trademarks and registered trademarks that apply to the file or null if the file did not contain version information.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.OriginalFilename">
      <summary>Gets the name the file was created with.</summary>
      <returns>The name the file was created with or null if the file did not contain version information.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.PrivateBuild">
      <summary>Gets information about a private version of the file.</summary>
      <returns>Information about a private version of the file or null if the file did not contain version information.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductBuildPart">
      <summary>Gets the build number of the product this file is associated with.</summary>
      <returns>A value representing the build number of the product this file is associated with or null if the file did not contain version information.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductMajorPart">
      <summary>Gets the major part of the version number for the product this file is associated with.</summary>
      <returns>A value representing the major part of the product version number or null if the file did not contain version information.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductMinorPart">
      <summary>Gets the minor part of the version number for the product the file is associated with.</summary>
      <returns>A value representing the minor part of the product version number or null if the file did not contain version information.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductName">
      <summary>Gets the name of the product this file is distributed with.</summary>
      <returns>The name of the product this file is distributed with or null if the file did not contain version information.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductPrivatePart">
      <summary>Gets the private part number of the product this file is associated with.</summary>
      <returns>A value representing the private part number of the product this file is associated with or null if the file did not contain version information.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductVersion">
      <summary>Gets the version of the product this file is distributed with.</summary>
      <returns>The version of the product this file is distributed with or null if the file did not contain version information.</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.SpecialBuild">
      <summary>Gets the special build information for the file.</summary>
      <returns>The special build information for the file or null if the file did not contain version information.</returns>
    </member>
    <member name="M:System.Diagnostics.FileVersionInfo.ToString">
      <summary>Returns a partial list of properties in the <see cref="T:System.Diagnostics.FileVersionInfo"></see> and their values.</summary>
      <returns>A list of the following properties in this class and their values:  <see cref="P:System.Diagnostics.FileVersionInfo.FileName"></see>, <see cref="P:System.Diagnostics.FileVersionInfo.InternalName"></see>, <see cref="P:System.Diagnostics.FileVersionInfo.OriginalFilename"></see>, <see cref="P:System.Diagnostics.FileVersionInfo.FileVersion"></see>, <see cref="P:System.Diagnostics.FileVersionInfo.FileDescription"></see>, <see cref="P:System.Diagnostics.FileVersionInfo.ProductName"></see>, <see cref="P:System.Diagnostics.FileVersionInfo.ProductVersion"></see>, <see cref="P:System.Diagnostics.FileVersionInfo.IsDebug"></see>, <see cref="P:System.Diagnostics.FileVersionInfo.IsPatched"></see>, <see cref="P:System.Diagnostics.FileVersionInfo.IsPreRelease"></see>, <see cref="P:System.Diagnostics.FileVersionInfo.IsPrivateBuild"></see>, <see cref="P:System.Diagnostics.FileVersionInfo.IsSpecialBuild"></see>,  <see cref="P:System.Diagnostics.FileVersionInfo.Language"></see>.   If the file did not contain version information, this list will contain only the name of the requested file. Boolean values will be false, and all other entries will be null.</returns>
    </member>
    <member name="T:System.Diagnostics.MonitoringDescriptionAttribute">
      <summary>Specifies a description for a property or event.</summary>
    </member>
    <member name="M:System.Diagnostics.MonitoringDescriptionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.MonitoringDescriptionAttribute"></see> class, using the specified description.</summary>
      <param name="description">The application-defined description text.</param>
    </member>
    <member name="P:System.Diagnostics.MonitoringDescriptionAttribute.Description">
      <summary>Gets description text associated with the item monitored.</summary>
      <returns>An application-defined description.</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounter">
      <summary>Represents a Windows NT performance counter component.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor">
      <summary>Initializes a new, read-only instance of the <see cref="T:System.Diagnostics.PerformanceCounter"></see> class, without associating the instance with any system or custom performance counter.</summary>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String)">
      <summary>Initializes a new, read-only instance of the <see cref="T:System.Diagnostics.PerformanceCounter"></see> class and associates it with the specified system or custom performance counter on the local computer. This constructor requires that the category have a single instance.</summary>
      <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
      <param name="counterName">The name of the performance counter.</param>
      <exception cref="T:System.InvalidOperationException"><paramref name="categoryName">categoryName</paramref> is an empty string (&quot;&quot;).   -or-  <paramref name="counterName">counterName</paramref> is an empty string (&quot;&quot;).   -or-   The category specified does not exist.   -or-   The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.   -or-  <paramref name="categoryName">categoryName</paramref> and <paramref name="counterName">counterName</paramref> have been localized into different languages.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="categoryName">categoryName</paramref> or <paramref name="counterName">counterName</paramref> is null.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.Boolean)">
      <summary>Initializes a new, read-only or read/write instance of the <see cref="T:System.Diagnostics.PerformanceCounter"></see> class and associates it with the specified system or custom performance counter on the local computer. This constructor requires that the category contain a single instance.</summary>
      <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
      <param name="counterName">The name of the performance counter.</param>
      <param name="readOnly">true to access the counter in read-only mode (although the counter itself could be read/write); false to access the counter in read/write mode.</param>
      <exception cref="T:System.InvalidOperationException">The <paramref name="categoryName">categoryName</paramref> is an empty string (&quot;&quot;).   -or-   The <paramref name="counterName">counterName</paramref> is an empty string (&quot;&quot;).   -or-   The category specified does not exist. (if <paramref name="readOnly">readOnly</paramref> is true).   -or-   The category specified is not a .NET Framework custom category (if <paramref name="readOnly">readOnly</paramref> is false).   -or-   The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.   -or-  <paramref name="categoryName">categoryName</paramref> and <paramref name="counterName">counterName</paramref> have been localized into different languages.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="categoryName">categoryName</paramref> or <paramref name="counterName">counterName</paramref> is null.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new, read-only instance of the <see cref="T:System.Diagnostics.PerformanceCounter"></see> class and associates it with the specified system or custom performance counter and category instance on the local computer.</summary>
      <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
      <param name="counterName">The name of the performance counter.</param>
      <param name="instanceName">The name of the performance counter category instance, or an empty string (&quot;&quot;), if the category contains a single instance.</param>
      <exception cref="T:System.InvalidOperationException"><paramref name="categoryName">categoryName</paramref> is an empty string (&quot;&quot;).   -or-  <paramref name="counterName">counterName</paramref> is an empty string (&quot;&quot;).   -or-   The category specified is not valid.   -or-   The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.   -or-  <paramref name="instanceName">instanceName</paramref> is longer than 127 characters.   -or-  <paramref name="categoryName">categoryName</paramref> and <paramref name="counterName">counterName</paramref> have been localized into different languages.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="categoryName">categoryName</paramref> or <paramref name="counterName">counterName</paramref> is null.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.Boolean)">
      <summary>Initializes a new, read-only or read/write instance of the <see cref="T:System.Diagnostics.PerformanceCounter"></see> class and associates it with the specified system or custom performance counter and category instance on the local computer.</summary>
      <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
      <param name="counterName">The name of the performance counter.</param>
      <param name="instanceName">The name of the performance counter category instance, or an empty string (&quot;&quot;), if the category contains a single instance.</param>
      <param name="readOnly">true to access a counter in read-only mode; false to access a counter in read/write mode.</param>
      <exception cref="T:System.InvalidOperationException"><paramref name="categoryName">categoryName</paramref> is an empty string (&quot;&quot;).   -or-  <paramref name="counterName">counterName</paramref> is an empty string (&quot;&quot;).   -or-   The read/write permission setting requested is invalid for this counter.   -or-   The category specified does not exist (if <paramref name="readOnly">readOnly</paramref> is true).   -or-   The category specified is not a .NET Framework custom category (if <paramref name="readOnly">readOnly</paramref> is false).   -or-   The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.   -or-  <paramref name="instanceName">instanceName</paramref> is longer than 127 characters.   -or-  <paramref name="categoryName">categoryName</paramref> and <paramref name="counterName">counterName</paramref> have been localized into different languages.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="categoryName">categoryName</paramref> or <paramref name="counterName">counterName</paramref> is null.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes a new, read-only instance of the <see cref="T:System.Diagnostics.PerformanceCounter"></see> class and associates it with the specified system or custom performance counter and category instance, on the specified computer.</summary>
      <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
      <param name="counterName">The name of the performance counter.</param>
      <param name="instanceName">The name of the performance counter category instance, or an empty string (&quot;&quot;), if the category contains a single instance.</param>
      <param name="machineName">The computer on which the performance counter and its associated category exist.</param>
      <exception cref="T:System.InvalidOperationException"><paramref name="categoryName">categoryName</paramref> is an empty string (&quot;&quot;).   -or-  <paramref name="counterName">counterName</paramref> is an empty string (&quot;&quot;).   -or-   The read/write permission setting requested is invalid for this counter.   -or-   The counter does not exist on the specified computer.   -or-   The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.   -or-  <paramref name="instanceName">instanceName</paramref> is longer than 127 characters.   -or-  <paramref name="categoryName">categoryName</paramref> and <paramref name="counterName">counterName</paramref> have been localized into different languages.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="machineName">machineName</paramref> parameter is not valid.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="categoryName">categoryName</paramref> or <paramref name="counterName">counterName</paramref> is null.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.BeginInit">
      <summary>Begins the initialization of a <see cref="T:System.Diagnostics.PerformanceCounter"></see> instance used on a form or by another component. The initialization occurs at runtime.</summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CategoryName">
      <summary>Gets or sets the name of the performance counter category for this performance counter.</summary>
      <returns>The name of the performance counter category (performance object) with which this performance counter is associated.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Diagnostics.PerformanceCounter.CategoryName"></see> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.Close">
      <summary>Closes the performance counter and frees all the resources allocated by this performance counter instance.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.CloseSharedResources">
      <summary>Frees the performance counter library shared state allocated by the counters.</summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CounterHelp">
      <summary>Gets the description for this performance counter.</summary>
      <returns>A description of the item or quantity that this performance counter measures.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Diagnostics.PerformanceCounter"></see> instance is not associated with a performance counter.   -or-   The <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime"></see> property is set to <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process"></see> when using global shared memory.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CounterName">
      <summary>Gets or sets the name of the performance counter that is associated with this <see cref="T:System.Diagnostics.PerformanceCounter"></see> instance.</summary>
      <returns>The name of the counter, which generally describes the quantity being counted. This name is displayed in the list of counters of the Performance Counter Manager MMC snap in's Add Counters dialog box.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Diagnostics.PerformanceCounter.CounterName"></see> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CounterType">
      <summary>Gets the counter type of the associated performance counter.</summary>
      <returns>A <see cref="T:System.Diagnostics.PerformanceCounterType"></see> that describes both how the counter interacts with a monitoring application and the nature of the values it contains (for example, calculated or uncalculated).</returns>
      <exception cref="T:System.InvalidOperationException">The instance is not correctly associated with a performance counter.   -or-   The <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime"></see> property is set to <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process"></see> when using global shared memory.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.Decrement">
      <summary>Decrements the associated performance counter by one through an efficient atomic operation.</summary>
      <returns>The decremented counter value.</returns>
      <exception cref="T:System.InvalidOperationException">The counter is read-only, so the application cannot decrement it.   -or-   The instance is not correctly associated with a performance counter.   -or-   The <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime"></see> property is set to <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process"></see> when using global shared memory.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounter.DefaultFileMappingSize">
      <summary>Specifies the size, in bytes, of the global memory shared by performance counters. The default size is 524,288 bytes.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.EndInit">
      <summary>Ends the initialization of a <see cref="T:System.Diagnostics.PerformanceCounter"></see> instance that is used on a form or by another component. The initialization occurs at runtime.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.Increment">
      <summary>Increments the associated performance counter by one through an efficient atomic operation.</summary>
      <returns>The incremented counter value.</returns>
      <exception cref="T:System.InvalidOperationException">The counter is read-only, so the application cannot increment it.   -or-   The instance is not correctly associated with a performance counter.   -or-   The <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime"></see> property is set to <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process"></see> when using global shared memory.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.IncrementBy(System.Int64)">
      <summary>Increments or decrements the value of the associated performance counter by a specified amount through an efficient atomic operation.</summary>
      <param name="value">The value to increment by. (A negative value decrements the counter.)</param>
      <returns>The new counter value.</returns>
      <exception cref="T:System.InvalidOperationException">The counter is read-only, so the application cannot increment it.   -or-   The instance is not correctly associated with a performance counter.   -or-   The <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime"></see> property is set to <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process"></see> when using global shared memory.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.InstanceLifetime">
      <summary>Gets or sets the lifetime of a process.</summary>
      <returns>One of the <see cref="T:System.Diagnostics.PerformanceCounterInstanceLifetime"></see> values. The default is <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Global"></see>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value set is not a member of the <see cref="T:System.Diagnostics.PerformanceCounterInstanceLifetime"></see> enumeration.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime"></see> is set after the <see cref="T:System.Diagnostics.PerformanceCounter"></see> has been initialized.</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.InstanceName">
      <summary>Gets or sets an instance name for this performance counter.</summary>
      <returns>The name of the performance counter category instance, or an empty string (&quot;&quot;), if the counter is a single-instance counter.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.MachineName">
      <summary>Gets or sets the computer name for this performance counter</summary>
      <returns>The server on which the performance counter and its associated category reside.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Diagnostics.PerformanceCounter.MachineName"></see> format is invalid.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.NextSample">
      <summary>Obtains a counter sample, and returns the raw, or uncalculated, value for it.</summary>
      <returns>A <see cref="T:System.Diagnostics.CounterSample"></see> that represents the next raw value that the system obtains for this counter.</returns>
      <exception cref="T:System.InvalidOperationException">The instance is not correctly associated with a performance counter.   -or-   The <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime"></see> property is set to <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process"></see> when using global shared memory.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.NextValue">
      <summary>Obtains a counter sample and returns the calculated value for it.</summary>
      <returns>The next calculated value that the system obtains for this counter.</returns>
      <exception cref="T:System.InvalidOperationException">The instance is not correctly associated with a performance counter.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.RawValue">
      <summary>Gets or sets the raw, or uncalculated, value of this counter.</summary>
      <returns>The raw value of the counter.</returns>
      <exception cref="T:System.InvalidOperationException">You are trying to set the counter's raw value, but the counter is read-only.   -or-   The instance is not correctly associated with a performance counter.   -or-   The <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime"></see> property is set to <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process"></see> when using global shared memory.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.ReadOnly">
      <summary>Gets or sets a value indicating whether this <see cref="T:System.Diagnostics.PerformanceCounter"></see> instance is in read-only mode.</summary>
      <returns>true, if the <see cref="T:System.Diagnostics.PerformanceCounter"></see> instance is in read-only mode (even if the counter itself is a custom .NET Framework counter); false if it is in read/write mode. The default is the value set by the constructor.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.RemoveInstance">
      <summary>Deletes the category instance specified by the <see cref="T:System.Diagnostics.PerformanceCounter"></see> object <see cref="P:System.Diagnostics.PerformanceCounter.InstanceName"></see> property.</summary>
      <exception cref="T:System.InvalidOperationException">This counter is read-only, so any instance that is associated with the category cannot be removed.   -or-   The instance is not correctly associated with a performance counter.   -or-   The <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime"></see> property is set to <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process"></see> when using global shared memory.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterInstanceLifetime">
      <summary>Specifies the lifetime of a performance counter instance.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Global">
      <summary>Remove the performance counter instance when no counters are using the process category.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process">
      <summary>Remove the performance counter instance when the process is closed.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermission">
      <summary>Allows control of code access permissions for <see cref="T:System.Diagnostics.PerformanceCounter"></see>.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterPermission"></see> class.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor(System.Diagnostics.PerformanceCounterPermissionEntry[])">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterPermission"></see> class with the specified permission access level entries.</summary>
      <param name="permissionAccessEntries">An array of <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> objects. The <see cref="P:System.Diagnostics.PerformanceCounterPermission.PermissionEntries"></see> property is set to this value.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="permissionAccessEntries">permissionAccessEntries</paramref> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterPermission"></see> class with the specified permission state.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid value of <see cref="T:System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor(System.Diagnostics.PerformanceCounterPermissionAccess,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterPermission"></see> class with the specified access levels, the name of the computer to use, and the category associated with the performance counter.</summary>
      <param name="permissionAccess">One of the <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess"></see> values.</param>
      <param name="machineName">The server on which the performance counter and its associate category reside.</param>
      <param name="categoryName">The name of the performance counter category (performance object) with which the performance counter is associated.</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermission.PermissionEntries">
      <summary>Gets the collection of permission entries for this permissions request.</summary>
      <returns>A <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection"></see> that contains the permission entries for this permissions request.</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionAccess">
      <summary>Defines access levels used by <see cref="T:System.Diagnostics.PerformanceCounter"></see> permission classes.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Administer">
      <summary>The <see cref="T:System.Diagnostics.PerformanceCounter"></see> can read, write, and create categories.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Browse">
      <summary>The <see cref="T:System.Diagnostics.PerformanceCounter"></see> can read categories.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Instrument">
      <summary>The <see cref="T:System.Diagnostics.PerformanceCounter"></see> can read and write categories.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.None">
      <summary>The <see cref="T:System.Diagnostics.PerformanceCounter"></see> has no permissions.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read">
      <summary>The <see cref="T:System.Diagnostics.PerformanceCounter"></see> can read categories.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Write">
      <summary>The <see cref="T:System.Diagnostics.PerformanceCounter"></see> can write categories.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionAttribute">
      <summary>Allows declaritive performance counter permission checks.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterPermissionAttribute"></see> class.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionAttribute.CategoryName">
      <summary>Gets or sets the name of the performance counter category.</summary>
      <returns>The name of the performance counter category (performance object).</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionAttribute.CreatePermission">
      <summary>Creates the permission based on the requested access levels that are set through the <see cref="P:System.Diagnostics.PerformanceCounterPermissionAttribute.PermissionAccess"></see> property on the attribute.</summary>
      <returns>An <see cref="T:System.Security.IPermission"></see> that represents the created permission.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionAttribute.MachineName">
      <summary>Gets or sets the computer name for the performance counter.</summary>
      <returns>The server on which the category of the performance counter resides.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Diagnostics.PerformanceCounterPermissionAttribute.MachineName"></see> format is invalid.</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionAttribute.PermissionAccess">
      <summary>Gets or sets the access levels used in the permissions request.</summary>
      <returns>A bitwise combination of the <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess"></see> values. The default is <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write"></see>.</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionEntry">
      <summary>Defines the smallest unit of a code access security permission that is set for a <see cref="T:System.Diagnostics.PerformanceCounter"></see>.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntry.#ctor(System.Diagnostics.PerformanceCounterPermissionAccess,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> class.</summary>
      <param name="permissionAccess">A bitwise combination of the <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess"></see> values. The <see cref="P:System.Diagnostics.PerformanceCounterPermissionEntry.PermissionAccess"></see> property is set to this value.</param>
      <param name="machineName">The server on which the category of the performance counter resides.</param>
      <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="categoryName">categoryName</paramref> is null.   -or-  <paramref name="machineName">machineName</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="permissionAccess">permissionAccess</paramref> is not a valid <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess"></see> value.   -or-  <paramref name="machineName">machineName</paramref> is not a valid computer name.</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntry.CategoryName">
      <summary>Gets the name of the performance counter category (performance object).</summary>
      <returns>The name of the performance counter category (performance object).</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntry.MachineName">
      <summary>Gets the name of the server on which the category of the performance counter resides.</summary>
      <returns>The name of the server on which the category resides.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntry.PermissionAccess">
      <summary>Gets the permission access level of the entry.</summary>
      <returns>A bitwise combination of the <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess"></see> values.</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection">
      <summary>Contains a strongly typed collection of <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> objects.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Add(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>Adds a specified <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> to this collection.</summary>
      <param name="value">The <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> object to add.</param>
      <returns>The zero-based index of the added <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> object.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.AddRange(System.Diagnostics.PerformanceCounterPermissionEntry[])">
      <summary>Appends a set of specified permission entries to this collection.</summary>
      <param name="value">An array of type <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> objects that contains the permission entries to add.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.AddRange(System.Diagnostics.PerformanceCounterPermissionEntryCollection)">
      <summary>Appends a set of specified permission entries to this collection.</summary>
      <param name="value">A <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection"></see> that contains the permission entries to add.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Contains(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>Determines whether this collection contains a specified <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> object.</summary>
      <param name="value">The <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> object to find.</param>
      <returns>true if the specified <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> object belongs to this collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.CopyTo(System.Diagnostics.PerformanceCounterPermissionEntry[],System.Int32)">
      <summary>Copies the permission entries from this collection to an array, starting at a particular index of the array.</summary>
      <param name="array">An array of type <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> that receives this collection's permission entries.</param>
      <param name="index">The zero-based index at which to begin copying the permission entries.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.IndexOf(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>Determines the index of a specified permission entry in this collection.</summary>
      <param name="value">The permission entry for which to search.</param>
      <returns>The zero-based index of the specified permission entry, or -1 if the permission entry was not found in the collection.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Insert(System.Int32,System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>Inserts a permission entry into this collection at a specified index.</summary>
      <param name="index">The zero-based index of the collection at which to insert the permission entry.</param>
      <param name="value">The permission entry to insert into this collection.</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Item(System.Int32)">
      <summary>Gets or sets the object at a specified index.</summary>
      <param name="index">The zero-based index into the collection.</param>
      <returns>The <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"></see> object that exists at the specified index.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnClear">
      <summary>Performs additional custom processes after clearing the contents of the collection.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnInsert(System.Int32,System.Object)">
      <summary>Performs additional custom processes before a new permission entry is inserted into the collection.</summary>
      <param name="index">The zero-based index at which to insert value.</param>
      <param name="value">The new value of the permission entry at index.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnRemove(System.Int32,System.Object)">
      <summary>Performs additional custom processes when removing a new permission entry from the collection.</summary>
      <param name="index">The zero-based index at which value can be found.</param>
      <param name="value">The permission entry to remove from index.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>Performs additional custom processes before setting a value in the collection.</summary>
      <param name="index">The zero-based index at which oldValue can be found.</param>
      <param name="oldValue">The value to replace with newValue.</param>
      <param name="newValue">The new value of the permission entry at index.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Remove(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>Removes a specified permission entry from this collection.</summary>
      <param name="value">The permission entry to remove.</param>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterType">
      <summary>Specifies the formula used to calculate the <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"></see> method for a <see cref="T:System.Diagnostics.PerformanceCounter"></see> instance.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.AverageBase">
      <summary>A base counter that is used in the calculation of time or count averages, such as AverageTimer32 and AverageCount64. Stores the denominator for calculating a counter to present &quot;time per operation&quot; or &quot;count per operation&quot;.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.AverageCount64">
      <summary>An average counter that shows how many items are processed, on average, during an operation. Counters of this type display a ratio of the items processed to the number of operations completed. The ratio is calculated by comparing the number of items processed during the last interval to the number of operations completed during the last interval.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.AverageTimer32">
      <summary>An average counter that measures the time it takes, on average, to complete a process or operation. Counters of this type display a ratio of the total elapsed time of the sample interval to the number of processes or operations completed during that time. This counter type measures time in ticks of the system clock.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterDelta32">
      <summary>A difference counter that shows the change in the measured attribute between the two most recent sample intervals.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterDelta64">
      <summary>A difference counter that shows the change in the measured attribute between the two most recent sample intervals. It is the same as the CounterDelta32 counter type except that is uses larger fields to accomodate larger values.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiBase">
      <summary>A base counter that indicates the number of items sampled. It is used as the denominator in the calculations to get an average among the items sampled when taking timings of multiple, but similar items. Used with CounterMultiTimer, CounterMultiTimerInverse, CounterMultiTimer100Ns, and CounterMultiTimer100NsInverse.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer">
      <summary>A percentage counter that displays the active time of one or more components as a percentage of the total time of the sample interval. Because the numerator records the active time of components operating simultaneously, the resulting percentage can exceed 100 percent.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns">
      <summary>A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. It measures time in 100 nanosecond (ns) units.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse">
      <summary>A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. Counters of this type measure time in 100 nanosecond (ns) units. They derive the active time by measuring the time that the components were not active and subtracting the result from multiplying 100 percent by the number of objects monitored.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse">
      <summary>A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. It derives the active time by measuring the time that the components were not active and subtracting the result from 100 percent by the number of objects monitored.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterTimer">
      <summary>A percentage counter that shows the average time that a component is active as a percentage of the total sample time.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterTimerInverse">
      <summary>A percentage counter that displays the average percentage of active time observed during sample interval. The value of these counters is calculated by monitoring the percentage of time that the service was inactive and then subtracting that value from 100 percent.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32">
      <summary>An average counter designed to monitor the average length of a queue to a resource over time. It shows the difference between the queue lengths observed during the last two sample intervals divided by the duration of the interval. This type of counter is typically used to track the number of items that are queued or waiting.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64">
      <summary>An average counter that monitors the average length of a queue to a resource over time. Counters of this type display the difference between the queue lengths observed during the last two sample intervals, divided by the duration of the interval. This counter type is the same as CountPerTimeInterval32 except that it uses larger fields to accommodate larger values. This type of counter is typically used to track a high-volume or very large number of items that are queued or waiting.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.ElapsedTime">
      <summary>A difference timer that shows the total time between when the component or process started and the time when this value is calculated.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItems32">
      <summary>An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of items or operations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItems64">
      <summary>An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of a very large number of items or operations. It is the same as NumberOfItems32 except that it uses larger fields to accommodate larger values.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32">
      <summary>An instantaneous counter that shows the most recently observed value in hexadecimal format. Used, for example, to maintain a simple count of items or operations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64">
      <summary>An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of a very large number of items or operations. It is the same as NumberOfItemsHEX32 except that it uses larger fields to accommodate larger values.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32">
      <summary>A difference counter that shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64">
      <summary>A difference counter that shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock. This counter type is the same as the RateOfCountsPerSecond32 type, but it uses larger fields to accommodate larger values to track a high-volume number of items or operations per second, such as a byte-transmission rate.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RawBase">
      <summary>A base counter that stores the denominator of a counter that presents a general arithmetic fraction. Check that this value is greater than zero before using it as the denominator in a RawFraction value calculation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RawFraction">
      <summary>An instantaneous percentage counter that shows the ratio of a subset to its set as a percentage. For example, it compares the number of bytes in use on a disk to the total number of bytes on the disk. Counters of this type display the current percentage only, not an average over time.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.SampleBase">
      <summary>A base counter that stores the number of sampling interrupts taken and is used as a denominator in the sampling fraction. The sampling fraction is the number of samples that were 1 (or true) for a sample interrupt. Check that this value is greater than zero before using it as the denominator in a calculation of SampleFraction.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.SampleCounter">
      <summary>An average counter that shows the average number of operations completed in one second. When a counter of this type samples the data, each sampling interrupt returns one or zero. The counter data is the number of ones that were sampled. It measures time in units of ticks of the system performance timer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.SampleFraction">
      <summary>A percentage counter that shows the average ratio of hits to all operations during the last two sample intervals.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.Timer100Ns">
      <summary>A percentage counter that shows the active time of a component as a percentage of the total elapsed time of the sample interval. It measures time in units of 100 nanoseconds (ns). Counters of this type are designed to measure the activity of one component at a time.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.Timer100NsInverse">
      <summary>A percentage counter that shows the average percentage of active time observed during the sample interval.</summary>
      <returns></returns>
    </member>
    <member name="T:System.GenericUriParser">
      <summary>A customizable parser for a hierarchical URI.</summary>
    </member>
    <member name="M:System.GenericUriParser.#ctor(System.GenericUriParserOptions)">
      <summary>Create a customizable parser for a hierarchical URI.</summary>
      <param name="options">Specify the options for this <see cref="T:System.GenericUriParser"></see>.</param>
    </member>
    <member name="T:System.GenericUriParserOptions">
      <summary>Specifies options for a <see cref="T:System.UriParser"></see>.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.AllowEmptyAuthority">
      <summary>The parser allows a URI with no authority.</summary>
      <returns></returns>
    </member>
    <member name="F:System.GenericUriParserOptions.Default">
      <summary>The parser:</summary>
      <returns></returns>
    </member>
    <member name="F:System.GenericUriParserOptions.DontCompressPath">
      <summary>The parser does not canonicalize the URI.</summary>
      <returns></returns>
    </member>
    <member name="F:System.GenericUriParserOptions.DontConvertPathBackslashes">
      <summary>The parser does not convert back slashes into forward slashes.</summary>
      <returns></returns>
    </member>
    <member name="F:System.GenericUriParserOptions.DontUnescapePathDotsAndSlashes">
      <summary>The parser does not unescape path dots, forward slashes, or back slashes.</summary>
      <returns></returns>
    </member>
    <member name="F:System.GenericUriParserOptions.GenericAuthority">
      <summary>The parser allows a registry-based authority.</summary>
      <returns></returns>
    </member>
    <member name="F:System.GenericUriParserOptions.Idn">
      <summary>The parser supports Internationalized Domain Name (IDN) parsing (IDN) of host names. Whether IDN is used is dictated by configuration values.</summary>
      <returns></returns>
    </member>
    <member name="F:System.GenericUriParserOptions.IriParsing">
      <summary>The parser supports the parsing rules specified in RFC 3987 for International Resource Identifiers (IRI). Whether IRI is used is dictated by configuration values.</summary>
      <returns></returns>
    </member>
    <member name="F:System.GenericUriParserOptions.NoFragment">
      <summary>The scheme does not define a fragment part.</summary>
      <returns></returns>
    </member>
    <member name="F:System.GenericUriParserOptions.NoPort">
      <summary>The scheme does not define a port.</summary>
      <returns></returns>
    </member>
    <member name="F:System.GenericUriParserOptions.NoQuery">
      <summary>The scheme does not define a query part.</summary>
      <returns></returns>
    </member>
    <member name="F:System.GenericUriParserOptions.NoUserInfo">
      <summary>The scheme does not define a user information part.</summary>
      <returns></returns>
    </member>
    <member name="T:System.GopherStyleUriParser">
      <summary>A customizable parser based on the Gopher scheme.</summary>
    </member>
    <member name="M:System.GopherStyleUriParser.#ctor">
      <summary>Creates a customizable parser based on the Gopher scheme.</summary>
    </member>
    <member name="T:System.HttpStyleUriParser">
      <summary>A customizable parser based on the HTTP scheme.</summary>
    </member>
    <member name="M:System.HttpStyleUriParser.#ctor">
      <summary>Create a customizable parser based on the HTTP scheme.</summary>
    </member>
    <member name="T:System.Net.AuthenticationManager">
      <summary>Manages the authentication modules called during the client authentication process.</summary>
    </member>
    <member name="M:System.Net.AuthenticationManager.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)">
      <summary>Calls each registered authentication module to find the first module that can respond to the authentication request.</summary>
      <param name="challenge">The challenge returned by the Internet resource.</param>
      <param name="request">The <see cref="T:System.Net.WebRequest"></see> that initiated the authentication challenge.</param>
      <param name="credentials">The <see cref="T:System.Net.ICredentials"></see> associated with this request.</param>
      <returns>An instance of the <see cref="T:System.Net.Authorization"></see> class containing the result of the authorization attempt. If there is no authentication module to respond to the challenge, this method returns null.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="challenge">challenge</paramref> is null.   -or-  <paramref name="request">request</paramref> is null.   -or-  <paramref name="credentials">credentials</paramref> is null.</exception>
    </member>
    <member name="P:System.Net.AuthenticationManager.CredentialPolicy">
      <summary>Gets or sets the credential policy to be used for resource requests made using the <see cref="T:System.Net.HttpWebRequest"></see> class.</summary>
      <returns>An object that implements the <see cref="T:System.Net.ICredentialPolicy"></see> interface that determines whether credentials are sent with requests. The default value is null.</returns>
    </member>
    <member name="P:System.Net.AuthenticationManager.CustomTargetNameDictionary">
      <summary>Gets the dictionary that contains Service Principal Names (SPNs) that are used to identify hosts during Kerberos authentication for requests made using <see cref="T:System.Net.WebRequest"></see> and its derived classes.</summary>
      <returns>A writable <see cref="T:System.Collections.Specialized.StringDictionary"></see> that contains the SPN values for keys composed of host information.</returns>
    </member>
    <member name="M:System.Net.AuthenticationManager.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)">
      <summary>Preauthenticates a request.</summary>
      <param name="request">A <see cref="T:System.Net.WebRequest"></see> to an Internet resource.</param>
      <param name="credentials">The <see cref="T:System.Net.ICredentials"></see> associated with the request.</param>
      <returns>An instance of the <see cref="T:System.Net.Authorization"></see> class if the request can be preauthenticated; otherwise, null. If <paramref name="credentials">credentials</paramref> is null, this method returns null.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="request">request</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.AuthenticationManager.Register(System.Net.IAuthenticationModule)">
      <summary>Registers an authentication module with the authentication manager.</summary>
      <param name="authenticationModule">The <see cref="T:System.Net.IAuthenticationModule"></see> to register with the authentication manager.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="authenticationModule">authenticationModule</paramref> is null.</exception>
    </member>
    <member name="P:System.Net.AuthenticationManager.RegisteredModules">
      <summary>Gets a list of authentication modules that are registered with the authentication manager.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that enables the registered authentication modules to be read.</returns>
    </member>
    <member name="M:System.Net.AuthenticationManager.Unregister(System.Net.IAuthenticationModule)">
      <summary>Removes the specified authentication module from the list of registered modules.</summary>
      <param name="authenticationModule">The <see cref="T:System.Net.IAuthenticationModule"></see> to remove from the list of registered modules.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="authenticationModule">authenticationModule</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The specified <see cref="T:System.Net.IAuthenticationModule"></see> is not registered.</exception>
    </member>
    <member name="M:System.Net.AuthenticationManager.Unregister(System.String)">
      <summary>Removes authentication modules with the specified authentication scheme from the list of registered modules.</summary>
      <param name="authenticationScheme">The authentication scheme of the module to remove.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="authenticationScheme">authenticationScheme</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">A module for this authentication scheme is not registered.</exception>
    </member>
    <member name="T:System.Net.AuthenticationSchemes">
      <summary>Specifies protocols for authentication.</summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Anonymous">
      <summary>Specifies anonymous authentication.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Basic">
      <summary>Specifies basic authentication.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Digest">
      <summary>Specifies digest authentication.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.IntegratedWindowsAuthentication">
      <summary>Specifies Windows authentication.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Negotiate">
      <summary>Negotiates with the client to determine the authentication scheme. If both client and server support Kerberos, it is used; otherwise, NTLM is used.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.None">
      <summary>No authentication is allowed. A client requesting an <see cref="T:System.Net.HttpListener"></see> object with this flag set will always receive a 403 Forbidden status. Use this flag when a resource should never be served to a client.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Ntlm">
      <summary>Specifies NTLM authentication.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.AuthenticationSchemeSelector">
      <summary>Selects the authentication scheme for an <see cref="T:System.Net.HttpListener"></see> instance.</summary>
      <param name="httpRequest">The <see cref="T:System.Net.HttpListenerRequest"></see> instance for which to select an authentication scheme.</param>
      <returns></returns>
    </member>
    <member name="T:System.Net.Authorization">
      <summary>Contains an authentication message for an Internet server.</summary>
    </member>
    <member name="M:System.Net.Authorization.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Net.Authorization"></see> class with the specified authorization message.</summary>
      <param name="token">The encrypted authorization message expected by the server.</param>
    </member>
    <member name="M:System.Net.Authorization.#ctor(System.String,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.Net.Authorization"></see> class with the specified authorization message and completion status.</summary>
      <param name="token">The encrypted authorization message expected by the server.</param>
      <param name="finished">The completion status of the authorization attempt. true if the authorization attempt is complete; otherwise, false.</param>
    </member>
    <member name="M:System.Net.Authorization.#ctor(System.String,System.Boolean,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Net.Authorization"></see> class with the specified authorization message, completion status, and connection group identifier.</summary>
      <param name="token">The encrypted authorization message expected by the server.</param>
      <param name="finished">The completion status of the authorization attempt. true if the authorization attempt is complete; otherwise, false.</param>
      <param name="connectionGroupId">A unique identifier that can be used to create private client-server connections that are bound only to this authentication scheme.</param>
    </member>
    <member name="P:System.Net.Authorization.Complete">
      <summary>Gets the completion status of the authorization.</summary>
      <returns>true if the authentication process is complete; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Authorization.ConnectionGroupId">
      <summary>Gets a unique identifier for user-specific connections.</summary>
      <returns>A unique string that associates a connection with an authenticating entity.</returns>
    </member>
    <member name="P:System.Net.Authorization.Message">
      <summary>Gets the message returned to the server in response to an authentication challenge.</summary>
      <returns>The message that will be returned to the server in response to an authentication challenge.</returns>
    </member>
    <member name="P:System.Net.Authorization.MutuallyAuthenticated">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that indicates whether mutual authentication occurred.</summary>
      <returns>true if both client and server were authenticated; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Authorization.ProtectionRealm">
      <summary>Gets or sets the prefix for Uniform Resource Identifiers (URIs) that can be authenticated with the <see cref="P:System.Net.Authorization.Message"></see> property.</summary>
      <returns>An array of strings that contains URI prefixes.</returns>
    </member>
    <member name="T:System.Net.BindIPEndPoint">
      <summary>Represents the method that specifies a local Internet Protocol address and port number for a <see cref="T:System.Net.ServicePoint"></see>.</summary>
      <param name="servicePoint">The <see cref="T:System.Net.ServicePoint"></see> associated with the connection to be created.</param>
      <param name="remoteEndPoint">The remote <see cref="T:System.Net.IPEndPoint"></see> that specifies the remote host.</param>
      <param name="retryCount">The number of times this delegate was called for a specified connection.</param>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ADVF">
      <summary>Specifies the requested behavior when setting up an advise sink or a caching connection with an object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_DATAONSTOP">
      <summary>For data advisory connections, assures accessibility to data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_NODATA">
      <summary>For data advisory connections (<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)"></see> or <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)"></see>), this flag requests the data object not to send data when it calls <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_ONLYONCE">
      <summary>Requests that the object make only one change notification or cache update before deleting the connection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_PRIMEFIRST">
      <summary>Requests that the object not wait for the data or view to change before making an initial call to <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see> (for data or view advisory connections) or updating the cache (for cache connections).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN">
      <summary>This value is used by DLL object applications and object handlers that perform the drawing of their objects.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_NOHANDLER">
      <summary>Synonym for <see cref="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN"></see>, which is used more often.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_ONSAVE">
      <summary>For cache connections, this flag updates the cached representation only when the object containing the cache is saved.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DATADIR">
      <summary>Specifies the direction of the data flow in the <paramref name="dwDirection">dwDirection</paramref> parameter of the <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)"></see> method. This determines the formats that the resulting enumerator can enumerate.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_GET">
      <summary>Requests that <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)"></see> supply an enumerator for the formats that can be specified in <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_SET">
      <summary>Requests that <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)"></see> supply an enumerator for the formats that can be specified in <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)"></see>.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DVASPECT">
      <summary>Specifies the desired data or view aspect of the object when drawing or getting data.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT">
      <summary>A representation of an object that lets that object be displayed as an embedded object inside a container. This value is typically specified for compound document objects. The presentation can be provided for the screen or printer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_DOCPRINT">
      <summary>A representation of an object on the screen as though it were printed to a printer using the Print command from the File menu. The described data may represent a sequence of pages.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_ICON">
      <summary>An iconic representation of an object.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_THUMBNAIL">
      <summary>A thumbnail representation of an object that lets that object be displayed in a browsing tool. The thumbnail is approximately a 120 by 120 pixel, 16-color (recommended), device-independent bitmap potentially wrapped in a metafile.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FORMATETC">
      <summary>Represents a generalized Clipboard format.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.cfFormat">
      <summary>Specifies the particular clipboard format of interest.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect">
      <summary>Specifies one of the <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT"></see> enumeration constants that indicates how much detail should be contained in the rendering.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex">
      <summary>Specifies part of the aspect when the data must be split across page boundaries.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.ptd">
      <summary>Specifies a pointer to a DVTARGETDEVICE structure containing information about the target device that the data is being composed for.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed">
      <summary>Specifies one of the <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED"></see> enumeration constants, which indicates the type of storage medium used to transfer the object's data.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IAdviseSink">
      <summary>Provides a managed definition of the IAdviseSink interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnClose">
      <summary>Notifies all registered advisory sinks that the object has changed from the running state to the loaded state.  This method is called by a server.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Notifies all data objects currently registered advisory sinks that data in the object has changed.</summary>
      <param name="format">A <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see>, passed by reference, which describes the format, target device, rendering, and storage information of the calling data object.</param>
      <param name="stgmedium">A <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see>, passed by reference, which defines the storage medium (global memory, disk file, storage object, stream object, Graphics Device Interface (GDI) object, or undefined) and ownership of that medium for the calling data object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Notifies all registered advisory sinks that the object has been renamed. This method is called by a server.</summary>
      <param name="moniker">A pointer to the IMoniker interface on the new full moniker of the object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnSave">
      <summary>Notifies all registered advisory sinks that the object has been saved. This method is called by a server.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnViewChange(System.Int32,System.Int32)">
      <summary>Notifies an object's registered advisory sinks that its view has changed. This method is called by a server.</summary>
      <param name="aspect">The aspect, or view, of the object. Contains a value taken from the <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT"></see> enumeration.</param>
      <param name="index">The portion of the view that has changed. Currently, only -1 is valid.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDataObject">
      <summary>Provides the managed definition of the IDataObject interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary>Creates a connection between a data object and an advisory sink. This method is called by an object that supports an advisory sink and enables the advisory sink to be notified of changes in the object's data.</summary>
      <param name="pFormatetc">A <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure, passed by reference, that defines the format, target device, aspect, and medium that will be used for future notifications.</param>
      <param name="advf">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF"></see> values that specifies a group of flags for controlling the advisory connection.</param>
      <param name="adviseSink">A pointer to the <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink"></see> interface on the advisory sink that will receive the change notification.</param>
      <param name="connection">When this method returns, contains a pointer to a DWORD token that identifies this connection. You can use this token later to delete the advisory connection by passing it to <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)"></see>. If this value is zero, the connection was not established. This parameter is passed uninitialized.</param>
      <returns><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="2"><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="1">This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  </p>
 <table><thead><tr><th> Value  <p>
<p sourcefile="System.yml" sourcestartlinenumber="4" sourceendlinenumber="4"> </th><th> Description  <p>
<p sourcefile="System.yml" sourcestartlinenumber="6" sourceendlinenumber="6"> </th></tr></thead><tbody><tr><td> S_OK  <p>
<p sourcefile="System.yml" sourcestartlinenumber="8" sourceendlinenumber="8"> </td><td> The advisory connection was created.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="10" sourceendlinenumber="10"> </td></tr><tr><td> E_NOTIMPL  <p>
<p sourcefile="System.yml" sourcestartlinenumber="12" sourceendlinenumber="12"> </td><td> This method is not implemented on the data object.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="14" sourceendlinenumber="14"> </td></tr><tr><td> DV_E_LINDEX  <p>
<p sourcefile="System.yml" sourcestartlinenumber="16" sourceendlinenumber="16"> </td><td> There is an invalid value for <xref href="System.Runtime.InteropServices.ComTypes.FORMATETC.lindex"></xref>; currently, only -1 is supported.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="18" sourceendlinenumber="18"> </td></tr><tr><td> DV_E_FORMATETC  <p>
<p sourcefile="System.yml" sourcestartlinenumber="20" sourceendlinenumber="20"> </td><td> There is an invalid value for the <code data-dev-comment-type="paramref">pFormatetc</code> parameter.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="22" sourceendlinenumber="22"> </td></tr><tr><td> OLE_E_ADVISENOTSUPPORTED  <p>
<p sourcefile="System.yml" sourcestartlinenumber="24" sourceendlinenumber="24"> </td><td> The data object does not support change notification.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="26" sourceendlinenumber="26"> </td></tr></tbody></table></p>
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)">
      <summary>Destroys a notification connection that had been previously established.</summary>
      <param name="connection">A DWORD token that specifies the connection to remove. Use the value returned by <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)"></see> when the connection was originally established.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>Creates an object that can be used to enumerate the current advisory connections.</summary>
      <param name="enumAdvise">When this method returns, contains an <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA"></see> that receives the interface pointer to the new enumerator object. If the implementation sets enumAdvise to null, there are no connections to advisory sinks at this time. This parameter is passed uninitialized.</param>
      <returns><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="2"><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="1">This method supports the standard return value E_OUTOFMEMORY, as well as the following:  </p>
 <table><thead><tr><th> Value  <p>
<p sourcefile="System.yml" sourcestartlinenumber="4" sourceendlinenumber="4"> </th><th> Description  <p>
<p sourcefile="System.yml" sourcestartlinenumber="6" sourceendlinenumber="6"> </th></tr></thead><tbody><tr><td> S_OK  <p>
<p sourcefile="System.yml" sourcestartlinenumber="8" sourceendlinenumber="8"> </td><td> The enumerator object is successfully instantiated or there are no connections.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="10" sourceendlinenumber="10"> </td></tr><tr><td> OLE_E_ADVISENOTSUPPORTED  <p>
<p sourcefile="System.yml" sourcestartlinenumber="12" sourceendlinenumber="12"> </td><td> This object does not support advisory notifications.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="14" sourceendlinenumber="14"> </td></tr></tbody></table></p>
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary>Creates an object for enumerating the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structures for a data object. These structures are used in calls to <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see> or <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)"></see>.</summary>
      <param name="direction">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR"></see> values that specifies the direction of the data.</param>
      <returns><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="2"><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="1">This method supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following:  </p>
 <table><thead><tr><th> Value  <p>
<p sourcefile="System.yml" sourcestartlinenumber="4" sourceendlinenumber="4"> </th><th> Description  <p>
<p sourcefile="System.yml" sourcestartlinenumber="6" sourceendlinenumber="6"> </th></tr></thead><tbody><tr><td> S_OK  <p>
<p sourcefile="System.yml" sourcestartlinenumber="8" sourceendlinenumber="8"> </td><td> The enumerator object was successfully created.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="10" sourceendlinenumber="10"> </td></tr><tr><td> E_NOTIMPL  <p>
<p sourcefile="System.yml" sourcestartlinenumber="12" sourceendlinenumber="12"> </td><td> The direction specified by the <code data-dev-comment-type="paramref">direction</code> parameter is not supported.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="14" sourceendlinenumber="14"> </td></tr><tr><td> OLE_S_USEREG  <p>
<p sourcefile="System.yml" sourcestartlinenumber="16" sourceendlinenumber="16"> </td><td> Requests that OLE enumerate the formats from the registry.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="18" sourceendlinenumber="18"> </td></tr></tbody></table></p>
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>Provides a standard <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure that is logically equivalent to a more complex structure. Use this method to determine whether two different <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structures would return the same data, removing the need for duplicate rendering.</summary>
      <param name="formatIn">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure, passed by reference, that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call such as <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see>. The <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED"></see> member is not significant in this case and should be ignored.</param>
      <param name="formatOut">When this method returns, contains a pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure that contains the most general information possible for a specific rendering, making it canonically equivalent to formatetIn. The caller must allocate this structure and the <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)"></see> method must fill in the data. To retrieve data in a subsequent call such as <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see>, the caller uses the supplied value of formatOut, unless the value supplied is null. This value is null if the method returns DATA_S_SAMEFORMATETC. The <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED"></see> member is not significant in this case and should be ignored. This parameter is passed uninitialized.</param>
      <returns><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="2"><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="1">This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  </p>
 <table><thead><tr><th> Value  <p>
<p sourcefile="System.yml" sourcestartlinenumber="4" sourceendlinenumber="4"> </th><th> Description  <p>
<p sourcefile="System.yml" sourcestartlinenumber="6" sourceendlinenumber="6"> </th></tr></thead><tbody><tr><td> S_OK  <p>
<p sourcefile="System.yml" sourcestartlinenumber="8" sourceendlinenumber="8"> </td><td> The returned <xref href="System.Runtime.InteropServices.ComTypes.FORMATETC"></xref> structure is different from the one that was passed.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="10" sourceendlinenumber="10"> </td></tr><tr><td> DATA_S_SAMEFORMATETC  <p>
<p sourcefile="System.yml" sourcestartlinenumber="12" sourceendlinenumber="12"> </td><td> The <xref href="System.Runtime.InteropServices.ComTypes.FORMATETC"></xref> structures are the same and <code>null</code> is returned in the <code data-dev-comment-type="paramref">formatOut</code> parameter.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="14" sourceendlinenumber="14"> </td></tr><tr><td> DV_E_LINDEX  <p>
<p sourcefile="System.yml" sourcestartlinenumber="16" sourceendlinenumber="16"> </td><td> There is an invalid value for <xref href="System.Runtime.InteropServices.ComTypes.FORMATETC.lindex"></xref>; currently, only -1 is supported.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="18" sourceendlinenumber="18"> </td></tr><tr><td> DV_E_FORMATETC  <p>
<p sourcefile="System.yml" sourcestartlinenumber="20" sourceendlinenumber="20"> </td><td> There is an invalid value for the <code data-dev-comment-type="paramref">pFormatetc</code> parameter.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="22" sourceendlinenumber="22"> </td></tr><tr><td> OLE_E_NOTRUNNING  <p>
<p sourcefile="System.yml" sourcestartlinenumber="24" sourceendlinenumber="24"> </td><td> The application is not running.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="26" sourceendlinenumber="26"> </td></tr></tbody></table></p>
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Obtains data from a source data object. The <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see> method, which is called by a data consumer, renders the data described in the specified <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure and transfers it through the specified <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see> structure. The caller then assumes responsibility for releasing the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see> structure.</summary>
      <param name="format">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure, passed by reference, that defines the format, medium, and target device to use when passing the data. It is possible to specify more than one medium by using the Boolean OR operator, allowing the method to choose the best medium among those specified.</param>
      <param name="medium">When this method returns, contains a pointer to the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see> structure that indicates the storage medium containing the returned data through its <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed"></see> member, and the responsibility for releasing the medium through the value of its <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> member. If <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> is null, the receiver of the medium is responsible for releasing it; otherwise, <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> points to the IUnknown interface on the appropriate object so its Release method can be called. The medium must be allocated and filled in by <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see>. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Obtains data from a source data object. This method, which is called by a data consumer, differs from the <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see> method in that the caller must allocate and free the specified storage medium.</summary>
      <param name="format">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure, passed by reference, that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED"></see>, and only the following <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED"></see> values are valid: <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE"></see>, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM"></see>, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL"></see>, or <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE"></see>.</param>
      <param name="medium">A <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see>, passed by reference, that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see>. The caller must also free the medium. The implementation of this method must always supply a value of null for the <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> member of the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see> structure that this parameter points to.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>Determines whether the data object is capable of rendering the data described in the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure. Objects attempting a paste or drop operation can call this method before calling <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></see> to get an indication of whether the operation may be successful.</summary>
      <param name="format">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure, passed by reference, that defines the format, medium, and target device to use for the query.</param>
      <returns><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="2"><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="1">This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  </p>
 <table><thead><tr><th> Value  <p>
<p sourcefile="System.yml" sourcestartlinenumber="4" sourceendlinenumber="4"> </th><th> Description  <p>
<p sourcefile="System.yml" sourcestartlinenumber="6" sourceendlinenumber="6"> </th></tr></thead><tbody><tr><td> S_OK  <p>
<p sourcefile="System.yml" sourcestartlinenumber="8" sourceendlinenumber="8"> </td><td> A subsequent call to <xref href="System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"></xref> would probably be successful.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="10" sourceendlinenumber="10"> </td></tr><tr><td> DV_E_LINDEX  <p>
<p sourcefile="System.yml" sourcestartlinenumber="12" sourceendlinenumber="12"> </td><td> An invalid value for <xref href="System.Runtime.InteropServices.ComTypes.FORMATETC.lindex"></xref>; currently, only -1 is supported.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="14" sourceendlinenumber="14"> </td></tr><tr><td> DV_E_FORMATETC  <p>
<p sourcefile="System.yml" sourcestartlinenumber="16" sourceendlinenumber="16"> </td><td> An invalid value for the <code data-dev-comment-type="paramref">pFormatetc</code> parameter.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="18" sourceendlinenumber="18"> </td></tr><tr><td> DV_E_TYMED  <p>
<p sourcefile="System.yml" sourcestartlinenumber="20" sourceendlinenumber="20"> </td><td> An invalid <xref href="System.Runtime.InteropServices.ComTypes.FORMATETC.tymed"></xref> value.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="22" sourceendlinenumber="22"> </td></tr><tr><td> DV_E_DVASPECT  <p>
<p sourcefile="System.yml" sourcestartlinenumber="24" sourceendlinenumber="24"> </td><td> An invalid <xref href="System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect"></xref> value.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="26" sourceendlinenumber="26"> </td></tr><tr><td> OLE_E_NOTRUNNING  <p>
<p sourcefile="System.yml" sourcestartlinenumber="28" sourceendlinenumber="28"> </td><td> The application is not running.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="30" sourceendlinenumber="30"> </td></tr></tbody></table></p>
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary>Transfers data to the object that implements this method. This method is called by an object that contains a data source.</summary>
      <param name="formatIn">A <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium.</param>
      <param name="medium">A <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see> structure, passed by reference, that defines the storage medium in which the data is being passed.</param>
      <param name="release">true to specify that the data object called, which implements <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)"></see>, owns the storage medium after the call returns. This means that the data object must free the medium after it has been used by calling the ReleaseStgMedium function. false to specify that the caller retains ownership of the storage medium, and the data object called uses the storage medium for the duration of the call only.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC">
      <summary>Provides the managed definition of the IEnumFORMATETC interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
      <summary>Creates a new enumerator that contains the same enumeration state as the current enumerator.</summary>
      <param name="newEnum">When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> references to return in rgelt.</param>
      <param name="rgelt">When this method returns, contains a reference to the enumerated <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> references. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this method returns, contains a reference to the actual number of references enumerated in rgelt. This parameter is passed uninitialized.</param>
      <returns>S_OK if the <paramref name="pceltFetched">pceltFetched</paramref> parameter equals the <paramref name="celt">celt</paramref> parameter; otherwise, S_FALSE.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>An HRESULT with the value S_OK.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>S_OK if the number of elements skipped equals the <paramref name="celt">celt</paramref> parameter; otherwise, S_FALSE.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA">
      <summary>Provides the managed definition of the IEnumSTATDATA interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Clone(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>Creates a new enumerator that contains the same enumeration state as the current enumerator.</summary>
      <param name="newEnum">When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATDATA[],System.Int32[])">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA"></see> references to return in rgelt.</param>
      <param name="rgelt">When this method returns, contains a reference to the enumerated <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA"></see> references. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this parameter returns, contains a reference to the actual number of references enumerated in rgelt. This parameter is passed uninitialized.</param>
      <returns>S_OK if the <paramref name="pceltFetched">pceltFetched</paramref> parameter equals the <paramref name="celt">celt</paramref> parameter; otherwise, S_FALSE.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>An HRESULT with the value S_OK.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>S_OK if the number of elements skipped equals the <paramref name="celt">celt</paramref> parameter; otherwise, S_FALSE.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATDATA">
      <summary>Provides the managed definition of the STATDATA structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advf">
      <summary>Represents the <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF"></see> enumeration value that determines when the advisory sink is notified of changes in the data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advSink">
      <summary>Represents the <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink"></see> interface that will receive change notifications.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.connection">
      <summary>Represents the token that uniquely identifies the advisory connection. This token is returned by the method that sets up the advisory connection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.formatetc">
      <summary>Represents the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure for the data of interest to the advise sink. The advise sink receives notification of changes to the data specified by this <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"></see> structure.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM">
      <summary>Provides the managed definition of the STGMEDIUM structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease">
      <summary>Represents a pointer to an interface instance that allows the sending process to control the way the storage is released when the receiving process calls the ReleaseStgMedium function. If <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> is null, ReleaseStgMedium uses default procedures to release the storage; otherwise, ReleaseStgMedium uses the specified IUnknown interface.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed">
      <summary>Specifies the type of storage medium. The marshaling and unmarshaling routines use this value to determine which union member was used. This value must be one of the elements of the <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED"></see> enumeration.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.unionmember">
      <summary>Represents a handle, string, or interface pointer that the receiving process can use to access the data being transferred.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYMED">
      <summary>Provides the managed definition of the TYMED structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ENHMF">
      <summary>The storage medium is an enhanced metafile. If the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> member is null, the destination process should use DeleteEnhMetaFile to delete the bitmap.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE">
      <summary>The storage medium is a disk file identified by a path. If the STGMEDIUM<see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> member is null, the destination process should use OpenFile to delete the file.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_GDI">
      <summary>The storage medium is a Graphics Device Interface (GDI) component (HBITMAP). If the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> member is null, the destination process should use DeleteObject to delete the bitmap.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL">
      <summary>The storage medium is a global memory handle (HGLOBAL). Allocate the global handle with the GMEM_SHARE flag. If the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> member is null, the destination process should use GlobalFree to release the memory.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE">
      <summary>The storage medium is a storage component identified by an IStorage pointer. The data is in the streams and storages contained by this IStorage instance. If the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> member is not null, the destination process should use IStorage::Release to release the storage component.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM">
      <summary>The storage medium is a stream object identified by an IStream pointer. Use ISequentialStream::Read to read the data. If the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> member is not null, the destination process should use IStream::Release to release the stream component.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_MFPICT">
      <summary>The storage medium is a metafile (HMETAFILE). Use the Windows or WIN32 functions to access the metafile's data. If the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM"></see><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"></see> member is null, the destination process should use DeleteMetaFile to delete the bitmap.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_NULL">
      <summary>No data is being passed.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.Versioning.FrameworkName">
      <summary>Represents the name of a version of the .NET Framework.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Versioning.FrameworkName"></see> class from a string that contains information about a version of the .NET Framework.</summary>
      <param name="frameworkName">A string that contains .NET Framework version information.</param>
      <exception cref="T:System.ArgumentException"><paramref name="frameworkName">frameworkName</paramref> is <see cref="F:System.String.Empty"></see>.   -or-  <paramref name="frameworkName">frameworkName</paramref> has fewer than two components or more than three components.   -or-  <paramref name="frameworkName">frameworkName</paramref> does not include a major and minor version number.   -or-  <paramref name="frameworkName">frameworkName</paramref> does not include a valid version number.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="frameworkName">frameworkName</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Versioning.FrameworkName"></see> class from a string and a <see cref="T:System.Version"></see> object that identify a .NET Framework version.</summary>
      <param name="identifier">A string that identifies a .NET Framework version.</param>
      <param name="version">An object that contains .NET Framework version information.</param>
      <exception cref="T:System.ArgumentException"><paramref name="identifier">identifier</paramref> is <see cref="F:System.String.Empty"></see>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="identifier">identifier</paramref> is null.   -or-  <paramref name="version">version</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Versioning.FrameworkName"></see> class from a string, a <see cref="T:System.Version"></see> object that identifies a .NET Framework version, and a profile name.</summary>
      <param name="identifier">A string that identifies a .NET Framework version.</param>
      <param name="version">An object that contains .NET Framework version information.</param>
      <param name="profile">A profile name.</param>
      <exception cref="T:System.ArgumentException"><paramref name="identifier">identifier</paramref> is <see cref="F:System.String.Empty"></see>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="identifier">identifier</paramref> is null.   -or-  <paramref name="version">version</paramref> is null.</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Object)">
      <summary>Returns a value that indicates whether this <see cref="T:System.Runtime.Versioning.FrameworkName"></see> instance represents the same .NET Framework version as a specified object.</summary>
      <param name="obj">The object to compare to the current instance.</param>
      <returns>true if every component of the current <see cref="T:System.Runtime.Versioning.FrameworkName"></see> object matches the corresponding component of <paramref name="obj">obj</paramref>; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)">
      <summary>Returns a value that indicates whether this <see cref="T:System.Runtime.Versioning.FrameworkName"></see> instance represents the same .NET Framework version as a specified <see cref="T:System.Runtime.Versioning.FrameworkName"></see> instance.</summary>
      <param name="other">The object to compare to the current instance.</param>
      <returns>true if every component of the current <see cref="T:System.Runtime.Versioning.FrameworkName"></see> object matches the corresponding component of <paramref name="other">other</paramref>; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.FullName">
      <summary>Gets the full name of this <see cref="T:System.Runtime.Versioning.FrameworkName"></see> object.</summary>
      <returns>The full name of this <see cref="T:System.Runtime.Versioning.FrameworkName"></see> object.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.GetHashCode">
      <summary>Returns the hash code for the <see cref="T:System.Runtime.Versioning.FrameworkName"></see> object.</summary>
      <returns>A 32-bit signed integer that represents the hash code of this instance.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Identifier">
      <summary>Gets the identifier of this <see cref="T:System.Runtime.Versioning.FrameworkName"></see> object.</summary>
      <returns>The identifier of this <see cref="T:System.Runtime.Versioning.FrameworkName"></see> object.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Runtime.Versioning.FrameworkName"></see> objects represent the same .NET Framework version.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>true if the <paramref name="left">left</paramref> and <paramref name="right">right</paramref> parameters represent the same .NET Framework version; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Runtime.Versioning.FrameworkName"></see> objects represent different .NET Framework versions.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>true if the <paramref name="left">left</paramref> and <paramref name="right">right</paramref> parameters represent different .NET Framework versions; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Profile">
      <summary>Gets the profile name of this <see cref="T:System.Runtime.Versioning.FrameworkName"></see> object.</summary>
      <returns>The profile name of this <see cref="T:System.Runtime.Versioning.FrameworkName"></see> object.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.ToString">
      <summary>Returns the string representation of this <see cref="T:System.Runtime.Versioning.FrameworkName"></see> object.</summary>
      <returns>A string that represents this <see cref="T:System.Runtime.Versioning.FrameworkName"></see> object.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Version">
      <summary>Gets the version of this <see cref="T:System.Runtime.Versioning.FrameworkName"></see> object.</summary>
      <returns>An object that contains version information about this <see cref="T:System.Runtime.Versioning.FrameworkName"></see> object.</returns>
    </member>
    <member name="T:System.Uri">
      <summary>Provides an object representation of a uniform resource identifier (URI) and easy access to the parts of the URI.</summary>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Uri"></see> class with the specified URI.</summary>
      <param name="uriString">A URI.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="uriString">uriString</paramref> is null.</exception>
      <exception cref="T:System.UriFormatException"><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="3"><block subset="none" type="note">
      <p><br> In the <a href="http://go.microsoft.com/fwlink/?LinkID=247912" data-raw-source="[.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912)" sourcefile="System.yml" sourcestartlinenumber="3" sourceendlinenumber="3">.NET for Windows Store apps</a> or the <a href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md" data-raw-source="[Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)" sourcefile="System.yml" sourcestartlinenumber="3" sourceendlinenumber="3">Portable Class Library</a>, catch the base class exception, <xref href="System.FormatException"></xref>, instead.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="5" sourceendlinenumber="7">
    </block>
    <code data-dev-comment-type="paramref">uriString</code> is empty.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="9" sourceendlinenumber="9"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="11" sourceendlinenumber="11"> The scheme specified in <code data-dev-comment-type="paramref">uriString</code> is not correctly formed. See <xref href="System.Uri.CheckSchemeName(System.String)"></xref>.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="13" sourceendlinenumber="13"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="15" sourceendlinenumber="15"> <code data-dev-comment-type="paramref">uriString</code> contains too many slashes.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="17" sourceendlinenumber="17"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="19" sourceendlinenumber="19"> The password specified in <code data-dev-comment-type="paramref">uriString</code> is not valid.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="21" sourceendlinenumber="21"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="23" sourceendlinenumber="23"> The host name specified in <code data-dev-comment-type="paramref">uriString</code> is not valid.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="25" sourceendlinenumber="25"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="27" sourceendlinenumber="27"> The file name specified in <code data-dev-comment-type="paramref">uriString</code> is not valid.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="29" sourceendlinenumber="29"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="31" sourceendlinenumber="31"> The user name specified in <code data-dev-comment-type="paramref">uriString</code> is not valid.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="33" sourceendlinenumber="33"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="35" sourceendlinenumber="35"> The host or authority name specified in <code data-dev-comment-type="paramref">uriString</code> cannot be terminated by backslashes.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="37" sourceendlinenumber="37"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="39" sourceendlinenumber="39"> The port number specified in <code data-dev-comment-type="paramref">uriString</code> is not valid or cannot be parsed.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="41" sourceendlinenumber="41"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="43" sourceendlinenumber="43"> The length of <code data-dev-comment-type="paramref">uriString</code> exceeds 65519 characters.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="45" sourceendlinenumber="45"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="47" sourceendlinenumber="47"> The length of the scheme specified in <code data-dev-comment-type="paramref">uriString</code> exceeds 1023 characters.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="49" sourceendlinenumber="49"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="51" sourceendlinenumber="51"> There is an invalid character sequence in <code data-dev-comment-type="paramref">uriString</code>.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="53" sourceendlinenumber="53"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="55" sourceendlinenumber="55"> The MS-DOS path specified in <code data-dev-comment-type="paramref">uriString</code> must start with c:\\.</p>
</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Uri"></see> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> classes.</summary>
      <param name="serializationInfo">An instance of the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> class containing the information required to serialize the new <see cref="T:System.Uri"></see> instance.</param>
      <param name="streamingContext">An instance of the <see cref="T:System.Runtime.Serialization.StreamingContext"></see> class containing the source of the serialized stream associated with the new <see cref="T:System.Uri"></see> instance.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="serializationInfo">serializationInfo</paramref> parameter contains a null URI.</exception>
      <exception cref="T:System.UriFormatException">The <paramref name="serializationInfo">serializationInfo</paramref> parameter contains a URI that is empty.   -or-   The scheme specified is not correctly formed. See <see cref="M:System.Uri.CheckSchemeName(System.String)"></see>.   -or-   The URI contains too many slashes.   -or-   The password specified in the URI is not valid.   -or-   The host name specified in URI is not valid.   -or-   The file name specified in the URI is not valid.   -or-   The user name specified in the URI is not valid.   -or-   The host or authority name specified in the URI cannot be terminated by backslashes.   -or-   The port number specified in the URI is not valid or cannot be parsed.   -or-   The length of URI exceeds 65519 characters.   -or-   The length of the scheme specified in the URI exceeds 1023 characters.   -or-   There is an invalid character sequence in the URI.   -or-   The MS-DOS path specified in the URI must start with c:\\.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Uri"></see> class with the specified URI, with explicit control of character escaping.</summary>
      <param name="uriString">The URI.</param>
      <param name="dontEscape">true if uriString is completely escaped; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="uriString">uriString</paramref> is null.</exception>
      <exception cref="T:System.UriFormatException"><paramref name="uriString">uriString</paramref> is empty or contains only spaces.   -or-   The scheme specified in <paramref name="uriString">uriString</paramref> is not valid.   -or-  <paramref name="uriString">uriString</paramref> contains too many slashes.   -or-   The password specified in <paramref name="uriString">uriString</paramref> is not valid.   -or-   The host name specified in <paramref name="uriString">uriString</paramref> is not valid.   -or-   The file name specified in <paramref name="uriString">uriString</paramref> is not valid.   -or-   The user name specified in <paramref name="uriString">uriString</paramref> is not valid.   -or-   The host or authority name specified in <paramref name="uriString">uriString</paramref> cannot be terminated by backslashes.   -or-   The port number specified in <paramref name="uriString">uriString</paramref> is not valid or cannot be parsed.   -or-   The length of <paramref name="uriString">uriString</paramref> exceeds 65519 characters.   -or-   The length of the scheme specified in <paramref name="uriString">uriString</paramref> exceeds 1023 characters.   -or-   There is an invalid character sequence in <paramref name="uriString">uriString</paramref>.   -or-   The MS-DOS path specified in <paramref name="uriString">uriString</paramref> must start with c:\\.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
      <summary>Initializes a new instance of the <see cref="T:System.Uri"></see> class with the specified URI. This constructor allows you to specify if the URI string is a relative URI, absolute URI, or is indeterminate.</summary>
      <param name="uriString">A string that identifies the resource to be represented by the <see cref="T:System.Uri"></see> instance.</param>
      <param name="uriKind">Specifies whether the URI string is a relative URI, absolute URI, or is indeterminate.</param>
      <exception cref="T:System.ArgumentException"><paramref name="uriKind">uriKind</paramref> is invalid.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="uriString">uriString</paramref> is null.</exception>
      <exception cref="T:System.UriFormatException"><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="3"><block subset="none" type="note">
      <p><br> In the <a href="http://go.microsoft.com/fwlink/?LinkID=247912" data-raw-source="[.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912)" sourcefile="System.yml" sourcestartlinenumber="3" sourceendlinenumber="3">.NET for Windows Store apps</a> or the <a href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md" data-raw-source="[Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)" sourcefile="System.yml" sourcestartlinenumber="3" sourceendlinenumber="3">Portable Class Library</a>, catch the base class exception, <xref href="System.FormatException"></xref>, instead.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="5" sourceendlinenumber="7">
    </block>
    <code data-dev-comment-type="paramref">uriString</code> contains a relative URI and <code data-dev-comment-type="paramref">uriKind</code> is <xref href="System.UriKind.Absolute"></xref>.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="9" sourceendlinenumber="9"> or  </p>
<p sourcefile="System.yml" sourcestartlinenumber="11" sourceendlinenumber="11"> <code data-dev-comment-type="paramref">uriString</code> contains an absolute URI and <code data-dev-comment-type="paramref">uriKind</code> is <xref href="System.UriKind.Relative"></xref>.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="13" sourceendlinenumber="13"> or  </p>
<p sourcefile="System.yml" sourcestartlinenumber="15" sourceendlinenumber="15"> <code data-dev-comment-type="paramref">uriString</code> is empty.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="17" sourceendlinenumber="17"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="19" sourceendlinenumber="19"> The scheme specified in <code data-dev-comment-type="paramref">uriString</code> is not correctly formed. See <xref href="System.Uri.CheckSchemeName(System.String)"></xref>.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="21" sourceendlinenumber="21"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="23" sourceendlinenumber="23"> <code data-dev-comment-type="paramref">uriString</code> contains too many slashes.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="25" sourceendlinenumber="25"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="27" sourceendlinenumber="27"> The password specified in <code data-dev-comment-type="paramref">uriString</code> is not valid.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="29" sourceendlinenumber="29"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="31" sourceendlinenumber="31"> The host name specified in <code data-dev-comment-type="paramref">uriString</code> is not valid.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="33" sourceendlinenumber="33"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="35" sourceendlinenumber="35"> The file name specified in <code data-dev-comment-type="paramref">uriString</code> is not valid.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="37" sourceendlinenumber="37"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="39" sourceendlinenumber="39"> The user name specified in <code data-dev-comment-type="paramref">uriString</code> is not valid.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="41" sourceendlinenumber="41"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="43" sourceendlinenumber="43"> The host or authority name specified in <code data-dev-comment-type="paramref">uriString</code> cannot be terminated by backslashes.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="45" sourceendlinenumber="45"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="47" sourceendlinenumber="47"> The port number specified in <code data-dev-comment-type="paramref">uriString</code> is not valid or cannot be parsed.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="49" sourceendlinenumber="49"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="51" sourceendlinenumber="51"> The length of <code data-dev-comment-type="paramref">uriString</code> exceeds 65519 characters.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="53" sourceendlinenumber="53"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="55" sourceendlinenumber="55"> The length of the scheme specified in <code data-dev-comment-type="paramref">uriString</code> exceeds 1023 characters.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="57" sourceendlinenumber="57"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="59" sourceendlinenumber="59"> There is an invalid character sequence in <code data-dev-comment-type="paramref">uriString</code>.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="61" sourceendlinenumber="61"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="63" sourceendlinenumber="63"> The MS-DOS path specified in <code data-dev-comment-type="paramref">uriString</code> must start with c:\\.</p>
</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Uri"></see> class based on the specified base URI and relative URI string.</summary>
      <param name="baseUri">The base URI.</param>
      <param name="relativeUri">The relative URI to add to the base URI.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="baseUri">baseUri</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUri">baseUri</paramref> is not an absolute <see cref="T:System.Uri"></see> instance.</exception>
      <exception cref="T:System.UriFormatException">  
 In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.FormatException"></see>, instead.  

 The URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is empty or contains only spaces.   -or-   The scheme specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is not valid.   -or-   The URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> contains too many slashes.   -or-   The password specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is not valid.   -or-   The host name specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is not valid.   -or-   The file name specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is not valid.   -or-   The user name specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is not valid.   -or-   The host or authority name specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> cannot be terminated by backslashes.   -or-   The port number specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is not valid or cannot be parsed.   -or-   The length of the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> exceeds 65519 characters.   -or-   The length of the scheme specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> exceeds 1023 characters.   -or-   There is an invalid character sequence in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref>.   -or-   The MS-DOS path specified in <paramref name="uriString">uriString</paramref> must start with c:\\.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.Uri"></see> class based on the combination of a specified base <see cref="T:System.Uri"></see> instance and a relative <see cref="T:System.Uri"></see> instance.</summary>
      <param name="baseUri">An absolute <see cref="T:System.Uri"></see> that is the base for the new <see cref="T:System.Uri"></see> instance.</param>
      <param name="relativeUri">A relative <see cref="T:System.Uri"></see> instance that is combined with baseUri.</param>
      <exception cref="T:System.ArgumentException"><paramref name="baseUri">baseUri</paramref> is not an absolute <see cref="T:System.Uri"></see> instance.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="baseUri">baseUri</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUri">baseUri</paramref> is not an absolute <see cref="T:System.Uri"></see> instance.</exception>
      <exception cref="T:System.UriFormatException">  
 In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.FormatException"></see>, instead.  

 The URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is empty or contains only spaces.   -or-   The scheme specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is not valid.   -or-   The URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> contains too many slashes.   -or-   The password specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is not valid.   -or-   The host name specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is not valid.   -or-   The file name specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is not valid.   -or-   The user name specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is not valid.   -or-   The host or authority name specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> cannot be terminated by backslashes.   -or-   The port number specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is not valid or cannot be parsed.   -or-   The length of the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> exceeds 65519 characters.   -or-   The length of the scheme specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> exceeds 1023 characters.   -or-   There is an invalid character sequence in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref>.   -or-   The MS-DOS path specified in <paramref name="uriString">uriString</paramref> must start with c:\\.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Uri"></see> class based on the specified base and relative URIs, with explicit control of character escaping.</summary>
      <param name="baseUri">The base URI.</param>
      <param name="relativeUri">The relative URI to add to the base URI.</param>
      <param name="dontEscape">true if uriString is completely escaped; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="baseUri">baseUri</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUri">baseUri</paramref> is not an absolute <see cref="T:System.Uri"></see> instance.</exception>
      <exception cref="T:System.UriFormatException">The URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is empty or contains only spaces.   -or-   The scheme specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is not valid.   -or-   The URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> contains too many slashes.   -or-   The password specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is not valid.   -or-   The host name specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is not valid.   -or-   The file name specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is not valid.   -or-   The user name specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is not valid.   -or-   The host or authority name specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> cannot be terminated by backslashes.   -or-   The port number specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> is not valid or cannot be parsed.   -or-   The length of the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> exceeds 65519 characters.   -or-   The length of the scheme specified in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref> exceeds 1023 characters.   -or-   There is an invalid character sequence in the URI formed by combining <paramref name="baseUri">baseUri</paramref> and <paramref name="relativeUri">relativeUri</paramref>.   -or-   The MS-DOS path specified in <paramref name="uriString">uriString</paramref> must start with c:\\.</exception>
    </member>
    <member name="P:System.Uri.AbsolutePath">
      <summary>Gets the absolute path of the URI.</summary>
      <returns>A <see cref="T:System.String"></see> containing the absolute path to the resource.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
      <summary>Gets the absolute URI.</summary>
      <returns>A <see cref="T:System.String"></see> containing the entire URI.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="P:System.Uri.Authority">
      <summary>Gets the Domain Name System (DNS) host name or IP address and the port number for a server.</summary>
      <returns>A <see cref="T:System.String"></see> containing the authority component of the URI represented by this instance.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.Canonicalize">
      <summary>Converts the internally stored URI to canonical form.</summary>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this method is valid only for absolute URIs.</exception>
      <exception cref="T:System.UriFormatException">The URI is incorrectly formed.</exception>
    </member>
    <member name="M:System.Uri.CheckHostName(System.String)">
      <summary>Determines whether the specified host name is a valid DNS name.</summary>
      <param name="name">The host name to validate. This can be an IPv4 or IPv6 address or an Internet host name.</param>
      <returns>A <see cref="T:System.UriHostNameType"></see> that indicates the type of the host name. If the type of the host name cannot be determined or if the host name is null or a zero-length string, this method returns <see cref="F:System.UriHostNameType.Unknown"></see>.</returns>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
      <summary>Determines whether the specified scheme name is valid.</summary>
      <param name="schemeName">The scheme name to validate.</param>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if the scheme name is valid; otherwise, false.</returns>
    </member>
    <member name="M:System.Uri.CheckSecurity">
      <summary>Calling this method has no effect.</summary>
    </member>
    <member name="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)">
      <summary>Compares the specified parts of two URIs using the specified comparison rules.</summary>
      <param name="uri1">The first <see cref="T:System.Uri"></see>.</param>
      <param name="uri2">The second <see cref="T:System.Uri"></see>.</param>
      <param name="partsToCompare">A bitwise combination of the <see cref="T:System.UriComponents"></see> values that specifies the parts of uri1 and uri2 to compare.</param>
      <param name="compareFormat">One of the <see cref="T:System.UriFormat"></see> values that specifies the character escaping used when the URI components are compared.</param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison"></see> values.</param>
      <returns><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="2"><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="1">An <xref href="System.Int32"></xref> value that indicates the lexical relationship between the compared <xref href="System.Uri"></xref> components.  </p>
 <table><thead><tr><th> Value  <p>
<p sourcefile="System.yml" sourcestartlinenumber="4" sourceendlinenumber="4"> </th><th> Meaning  <p>
<p sourcefile="System.yml" sourcestartlinenumber="6" sourceendlinenumber="6"> </th></tr></thead><tbody><tr><td> Less than zero  <p>
<p sourcefile="System.yml" sourcestartlinenumber="8" sourceendlinenumber="8"> </td><td><code data-dev-comment-type="paramref">uri1</code> is less than <code data-dev-comment-type="paramref">uri2</code>.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="10" sourceendlinenumber="10"> </td></tr><tr><td> Zero  <p>
<p sourcefile="System.yml" sourcestartlinenumber="12" sourceendlinenumber="12"> </td><td><code data-dev-comment-type="paramref">uri1</code> equals <code data-dev-comment-type="paramref">uri2</code>.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="14" sourceendlinenumber="14"> </td></tr><tr><td> Greater than zero  <p>
<p sourcefile="System.yml" sourcestartlinenumber="16" sourceendlinenumber="16"> </td><td><code data-dev-comment-type="paramref">uri1</code> is greater than <code data-dev-comment-type="paramref">uri2</code>.  <p>
<p sourcefile="System.yml" sourcestartlinenumber="18" sourceendlinenumber="18"> </td></tr></tbody></table></p>
</returns>
      <exception cref="T:System.ArgumentException"><paramref name="comparisonType">comparisonType</paramref> is not a valid <see cref="T:System.StringComparison"></see> value.</exception>
    </member>
    <member name="P:System.Uri.DnsSafeHost">
      <summary>Gets an unescaped host name that is safe to use for DNS resolution.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the unescaped host part of the URI that is suitable for DNS resolution; or the original unescaped host string, if it is already suitable for resolution.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
      <summary>Compares two <see cref="T:System.Uri"></see> instances for equality.</summary>
      <param name="comparand">The <see cref="T:System.Uri"></see> instance or a URI identifier to compare with the current instance.</param>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if the two instances represent the same URI; otherwise, false.</returns>
    </member>
    <member name="M:System.Uri.Escape">
      <summary>Converts any unsafe or reserved characters in the path component to their hexadecimal character representations.</summary>
      <exception cref="T:System.UriFormatException">The URI passed from the constructor is invalid. This exception can occur if a URI has too many characters or the URI is relative.</exception>
    </member>
    <member name="M:System.Uri.EscapeDataString(System.String)">
      <summary>Converts a string to its escaped representation.</summary>
      <param name="stringToEscape">The string to escape.</param>
      <returns>A <see cref="T:System.String"></see> that contains the escaped representation of <paramref name="stringToEscape">stringToEscape</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="stringToEscape">stringToEscape</paramref> is null.</exception>
      <exception cref="T:System.UriFormatException">  
 In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.FormatException"></see>, instead.  

 The length of <paramref name="stringToEscape">stringToEscape</paramref> exceeds 32766 characters.</exception>
    </member>
    <member name="M:System.Uri.EscapeString(System.String)">
      <summary>Converts a string to its escaped representation.</summary>
      <param name="str">The string to transform to its escaped representation.</param>
      <returns>The escaped representation of the string.</returns>
    </member>
    <member name="M:System.Uri.EscapeUriString(System.String)">
      <summary>Converts a URI string to its escaped representation.</summary>
      <param name="stringToEscape">The string to escape.</param>
      <returns>A <see cref="T:System.String"></see> that contains the escaped representation of <paramref name="stringToEscape">stringToEscape</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="stringToEscape">stringToEscape</paramref> is null.</exception>
      <exception cref="T:System.UriFormatException">  
 In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.FormatException"></see>, instead.  

 The length of <paramref name="stringToEscape">stringToEscape</paramref> exceeds 32766 characters.</exception>
    </member>
    <member name="P:System.Uri.Fragment">
      <summary>Gets the escaped URI fragment.</summary>
      <returns>A <see cref="T:System.String"></see> that contains any URI fragment information.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.FromHex(System.Char)">
      <summary>Gets the decimal value of a hexadecimal digit.</summary>
      <param name="digit">The hexadecimal digit (0-9, a-f, A-F) to convert.</param>
      <returns>An <see cref="T:System.Int32"></see> value that contains a number from 0 to 15 that corresponds to the specified hexadecimal digit.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="digit">digit</paramref> is not a valid hexadecimal digit (0-9, a-f, A-F).</exception>
    </member>
    <member name="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)">
      <summary>Gets the specified components of the current instance using the specified escaping for special characters.</summary>
      <param name="components">A bitwise combination of the <see cref="T:System.UriComponents"></see> values that specifies which parts of the current instance to return to the caller.</param>
      <param name="format">One of the <see cref="T:System.UriFormat"></see> values that controls how special characters are escaped.</param>
      <returns>A <see cref="T:System.String"></see> that contains the components.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="components">components</paramref> is not a combination of valid <see cref="T:System.UriComponents"></see> values.</exception>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Uri"></see> is not an absolute URI. Relative URIs cannot be used with this method.</exception>
    </member>
    <member name="M:System.Uri.GetHashCode">
      <summary>Gets the hash code for the URI.</summary>
      <returns>An <see cref="T:System.Int32"></see> containing the hash value generated for this URI.</returns>
    </member>
    <member name="M:System.Uri.GetLeftPart(System.UriPartial)">
      <summary>Gets the specified portion of a <see cref="T:System.Uri"></see> instance.</summary>
      <param name="part">One of the <see cref="T:System.UriPartial"></see> values that specifies the end of the URI portion to return.</param>
      <returns>A <see cref="T:System.String"></see> that contains the specified portion of the <see cref="T:System.Uri"></see> instance.</returns>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Uri"></see> instance is not an absolute instance.</exception>
      <exception cref="T:System.ArgumentException">The specified <paramref name="part">part</paramref> is not valid.</exception>
    </member>
    <member name="M:System.Uri.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Returns the data needed to serialize the current instance.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object containing the information required to serialize the <see cref="T:System.Uri"></see>.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Uri"></see>.</param>
    </member>
    <member name="M:System.Uri.HexEscape(System.Char)">
      <summary>Converts a specified character into its hexadecimal equivalent.</summary>
      <param name="character">The character to convert to hexadecimal representation.</param>
      <returns>The hexadecimal representation of the specified character.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="character">character</paramref> is greater than 255.</exception>
    </member>
    <member name="M:System.Uri.HexUnescape(System.String,System.Int32@)">
      <summary>Converts a specified hexadecimal representation of a character to the character.</summary>
      <param name="pattern">The hexadecimal representation of a character.</param>
      <param name="index">The location in pattern where the hexadecimal representation of a character begins.</param>
      <returns>The character represented by the hexadecimal encoding at position <paramref name="index">index</paramref>. If the character at <paramref name="index">index</paramref> is not hexadecimal encoded, the character at <paramref name="index">index</paramref> is returned. The value of <paramref name="index">index</paramref> is incremented to point to the character following the one returned.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than 0 or greater than or equal to the number of characters in <paramref name="pattern">pattern</paramref>.</exception>
    </member>
    <member name="P:System.Uri.Host">
      <summary>Gets the host component of this instance.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the host name. This is usually the DNS host name or IP address of the server.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="P:System.Uri.HostNameType">
      <summary>Gets the type of the host name specified in the URI.</summary>
      <returns>A member of the <see cref="T:System.UriHostNameType"></see> enumeration.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="P:System.Uri.IdnHost">
      <summary>The RFC 3490 compliant International Domain Name of the host, using Punycode as appropriate.</summary>
      <returns>Returns the hostname, formatted with Punycode according to the IDN standard.<see cref="T:System.String"></see>.</returns>
    </member>
    <member name="P:System.Uri.IsAbsoluteUri">
      <summary>Gets whether the <see cref="T:System.Uri"></see> instance is absolute.</summary>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if the <see cref="T:System.Uri"></see> instance is absolute; otherwise, false.</returns>
    </member>
    <member name="M:System.Uri.IsBadFileSystemCharacter(System.Char)">
      <summary>Gets whether a character is invalid in a file system name.</summary>
      <param name="character">The <see cref="T:System.Char"></see> to test.</param>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if the specified character is invalid; otherwise false.</returns>
    </member>
    <member name="M:System.Uri.IsBaseOf(System.Uri)">
      <summary>Determines whether the current <see cref="T:System.Uri"></see> instance is a base of the specified <see cref="T:System.Uri"></see> instance.</summary>
      <param name="uri">The specified <see cref="T:System.Uri"></see> instance to test.</param>
      <returns>true if the current <see cref="T:System.Uri"></see> instance is a base of <paramref name="uri">uri</paramref>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="uri">uri</paramref> is null.</exception>
    </member>
    <member name="P:System.Uri.IsDefaultPort">
      <summary>Gets whether the port value of the URI is the default for this scheme.</summary>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if the value in the <see cref="P:System.Uri.Port"></see> property is the default port for this scheme; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.IsExcludedCharacter(System.Char)">
      <summary>Gets whether the specified character should be escaped.</summary>
      <param name="character">The <see cref="T:System.Char"></see> to test.</param>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if the specified character should be escaped; otherwise, false.</returns>
    </member>
    <member name="P:System.Uri.IsFile">
      <summary>Gets a value indicating whether the specified <see cref="T:System.Uri"></see> is a file URI.</summary>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if the <see cref="T:System.Uri"></see> is a file URI; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.IsHexDigit(System.Char)">
      <summary>Determines whether a specified character is a valid hexadecimal digit.</summary>
      <param name="character">The character to validate.</param>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if the character is a valid hexadecimal digit; otherwise false.</returns>
    </member>
    <member name="M:System.Uri.IsHexEncoding(System.String,System.Int32)">
      <summary>Determines whether a character in a string is hexadecimal encoded.</summary>
      <param name="pattern">The string to check.</param>
      <param name="index">The location in pattern to check for hexadecimal encoding.</param>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if <paramref name="pattern">pattern</paramref> is hexadecimal encoded at the specified location; otherwise, false.</returns>
    </member>
    <member name="P:System.Uri.IsLoopback">
      <summary>Gets whether the specified <see cref="T:System.Uri"></see> references the local host.</summary>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if this <see cref="T:System.Uri"></see> references the local host; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.IsReservedCharacter(System.Char)">
      <summary>Gets whether the specified character is a reserved character.</summary>
      <param name="character">The <see cref="T:System.Char"></see> to test.</param>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if the specified character is a reserved character otherwise, false.</returns>
    </member>
    <member name="P:System.Uri.IsUnc">
      <summary>Gets whether the specified <see cref="T:System.Uri"></see> is a universal naming convention (UNC) path.</summary>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if the <see cref="T:System.Uri"></see> is a UNC path; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.IsWellFormedOriginalString">
      <summary>Indicates whether the string used to construct this <see cref="T:System.Uri"></see> was well-formed and is not required to be further escaped.</summary>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if the string was well-formed; else false.</returns>
    </member>
    <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
      <summary>Indicates whether the string is well-formed by attempting to construct a URI with the string and ensures that the string does not require further escaping.</summary>
      <param name="uriString">The string used to attempt to construct a <see cref="T:System.Uri"></see>.</param>
      <param name="uriKind">The type of the <see cref="T:System.Uri"></see> in uriString.</param>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if the string was well-formed; else false.</returns>
    </member>
    <member name="P:System.Uri.LocalPath">
      <summary>Gets a local operating-system representation of a file name.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the local operating-system representation of a file name.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.MakeRelative(System.Uri)">
      <summary>Determines the difference between two <see cref="T:System.Uri"></see> instances.</summary>
      <param name="toUri">The URI to compare to the current URI.</param>
      <returns>If the hostname and scheme of this URI instance and <paramref name="toUri">toUri</paramref> are the same, then this method returns a <see cref="T:System.String"></see> that represents a relative URI that, when appended to the current URI instance, yields the <paramref name="toUri">toUri</paramref> parameter.   If the hostname or scheme is different, then this method returns a <see cref="T:System.String"></see> that represents the <paramref name="toUri">toUri</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="toUri">toUri</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this method is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.MakeRelativeUri(System.Uri)">
      <summary>Determines the difference between two <see cref="T:System.Uri"></see> instances.</summary>
      <param name="uri">The URI to compare to the current URI.</param>
      <returns>If the hostname and scheme of this URI instance and <paramref name="uri">uri</paramref> are the same, then this method returns a relative <see cref="T:System.Uri"></see> that, when appended to the current URI instance, yields <paramref name="uri">uri</paramref>.   If the hostname or scheme is different, then this method returns a <see cref="T:System.Uri"></see> that represents the <paramref name="uri">uri</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="uri">uri</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
      <summary>Determines whether two <see cref="T:System.Uri"></see> instances have the same value.</summary>
      <param name="uri1">A <see cref="T:System.Uri"></see> instance to compare with uri2.</param>
      <param name="uri2">A <see cref="T:System.Uri"></see> instance to compare with uri1.</param>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if the <see cref="T:System.Uri"></see> instances are equivalent; otherwise, false.</returns>
    </member>
    <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
      <summary>Determines whether two <see cref="T:System.Uri"></see> instances do not have the same value.</summary>
      <param name="uri1">A <see cref="T:System.Uri"></see> instance to compare with uri2.</param>
      <param name="uri2">A <see cref="T:System.Uri"></see> instance to compare with uri1.</param>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if the two <see cref="T:System.Uri"></see> instances are not equal; otherwise, false. If either parameter is null, this method returns true.</returns>
    </member>
    <member name="P:System.Uri.OriginalString">
      <summary>Gets the original URI string that was passed to the <see cref="T:System.Uri"></see> constructor.</summary>
      <returns>A <see cref="T:System.String"></see> containing the exact URI specified when this instance was constructed; otherwise, <see cref="F:System.String.Empty"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.Parse">
      <summary>Parses the URI of the current instance to ensure it contains all the parts required for a valid URI.</summary>
      <exception cref="T:System.UriFormatException">The Uri passed from the constructor is invalid.</exception>
    </member>
    <member name="P:System.Uri.PathAndQuery">
      <summary>Gets the <see cref="P:System.Uri.AbsolutePath"></see> and <see cref="P:System.Uri.Query"></see> properties separated by a question mark (?).</summary>
      <returns>A <see cref="T:System.String"></see> that contains the <see cref="P:System.Uri.AbsolutePath"></see> and <see cref="P:System.Uri.Query"></see> properties separated by a question mark (?).</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="P:System.Uri.Port">
      <summary>Gets the port number of this URI.</summary>
      <returns>An <see cref="T:System.Int32"></see> value that contains the port number for this URI.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="P:System.Uri.Query">
      <summary>Gets any query information included in the specified URI.</summary>
      <returns>A <see cref="T:System.String"></see> that contains any query information included in the specified URI.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="P:System.Uri.Scheme">
      <summary>Gets the scheme name for this URI.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the scheme for this URI, converted to lowercase.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="F:System.Uri.SchemeDelimiter">
      <summary>Specifies the characters that separate the communication protocol scheme from the address portion of the URI. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Uri.Segments">
      <summary>Gets an array containing the path segments that make up the specified URI.</summary>
      <returns>A <see cref="T:System.String"></see> array that contains the path segments that make up the specified URI.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.ToString">
      <summary>Gets a canonical string representation for the specified <see cref="T:System.Uri"></see> instance.</summary>
      <returns>A <see cref="T:System.String"></see> instance that contains the unescaped canonical representation of the <see cref="T:System.Uri"></see> instance. All characters are unescaped except #, ?, and %.</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)">
      <summary>Creates a new <see cref="T:System.Uri"></see> using the specified <see cref="T:System.String"></see> instance and a <see cref="T:System.UriKind"></see>.</summary>
      <param name="uriString">The <see cref="T:System.String"></see> representing the <see cref="T:System.Uri"></see>.</param>
      <param name="uriKind">The type of the Uri.</param>
      <param name="result">When this method returns, contains the constructed <see cref="T:System.Uri"></see>.</param>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if the <see cref="T:System.Uri"></see> was successfully created; otherwise, false.</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)">
      <summary>Creates a new <see cref="T:System.Uri"></see> using the specified base and relative <see cref="T:System.String"></see> instances.</summary>
      <param name="baseUri">The base <see cref="T:System.Uri"></see>.</param>
      <param name="relativeUri">The relative <see cref="T:System.Uri"></see>, represented as a <see cref="T:System.String"></see>, to add to the base <see cref="T:System.Uri"></see>.</param>
      <param name="result">When this method returns, contains a <see cref="T:System.Uri"></see> constructed from baseUri and relativeUri. This parameter is passed uninitialized.</param>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if the <see cref="T:System.Uri"></see> was successfully created; otherwise, false.</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)">
      <summary>Creates a new <see cref="T:System.Uri"></see> using the specified base and relative <see cref="T:System.Uri"></see> instances.</summary>
      <param name="baseUri">The base <see cref="T:System.Uri"></see>.</param>
      <param name="relativeUri">The relative <see cref="T:System.Uri"></see> to add to the base <see cref="T:System.Uri"></see>.</param>
      <param name="result">When this method returns, contains a <see cref="T:System.Uri"></see> constructed from baseUri and relativeUri. This parameter is passed uninitialized.</param>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if the <see cref="T:System.Uri"></see> was successfully created; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="baseUri">baseUri</paramref> is null.</exception>
    </member>
    <member name="M:System.Uri.Unescape(System.String)">
      <summary>Converts the specified string by replacing any escape sequences with their unescaped representation.</summary>
      <param name="path">The <see cref="T:System.String"></see> to convert.</param>
      <returns>A <see cref="T:System.String"></see> that contains the unescaped value of the <paramref name="path">path</paramref> parameter.</returns>
    </member>
    <member name="M:System.Uri.UnescapeDataString(System.String)">
      <summary>Converts a string to its unescaped representation.</summary>
      <param name="stringToUnescape">The string to unescape.</param>
      <returns>A <see cref="T:System.String"></see> that contains the unescaped representation of <paramref name="stringToUnescape">stringToUnescape</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="stringToUnescape">stringToUnescape</paramref> is null.</exception>
    </member>
    <member name="F:System.Uri.UriSchemeFile">
      <summary>Specifies that the URI is a pointer to a file. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Uri.UriSchemeFtp">
      <summary>Specifies that the URI is accessed through the File Transfer Protocol (FTP). This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Uri.UriSchemeGopher">
      <summary>Specifies that the URI is accessed through the Gopher protocol. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Uri.UriSchemeHttp">
      <summary>Specifies that the URI is accessed through the Hypertext Transfer Protocol (HTTP). This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Uri.UriSchemeHttps">
      <summary>Specifies that the URI is accessed through the Secure Hypertext Transfer Protocol (HTTPS). This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Uri.UriSchemeMailto">
      <summary>Specifies that the URI is an e-mail address and is accessed through the Simple Mail Transport Protocol (SMTP). This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Uri.UriSchemeNetPipe">
      <summary>Specifies that the URI is accessed through the NetPipe scheme used by Windows Communication Foundation (WCF). This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Uri.UriSchemeNetTcp">
      <summary>Specifies that the URI is accessed through the NetTcp scheme used by Windows Communication Foundation (WCF). This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Uri.UriSchemeNews">
      <summary>Specifies that the URI is an Internet news group and is accessed through the Network News Transport Protocol (NNTP). This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Uri.UriSchemeNntp">
      <summary>Specifies that the URI is an Internet news group and is accessed through the Network News Transport Protocol (NNTP). This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Uri.UserEscaped">
      <summary>Indicates that the URI string was completely escaped before the <see cref="T:System.Uri"></see> instance was created.</summary>
      <returns>A <see cref="T:System.Boolean"></see> value that is true if the <paramref name="dontEscape">dontEscape</paramref> parameter was set to true when the <see cref="T:System.Uri"></see> instance was created; otherwise, false.</returns>
    </member>
    <member name="P:System.Uri.UserInfo">
      <summary>Gets the user name, password, or other user-specific information associated with the specified URI.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the user information associated with the URI. The returned value does not include the '@' character reserved for delimiting the user information part of the URI.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Returns the data needed to serialize the current instance.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object containing the information required to serialize the <see cref="T:System.Uri"></see>.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Uri"></see>.</param>
    </member>
    <member name="T:System.UriBuilder">
      <summary>Provides a custom constructor for uniform resource identifiers (URIs) and modifies URIs for the <see cref="T:System.Uri"></see> class.</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.UriBuilder"></see> class.</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.UriBuilder"></see> class with the specified URI.</summary>
      <param name="uri">A URI string.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="uri">uri</paramref> is null.</exception>
      <exception cref="T:System.UriFormatException"><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="3"><block subset="none" type="note">
      <p><br> In the <a href="http://go.microsoft.com/fwlink/?LinkID=247912" data-raw-source="[.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912)" sourcefile="System.yml" sourcestartlinenumber="3" sourceendlinenumber="3">.NET for Windows Store apps</a> or the <a href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md" data-raw-source="[Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)" sourcefile="System.yml" sourcestartlinenumber="3" sourceendlinenumber="3">Portable Class Library</a>, catch the base class exception, <xref href="System.FormatException"></xref>, instead.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="5" sourceendlinenumber="7">
    </block>
    <code data-dev-comment-type="paramref">uri</code> is a zero length string or contains only spaces.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="9" sourceendlinenumber="9"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="11" sourceendlinenumber="11"> The parsing routine detected a scheme in an invalid form.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="13" sourceendlinenumber="13"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="15" sourceendlinenumber="15"> The parser detected more than two consecutive slashes in a URI that does not use the &quot;file&quot; scheme.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="17" sourceendlinenumber="17"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="19" sourceendlinenumber="19"> <code data-dev-comment-type="paramref">uri</code> is not a valid URI.</p>
</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.UriBuilder"></see> class with the specified <see cref="T:System.Uri"></see> instance.</summary>
      <param name="uri">An instance of the <see cref="T:System.Uri"></see> class.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="uri">uri</paramref> is null.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.UriBuilder"></see> class with the specified scheme and host.</summary>
      <param name="schemeName">An Internet access protocol.</param>
      <param name="hostName">A DNS-style domain name or IP address.</param>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.UriBuilder"></see> class with the specified scheme, host, and port.</summary>
      <param name="scheme">An Internet access protocol.</param>
      <param name="host">A DNS-style domain name or IP address.</param>
      <param name="portNumber">An IP port number for the service.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="portNumber">portNumber</paramref> is less than -1 or greater than 65,535.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.UriBuilder"></see> class with the specified scheme, host, port number, and path.</summary>
      <param name="scheme">An Internet access protocol.</param>
      <param name="host">A DNS-style domain name or IP address.</param>
      <param name="port">An IP port number for the service.</param>
      <param name="pathValue">The path to the Internet resource.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port">port</paramref> is less than -1 or greater than 65,535.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.UriBuilder"></see> class with the specified scheme, host, port number, path and query string or fragment identifier.</summary>
      <param name="scheme">An Internet access protocol.</param>
      <param name="host">A DNS-style domain name or IP address.</param>
      <param name="port">An IP port number for the service.</param>
      <param name="path">The path to the Internet resource.</param>
      <param name="extraValue">A query string or fragment identifier.</param>
      <exception cref="T:System.ArgumentException"><paramref name="extraValue">extraValue</paramref> is neither null nor <see cref="F:System.String.Empty"></see>, nor does a valid fragment identifier begin with a number sign (#), nor a valid query string begin with a question mark (?).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port">port</paramref> is less than -1 or greater than 65,535.</exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>Compares an existing <see cref="T:System.Uri"></see> instance with the contents of the <see cref="T:System.UriBuilder"></see> for equality.</summary>
      <param name="rparam">The object to compare with the current instance.</param>
      <returns>true if <paramref name="rparam">rparam</paramref> represents the same <see cref="T:System.Uri"></see> as the <see cref="T:System.Uri"></see> constructed by this <see cref="T:System.UriBuilder"></see> instance; otherwise, false.</returns>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>Gets or sets the fragment portion of the URI.</summary>
      <returns>The fragment portion of the URI. The fragment identifier (&quot;#&quot;) is added to the beginning of the fragment.</returns>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>Returns the hash code for the URI.</summary>
      <returns>The hash code generated for the URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>Gets or sets the Domain Name System (DNS) host name or IP address of a server.</summary>
      <returns>The DNS host name or IP address of the server.</returns>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>Gets or sets the password associated with the user that accesses the URI.</summary>
      <returns>The password of the user that accesses the URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>Gets or sets the path to the resource referenced by the URI.</summary>
      <returns>The path to the resource referenced by the URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>Gets or sets the port number of the URI.</summary>
      <returns>The port number of the URI.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The port cannot be set to a value less than -1 or greater than 65,535.</exception>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>Gets or sets any query information included in the URI.</summary>
      <returns>The query information included in the URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>Gets or sets the scheme name of the URI.</summary>
      <returns>The scheme of the URI.</returns>
      <exception cref="T:System.ArgumentException">The scheme cannot be set to an invalid scheme name.</exception>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>Returns the display string for the specified <see cref="T:System.UriBuilder"></see> instance.</summary>
      <returns>The string that contains the unescaped display string of the <see cref="T:System.UriBuilder"></see>.</returns>
      <exception cref="T:System.UriFormatException">  
 In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.FormatException"></see>, instead.  

 The <see cref="T:System.UriBuilder"></see> instance has a bad password.</exception>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>Gets the <see cref="T:System.Uri"></see> instance constructed by the specified <see cref="T:System.UriBuilder"></see> instance.</summary>
      <returns>A <see cref="T:System.Uri"></see> that contains the URI constructed by the <see cref="T:System.UriBuilder"></see>.</returns>
      <exception cref="T:System.UriFormatException">  
 In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.FormatException"></see>, instead.  

 The URI constructed by the <see cref="T:System.UriBuilder"></see> properties is invalid.</exception>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>The user name associated with the user that accesses the URI.</summary>
      <returns>The user name of the user that accesses the URI.</returns>
    </member>
    <member name="T:System.UriComponents">
      <summary>Specifies the parts of a <see cref="T:System.Uri"></see>.</summary>
    </member>
    <member name="F:System.UriComponents.AbsoluteUri">
      <summary>The <see cref="P:System.Uri.Scheme"></see>, <see cref="P:System.Uri.UserInfo"></see>, <see cref="P:System.Uri.Host"></see>, <see cref="P:System.Uri.Port"></see>, <see cref="P:System.Uri.LocalPath"></see>, <see cref="P:System.Uri.Query"></see>, and <see cref="P:System.Uri.Fragment"></see> data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriComponents.Fragment">
      <summary>The <see cref="P:System.Uri.Fragment"></see> data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriComponents.Host">
      <summary>The <see cref="P:System.Uri.Host"></see> data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriComponents.HostAndPort">
      <summary>The <see cref="P:System.Uri.Host"></see> and <see cref="P:System.Uri.Port"></see> data. If no port data is in the Uri and a default port has been assigned to the <see cref="P:System.Uri.Scheme"></see>, the default port is returned. If there is no default port, -1 is returned.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriComponents.HttpRequestUrl">
      <summary>The <see cref="P:System.Uri.Scheme"></see>, <see cref="P:System.Uri.Host"></see>, <see cref="P:System.Uri.Port"></see>, <see cref="P:System.Uri.LocalPath"></see>, and <see cref="P:System.Uri.Query"></see> data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriComponents.KeepDelimiter">
      <summary>Specifies that the delimiter should be included.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriComponents.NormalizedHost">
      <summary>The normalized form of the <see cref="P:System.Uri.Host"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriComponents.Path">
      <summary>The <see cref="P:System.Uri.LocalPath"></see> data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriComponents.PathAndQuery">
      <summary>The <see cref="P:System.Uri.LocalPath"></see> and <see cref="P:System.Uri.Query"></see> data. Also see <see cref="P:System.Uri.PathAndQuery"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriComponents.Port">
      <summary>The <see cref="P:System.Uri.Port"></see> data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriComponents.Query">
      <summary>The <see cref="P:System.Uri.Query"></see> data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriComponents.Scheme">
      <summary>The <see cref="P:System.Uri.Scheme"></see> data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriComponents.SchemeAndServer">
      <summary>The <see cref="P:System.Uri.Scheme"></see>, <see cref="P:System.Uri.Host"></see>, and <see cref="P:System.Uri.Port"></see> data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriComponents.SerializationInfoString">
      <summary>The complete <see cref="T:System.Uri"></see> context that is needed for Uri Serializers. The context includes the IPv6 scope.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriComponents.StrongAuthority">
      <summary>The <see cref="P:System.Uri.UserInfo"></see>, <see cref="P:System.Uri.Host"></see>, and <see cref="P:System.Uri.Port"></see> data. If no port data is in the <see cref="T:System.Uri"></see> and a default port has been assigned to the <see cref="P:System.Uri.Scheme"></see>, the default port is returned. If there is no default port, -1 is returned.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriComponents.StrongPort">
      <summary>The <see cref="P:System.Uri.Port"></see> data. If no port data is in the <see cref="T:System.Uri"></see> and a default port has been assigned to the <see cref="P:System.Uri.Scheme"></see>, the default port is returned. If there is no default port, -1 is returned.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriComponents.UserInfo">
      <summary>The <see cref="P:System.Uri.UserInfo"></see> data.</summary>
      <returns></returns>
    </member>
    <member name="T:System.UriFormat">
      <summary>Controls how URI information is escaped.</summary>
    </member>
    <member name="F:System.UriFormat.SafeUnescaped">
      <summary>Characters that have a reserved meaning in the requested URI components remain escaped. All others are not escaped.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriFormat.Unescaped">
      <summary>No escaping is performed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriFormat.UriEscaped">
      <summary>Escaping is performed according to the rules in RFC 2396.</summary>
      <returns></returns>
    </member>
    <member name="T:System.UriFormatException">
      <summary>The exception that is thrown when an invalid Uniform Resource Identifier (URI) is detected.</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.UriFormatException"></see> class.</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.UriFormatException"></see> class with the specified message.</summary>
      <param name="textString">The error message string.</param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.UriFormatException"></see> class from the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> instances.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that contains the information that is required to serialize the new <see cref="T:System.UriFormatException"></see>.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains the source of the serialized stream that is associated with the new <see cref="T:System.UriFormatException"></see>.</param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.UriFormatException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="textString">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="e">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.UriFormatException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance with the data that is needed to serialize the <see cref="T:System.UriFormatException"></see>.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that will hold the serialized data for the <see cref="T:System.UriFormatException"></see>.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains the destination of the serialized stream that is associated with the new <see cref="T:System.UriFormatException"></see>.</param>
    </member>
    <member name="T:System.UriHostNameType">
      <summary>Defines host name types for the <see cref="M:System.Uri.CheckHostName(System.String)"></see> method.</summary>
    </member>
    <member name="F:System.UriHostNameType.Basic">
      <summary>The host is set, but the type cannot be determined.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriHostNameType.Dns">
      <summary>The host name is a domain name system (DNS) style host name.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriHostNameType.IPv4">
      <summary>The host name is an Internet Protocol (IP) version 4 host address.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriHostNameType.IPv6">
      <summary>The host name is an Internet Protocol (IP) version 6 host address.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriHostNameType.Unknown">
      <summary>The type of the host name is not supplied.</summary>
      <returns></returns>
    </member>
    <member name="T:System.UriIdnScope">
      <summary>Provides the possible values for the configuration setting of the <see cref="T:System.Configuration.IdnElement"></see> in the <see cref="N:System.Configuration"></see> namespace.</summary>
    </member>
    <member name="F:System.UriIdnScope.All">
      <summary>This value will convert any Unicode domain names to their Punycode equivalents (IDN names).</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriIdnScope.AllExceptIntranet">
      <summary>This value will convert all external Unicode domain names to use the Punycode equivalents (IDN names). In this case to handle international names on the local Intranet, the DNS servers that are used for the Intranet should support Unicode names.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriIdnScope.None">
      <summary>This value will not convert any Unicode domain names to use Punycode. This is the default value which is consistent with the .NET Framework 2.0 behavior.</summary>
      <returns></returns>
    </member>
    <member name="T:System.UriKind">
      <summary>Defines the kinds of <see cref="T:System.Uri"></see>s for the <see cref="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)"></see> and several <see cref="Overload:System.Uri.#ctor"></see> methods.</summary>
    </member>
    <member name="F:System.UriKind.Absolute">
      <summary>The Uri is an absolute Uri.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriKind.Relative">
      <summary>The Uri is a relative Uri.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriKind.RelativeOrAbsolute">
      <summary>The kind of the Uri is indeterminate.</summary>
      <returns></returns>
    </member>
    <member name="T:System.UriParser">
      <summary>Parses a new URI scheme. This is an abstract class.</summary>
    </member>
    <member name="M:System.UriParser.#ctor">
      <summary>Constructs a default URI parser.</summary>
    </member>
    <member name="M:System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)">
      <summary>Gets the components from a URI.</summary>
      <param name="uri">The URI to parse.</param>
      <param name="components">The <see cref="T:System.UriComponents"></see> to retrieve from uri.</param>
      <param name="format">One of the <see cref="T:System.UriFormat"></see> values that controls how special characters are escaped.</param>
      <returns>A string that contains the components.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="uriFormat">uriFormat</paramref> is invalid.   - or -  <paramref name="uriComponents">uriComponents</paramref> is not a combination of valid <see cref="T:System.UriComponents"></see> values.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="uri">uri</paramref> requires user-driven parsing   - or -  <paramref name="uri">uri</paramref> is not an absolute URI. Relative URIs cannot be used with this method.</exception>
    </member>
    <member name="M:System.UriParser.InitializeAndValidate(System.Uri,System.UriFormatException@)">
      <summary>Initialize the state of the parser and validate the URI.</summary>
      <param name="uri">The T:System.Uri to validate.</param>
      <param name="parsingError">Validation errors, if any.</param>
    </member>
    <member name="M:System.UriParser.IsBaseOf(System.Uri,System.Uri)">
      <summary>Determines whether <paramref name="baseUri">baseUri</paramref> is a base URI for <paramref name="relativeUri">relativeUri</paramref>.</summary>
      <param name="baseUri">The base URI.</param>
      <param name="relativeUri">The URI to test.</param>
      <returns>true if <paramref name="baseUri">baseUri</paramref> is a base URI for <paramref name="relativeUri">relativeUri</paramref>; otherwise, false.</returns>
    </member>
    <member name="M:System.UriParser.IsKnownScheme(System.String)">
      <summary>Indicates whether the parser for a scheme is registered.</summary>
      <param name="schemeName">The scheme name to check.</param>
      <returns>true if <paramref name="schemeName">schemeName</paramref> has been registered; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="schemeName">schemeName</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="schemeName">schemeName</paramref> parameter is not valid.</exception>
    </member>
    <member name="M:System.UriParser.IsWellFormedOriginalString(System.Uri)">
      <summary>Indicates whether a URI is well-formed.</summary>
      <param name="uri">The URI to check.</param>
      <returns>true if <paramref name="uri">uri</paramref> is well-formed; otherwise, false.</returns>
    </member>
    <member name="M:System.UriParser.OnNewUri">
      <summary>Invoked by a <see cref="T:System.Uri"></see> constructor to get a <see cref="T:System.UriParser"></see> instance</summary>
      <returns>A <see cref="T:System.UriParser"></see> for the constructed <see cref="T:System.Uri"></see>.</returns>
    </member>
    <member name="M:System.UriParser.OnRegister(System.String,System.Int32)">
      <summary>Invoked by the Framework when a <see cref="T:System.UriParser"></see> method is registered.</summary>
      <param name="schemeName">The scheme that is associated with this <see cref="T:System.UriParser"></see>.</param>
      <param name="defaultPort">The port number of the scheme.</param>
    </member>
    <member name="M:System.UriParser.Register(System.UriParser,System.String,System.Int32)">
      <summary>Associates a scheme and port number with a <see cref="T:System.UriParser"></see>.</summary>
      <param name="uriParser">The URI parser to register.</param>
      <param name="schemeName">The name of the scheme that is associated with this parser.</param>
      <param name="defaultPort">The default port number for the specified scheme.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="uriParser">uriParser</paramref> parameter is null   - or -  <paramref name="schemeName">schemeName</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="schemeName">schemeName</paramref> parameter is not valid   - or -  <paramref name="defaultPort">defaultPort</paramref> parameter is not valid. The <paramref name="defaultPort">defaultPort</paramref> parameter is less than -1 or greater than 65,534.</exception>
    </member>
    <member name="M:System.UriParser.Resolve(System.Uri,System.Uri,System.UriFormatException@)">
      <summary>Called by <see cref="T:System.Uri"></see> constructors and <see cref="Overload:System.Uri.TryCreate"></see> to resolve a relative URI.</summary>
      <param name="baseUri">A base URI.</param>
      <param name="relativeUri">A relative URI.</param>
      <param name="parsingError">Errors during the resolve process, if any.</param>
      <returns>The string of the resolved relative <see cref="T:System.Uri"></see>.</returns>
      <exception cref="T:System.InvalidOperationException"><paramref name="baseUri">baseUri</paramref> parameter is not an absolute <see cref="T:System.Uri"></see> - or -  <paramref name="baseUri">baseUri</paramref> parameter requires user-driven parsing.</exception>
    </member>
    <member name="T:System.UriPartial">
      <summary>Defines the parts of a URI for the <see cref="M:System.Uri.GetLeftPart(System.UriPartial)"></see> method.</summary>
    </member>
    <member name="F:System.UriPartial.Authority">
      <summary>The scheme and authority segments of the URI.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriPartial.Path">
      <summary>The scheme, authority, and path segments of the URI.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriPartial.Query">
      <summary>The scheme, authority, path, and query segments of the URI.</summary>
      <returns></returns>
    </member>
    <member name="F:System.UriPartial.Scheme">
      <summary>The scheme segment of the URI.</summary>
      <returns></returns>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary>Converts a <see cref="T:System.String"></see> type to a <see cref="T:System.Uri"></see> type, and vice versa.</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.UriTypeConverter"></see> class.</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert an object of the given type to the type of this converter.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type that you want to convert from.</param>
      <returns>true if <paramref name="sourceType">sourceType</paramref> is a <see cref="T:System.String"></see> type or a <see cref="T:System.Uri"></see> type can be assigned from <paramref name="sourceType">sourceType</paramref>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="sourceType">sourceType</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert the object to the specified type, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type that you want to convert to.</param>
      <returns>true if <paramref name="destinationType">destinationType</paramref> is of type <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"></see>, <see cref="T:System.String"></see>, or <see cref="T:System.Uri"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a given value object to the specified type, using the specified context and culture information.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType">destinationType</paramref> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Returns whether the given value object is a <see cref="T:System.Uri"></see> or a <see cref="T:System.Uri"></see> can be created from it.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
      <returns>true if <paramref name="value">value</paramref> is a <see cref="T:System.Uri"></see> or a <see cref="T:System.String"></see> from which a <see cref="T:System.Uri"></see> can be created; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary>Provides access to instances of the C# code generator and code compiler.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.CSharp.CSharpCodeProvider"></see> class.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.CSharp.CSharpCodeProvider"></see> class by using the specified provider options.</summary>
      <param name="providerOptions">A <see cref="T:System.Collections.Generic.IDictionary`2"></see> object that contains the provider options from the configuration file.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="providerOptions">providerOptions</paramref> is null.</exception>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary>Gets an instance of the C# code compiler.</summary>
      <returns>An instance of the C# <see cref="T:System.CodeDom.Compiler.ICodeCompiler"></see> implementation.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary>Gets an instance of the C# code generator.</summary>
      <returns>An instance of the C# <see cref="T:System.CodeDom.Compiler.ICodeGenerator"></see> implementation.</returns>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary>Gets the file name extension to use when creating source code files.</summary>
      <returns>The file name extension to use for generated source code files.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generates code for the specified class member using the specified text writer and code generator options.</summary>
      <param name="member">A <see cref="T:System.CodeDom.CodeTypeMember"></see> to generate code for.</param>
      <param name="writer">The <see cref="T:System.IO.TextWriter"></see> to write to.</param>
      <param name="options">The <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions"></see> to use when generating the code.</param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary>Gets a <see cref="T:System.ComponentModel.TypeConverter"></see> for the specified type of object.</summary>
      <param name="type">The type of object to retrieve a type converter for.</param>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter"></see> for the specified type.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary>Provides access to instances of the Visual Basic code generator and code compiler.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.VBCodeProvider"></see> class.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.VBCodeProvider"></see> class by using the specified provider options.</summary>
      <param name="providerOptions">A <see cref="T:System.Collections.Generic.IDictionary`2"></see> object that contains the provider options from the configuration file.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="providerOptions">providerOptions</paramref> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary>Gets an instance of the Visual Basic code compiler.</summary>
      <returns>An instance of the Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeCompiler"></see> implementation.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary>Gets an instance of the Visual Basic code generator.</summary>
      <returns>An instance of the Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeGenerator"></see> implementation.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary>Gets the file name extension to use when creating source code files.</summary>
      <returns>The file name extension to use for generated source code files.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generates code for the specified class member using the specified text writer and code generator options.</summary>
      <param name="member">A <see cref="T:System.CodeDom.CodeTypeMember"></see> to generate code for.</param>
      <param name="writer">The <see cref="T:System.IO.TextWriter"></see> to write to.</param>
      <param name="options">The <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions"></see> to use when generating the code.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary>Gets a <see cref="T:System.ComponentModel.TypeConverter"></see> for the specified type of object.</summary>
      <param name="type">The type of object to retrieve a type converter for.</param>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter"></see> for the specified type.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary>Gets a language features identifier.</summary>
      <returns>A <see cref="T:System.CodeDom.Compiler.LanguageOptions"></see> that indicates special features of the language.</returns>
    </member>
    <member name="T:System.Collections.Specialized.CollectionsUtil">
      <summary>Creates collections that ignore the case in strings.</summary>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.CollectionsUtil"></see> class.</summary>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable">
      <summary>Creates a new case-insensitive instance of the <see cref="T:System.Collections.Hashtable"></see> class with the default initial capacity.</summary>
      <returns>A new case-insensitive instance of the <see cref="T:System.Collections.Hashtable"></see> class with the default initial capacity.</returns>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Collections.IDictionary)">
      <summary>Copies the entries from the specified dictionary to a new case-insensitive instance of the <see cref="T:System.Collections.Hashtable"></see> class with the same initial capacity as the number of entries copied.</summary>
      <param name="d">The <see cref="T:System.Collections.IDictionary"></see> to copy to a new case-insensitive <see cref="T:System.Collections.Hashtable"></see>.</param>
      <returns>A new case-insensitive instance of the <see cref="T:System.Collections.Hashtable"></see> class containing the entries from the specified <see cref="T:System.Collections.IDictionary"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="d">d</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Int32)">
      <summary>Creates a new case-insensitive instance of the <see cref="T:System.Collections.Hashtable"></see> class with the specified initial capacity.</summary>
      <param name="capacity">The approximate number of entries that the <see cref="T:System.Collections.Hashtable"></see> can initially contain.</param>
      <returns>A new case-insensitive instance of the <see cref="T:System.Collections.Hashtable"></see> class with the specified initial capacity.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveSortedList">
      <summary>Creates a new instance of the <see cref="T:System.Collections.SortedList"></see> class that ignores the case of strings.</summary>
      <returns>A new instance of the <see cref="T:System.Collections.SortedList"></see> class that ignores the case of strings.</returns>
    </member>
    <member name="T:System.Collections.Specialized.HybridDictionary">
      <summary>Implements IDictionary by using a <see cref="T:System.Collections.Specialized.ListDictionary"></see> while the collection is small, and then switching to a <see cref="T:System.Collections.Hashtable"></see> when the collection gets large.</summary>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.#ctor">
      <summary>Creates an empty case-sensitive <see cref="T:System.Collections.Specialized.HybridDictionary"></see>.</summary>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)">
      <summary>Creates an empty <see cref="T:System.Collections.Specialized.HybridDictionary"></see> with the specified case sensitivity.</summary>
      <param name="caseInsensitive">A Boolean that denotes whether the <see cref="T:System.Collections.Specialized.HybridDictionary"></see> is case-insensitive.</param>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)">
      <summary>Creates a case-sensitive <see cref="T:System.Collections.Specialized.HybridDictionary"></see> with the specified initial size.</summary>
      <param name="initialSize">The approximate number of entries that the <see cref="T:System.Collections.Specialized.HybridDictionary"></see> can initially contain.</param>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)">
      <summary>Creates a <see cref="T:System.Collections.Specialized.HybridDictionary"></see> with the specified initial size and case sensitivity.</summary>
      <param name="initialSize">The approximate number of entries that the <see cref="T:System.Collections.Specialized.HybridDictionary"></see> can initially contain.</param>
      <param name="caseInsensitive">A Boolean that denotes whether the <see cref="T:System.Collections.Specialized.HybridDictionary"></see> is case-insensitive.</param>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)">
      <summary>Adds an entry with the specified key and value into the <see cref="T:System.Collections.Specialized.HybridDictionary"></see>.</summary>
      <param name="key">The key of the entry to add.</param>
      <param name="value">The value of the entry to add. The value can be null.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">An entry with the same key already exists in the <see cref="T:System.Collections.Specialized.HybridDictionary"></see>.</exception>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.Clear">
      <summary>Removes all entries from the <see cref="T:System.Collections.Specialized.HybridDictionary"></see>.</summary>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.Specialized.HybridDictionary"></see> contains a specific key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Specialized.HybridDictionary"></see>.</param>
      <returns>true if the <see cref="T:System.Collections.Specialized.HybridDictionary"></see> contains an entry with the specified key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)">
      <summary>Copies the <see cref="T:System.Collections.Specialized.HybridDictionary"></see> entries to a one-dimensional <see cref="T:System.Array"></see> instance at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the <see cref="T:System.Collections.DictionaryEntry"></see> objects copied from <see cref="T:System.Collections.Specialized.HybridDictionary"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-   The number of elements in the source <see cref="T:System.Collections.Specialized.HybridDictionary"></see> is greater than the available space from <paramref name="arrayIndex">arrayIndex</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.Specialized.HybridDictionary"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.Count">
      <summary>Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Specialized.HybridDictionary"></see>.</summary>
      <returns>The number of key/value pairs contained in the <see cref="T:System.Collections.Specialized.HybridDictionary"></see>.   Retrieving the value of this property is an O(1) operation.</returns>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> that iterates through the <see cref="T:System.Collections.Specialized.HybridDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator"></see> for the <see cref="T:System.Collections.Specialized.HybridDictionary"></see>.</returns>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.HybridDictionary"></see> has a fixed size.</summary>
      <returns>This property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.HybridDictionary"></see> is read-only.</summary>
      <returns>This property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.IsSynchronized">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.HybridDictionary"></see> is synchronized (thread safe).</summary>
      <returns>This property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.Item(System.Object)">
      <summary>Gets or sets the value associated with the specified key.</summary>
      <param name="key">The key whose value to get or set.</param>
      <returns>The value associated with the specified key. If the specified key is not found, attempting to get it returns null, and attempting to set it creates a new entry using the specified key.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection"></see> containing the keys in the <see cref="T:System.Collections.Specialized.HybridDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.ICollection"></see> containing the keys in the <see cref="T:System.Collections.Specialized.HybridDictionary"></see>.</returns>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.Remove(System.Object)">
      <summary>Removes the entry with the specified key from the <see cref="T:System.Collections.Specialized.HybridDictionary"></see>.</summary>
      <param name="key">The key of the entry to remove.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.HybridDictionary"></see>.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.HybridDictionary"></see>.</returns>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection"></see> containing the values in the <see cref="T:System.Collections.Specialized.HybridDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.ICollection"></see> containing the values in the <see cref="T:System.Collections.Specialized.HybridDictionary"></see>.</returns>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator"></see> that iterates through the <see cref="T:System.Collections.Specialized.HybridDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> for the <see cref="T:System.Collections.Specialized.HybridDictionary"></see>.</returns>
    </member>
    <member name="T:System.Collections.Specialized.INotifyCollectionChanged">
      <summary>Notifies listeners of dynamic changes, such as when an item is added and removed or the whole list is cleared.</summary>
    </member>
    <member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
      <summary>Occurs when the collection changes.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Collections.Specialized.IOrderedDictionary">
      <summary>Represents an indexed collection of key/value pairs.</summary>
    </member>
    <member name="M:System.Collections.Specialized.IOrderedDictionary.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Specialized.IOrderedDictionary"></see> collection.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator"></see> for the entire <see cref="T:System.Collections.Specialized.IOrderedDictionary"></see> collection.</returns>
    </member>
    <member name="M:System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)">
      <summary>Inserts a key/value pair into the collection at the specified index.</summary>
      <param name="index">The zero-based index at which the key/value pair should be inserted.</param>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.  The value can be null.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than 0.   -or-  <paramref name="index">index</paramref> is greater than <see cref="P:System.Collections.ICollection.Count"></see>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Specialized.IOrderedDictionary"></see> collection.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Specialized.IOrderedDictionary"></see> collection is read-only.   -or-   The <see cref="T:System.Collections.Specialized.IOrderedDictionary"></see> collection has a fixed size.</exception>
    </member>
    <member name="P:System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than 0.   -or-  <paramref name="index">index</paramref> is equal to or greater than <see cref="P:System.Collections.ICollection.Count"></see>.</exception>
    </member>
    <member name="M:System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than 0.   -or-  <paramref name="index">index</paramref> is equal to or greater than <see cref="P:System.Collections.ICollection.Count"></see>.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Specialized.IOrderedDictionary"></see> collection is read-only.   -or-   The <see cref="T:System.Collections.Specialized.IOrderedDictionary"></see> collection has a fixed size.</exception>
    </member>
    <member name="T:System.Collections.Specialized.ListDictionary">
      <summary>Implements IDictionary using a singly linked list. Recommended for collections that typically include fewer than 10 items.</summary>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.#ctor">
      <summary>Creates an empty <see cref="T:System.Collections.Specialized.ListDictionary"></see> using the default comparer.</summary>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)">
      <summary>Creates an empty <see cref="T:System.Collections.Specialized.ListDictionary"></see> using the specified comparer.</summary>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> to use to determine whether two keys are equal.   -or-  null to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)"></see>.</param>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)">
      <summary>Adds an entry with the specified key and value into the <see cref="T:System.Collections.Specialized.ListDictionary"></see>.</summary>
      <param name="key">The key of the entry to add.</param>
      <param name="value">The value of the entry to add. The value can be null.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">An entry with the same key already exists in the <see cref="T:System.Collections.Specialized.ListDictionary"></see>.</exception>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.Clear">
      <summary>Removes all entries from the <see cref="T:System.Collections.Specialized.ListDictionary"></see>.</summary>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.Specialized.ListDictionary"></see> contains a specific key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Specialized.ListDictionary"></see>.</param>
      <returns>true if the <see cref="T:System.Collections.Specialized.ListDictionary"></see> contains an entry with the specified key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)">
      <summary>Copies the <see cref="T:System.Collections.Specialized.ListDictionary"></see> entries to a one-dimensional <see cref="T:System.Array"></see> instance at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the <see cref="T:System.Collections.DictionaryEntry"></see> objects copied from <see cref="T:System.Collections.Specialized.ListDictionary"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-   The number of elements in the source <see cref="T:System.Collections.Specialized.ListDictionary"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.Specialized.ListDictionary"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.Count">
      <summary>Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Specialized.ListDictionary"></see>.</summary>
      <returns>The number of key/value pairs contained in the <see cref="T:System.Collections.Specialized.ListDictionary"></see>.</returns>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> that iterates through the <see cref="T:System.Collections.Specialized.ListDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator"></see> for the <see cref="T:System.Collections.Specialized.ListDictionary"></see>.</returns>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.ListDictionary"></see> has a fixed size.</summary>
      <returns>This property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.ListDictionary"></see> is read-only.</summary>
      <returns>This property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.IsSynchronized">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.ListDictionary"></see> is synchronized (thread safe).</summary>
      <returns>This property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.Item(System.Object)">
      <summary>Gets or sets the value associated with the specified key.</summary>
      <param name="key">The key whose value to get or set.</param>
      <returns>The value associated with the specified key. If the specified key is not found, attempting to get it returns null, and attempting to set it creates a new entry using the specified key.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection"></see> containing the keys in the <see cref="T:System.Collections.Specialized.ListDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.ICollection"></see> containing the keys in the <see cref="T:System.Collections.Specialized.ListDictionary"></see>.</returns>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.Remove(System.Object)">
      <summary>Removes the entry with the specified key from the <see cref="T:System.Collections.Specialized.ListDictionary"></see>.</summary>
      <param name="key">The key of the entry to remove.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.ListDictionary"></see>.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.ListDictionary"></see>.</returns>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection"></see> containing the values in the <see cref="T:System.Collections.Specialized.ListDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.ICollection"></see> containing the values in the <see cref="T:System.Collections.Specialized.ListDictionary"></see>.</returns>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator"></see> that iterates through the <see cref="T:System.Collections.Specialized.ListDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> for the <see cref="T:System.Collections.Specialized.ListDictionary"></see>.</returns>
    </member>
    <member name="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection">
      <summary>Represents a collection of the <see cref="T:System.String"></see> keys of a collection.</summary>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Count">
      <summary>Gets the number of keys in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></see>.</summary>
      <returns>The number of keys in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></see>.</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Get(System.Int32)">
      <summary>Gets the key at the specified index of the collection.</summary>
      <param name="index">The zero-based index of the key to get from the collection.</param>
      <returns>A <see cref="T:System.String"></see> that contains the key at the specified index of the collection.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></see>.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> for the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></see>.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Item(System.Int32)">
      <summary>Gets the entry at the specified index of the collection.</summary>
      <param name="index">The zero-based index of the entry to locate in the collection.</param>
      <returns>The <see cref="T:System.String"></see> key of the entry at the specified index of the collection.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the entire <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></see> to a compatible one-dimensional <see cref="T:System.Array"></see>, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-   The number of elements in the source <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></see> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></see> is synchronized (thread safe); otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></see>.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></see>.</returns>
    </member>
    <member name="T:System.Collections.Specialized.NameObjectCollectionBase">
      <summary>Provides the abstract base class for a collection of associated <see cref="T:System.String"></see> keys and <see cref="T:System.Object"></see> values that can be accessed either with the key or with the index.</summary>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> class that is empty.</summary>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IEqualityComparer)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> class that is empty, has the default initial capacity, and uses the specified <see cref="T:System.Collections.IEqualityComparer"></see> object.</summary>
      <param name="equalityComparer">The <see cref="T:System.Collections.IEqualityComparer"></see> object to use to determine whether two keys are equal and to generate hash codes for the keys in the collection.</param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> class that is empty, has the specified initial capacity, and uses the default hash code provider and the default comparer.</summary>
      <param name="capacity">The approximate number of entries that the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance can initially contain.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> class that is empty, has the default initial capacity, and uses the specified hash code provider and the specified comparer.</summary>
      <param name="hashProvider">The <see cref="T:System.Collections.IHashCodeProvider"></see> that will supply the hash codes for all keys in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> to use to determine whether two keys are equal.</param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IEqualityComparer)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> class that is empty, has the specified initial capacity, and uses the specified <see cref="T:System.Collections.IEqualityComparer"></see> object.</summary>
      <param name="capacity">The approximate number of entries that the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> object can initially contain.</param>
      <param name="equalityComparer">The <see cref="T:System.Collections.IEqualityComparer"></see> object to use to determine whether two keys are equal and to generate hash codes for the keys in the collection.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> class that is serializable and uses the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see>.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that contains the information required to serialize the new <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object that contains the source and destination of the serialized stream associated with the new <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> class that is empty, has the specified initial capacity and uses the specified hash code provider and the specified comparer.</summary>
      <param name="capacity">The approximate number of entries that the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance can initially contain.</param>
      <param name="hashProvider">The <see cref="T:System.Collections.IHashCodeProvider"></see> that will supply the hash codes for all keys in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> to use to determine whether two keys are equal.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)">
      <summary>Adds an entry with the specified key and value into the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</summary>
      <param name="name">The <see cref="T:System.String"></see> key of the entry to add. The key can be null.</param>
      <param name="value">The <see cref="T:System.Object"></see> value of the entry to add. The value can be null.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseClear">
      <summary>Removes all entries from the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</summary>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)">
      <summary>Gets the value of the entry at the specified index of the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</summary>
      <param name="index">The zero-based index of the value to get.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the value of the entry at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)">
      <summary>Gets the value of the first entry with the specified key from the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</summary>
      <param name="name">The <see cref="T:System.String"></see> key of the entry to get. The key can be null.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the value of the first entry with the specified key, if found; otherwise, null.</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys">
      <summary>Returns a <see cref="T:System.String"></see> array that contains all the keys in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</summary>
      <returns>A <see cref="T:System.String"></see> array that contains all the keys in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues">
      <summary>Returns an <see cref="T:System.Object"></see> array that contains all the values in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</summary>
      <returns>An <see cref="T:System.Object"></see> array that contains all the values in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)">
      <summary>Returns an array of the specified type that contains all the values in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type of array to return.</param>
      <returns>An array of the specified type that contains all the values in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="type">type</paramref> is not a valid <see cref="T:System.Type"></see>.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)">
      <summary>Gets the key of the entry at the specified index of the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</summary>
      <param name="index">The zero-based index of the key to get.</param>
      <returns>A <see cref="T:System.String"></see> that represents the key of the entry at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance contains entries whose keys are not null.</summary>
      <returns>true if the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance contains entries whose keys are not null; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)">
      <summary>Removes the entries with the specified key from the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</summary>
      <param name="name">The <see cref="T:System.String"></see> key of the entries to remove. The key can be null.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)">
      <summary>Removes the entry at the specified index of the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</summary>
      <param name="index">The zero-based index of the entry to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is outside the valid range of indexes for the collection.</exception>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)">
      <summary>Sets the value of the entry at the specified index of the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</summary>
      <param name="index">The zero-based index of the entry to set.</param>
      <param name="value">The <see cref="T:System.Object"></see> that represents the new value of the entry to set. The value can be null.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)">
      <summary>Sets the value of the first entry with the specified key in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance, if found; otherwise, adds an entry with the specified key and value into the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</summary>
      <param name="name">The <see cref="T:System.String"></see> key of the entry to set. The key can be null.</param>
      <param name="value">The <see cref="T:System.Object"></see> that represents the new value of the entry to set. The value can be null.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.Count">
      <summary>Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</summary>
      <returns>The number of key/value pairs contained in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see>.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> for the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface and returns the data needed to serialize the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that contains the information required to serialize the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly">
      <summary>Gets or sets a value indicating whether the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.Keys">
      <summary>Gets a <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></see> instance that contains all the keys in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></see> instance that contains all the keys in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization(System.Object)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface and raises the deserialization event when the deserialization is complete.</summary>
      <param name="sender">The source of the deserialization event.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object associated with the current <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance is invalid.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the entire <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> to a compatible one-dimensional <see cref="T:System.Array"></see>, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-   The number of elements in the source <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> object is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> object is synchronized (thread safe); otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> object.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> object.</returns>
    </member>
    <member name="T:System.Collections.Specialized.NameValueCollection">
      <summary>Represents a collection of associated <see cref="T:System.String"></see> keys and <see cref="T:System.String"></see> values that can be accessed either with the key or with the index.</summary>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameValueCollection"></see> class that is empty, has the default initial capacity and uses the default case-insensitive hash code provider and the default case-insensitive comparer.</summary>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.IEqualityComparer)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameValueCollection"></see> class that is empty, has the default initial capacity, and uses the specified <see cref="T:System.Collections.IEqualityComparer"></see> object.</summary>
      <param name="equalityComparer">The <see cref="T:System.Collections.IEqualityComparer"></see> object to use to determine whether two keys are equal and to generate hash codes for the keys in the collection.</param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Copies the entries from the specified <see cref="T:System.Collections.Specialized.NameValueCollection"></see> to a new <see cref="T:System.Collections.Specialized.NameValueCollection"></see> with the same initial capacity as the number of entries copied and using the same hash code provider and the same comparer as the source collection.</summary>
      <param name="col">The <see cref="T:System.Collections.Specialized.NameValueCollection"></see> to copy to the new <see cref="T:System.Collections.Specialized.NameValueCollection"></see> instance.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="col">col</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameValueCollection"></see> class that is empty, has the specified initial capacity and uses the default case-insensitive hash code provider and the default case-insensitive comparer.</summary>
      <param name="capacity">The initial number of entries that the <see cref="T:System.Collections.Specialized.NameValueCollection"></see> can contain.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameValueCollection"></see> class that is empty, has the default initial capacity and uses the specified hash code provider and the specified comparer.</summary>
      <param name="hashProvider">The <see cref="T:System.Collections.IHashCodeProvider"></see> that will supply the hash codes for all keys in the <see cref="T:System.Collections.Specialized.NameValueCollection"></see>.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> to use to determine whether two keys are equal.</param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.IEqualityComparer)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameValueCollection"></see> class that is empty, has the specified initial capacity, and uses the specified <see cref="T:System.Collections.IEqualityComparer"></see> object.</summary>
      <param name="capacity">The initial number of entries that the <see cref="T:System.Collections.Specialized.NameValueCollection"></see> object can contain.</param>
      <param name="equalityComparer">The <see cref="T:System.Collections.IEqualityComparer"></see> object to use to determine whether two keys are equal and to generate hash codes for the keys in the collection.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.Specialized.NameValueCollection)">
      <summary>Copies the entries from the specified <see cref="T:System.Collections.Specialized.NameValueCollection"></see> to a new <see cref="T:System.Collections.Specialized.NameValueCollection"></see> with the specified initial capacity or the same initial capacity as the number of entries copied, whichever is greater, and using the default case-insensitive hash code provider and the default case-insensitive comparer.</summary>
      <param name="capacity">The initial number of entries that the <see cref="T:System.Collections.Specialized.NameValueCollection"></see> can contain.</param>
      <param name="col">The <see cref="T:System.Collections.Specialized.NameValueCollection"></see> to copy to the new <see cref="T:System.Collections.Specialized.NameValueCollection"></see> instance.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="col">col</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameValueCollection"></see> class that is serializable and uses the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see>.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that contains the information required to serialize the new <see cref="T:System.Collections.Specialized.NameValueCollection"></see> instance.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object that contains the source and destination of the serialized stream associated with the new <see cref="T:System.Collections.Specialized.NameValueCollection"></see> instance.</param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameValueCollection"></see> class that is empty, has the specified initial capacity and uses the specified hash code provider and the specified comparer.</summary>
      <param name="capacity">The initial number of entries that the <see cref="T:System.Collections.Specialized.NameValueCollection"></see> can contain.</param>
      <param name="hashProvider">The <see cref="T:System.Collections.IHashCodeProvider"></see> that will supply the hash codes for all keys in the <see cref="T:System.Collections.Specialized.NameValueCollection"></see>.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> to use to determine whether two keys are equal.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection)">
      <summary>Copies the entries in the specified <see cref="T:System.Collections.Specialized.NameValueCollection"></see> to the current <see cref="T:System.Collections.Specialized.NameValueCollection"></see>.</summary>
      <param name="c">The <see cref="T:System.Collections.Specialized.NameValueCollection"></see> to copy to the current <see cref="T:System.Collections.Specialized.NameValueCollection"></see>.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="c">c</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)">
      <summary>Adds an entry with the specified name and value to the <see cref="T:System.Collections.Specialized.NameValueCollection"></see>.</summary>
      <param name="name">The <see cref="T:System.String"></see> key of the entry to add. The key can be null.</param>
      <param name="value">The <see cref="T:System.String"></see> value of the entry to add. The value can be null.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="P:System.Collections.Specialized.NameValueCollection.AllKeys">
      <summary>Gets all the keys in the <see cref="T:System.Collections.Specialized.NameValueCollection"></see>.</summary>
      <returns>A <see cref="T:System.String"></see> array that contains all the keys of the <see cref="T:System.Collections.Specialized.NameValueCollection"></see>.</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Clear">
      <summary>Invalidates the cached arrays and removes all entries from the <see cref="T:System.Collections.Specialized.NameValueCollection"></see>.</summary>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies the entire <see cref="T:System.Collections.Specialized.NameValueCollection"></see> to a compatible one-dimensional <see cref="T:System.Array"></see>, starting at the specified index of the target array.</summary>
      <param name="dest">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Specialized.NameValueCollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="index">The zero-based index in dest at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="dest">dest</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="dest">dest</paramref> is multidimensional.   -or-   The number of elements in the source <see cref="T:System.Collections.Specialized.NameValueCollection"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="dest">dest</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.Specialized.NameValueCollection"></see> cannot be cast automatically to the type of the destination <paramref name="dest">dest</paramref>.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Get(System.Int32)">
      <summary>Gets the values at the specified index of the <see cref="T:System.Collections.Specialized.NameValueCollection"></see> combined into one comma-separated list.</summary>
      <param name="index">The zero-based index of the entry that contains the values to get from the collection.</param>
      <returns>A <see cref="T:System.String"></see> that contains a comma-separated list of the values at the specified index of the <see cref="T:System.Collections.Specialized.NameValueCollection"></see>, if found; otherwise, null.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Get(System.String)">
      <summary>Gets the values associated with the specified key from the <see cref="T:System.Collections.Specialized.NameValueCollection"></see> combined into one comma-separated list.</summary>
      <param name="name">The <see cref="T:System.String"></see> key of the entry that contains the values to get. The key can be null.</param>
      <returns>A <see cref="T:System.String"></see> that contains a comma-separated list of the values associated with the specified key from the <see cref="T:System.Collections.Specialized.NameValueCollection"></see>, if found; otherwise, null.</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.GetKey(System.Int32)">
      <summary>Gets the key at the specified index of the <see cref="T:System.Collections.Specialized.NameValueCollection"></see>.</summary>
      <param name="index">The zero-based index of the key to get from the collection.</param>
      <returns>A <see cref="T:System.String"></see> that contains the key at the specified index of the <see cref="T:System.Collections.Specialized.NameValueCollection"></see>, if found; otherwise, null.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.GetValues(System.Int32)">
      <summary>Gets the values at the specified index of the <see cref="T:System.Collections.Specialized.NameValueCollection"></see>.</summary>
      <param name="index">The zero-based index of the entry that contains the values to get from the collection.</param>
      <returns>A <see cref="T:System.String"></see> array that contains the values at the specified index of the <see cref="T:System.Collections.Specialized.NameValueCollection"></see>, if found; otherwise, null.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.GetValues(System.String)">
      <summary>Gets the values associated with the specified key from the <see cref="T:System.Collections.Specialized.NameValueCollection"></see>.</summary>
      <param name="name">The <see cref="T:System.String"></see> key of the entry that contains the values to get. The key can be null.</param>
      <returns>A <see cref="T:System.String"></see> array that contains the values associated with the specified key from the <see cref="T:System.Collections.Specialized.NameValueCollection"></see>, if found; otherwise, null.</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.HasKeys">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.NameValueCollection"></see> contains keys that are not null.</summary>
      <returns>true if the <see cref="T:System.Collections.Specialized.NameValueCollection"></see> contains keys that are not null; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays">
      <summary>Resets the cached arrays of the collection to null.</summary>
    </member>
    <member name="P:System.Collections.Specialized.NameValueCollection.Item(System.Int32)">
      <summary>Gets the entry at the specified index of the <see cref="T:System.Collections.Specialized.NameValueCollection"></see>.</summary>
      <param name="index">The zero-based index of the entry to locate in the collection.</param>
      <returns>A <see cref="T:System.String"></see> that contains the comma-separated list of values at the specified index of the collection.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="P:System.Collections.Specialized.NameValueCollection.Item(System.String)">
      <summary>Gets or sets the entry with the specified key in the <see cref="T:System.Collections.Specialized.NameValueCollection"></see>.</summary>
      <param name="name">The <see cref="T:System.String"></see> key of the entry to locate. The key can be null.</param>
      <returns>A <see cref="T:System.String"></see> that contains the comma-separated list of values associated with the specified key, if found; otherwise, null.</returns>
      <exception cref="T:System.NotSupportedException">The collection is read-only and the operation attempts to modify the collection.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Remove(System.String)">
      <summary>Removes the entries with the specified key from the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</summary>
      <param name="name">The <see cref="T:System.String"></see> key of the entry to remove. The key can be null.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Set(System.String,System.String)">
      <summary>Sets the value of an entry in the <see cref="T:System.Collections.Specialized.NameValueCollection"></see>.</summary>
      <param name="name">The <see cref="T:System.String"></see> key of the entry to add the new value to. The key can be null.</param>
      <param name="value">The <see cref="T:System.Object"></see> that represents the new value to add to the specified entry. The value can be null.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
      <summary>Describes the action that caused a <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"></see> event.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
      <summary>An item was added to the collection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move">
      <summary>An item was moved within the collection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
      <summary>An item was removed from the collection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
      <summary>An item was replaced in the collection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
      <summary>The content of the collection was cleared.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"></see> event.</summary>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"></see> change.</summary>
      <param name="action">The action that caused the event. This must be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"></see>.</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a multi-item change.</summary>
      <param name="action">The action that caused the event. This can be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"></see>, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"></see>, or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove"></see>.</param>
      <param name="changedItems">The items that are affected by the change.</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a one-item change.</summary>
      <param name="action">The action that caused the event. This can be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"></see>, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"></see>, or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove"></see>.</param>
      <param name="changedItem">The item that is affected by the change.</param>
      <exception cref="T:System.ArgumentException">If <paramref name="action">action</paramref> is not Reset, Add, or Remove, or if <paramref name="action">action</paramref> is Reset and <paramref name="changedItem">changedItem</paramref> is not null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a multi-item <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see> change.</summary>
      <param name="action">The action that caused the event. This can only be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see>.</param>
      <param name="newItems">The new items that are replacing the original items.</param>
      <param name="oldItems">The original items that are replaced.</param>
      <exception cref="T:System.ArgumentException">If <paramref name="action">action</paramref> is not Replace.</exception>
      <exception cref="T:System.ArgumentNullException">If <paramref name="oldItems">oldItems</paramref> or <paramref name="newItems">newItems</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a multi-item change or a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"></see> change.</summary>
      <param name="action">The action that caused the event. This can be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"></see>, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"></see>, or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove"></see>.</param>
      <param name="changedItems">The items affected by the change.</param>
      <param name="startingIndex">The index where the change occurred.</param>
      <exception cref="T:System.ArgumentException">If <paramref name="action">action</paramref> is not Reset, Add, or Remove, if <paramref name="action">action</paramref> is Reset and either <paramref name="changedItems">changedItems</paramref> is not null or <paramref name="startingIndex">startingIndex</paramref> is not -1, or if action is Add or Remove and <paramref name="startingIndex">startingIndex</paramref> is less than -1.</exception>
      <exception cref="T:System.ArgumentNullException">If <paramref name="action">action</paramref> is Add or Remove and <paramref name="changedItems">changedItems</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a one-item change.</summary>
      <param name="action">The action that caused the event. This can be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"></see>, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"></see>, or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove"></see>.</param>
      <param name="changedItem">The item that is affected by the change.</param>
      <param name="index">The index where the change occurred.</param>
      <exception cref="T:System.ArgumentException">If <paramref name="action">action</paramref> is not Reset, Add, or Remove, or if <paramref name="action">action</paramref> is Reset and either <paramref name="changedItems">changedItems</paramref> is not null or <paramref name="index">index</paramref> is not -1.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a one-item <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see> change.</summary>
      <param name="action">The action that caused the event. This can only be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see>.</param>
      <param name="newItem">The new item that is replacing the original item.</param>
      <param name="oldItem">The original item that is replaced.</param>
      <exception cref="T:System.ArgumentException">If <paramref name="action">action</paramref> is not Replace.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a multi-item <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see> change.</summary>
      <param name="action">The action that caused the event. This can only be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see>.</param>
      <param name="newItems">The new items that are replacing the original items.</param>
      <param name="oldItems">The original items that are replaced.</param>
      <param name="startingIndex">The index of the first item of the items that are being replaced.</param>
      <exception cref="T:System.ArgumentException">If <paramref name="action">action</paramref> is not Replace.</exception>
      <exception cref="T:System.ArgumentNullException">If <paramref name="oldItems">oldItems</paramref> or <paramref name="newItems">newItems</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a multi-item <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move"></see> change.</summary>
      <param name="action">The action that caused the event. This can only be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move"></see>.</param>
      <param name="changedItems">The items affected by the change.</param>
      <param name="index">The new index for the changed items.</param>
      <param name="oldIndex">The old index for the changed items.</param>
      <exception cref="T:System.ArgumentException">If <paramref name="action">action</paramref> is not Move or <paramref name="index">index</paramref> is less than 0.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a one-item <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move"></see> change.</summary>
      <param name="action">The action that caused the event. This can only be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move"></see>.</param>
      <param name="changedItem">The item affected by the change.</param>
      <param name="index">The new index for the changed item.</param>
      <param name="oldIndex">The old index for the changed item.</param>
      <exception cref="T:System.ArgumentException">If <paramref name="action">action</paramref> is not Move or <paramref name="index">index</paramref> is less than 0.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a one-item <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see> change.</summary>
      <param name="action">The action that caused the event. This can be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see>.</param>
      <param name="newItem">The new item that is replacing the original item.</param>
      <param name="oldItem">The original item that is replaced.</param>
      <param name="index">The index of the item being replaced.</param>
      <exception cref="T:System.ArgumentException">If <paramref name="action">action</paramref> is not Replace.</exception>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
      <summary>Gets the action that caused the event.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"></see> value that describes the action that caused the event.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
      <summary>Gets the list of new items involved in the change.</summary>
      <returns>The list of new items involved in the change.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
      <summary>Gets the index at which the change occurred.</summary>
      <returns>The zero-based index at which the change occurred.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
      <summary>Gets the list of items affected by a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see>, Remove, or Move action.</summary>
      <returns>The list of items affected by a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see>, Remove, or Move action.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
      <summary>Gets the index at which a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move"></see>, Remove, or Replace action occurred.</summary>
      <returns>The zero-based index at which a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move"></see>, Remove, or Replace action occurred.</returns>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"></see> event.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">Information about the event.</param>
    </member>
    <member name="T:System.Collections.Specialized.OrderedDictionary">
      <summary>Represents a collection of key/value pairs that are accessible by the key or index.</summary>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> class.</summary>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Collections.IEqualityComparer)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> class using the specified comparer.</summary>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> to use to determine whether two keys are equal.   -or-  null to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)"></see>.</param>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> class using the specified initial capacity.</summary>
      <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection can contain.</param>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32,System.Collections.IEqualityComparer)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> class using the specified initial capacity and comparer.</summary>
      <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection can contain.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer"></see> to use to determine whether two keys are equal.   -or-  null to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)"></see>.</param>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> class that is serializable using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> objects.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object containing the information required to serialize the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see>.</param>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.Add(System.Object,System.Object)">
      <summary>Adds an entry with the specified key and value into the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection with the lowest available index.</summary>
      <param name="key">The key of the entry to add.</param>
      <param name="value">The value of the entry to add. This value can be null.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection is read-only.</exception>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.AsReadOnly">
      <summary>Returns a read-only copy of the current <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection.</summary>
      <returns>A read-only copy of the current <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection.</returns>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection is read-only.</exception>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection contains a specific key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection.</param>
      <returns>true if the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.CopyTo(System.Array,System.Int32)">
      <summary>Copies the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> elements to a one-dimensional <see cref="T:System.Array"></see> object at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> object that is the destination of the <see cref="T:System.Collections.DictionaryEntry"></see> objects copied from <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.Count">
      <summary>Gets the number of key/values pairs contained in the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection.</summary>
      <returns>The number of key/value pairs contained in the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection.</returns>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object that iterates through the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection.</returns>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface and returns the data needed to serialize the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object containing the information required to serialize the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.Insert(System.Int32,System.Object,System.Object)">
      <summary>Inserts a new entry into the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection with the specified key and value at the specified index.</summary>
      <param name="index">The zero-based index at which the element should be inserted.</param>
      <param name="key">The key of the entry to add.</param>
      <param name="value">The value of the entry to add. The value can be null.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is out of range.</exception>
      <exception cref="T:System.NotSupportedException">This collection is read-only.</exception>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection is read-only; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.Item(System.Int32)">
      <summary>Gets or sets the value at the specified index.</summary>
      <param name="index">The zero-based index of the value to get or set.</param>
      <returns>The value of the item at the specified index.</returns>
      <exception cref="T:System.NotSupportedException">The property is being set and the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection is read-only.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> is equal to or greater than <see cref="P:System.Collections.Specialized.OrderedDictionary.Count"></see>.</exception>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.Item(System.Object)">
      <summary>Gets or sets the value with the specified key.</summary>
      <param name="key">The key of the value to get or set.</param>
      <returns>The value associated with the specified key. If the specified key is not found, attempting to get it returns null, and attempting to set it creates a new element using the specified key.</returns>
      <exception cref="T:System.NotSupportedException">The property is being set and the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection is read-only.</exception>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection"></see> object containing the keys in the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection.</summary>
      <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the keys in the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection.</returns>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.OnDeserialization(System.Object)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface and is called back by the deserialization event when deserialization is complete.</summary>
      <param name="sender">The source of the deserialization event.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object associated with the current <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection is invalid.</exception>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.Remove(System.Object)">
      <summary>Removes the entry with the specified key from the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection.</summary>
      <param name="key">The key of the entry to remove.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection is read-only.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.RemoveAt(System.Int32)">
      <summary>Removes the entry at the specified index from the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection.</summary>
      <param name="index">The zero-based index of the entry to remove.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection is read-only.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.   - or -  <paramref name="index">index</paramref> is equal to or greater than <see cref="P:System.Collections.Specialized.OrderedDictionary.Count"></see>.</exception>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection.</summary>
      <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection.</returns>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> object is synchronized (thread-safe).</summary>
      <returns>This method always returns false.</returns>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> object.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> object.</returns>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.System#Collections#IDictionary#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> has a fixed size; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object that iterates through the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.Specialized.OrderedDictionary"></see> collection.</returns>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface and is called back by the deserialization event when deserialization is complete.</summary>
      <param name="sender">The source of the deserialization event.</param>
    </member>
    <member name="T:System.Collections.Specialized.StringCollection">
      <summary>Represents a collection of strings.</summary>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.StringCollection"></see> class.</summary>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Add(System.String)">
      <summary>Adds a string to the end of the <see cref="T:System.Collections.Specialized.StringCollection"></see>.</summary>
      <param name="value">The string to add to the end of the <see cref="T:System.Collections.Specialized.StringCollection"></see>. The value can be null.</param>
      <returns>The zero-based index at which the new element is inserted.</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.AddRange(System.String[])">
      <summary>Copies the elements of a string array to the end of the <see cref="T:System.Collections.Specialized.StringCollection"></see>.</summary>
      <param name="value">An array of strings to add to the end of the <see cref="T:System.Collections.Specialized.StringCollection"></see>. The array itself can not be null but it can contain elements that are null.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Clear">
      <summary>Removes all the strings from the <see cref="T:System.Collections.Specialized.StringCollection"></see>.</summary>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Contains(System.String)">
      <summary>Determines whether the specified string is in the <see cref="T:System.Collections.Specialized.StringCollection"></see>.</summary>
      <param name="value">The string to locate in the <see cref="T:System.Collections.Specialized.StringCollection"></see>. The value can be null.</param>
      <returns>true if <paramref name="value">value</paramref> is found in the <see cref="T:System.Collections.Specialized.StringCollection"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.CopyTo(System.String[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.Collections.Specialized.StringCollection"></see> values to a one-dimensional array of strings, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional array of strings that is the destination of the elements copied from <see cref="T:System.Collections.Specialized.StringCollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-   The number of elements in the source <see cref="T:System.Collections.Specialized.StringCollection"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.Specialized.StringCollection"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.Count">
      <summary>Gets the number of strings contained in the <see cref="T:System.Collections.Specialized.StringCollection"></see>.</summary>
      <returns>The number of strings contained in the <see cref="T:System.Collections.Specialized.StringCollection"></see>.</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.GetEnumerator">
      <summary>Returns a <see cref="T:System.Collections.Specialized.StringEnumerator"></see> that iterates through the <see cref="T:System.Collections.Specialized.StringCollection"></see>.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.StringEnumerator"></see> for the <see cref="T:System.Collections.Specialized.StringCollection"></see>.</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.IndexOf(System.String)">
      <summary>Searches for the specified string and returns the zero-based index of the first occurrence within the <see cref="T:System.Collections.Specialized.StringCollection"></see>.</summary>
      <param name="value">The string to locate. The value can be null.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value">value</paramref> in the <see cref="T:System.Collections.Specialized.StringCollection"></see>, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Insert(System.Int32,System.String)">
      <summary>Inserts a string into the <see cref="T:System.Collections.Specialized.StringCollection"></see> at the specified index.</summary>
      <param name="index">The zero-based index at which value is inserted.</param>
      <param name="value">The string to insert. The value can be null.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> greater than <see cref="P:System.Collections.Specialized.StringCollection.Count"></see>.</exception>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.StringCollection"></see> is read-only.</summary>
      <returns>This property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.Specialized.StringCollection"></see> is synchronized (thread safe).</summary>
      <returns>This property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the entry to get or set.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> is equal to or greater than <see cref="P:System.Collections.Specialized.StringCollection.Count"></see>.</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Remove(System.String)">
      <summary>Removes the first occurrence of a specific string from the <see cref="T:System.Collections.Specialized.StringCollection"></see>.</summary>
      <param name="value">The string to remove from the <see cref="T:System.Collections.Specialized.StringCollection"></see>. The value can be null.</param>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.RemoveAt(System.Int32)">
      <summary>Removes the string at the specified index of the <see cref="T:System.Collections.Specialized.StringCollection"></see>.</summary>
      <param name="index">The zero-based index of the string to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> is equal to or greater than <see cref="P:System.Collections.Specialized.StringCollection.Count"></see>.</exception>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.StringCollection"></see>.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.StringCollection"></see>.</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the entire <see cref="T:System.Collections.Specialized.StringCollection"></see> to a compatible one-dimensional <see cref="T:System.Array"></see>, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Specialized.StringCollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-   The number of elements in the source <see cref="T:System.Collections.Specialized.StringCollection"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.Specialized.StringCollection"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns a <see cref="T:System.Collections.IEnumerator"></see> that iterates through the <see cref="T:System.Collections.Specialized.StringCollection"></see>.</summary>
      <returns>A <see cref="T:System.Collections.IEnumerator"></see> for the <see cref="T:System.Collections.Specialized.StringCollection"></see>.</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adds an object to the end of the <see cref="T:System.Collections.Specialized.StringCollection"></see>.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to be added to the end of the <see cref="T:System.Collections.Specialized.StringCollection"></see>. The value can be null.</param>
      <returns>The <see cref="T:System.Collections.Specialized.StringCollection"></see> index at which the <paramref name="value">value</paramref> has been added.</returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Specialized.StringCollection"></see> is read-only.   -or-   The <see cref="T:System.Collections.Specialized.StringCollection"></see> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether an element is in the <see cref="T:System.Collections.Specialized.StringCollection"></see>.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.Specialized.StringCollection"></see>. The value can be null.</param>
      <returns>true if <paramref name="value">value</paramref> is found in the <see cref="T:System.Collections.Specialized.StringCollection"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Searches for the specified <see cref="T:System.Object"></see> and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Specialized.StringCollection"></see>.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.Specialized.StringCollection"></see>. The value can be null.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value">value</paramref> within the entire <see cref="T:System.Collections.Specialized.StringCollection"></see>, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an element into the <see cref="T:System.Collections.Specialized.StringCollection"></see> at the specified index.</summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">The <see cref="T:System.Object"></see> to insert. The value can be null.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> is greater than <see cref="P:System.Collections.Specialized.StringCollection.Count"></see>.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Specialized.StringCollection"></see> is read-only.   -or-   The <see cref="T:System.Collections.Specialized.StringCollection"></see> has a fixed size.</exception>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.StringCollection"></see> object has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.Specialized.StringCollection"></see> object has a fixed size; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.StringCollection"></see> object is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Specialized.StringCollection"></see> object is read-only; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> is equal to or greater than <see cref="P:System.Collections.Specialized.StringCollection.Count"></see>.</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Specialized.StringCollection"></see>.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to remove from the <see cref="T:System.Collections.Specialized.StringCollection"></see>. The value can be null.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Specialized.StringCollection"></see> is read-only.   -or-   The <see cref="T:System.Collections.Specialized.StringCollection"></see> has a fixed size.</exception>
    </member>
    <member name="T:System.Collections.Specialized.StringDictionary">
      <summary>Implements a hash table with the key and the value strongly typed to be strings rather than objects.</summary>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.StringDictionary"></see> class.</summary>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.Add(System.String,System.String)">
      <summary>Adds an entry with the specified key and value into the <see cref="T:System.Collections.Specialized.StringDictionary"></see>.</summary>
      <param name="key">The key of the entry to add.</param>
      <param name="value">The value of the entry to add. The value can be null.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">An entry with the same key already exists in the <see cref="T:System.Collections.Specialized.StringDictionary"></see>.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Specialized.StringDictionary"></see> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.Clear">
      <summary>Removes all entries from the <see cref="T:System.Collections.Specialized.StringDictionary"></see>.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Specialized.StringDictionary"></see> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.ContainsKey(System.String)">
      <summary>Determines if the <see cref="T:System.Collections.Specialized.StringDictionary"></see> contains a specific key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Specialized.StringDictionary"></see>.</param>
      <returns>true if the <see cref="T:System.Collections.Specialized.StringDictionary"></see> contains an entry with the specified key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">The key is null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.ContainsValue(System.String)">
      <summary>Determines if the <see cref="T:System.Collections.Specialized.StringDictionary"></see> contains a specific value.</summary>
      <param name="value">The value to locate in the <see cref="T:System.Collections.Specialized.StringDictionary"></see>. The value can be null.</param>
      <returns>true if the <see cref="T:System.Collections.Specialized.StringDictionary"></see> contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.CopyTo(System.Array,System.Int32)">
      <summary>Copies the string dictionary values to a one-dimensional <see cref="T:System.Array"></see> instance at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the values copied from the <see cref="T:System.Collections.Specialized.StringDictionary"></see>.</param>
      <param name="index">The index in the array where copying begins.</param>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-   The number of elements in the <see cref="T:System.Collections.Specialized.StringDictionary"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than the lower bound of <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.Count">
      <summary>Gets the number of key/value pairs in the <see cref="T:System.Collections.Specialized.StringDictionary"></see>.</summary>
      <returns>The number of key/value pairs in the <see cref="T:System.Collections.Specialized.StringDictionary"></see>.   Retrieving the value of this property is an O(1) operation.</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.GetEnumerator">
      <summary>Returns an enumerator that iterates through the string dictionary.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that iterates through the string dictionary.</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.Specialized.StringDictionary"></see> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.Specialized.StringDictionary"></see> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.Item(System.String)">
      <summary>Gets or sets the value associated with the specified key.</summary>
      <param name="key">The key whose value to get or set.</param>
      <returns>The value associated with the specified key. If the specified key is not found, Get returns null, and Set creates a new entry with the specified key.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.Keys">
      <summary>Gets a collection of keys in the <see cref="T:System.Collections.Specialized.StringDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.ICollection"></see> that provides the keys in the <see cref="T:System.Collections.Specialized.StringDictionary"></see>.</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.Remove(System.String)">
      <summary>Removes the entry with the specified key from the string dictionary.</summary>
      <param name="key">The key of the entry to remove.</param>
      <exception cref="T:System.ArgumentNullException">The key is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Specialized.StringDictionary"></see> is read-only.</exception>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.StringDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Object"></see> that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.StringDictionary"></see>.</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.Values">
      <summary>Gets a collection of values in the <see cref="T:System.Collections.Specialized.StringDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.ICollection"></see> that provides the values in the <see cref="T:System.Collections.Specialized.StringDictionary"></see>.</returns>
    </member>
    <member name="T:System.Collections.Specialized.StringEnumerator">
      <summary>Supports a simple iteration over a <see cref="T:System.Collections.Specialized.StringCollection"></see>.</summary>
    </member>
    <member name="P:System.Collections.Specialized.StringEnumerator.Current">
      <summary>Gets the current element in the collection.</summary>
      <returns>The current element in the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringEnumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Forms.BindingSource.AddingNew"></see> event.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AddingNewEventArgs"></see> class using no parameters.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AddingNewEventArgs"></see> class using the specified object as the new item.</summary>
      <param name="newObject">An <see cref="T:System.Object"></see> to use as the new item value.</param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary>Gets or sets the object to be added to the binding list.</summary>
      <returns>The <see cref="T:System.Object"></see> to be added as a new item to the associated collection.</returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Forms.BindingSource.AddingNew"></see> event.</summary>
      <param name="sender">The source of the event, typically a data container or data-bound collection.</param>
      <param name="e">A <see cref="T:System.ComponentModel.AddingNewEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary>Specifies the value to pass to a property to cause the property to get its value from another source. This is known as ambience. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute"></see> class, given a Boolean value for its value.</summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute"></see> class, given an 8-bit unsigned integer for its value.</summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute"></see> class, given a Unicode character for its value.</summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute"></see> class, given a double-precision floating-point number for its value.</summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute"></see> class, given a 16-bit signed integer for its value.</summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute"></see> class, given a 32-bit signed integer for its value.</summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute"></see> class, given a 64-bit signed integer for its value.</summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute"></see> class, given an object for its value.</summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute"></see> class, given a single-precision floating point number for its value.</summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute"></see> class, given a string for its value.</summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute"></see> class, given the value and its type.</summary>
      <param name="type">The <see cref="T:System.Type"></see> of the value parameter.</param>
      <param name="value">The value for this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.ComponentModel.AmbientValueAttribute"></see> is equal to the current <see cref="T:System.ComponentModel.AmbientValueAttribute"></see>.</summary>
      <param name="obj">The <see cref="T:System.ComponentModel.AmbientValueAttribute"></see> to compare with the current <see cref="T:System.ComponentModel.AmbientValueAttribute"></see>.</param>
      <returns>true if the specified <see cref="T:System.ComponentModel.AmbientValueAttribute"></see> is equal to the current <see cref="T:System.ComponentModel.AmbientValueAttribute"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.AmbientValueAttribute"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary>Gets the object that is the value of this <see cref="T:System.ComponentModel.AmbientValueAttribute"></see>.</summary>
      <returns>The object that is the value of this <see cref="T:System.ComponentModel.AmbientValueAttribute"></see>.</returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary>Provides a type converter to convert <see cref="T:System.Array"></see> objects to and from various other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ArrayConverter"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified destination type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">The culture into which value will be converted.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value to.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Gets a collection of properties for the type of array specified by the value parameter.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="value">An <see cref="T:System.Object"></see> that specifies the type of array to get the properties for.</param>
      <param name="attributes">An array of type <see cref="T:System.Attribute"></see> that will be used as a filter.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties that are exposed for an array, or null if there are no properties.</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a value indicating whether this object supports properties.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true because <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])"></see> should be called to find the properties of this object. This method never returns false.</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventArgs">
      <summary>Provides data for the MethodNameCompleted event.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"></see> class.</summary>
      <param name="error">Any error that occurred during the asynchronous operation.</param>
      <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
      <param name="userState">The optional user-supplied state object passed to the <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)"></see> method.</param>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
      <summary>Gets a value indicating whether an asynchronous operation has been canceled.</summary>
      <returns>true if the background operation has been canceled; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
      <summary>Gets a value indicating which error occurred during an asynchronous operation.</summary>
      <returns>An <see cref="T:System.Exception"></see> instance, if an error occurred during an asynchronous operation; otherwise null.</returns>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
      <summary>Raises a user-supplied exception if an asynchronous operation failed.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled"></see> property is true.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"></see> property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException"></see> property holds a reference to <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"></see>.</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
      <summary>Gets the unique identifier for the asynchronous task.</summary>
      <returns>An object reference that uniquely identifies the asynchronous task; otherwise, null if no value has been set.</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventHandler">
      <summary>Represents the method that will handle the MethodNameCompleted event of an asynchronous operation.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.AsyncOperation">
      <summary>Tracks the lifetime of an asynchronous operation.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Finalize">
      <summary>Finalizes the asynchronous operation.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.OperationCompleted">
      <summary>Ends the lifetime of an asynchronous operation.</summary>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted"></see> has been called previously for this task.</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Invokes a delegate on the thread or context appropriate for the application model.</summary>
      <param name="d">A <see cref="T:System.Threading.SendOrPostCallback"></see> object that wraps the delegate to be called when the operation ends.</param>
      <param name="arg">An argument for the delegate contained in the d parameter.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)"></see> method has been called previously for this task.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="d">d</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Ends the lifetime of an asynchronous operation.</summary>
      <param name="d">A <see cref="T:System.Threading.SendOrPostCallback"></see> object that wraps the delegate to be called when the operation ends.</param>
      <param name="arg">An argument for the delegate contained in the d parameter.</param>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted"></see> has been called previously for this task.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="d">d</paramref> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
      <summary>Gets the <see cref="T:System.Threading.SynchronizationContext"></see> object that was passed to the constructor.</summary>
      <returns>The <see cref="T:System.Threading.SynchronizationContext"></see> object that was passed to the constructor.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
      <summary>Gets or sets an object used to uniquely identify an asynchronous operation.</summary>
      <returns>The state object passed to the asynchronous method invocation.</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncOperationManager">
      <summary>Provides concurrency management for classes that support asynchronous method calls. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
      <summary>Returns an <see cref="T:System.ComponentModel.AsyncOperation"></see> for tracking the duration of a particular asynchronous operation.</summary>
      <param name="userSuppliedState">An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.</param>
      <returns>An <see cref="T:System.ComponentModel.AsyncOperation"></see> that you can use to track the duration of an asynchronous method invocation.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
      <summary>Gets or sets the synchronization context for the asynchronous operation.</summary>
      <returns>The synchronization context for the asynchronous operation.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary>Represents a collection of attributes.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AttributeCollection"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AttributeCollection"></see> class.</summary>
      <param name="attributes">An array of type <see cref="T:System.Attribute"></see> that provides the attributes for this collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="attributes">attributes</paramref> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary>Gets the attribute collection.</summary>
      <returns>The attribute collection.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary>Determines whether this collection of attributes has the specified attribute.</summary>
      <param name="attribute">An <see cref="T:System.Attribute"></see> to find in the collection.</param>
      <returns>true if the collection contains the attribute or is the default attribute for the type of attribute; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary>Determines whether this attribute collection contains all the specified attributes in the attribute array.</summary>
      <param name="attributes">An array of type <see cref="T:System.Attribute"></see> to find in the collection.</param>
      <returns>true if the collection contains all the attributes; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies the collection to an array, starting at the specified index.</summary>
      <param name="array">The <see cref="T:System.Array"></see> to copy the collection to.</param>
      <param name="index">The index to start from.</param>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary>Gets the number of attributes.</summary>
      <returns>The number of attributes.</returns>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary>Specifies an empty collection that you can use, rather than creating a new one. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary>Creates a new <see cref="T:System.ComponentModel.AttributeCollection"></see> from an existing <see cref="T:System.ComponentModel.AttributeCollection"></see>.</summary>
      <param name="existing">An <see cref="T:System.ComponentModel.AttributeCollection"></see> from which to create the copy.</param>
      <param name="newAttributes">An array of type <see cref="T:System.Attribute"></see> that provides the attributes for this collection. Can be null.</param>
      <returns>A new <see cref="T:System.ComponentModel.AttributeCollection"></see> that is a copy of <paramref name="existing">existing</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="existing">existing</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary>Returns the default <see cref="T:System.Attribute"></see> of a given <see cref="T:System.Type"></see>.</summary>
      <param name="attributeType">The <see cref="T:System.Type"></see> of the attribute to retrieve.</param>
      <returns>The default <see cref="T:System.Attribute"></see> of a given <paramref name="attributeType">attributeType</paramref>.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary>Gets an enumerator for this collection.</summary>
      <returns>An enumerator of type <see cref="T:System.Collections.IEnumerator"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary>Gets the attribute with the specified index number.</summary>
      <param name="index">The zero-based index of <see cref="T:System.ComponentModel.AttributeCollection"></see>.</param>
      <returns>The <see cref="T:System.Attribute"></see> with the specified index number.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary>Gets the attribute with the specified type.</summary>
      <param name="attributeType">The <see cref="T:System.Type"></see> of the <see cref="T:System.Attribute"></see> to get from the collection.</param>
      <returns>The <see cref="T:System.Attribute"></see> with the specified type or, if the attribute does not exist, the default value for the attribute type.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary>Determines whether a specified attribute is the same as an attribute in the collection.</summary>
      <param name="attribute">An instance of <see cref="T:System.Attribute"></see> to compare with the attributes in this collection.</param>
      <returns>true if the attribute is contained within the collection and has the same value as the attribute in the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary>Determines whether the attributes in the specified array are the same as the attributes in the collection.</summary>
      <param name="attributes">An array of <see cref="T:System.CodeDom.MemberAttributes"></see> to compare with the attributes in this collection.</param>
      <returns>true if all the attributes in the array are contained in the collection and have the same values as the attributes in the collection; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary>Gets the number of elements contained in the collection.</summary>
      <returns>The number of elements contained in the collection.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the collection is synchronized (thread-safe).</summary>
      <returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator"></see> for the <see cref="T:System.Collections.IDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> for the <see cref="T:System.Collections.IDictionary"></see>.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary>Enables attribute redirection. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AttributeProviderAttribute"></see> class with the given type name.</summary>
      <param name="typeName">The name of the type to specify.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="typeName">typeName</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AttributeProviderAttribute"></see> class with the given type.</summary>
      <param name="type">The type to specify.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.AttributeProviderAttribute"></see> class with the given type name and property name.</summary>
      <param name="typeName">The name of the type to specify.</param>
      <param name="propertyName">The name of the property for which attributes will be retrieved.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="propertyName">propertyName</paramref> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary>Gets the name of the property for which attributes will be retrieved.</summary>
      <returns>The name of the property for which attributes will be retrieved.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary>Gets the assembly qualified type name passed into the constructor.</summary>
      <returns>The assembly qualified name of the type specified in the constructor.</returns>
    </member>
    <member name="T:System.ComponentModel.BackgroundWorker">
      <summary>Executes an operation on a separate thread.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.BackgroundWorker"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.CancelAsync">
      <summary>Requests cancellation of a pending background operation.</summary>
      <exception cref="T:System.InvalidOperationException"><see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation"></see> is false.</exception>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.CancellationPending">
      <summary>Gets a value indicating whether the application has requested cancellation of a background operation.</summary>
      <returns>true if the application has requested cancellation of a background operation; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.DoWork">
      <summary>Occurs when <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync"></see> is called.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.IsBusy">
      <summary>Gets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker"></see> is running an asynchronous operation.</summary>
      <returns>true, if the <see cref="T:System.ComponentModel.BackgroundWorker"></see> is running an asynchronous operation; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork"></see> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged"></see> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"></see> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
      <summary>Occurs when <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)"></see> is called.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
      <summary>Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged"></see> event.</summary>
      <param name="percentProgress">The percentage, from 0 to 100, of the background operation that is complete.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress"></see> property is set to false.</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
      <summary>Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged"></see> event.</summary>
      <param name="percentProgress">The percentage, from 0 to 100, of the background operation that is complete.</param>
      <param name="userState">The state object passed to <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)"></see>.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress"></see> property is set to false.</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
      <summary>Starts execution of a background operation.</summary>
      <exception cref="T:System.InvalidOperationException"><see cref="P:System.ComponentModel.BackgroundWorker.IsBusy"></see> is true.</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
      <summary>Starts execution of a background operation.</summary>
      <param name="argument">A parameter for use by the background operation to be executed in the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork"></see> event handler.</param>
      <exception cref="T:System.InvalidOperationException"><see cref="P:System.ComponentModel.BackgroundWorker.IsBusy"></see> is true.</exception>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
      <summary>Occurs when the background operation has completed, has been canceled, or has raised an exception.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
      <summary>Gets or sets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker"></see> can report progress updates.</summary>
      <returns>true if the <see cref="T:System.ComponentModel.BackgroundWorker"></see> supports progress updates; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
      <summary>Gets or sets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker"></see> supports asynchronous cancellation.</summary>
      <returns>true if the <see cref="T:System.ComponentModel.BackgroundWorker"></see> supports cancellation; otherwise false. The default is false.</returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary>Provides a base type converter for nonfloating-point numerical types.</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.BaseNumberConverter"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if this converter can convert an object in the given source type to the native type of the converter.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type from which you want to convert.</param>
      <returns>true if this converter can perform the operation; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="t">A <see cref="T:System.Type"></see> that represents the type to which you want to convert.</param>
      <returns>true if this converter can perform the operation; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the converter's native type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.Exception"><paramref name="value">value</paramref> is not a valid value for the target type.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified object to another type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary>Represents a collection of designers.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerCollection"></see> class that contains the specified set of designers.</summary>
      <param name="designers">A list that contains the collection of designers to add.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerCollection"></see> class that contains the specified designers.</summary>
      <param name="designers">An array of <see cref="T:System.ComponentModel.Design.IDesignerHost"></see> objects to store.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary>Gets the number of designers in the collection.</summary>
      <returns>The number of designers in the collection.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary>Gets a new enumerator for this collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that enumerates the collection.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary>Gets the designer at the specified index.</summary>
      <param name="index">The index of the designer to return.</param>
      <returns>The designer at the specified index.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the collection to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from collection. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary>Gets the number of elements contained in the collection.</summary>
      <returns>The number of elements contained in the collection.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets a new enumerator for this collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that enumerates the collection.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated"></see> and <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed"></see> events.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerEventArgs"></see> class.</summary>
      <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost"></see> of the document.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary>Gets the host of the document.</summary>
      <returns>The <see cref="T:System.ComponentModel.Design.IDesignerHost"></see> of the document.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated"></see> and <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed"></see> events that are raised when a document is created or disposed of.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.Design.DesignerEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary>Contains a collection of designer options. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies the entire collection to a compatible one-dimensional <see cref="T:System.Array"></see>, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary>Gets the number of child option collections this <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"></see> contains.</summary>
      <returns>The number of child option collections this <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"></see> contains.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator"></see> that can be used to iterate this collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that can be used to iterate this collection.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>Returns the index of the first occurrence of a given value in a range of this collection.</summary>
      <param name="value">The object to locate in the collection.</param>
      <returns>The index of the first occurrence of value within the entire collection, if found; otherwise, the lower bound of the collection minus 1.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary>Gets the child collection at the given index.</summary>
      <param name="index">The zero-based index of the child collection to get.</param>
      <returns>The child collection at the specified index.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary>Gets the child collection at the given name.</summary>
      <param name="name">The name of the child collection.</param>
      <returns>The child collection with the name specified by the <paramref name="name">name</paramref> parameter, or null if the name is not found.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary>Gets the name of this <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"></see>.</summary>
      <returns>The name of this <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary>Gets the parent collection object.</summary>
      <returns>The parent collection object, or null if there is no parent.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary>Gets the collection of properties offered by this <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"></see>, along with all of its children.</summary>
      <returns>The collection of properties offered by this <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"></see>, along with all of its children.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary>Displays a dialog box user interface (UI) with which the user can configure the options in this <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"></see>.</summary>
      <returns>true if the dialog box can be displayed; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the collection is synchronized and, therefore, thread safe.</summary>
      <returns>true if the access to the collection is synchronized; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList"></see>.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>.</param>
      <returns>The position into which the new element was inserted.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the collection contains a specific value.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the collection</param>
      <returns>true if the <see cref="T:System.Object"></see> is found in the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the collection.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the collection.</param>
      <returns>The index of <paramref name="value">value</paramref> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item into the collection at the specified index.</summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">The <see cref="T:System.Object"></see> to insert into the collection.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the collection has a fixed size.</summary>
      <returns>true if the collection has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the collection.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to remove from the collection.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes the collection item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary>Specifies that the property can be used as an application setting.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute"></see> class.</summary>
      <param name="recommendedAsConfigurable">true if the property this attribute is bound to can be used as an application setting; otherwise, false.</param>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary>Specifies the default value for the <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute"></see>, which is <see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No"></see>. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">Another object to compare to.</param>
      <returns>true if <paramref name="obj">obj</paramref> is equal to this instance; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary>Indicates whether the value of this instance is the default value for the class.</summary>
      <returns>true if this instance is the default attribute for the class; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary>Specifies that a property cannot be used as an application setting. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary>Gets a value indicating whether the property this attribute is bound to can be used as an application setting.</summary>
      <returns>true if the property this attribute is bound to can be used as an application setting; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary>Specifies that a property can be used as an application setting. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary>Provides a type converter to convert object references to and from other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ReferenceConverter"></see> class.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type to associate with this reference converter.</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value indicating whether this converter can convert an object in the given source type to a reference object using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from.</param>
      <returns>true if this object can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the reference type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see> that specifies the culture used to represent the font.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the reference type using the specified context and arguments.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see> that specifies the culture used to represent the font.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>The converted object.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a collection of standard values for the reference data type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> that holds a standard set of valid values, or null if the data type does not support a standard set of values.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a value indicating whether the list of standard values returned from <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"></see> is an exclusive list.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true because the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> returned from <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"></see> is an exhaustive list of possible values. This method never returns false.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a value indicating whether this object supports a standard set of values that can be picked from a list.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true because <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"></see> can be called to find a common set of values the object supports. This method never returns false.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Returns a value indicating whether a particular value can be added to the standard values collection.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides an additional context.</param>
      <param name="value">The value to check.</param>
      <returns>true if the value is allowed and can be added to the standard values collection; false if the value cannot be added to the standard values collection.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed"></see> event.</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.RefreshEventArgs"></see> class with the component that has changed.</summary>
      <param name="componentChanged">The component that changed.</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.RefreshEventArgs"></see> class with the type of component that has changed.</summary>
      <param name="typeChanged">The <see cref="T:System.Type"></see> that changed.</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary>Gets the component that changed its properties, events, or extenders.</summary>
      <returns>The component that changed its properties, events, or extenders, or null if all components of the same type have changed.</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary>Gets the <see cref="T:System.Type"></see> that changed its properties or events.</summary>
      <returns>The <see cref="T:System.Type"></see> that changed its properties or events.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed"></see> event raised when a <see cref="T:System.Type"></see> or component is changed during design time.</summary>
      <param name="e">A <see cref="T:System.ComponentModel.RefreshEventArgs"></see> that contains the component or <see cref="T:System.Type"></see> that changed.</param>
    </member>
    <member name="T:System.ComponentModel.RefreshProperties">
      <summary>Defines identifiers that indicate the type of a refresh of the Properties window.</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshProperties.All">
      <summary>The properties should be requeried and the view should be refreshed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.RefreshProperties.None">
      <summary>No refresh is necessary.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.RefreshProperties.Repaint">
      <summary>The view should be refreshed.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.RefreshPropertiesAttribute">
      <summary>Indicates that the property grid should refresh when the associated property value changes. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.#ctor(System.ComponentModel.RefreshProperties)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.RefreshPropertiesAttribute"></see> class.</summary>
      <param name="refresh">A <see cref="T:System.ComponentModel.RefreshProperties"></see> value indicating the nature of the refresh.</param>
    </member>
    <member name="F:System.ComponentModel.RefreshPropertiesAttribute.All">
      <summary>Indicates that all properties are queried again and refreshed if the property value is changed. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.RefreshPropertiesAttribute.Default">
      <summary>Indicates that no other properties are refreshed if the property value is changed. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.Equals(System.Object)">
      <summary>Overrides the object's <see cref="Overload:System.Object.Equals"></see> method.</summary>
      <param name="value">The object to test for equality.</param>
      <returns>true if the specified object is the same; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.GetHashCode">
      <summary>Returns the hash code for this object.</summary>
      <returns>The hash code for the object that the attribute belongs to.</returns>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.IsDefaultAttribute">
      <summary>Gets a value indicating whether the current value of the attribute is the default value for the attribute.</summary>
      <returns>true if the current value of the attribute is the default; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshPropertiesAttribute.RefreshProperties">
      <summary>Gets the refresh properties for the member.</summary>
      <returns>A <see cref="T:System.ComponentModel.RefreshProperties"></see> that indicates the current refresh properties for the member.</returns>
    </member>
    <member name="F:System.ComponentModel.RefreshPropertiesAttribute.Repaint">
      <summary>Indicates that all properties are repainted if the property value is changed. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary>Specifies whether the Visual Studio Custom Action Installer or the <see cref="~/docs/framework/tools/installutil-exe-installer-tool.md">Installutil.exe (Installer Tool)</see> should be invoked when the assembly is installed.</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.RunInstallerAttribute"></see> class.</summary>
      <param name="runInstaller">true if an installer should be invoked during installation of an assembly; otherwise, false.</param>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary>Specifies the default visiblity, which is <see cref="F:System.ComponentModel.RunInstallerAttribute.No"></see>. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary>Determines whether the value of the specified <see cref="T:System.ComponentModel.RunInstallerAttribute"></see> is equivalent to the current <see cref="T:System.ComponentModel.RunInstallerAttribute"></see>.</summary>
      <param name="obj">The object to compare.</param>
      <returns>true if the specified <see cref="T:System.ComponentModel.RunInstallerAttribute"></see> is equal to the current <see cref="T:System.ComponentModel.RunInstallerAttribute"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary>Generates a hash code for the current <see cref="T:System.ComponentModel.RunInstallerAttribute"></see>.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.RunInstallerAttribute"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary>Determines if this attribute is the default.</summary>
      <returns>true if the attribute is the default value for this attribute class; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary>Specifies that the Visual Studio Custom Action Installer or the <see cref="~/docs/framework/tools/installutil-exe-installer-tool.md">Installutil.exe (Installer Tool)</see> should not be invoked when the assembly is installed. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary>Gets a value indicating whether an installer should be invoked during installation of an assembly.</summary>
      <returns>true if an installer should be invoked during installation of an assembly; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary>Specifies that the Visual Studio Custom Action Installer or the <see cref="~/docs/framework/tools/installutil-exe-installer-tool.md">Installutil.exe (Installer Tool)</see> should be invoked when the assembly is installed. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventArgs">
      <summary>Provides data for the MethodNameCompleted event.</summary>
    </member>
    <member name="M:System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs"></see> class.</summary>
      <param name="result">The result of an asynchronous operation.</param>
      <param name="error">Any error that occurred during the asynchronous operation.</param>
      <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result">
      <summary>Gets a value that represents the result of an asynchronous operation.</summary>
      <returns>An <see cref="T:System.Object"></see> representing the result of an asynchronous operation.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException"><see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"></see> is not null. The <see cref="P:System.Exception.InnerException"></see> property holds a reference to <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"></see>.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled"></see> is true.</exception>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.UserState">
      <summary>Gets a value that represents the user state.</summary>
      <returns>An <see cref="T:System.Object"></see> representing the user state.</returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"></see> event of a <see cref="T:System.ComponentModel.BackgroundWorker"></see> class.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary>Provides a type converter to convert 8-bit unsigned integer objects to and from a string.</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.SByteConverter"></see> class.</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary>Specifies when a component property can be bound to an application setting.</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.SettingsBindableAttribute"></see> class.</summary>
      <param name="bindable">true to specify that a property is appropriate to bind settings to; otherwise, false.</param>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary>Gets a value indicating whether a property is appropriate to bind settings to.</summary>
      <returns>true if the property is appropriate to bind settings to; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">An <see cref="T:System.Object"></see> to compare with this instance or a null reference (Nothing in Visual Basic).</param>
      <returns>true if <paramref name="obj">obj</paramref> equals the type and value of this instance; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary>Specifies that a property is not appropriate to bind settings to.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary>Specifies that a property is appropriate to bind settings to.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary>Provides a type converter to convert single-precision, floating point number objects to and from various other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.SingleConverter"></see> class.</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary>Provides a type converter to convert string objects to and from other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.StringConverter"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value indicating whether this converter can convert an object in the given source type to a string using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified value object to a <see cref="T:System.String"></see> object.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.NotSupportedException">The conversion could not be performed.</exception>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary>Provides methods to verify the machine name and path conform to a specific syntax. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary>Checks the syntax of the machine name to confirm that it does not contain &quot;\&quot;.</summary>
      <param name="value">A string containing the machine name to check.</param>
      <returns>true if <paramref name="value">value</paramref> matches the proper machine name format; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary>Checks the syntax of the path to see whether it starts with &quot;\\&quot;.</summary>
      <param name="value">A string containing the path to check.</param>
      <returns>true if <paramref name="value">value</paramref> matches the proper path format; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary>Checks the syntax of the path to see if it starts with &quot;\&quot; or drive letter &quot;C:&quot;.</summary>
      <param name="value">A string containing the path to check.</param>
      <returns>true if <paramref name="value">value</paramref> matches the proper path format; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary>Provides a type converter to convert <see cref="T:System.TimeSpan"></see> objects to and from other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.TimeSpanConverter"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value indicating whether this converter can convert an object in the given source type to a <see cref="T:System.TimeSpan"></see> using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you wish to convert to.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a valid value for the target type.</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to a <see cref="T:System.TimeSpan"></see>.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a valid value for the target type.</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given object to another type.</summary>
      <param name="context">A formatter context.</param>
      <param name="culture">The culture into which value will be converted.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>The converted object.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary>Represents an attribute of a toolbox item.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ToolboxItemAttribute"></see> class and specifies whether to use default initialization values.</summary>
      <param name="defaultType">true to create a toolbox item attribute for a default type; false to associate no default toolbox item support for this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ToolboxItemAttribute"></see> class using the specified name of the type.</summary>
      <param name="toolboxItemTypeName">The names of the type of the toolbox item and of the assembly that contains the type.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ToolboxItemAttribute"></see> class using the specified type of the toolbox item.</summary>
      <param name="toolboxItemType">The type of the toolbox item.</param>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ToolboxItemAttribute"></see> class and sets the type to the default, <see cref="T:System.Drawing.Design.ToolboxItem"></see>. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">An <see cref="T:System.Object"></see> to compare with this instance or a null reference (Nothing in Visual Basic).</param>
      <returns>true if <paramref name="obj">obj</paramref> equals the type and value of this instance; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary>Gets a value indicating whether the current value of the attribute is the default value for the attribute.</summary>
      <returns>true if the current value of the attribute is the default; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ToolboxItemAttribute"></see> class and sets the type to null. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary>Gets or sets the type of the toolbox item.</summary>
      <returns>The type of the toolbox item.</returns>
      <exception cref="T:System.ArgumentException">The type cannot be found.</exception>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary>Gets or sets the name of the type of the current <see cref="T:System.Drawing.Design.ToolboxItem"></see>.</summary>
      <returns>The fully qualified type name of the current toolbox item.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary>Specifies the filter string and filter type to use for a toolbox item.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute"></see> class using the specified filter string.</summary>
      <param name="filterString">The filter string for the toolbox item.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute"></see> class using the specified filter string and type.</summary>
      <param name="filterString">The filter string for the toolbox item.</param>
      <param name="filterType">A <see cref="T:System.ComponentModel.ToolboxItemFilterType"></see> indicating the type of the filter.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">An <see cref="T:System.Object"></see> to compare with this instance or a null reference (Nothing in Visual Basic).</param>
      <returns>true if <paramref name="obj">obj</paramref> equals the type and value of this instance; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary>Gets the filter string for the toolbox item.</summary>
      <returns>The filter string for the toolbox item.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary>Gets the type of the filter.</summary>
      <returns>A <see cref="T:System.ComponentModel.ToolboxItemFilterType"></see> that indicates the type of the filter.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary>Indicates whether the specified object has a matching filter string.</summary>
      <param name="obj">The object to test for a matching filter string.</param>
      <returns>true if the specified object has a matching filter string; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary>Gets the type ID for the attribute.</summary>
      <returns>The type ID for this attribute. All <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute"></see> objects with the same filter string return the same type ID.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary>Defines identifiers used to indicate the type of filter that a <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute"></see> uses.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary>Indicates that a toolbox item filter string is allowed, but not required.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary>Indicates that custom processing is required to determine whether to use a toolbox item filter string.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary>Indicates that a toolbox item filter string is not allowed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary>Indicates that a toolbox item filter string must be present for a toolbox item to be enabled.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary>Represents an abstract class that provides properties for objects that do not have properties.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor"></see> class.</summary>
      <param name="componentType">A <see cref="T:System.Type"></see> that represents the type of component to which this property descriptor binds.</param>
      <param name="name">The name of the property.</param>
      <param name="propertyType">A <see cref="T:System.Type"></see> that represents the data type for this property.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor"></see> class.</summary>
      <param name="componentType">A <see cref="T:System.Type"></see> that represents the type of component to which this property descriptor binds.</param>
      <param name="name">The name of the property.</param>
      <param name="propertyType">A <see cref="T:System.Type"></see> that represents the data type for this property.</param>
      <param name="attributes">An <see cref="T:System.Attribute"></see> array with the attributes to associate with the property.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary>Returns whether resetting the component changes the value of the component.</summary>
      <param name="component">The component to test for reset capability.</param>
      <returns>true if resetting the component changes the value of the component; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary>Gets the type of component to which this property description binds.</summary>
      <returns>A <see cref="T:System.Type"></see> that represents the type of component to which this property binds.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary>Gets a value indicating whether this property is read-only.</summary>
      <returns>true if the property is read-only; false if the property is read/write.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary>Gets the type of the property.</summary>
      <returns>A <see cref="T:System.Type"></see> that represents the type of the property.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary>Resets the value for this property of the component.</summary>
      <param name="component">The component with the property value to be reset.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>Returns whether the value of this property can persist.</summary>
      <param name="component">The component with the property that is to be examined for persistence.</param>
      <returns>true if the value of the property can persist; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary>Represents a collection of values.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> class.</summary>
      <param name="values">An <see cref="T:System.Collections.ICollection"></see> that represents the objects to put into the collection.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies the contents of this collection to an array.</summary>
      <param name="array">An <see cref="T:System.Array"></see> that represents the array to copy to.</param>
      <param name="index">The index to start from.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary>Gets the number of objects in the collection.</summary>
      <returns>The number of objects in the collection.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary>Returns an enumerator for this collection.</summary>
      <returns>An enumerator of type <see cref="T:System.Collections.IEnumerator"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary>Gets the object at the specified index number.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.Object"></see> to get from the collection.</param>
      <returns>The <see cref="T:System.Object"></see> with the specified index.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the contents of this collection to an array.</summary>
      <param name="array">The array to copy to.</param>
      <param name="index">The index in the array where copying should begin.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#Count">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.Count"></see>.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized"></see>.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot"></see>.</summary>
      <returns>null in all cases.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator"></see>.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.TypeConverter"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>Returns whether this converter can convert an object of the given type to the type of this converter.</summary>
      <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>Returns whether this converter can convert the object to the specified type.</summary>
      <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert the object to the specified type, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>Converts the given value to the type of this converter.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary>Converts the given string to the type of this converter, using the invariant culture.</summary>
      <param name="text">The <see cref="T:System.String"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted text.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>Converts the given string to the type of this converter, using the invariant culture and the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="text">The <see cref="T:System.String"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted text.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary>Converts the given text to an object, using the specified context and culture information.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
      <param name="text">The <see cref="T:System.String"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted text.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>Converts the specified text to an object.</summary>
      <param name="text">The text representation of the object to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted text.</returns>
      <exception cref="T:System.NotSupportedException">The string cannot be converted into the appropriate object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>Converts the given text to an object, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="text">The <see cref="T:System.String"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted text.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>Converts the given value object to the specified type, using the arguments.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType">destinationType</paramref> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType">destinationType</paramref> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary>Converts the specified value to a culture-invariant string representation.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>A <see cref="T:System.String"></see> that represents the converted value.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Converts the specified value to a culture-invariant string representation, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>A <see cref="T:System.String"></see> that represents the converted value.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given value to a string representation, using the specified context and culture information.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>Converts the specified value to a string representation.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Converts the given value to a string representation, using the given context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"></see> is associated with, using the specified context, given a set of property values for the object.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"></see> of new property values.</param>
      <returns>An <see cref="T:System.Object"></see> representing the given <see cref="T:System.Collections.IDictionary"></see>, or null if the object cannot be created. This method always returns null.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary>Re-creates an <see cref="T:System.Object"></see> given a set of property values for the object.</summary>
      <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"></see> that represents a dictionary of new property values.</param>
      <returns>An <see cref="T:System.Object"></see> representing the given <see cref="T:System.Collections.IDictionary"></see>, or null if the object cannot be created. This method always returns null.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary>Returns an exception to throw when a conversion cannot be performed.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to convert, or null if the object is not available.</param>
      <returns>An <see cref="T:System.Exception"></see> that represents the exception to throw when a conversion cannot be performed.</returns>
      <exception cref="T:System.NotSupportedException">Automatically thrown by this method.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary>Returns an exception to throw when a conversion cannot be performed.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to convert, or null if the object is not available.</param>
      <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type the conversion was trying to convert to.</param>
      <returns>An <see cref="T:System.Exception"></see> that represents the exception to throw when a conversion cannot be performed.</returns>
      <exception cref="T:System.NotSupportedException">Automatically thrown by this method.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary>Returns whether changing a value on this object requires a call to the <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"></see> method to create a new value.</summary>
      <returns>true if changing a property on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"></see> to create a new value; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns whether changing a value on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"></see> to create a new value, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true if changing a property on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"></see> to create a new value; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary>Returns a collection of properties for the type of array specified by the value parameter.</summary>
      <param name="value">An <see cref="T:System.Object"></see> that specifies the type of array for which to get properties.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties that are exposed for this data type, or null if there are no properties.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Returns a collection of properties for the type of array specified by the value parameter, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="value">An <see cref="T:System.Object"></see> that specifies the type of array for which to get properties.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties that are exposed for this data type, or null if there are no properties.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="value">An <see cref="T:System.Object"></see> that specifies the type of array for which to get properties.</param>
      <param name="attributes">An array of type <see cref="T:System.Attribute"></see> that is used as a filter.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties that are exposed for this data type, or null if there are no properties.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns whether this object supports properties, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"></see> should be called to find the properties of this object; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary>Returns whether this object supports properties.</summary>
      <returns>true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"></see> should be called to find the properties of this object; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary>Returns a collection of standard values from the default context for the data type this type converter is designed for.</summary>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> containing a standard set of valid values, or null if the data type does not support a standard set of values.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.</param>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> that holds a standard set of valid values, or null if the data type does not support a standard set of values.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary>Returns whether the collection of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exclusive list.</summary>
      <returns>true if the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exhaustive list of possible values; false if other values are possible.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns whether the collection of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exclusive list of possible values, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true if the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exhaustive list of possible values; false if other values are possible.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary>Returns whether this object supports a standard set of values that can be picked from a list.</summary>
      <returns>true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> should be called to find a common set of values the object supports; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> should be called to find a common set of values the object supports; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Returns whether the given value object is valid for this type and for the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
      <returns>true if the specified value is valid for this object; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary>Returns whether the given value object is valid for this type.</summary>
      <param name="value">The object to test for validity.</param>
      <returns>true if the specified value is valid for this object; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary>Sorts a collection of properties.</summary>
      <param name="props">A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> that has the properties to sort.</param>
      <param name="names">An array of names in the order you want the properties to appear in the collection.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> that contains the sorted properties.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>Specifies what type to use as a converter for the object this attribute is bound to.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.TypeConverterAttribute"></see> class with the default type converter, which is an empty string (&quot;&quot;).</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.TypeConverterAttribute"></see> class, using the specified type name as the data converter for the object this attribute is bound to.</summary>
      <param name="typeName">The fully qualified name of the class to use for data conversion for the object this attribute is bound to.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.TypeConverterAttribute"></see> class, using the specified type as the data converter for the object this attribute is bound to.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type of the converter class to use for data conversion for the object this attribute is bound to.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>Gets the fully qualified type name of the <see cref="T:System.Type"></see> to use as a converter for the object this attribute is bound to.</summary>
      <returns>The fully qualified type name of the <see cref="T:System.Type"></see> to use as a converter for the object this attribute is bound to, or an empty string (&quot;&quot;) if none exists. The default value is an empty string (&quot;&quot;).</returns>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary>Specifies the type to use as a converter for the object this attribute is bound to.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.TypeConverterAttribute"></see>.</summary>
      <param name="obj">The object to test the value equality of.</param>
      <returns>true if the value of the given object is equal to that of the current <see cref="T:System.ComponentModel.TypeConverterAttribute"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.TypeConverterAttribute"></see>.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary>Provides supplemental metadata to the <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see> class using a parent type description provider.</summary>
      <param name="parent">The parent type description provider.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>Creates an object that can substitute for another data type.</summary>
      <param name="provider">An optional service provider.</param>
      <param name="objectType">The type of object to create. This parameter is never null.</param>
      <param name="argTypes">An optional array of types that represent the parameter types to be passed to the object's constructor. This array can be null or of zero length.</param>
      <param name="args">An optional array of parameter values to pass to the object's constructor.</param>
      <returns>The substitute <see cref="T:System.Object"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary>Gets a per-object cache, accessed as an <see cref="T:System.Collections.IDictionary"></see> of key/value pairs.</summary>
      <param name="instance">The object for which to get the cache.</param>
      <returns>An <see cref="T:System.Collections.IDictionary"></see> if the provided object supports caching; otherwise, null.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary>Gets an extended custom type descriptor for the given object.</summary>
      <param name="instance">The object for which to get the extended type descriptor.</param>
      <returns>An <see cref="T:System.ComponentModel.ICustomTypeDescriptor"></see> that can provide extended metadata for the object.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary>Gets the extender providers for the specified object.</summary>
      <param name="instance">The object to get extender providers for.</param>
      <returns>An array of extender providers for <paramref name="instance">instance</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="instance">instance</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary>Gets the name of the specified component, or null if the component has no name.</summary>
      <param name="component">The specified component.</param>
      <returns>The name of the specified component.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary>Performs normal reflection against the given object.</summary>
      <param name="instance">An instance of the type (should not be null).</param>
      <returns>The type of reflection for this <paramref name="instance">instance</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="instance">instance</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary>Performs normal reflection against a type.</summary>
      <param name="objectType">The type of object for which to retrieve the <see cref="T:System.Reflection.IReflect"></see>.</param>
      <returns>The type of reflection for this <paramref name="objectType">objectType</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="objectType">objectType</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary>Performs normal reflection against the given object with the given type.</summary>
      <param name="objectType">The type of object for which to retrieve the <see cref="T:System.Reflection.IReflect"></see>.</param>
      <param name="instance">An instance of the type. Can be null.</param>
      <returns>The type of reflection for this <paramref name="objectType">objectType</paramref>.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary>Converts a reflection type into a runtime type.</summary>
      <param name="reflectionType">The type to convert to its runtime equivalent.</param>
      <returns>A <see cref="T:System.Type"></see> that represents the runtime equivalent of <paramref name="reflectionType">reflectionType</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="reflectionType">reflectionType</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary>Gets a custom type descriptor for the given object.</summary>
      <param name="instance">An instance of the type. Can be null if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</param>
      <returns>An <see cref="T:System.ComponentModel.ICustomTypeDescriptor"></see> that can provide metadata for the type.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="instance">instance</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary>Gets a custom type descriptor for the given type.</summary>
      <param name="objectType">The type of object for which to retrieve the type descriptor.</param>
      <returns>An <see cref="T:System.ComponentModel.ICustomTypeDescriptor"></see> that can provide metadata for the type.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary>Gets a custom type descriptor for the given type and object.</summary>
      <param name="objectType">The type of object for which to retrieve the type descriptor.</param>
      <param name="instance">An instance of the type. Can be null if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</param>
      <returns>An <see cref="T:System.ComponentModel.ICustomTypeDescriptor"></see> that can provide metadata for the type.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary>Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers.</summary>
      <param name="type">The type to test for compatibility.</param>
      <returns>true if <paramref name="type">type</paramref> is compatible with the type description and its chain of type description providers; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> is null.</exception>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary>Specifies the custom type description provider for a class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute"></see> class using the specified type name.</summary>
      <param name="typeName">The qualified name of the type.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="typeName">typeName</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute"></see> class using the specified type.</summary>
      <param name="type">The type to store in the attribute.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary>Gets the type name for the type description provider.</summary>
      <returns>A <see cref="T:System.String"></see> containing the qualified type name for the <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see>.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary>Provides information about the characteristics for a component, such as its attributes, properties, and events. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary>Adds class-level attributes to the target component instance.</summary>
      <param name="instance">An instance of the target component.</param>
      <param name="attributes">An array of <see cref="T:System.Attribute"></see> objects to add to the component's class.</param>
      <returns>The newly created <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see> that was used to add the specified attributes.</returns>
      <exception cref="T:System.ArgumentNullException">One or both of the parameters is null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary>Adds class-level attributes to the target component type.</summary>
      <param name="type">The <see cref="T:System.Type"></see> of the target component.</param>
      <param name="attributes">An array of <see cref="T:System.Attribute"></see> objects to add to the component's class.</param>
      <returns>The newly created <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see> that was used to add the specified attributes.</returns>
      <exception cref="T:System.ArgumentNullException">One or both of the parameters is null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary>Adds an editor table for the given editor base type.</summary>
      <param name="editorBaseType">The editor base type to add the editor table for. If a table already exists for this type, this method will do nothing.</param>
      <param name="table">The <see cref="T:System.Collections.Hashtable"></see> to add.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Adds a type description provider for a single instance of a component.</summary>
      <param name="provider">The <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see> to add.</param>
      <param name="instance">An instance of the target component.</param>
      <exception cref="T:System.ArgumentNullException">One or both of the parameters are null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Adds a type description provider for a component class.</summary>
      <param name="provider">The <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see> to add.</param>
      <param name="type">The <see cref="T:System.Type"></see> of the target component.</param>
      <exception cref="T:System.ArgumentNullException">One or both of the parameters are null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Adds a type description provider for a single instance of a component.</summary>
      <param name="provider">The <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see> to add.</param>
      <param name="instance">An instance of the target component.</param>
      <exception cref="T:System.ArgumentNullException">One or both of the parameters are null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Adds a type description provider for a component class.</summary>
      <param name="provider">The <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see> to add.</param>
      <param name="type">The <see cref="T:System.Type"></see> of the target component.</param>
      <exception cref="T:System.ArgumentNullException">One or both of the parameters are null.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary>Gets or sets the provider for the Component Object Model (COM) type information for the target component.</summary>
      <returns>An <see cref="T:System.ComponentModel.IComNativeDescriptorHandler"></see> instance representing the COM type information provider.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary>Gets the type of the Component Object Model (COM) object represented by the target component.</summary>
      <returns>The <see cref="T:System.Type"></see> of the COM object represented by this component, or null for non-COM objects.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary>Creates a primary-secondary association between two objects.</summary>
      <param name="primary">The primary <see cref="T:System.Object"></see>.</param>
      <param name="secondary">The secondary <see cref="T:System.Object"></see>.</param>
      <exception cref="T:System.ArgumentNullException">One or both of the parameters are null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="primary">primary</paramref> is equal to <paramref name="secondary">secondary</paramref>.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary>Creates an instance of the designer associated with the specified component and of the specified type of designer.</summary>
      <param name="component">An <see cref="T:System.ComponentModel.IComponent"></see> that specifies the component to associate with the designer.</param>
      <param name="designerBaseType">A <see cref="T:System.Type"></see> that represents the type of designer to create.</param>
      <returns>An <see cref="T:System.ComponentModel.Design.IDesigner"></see> that is an instance of the designer for the component, or null if no designer can be found.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary>Creates a new event descriptor that is identical to an existing event descriptor, when passed the existing <see cref="T:System.ComponentModel.EventDescriptor"></see>.</summary>
      <param name="componentType">The type of the component for which to create the new event.</param>
      <param name="oldEventDescriptor">The existing event information.</param>
      <param name="attributes">The new attributes.</param>
      <returns>A new <see cref="T:System.ComponentModel.EventDescriptor"></see> that has merged the specified metadata attributes with the existing metadata attributes.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>Creates a new event descriptor that is identical to an existing event descriptor by dynamically generating descriptor information from a specified event on a type.</summary>
      <param name="componentType">The type of the component the event lives on.</param>
      <param name="name">The name of the event.</param>
      <param name="type">The type of the delegate that handles the event.</param>
      <param name="attributes">The attributes for this event.</param>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptor"></see> that is bound to a type.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>Creates an object that can substitute for another data type.</summary>
      <param name="provider">The service provider that provides a <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see> service. This parameter can be null.</param>
      <param name="objectType">The <see cref="T:System.Type"></see> of object to create.</param>
      <param name="argTypes">An optional array of parameter types to be passed to the object's constructor. This parameter can be null or an array of zero length.</param>
      <param name="args">An optional array of parameter values to pass to the object's constructor. If not null, the number of elements must be the same as argTypes.</param>
      <returns>An instance of the substitute data type if an associated <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see> is found; otherwise, null.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="objectType">objectType</paramref> is null, or <paramref name="args">args</paramref> is null when <paramref name="argTypes">argTypes</paramref> is not null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="argTypes">argTypes</paramref> and <paramref name="args">args</paramref> have different number of elements.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>Creates and dynamically binds a property descriptor to a type, using the specified property name, type, and attribute array.</summary>
      <param name="componentType">The <see cref="T:System.Type"></see> of the component that the property is a member of.</param>
      <param name="name">The name of the property.</param>
      <param name="type">The <see cref="T:System.Type"></see> of the property.</param>
      <param name="attributes">The new attributes for this property.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that is bound to the specified type and that has the specified metadata attributes merged with the existing metadata attributes.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>Creates a new property descriptor from an existing property descriptor, using the specified existing <see cref="T:System.ComponentModel.PropertyDescriptor"></see> and attribute array.</summary>
      <param name="componentType">The <see cref="T:System.Type"></see> of the component that the property is a member of.</param>
      <param name="oldPropertyDescriptor">The existing property descriptor.</param>
      <param name="attributes">The new attributes for this property.</param>
      <returns>A new <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that has the specified metadata attributes merged with the existing metadata attributes.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary>Returns an instance of the type associated with the specified primary object.</summary>
      <param name="type">The <see cref="T:System.Type"></see> of the target component.</param>
      <param name="primary">The primary object of the association.</param>
      <returns>An instance of the secondary type that has been associated with the primary object if an association exists; otherwise, <paramref name="primary">primary</paramref> if no specified association exists.</returns>
      <exception cref="T:System.ArgumentNullException">One or both of the parameters are null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary>Returns the collection of attributes for the specified component.</summary>
      <param name="component">The component for which you want to get attributes.</param>
      <returns>An <see cref="T:System.ComponentModel.AttributeCollection"></see> containing the attributes for the component. If <paramref name="component">component</paramref> is null, this method returns an empty collection.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary>Returns a collection of attributes for the specified type of component.</summary>
      <param name="componentType">The <see cref="T:System.Type"></see> of the target component.</param>
      <returns>An <see cref="T:System.ComponentModel.AttributeCollection"></see> with the attributes for the type of the component. If the component is null, this method returns an empty collection.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary>Returns a collection of attributes for the specified component and a Boolean indicating that a custom type descriptor has been created.</summary>
      <param name="component">The component for which you want to get attributes.</param>
      <param name="noCustomTypeDesc">true to use a baseline set of attributes from the custom type descriptor if component is of type <see cref="T:System.ComponentModel.ICustomTypeDescriptor"></see>; otherwise, false.</param>
      <returns>An <see cref="T:System.ComponentModel.AttributeCollection"></see> with the attributes for the component. If the component is null, this method returns an empty collection.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary>Returns the name of the class for the specified component using the default type descriptor.</summary>
      <param name="component">The <see cref="T:System.Object"></see> for which you want the class name.</param>
      <returns>A <see cref="T:System.String"></see> containing the name of the class for the specified component.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary>Returns the name of the class for the specified type.</summary>
      <param name="componentType">The <see cref="T:System.Type"></see> of the target component.</param>
      <returns>A <see cref="T:System.String"></see> containing the name of the class for the specified component type.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="componentType">componentType</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary>Returns the name of the class for the specified component using a custom type descriptor.</summary>
      <param name="component">The <see cref="T:System.Object"></see> for which you want the class name.</param>
      <param name="noCustomTypeDesc">true to consider custom type description information; otherwise, false.</param>
      <returns>A <see cref="T:System.String"></see> containing the name of the class for the specified component.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="component">component</paramref> is a cross-process remoted object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary>Returns the name of the specified component using the default type descriptor.</summary>
      <param name="component">The <see cref="T:System.Object"></see> for which you want the class name.</param>
      <returns>A <see cref="T:System.String"></see> containing the name of the specified component, or null if there is no component name.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="component">component</paramref> is a cross-process remoted object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary>Returns the name of the specified component using a custom type descriptor.</summary>
      <param name="component">The <see cref="T:System.Object"></see> for which you want the class name.</param>
      <param name="noCustomTypeDesc">true to consider custom type description information; otherwise, false.</param>
      <returns>The name of the class for the specified component, or null if there is no component name.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="component">component</paramref> is a cross-process remoted object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary>Returns a type converter for the type of the specified component.</summary>
      <param name="component">A component to get the converter for.</param>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter"></see> for the specified component.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="component">component</paramref> is a cross-process remoted object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary>Returns a type converter for the specified type.</summary>
      <param name="type">The <see cref="T:System.Type"></see> of the target component.</param>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter"></see> for the specified type.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary>Returns a type converter for the type of the specified component with a custom type descriptor.</summary>
      <param name="component">A component to get the converter for.</param>
      <param name="noCustomTypeDesc">true to consider custom type description information; otherwise, false.</param>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter"></see> for the specified component.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="component">component</paramref> is a cross-process remoted object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary>Returns the default event for the specified type of component.</summary>
      <param name="componentType">The <see cref="T:System.Type"></see> of the target component.</param>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptor"></see> with the default event, or null if there are no events.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary>Returns the default event for a component with a custom type descriptor.</summary>
      <param name="component">The component to get the event for.</param>
      <param name="noCustomTypeDesc">true to consider custom type description information; otherwise, false.</param>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptor"></see> with the default event, or null if there are no events.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="component">component</paramref> is a cross-process remoted object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary>Returns the default event for the specified component.</summary>
      <param name="component">The component to get the event for.</param>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptor"></see> with the default event, or null if there are no events.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="component">component</paramref> is a cross-process remoted object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary>Returns the default property for the specified type of component.</summary>
      <param name="componentType">A <see cref="T:System.Type"></see> that represents the class to get the property for.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> with the default property, or null if there are no properties.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary>Returns the default property for the specified component with a custom type descriptor.</summary>
      <param name="component">The component to get the default property for.</param>
      <param name="noCustomTypeDesc">true to consider custom type description information; otherwise, false.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> with the default property, or null if there are no properties.</returns>
      <exception cref="T:System.NotSupportedException"><paramref name="component">component</paramref> is a cross-process remoted object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary>Returns the default property for the specified component.</summary>
      <param name="component">The component to get the default property for.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> with the default property, or null if there are no properties.</returns>
      <exception cref="T:System.NotSupportedException"><paramref name="component">component</paramref> is a cross-process remoted object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary>Gets an editor with the specified base type for the specified component.</summary>
      <param name="component">The component to get the editor for.</param>
      <param name="editorBaseType">A <see cref="T:System.Type"></see> that represents the base type of the editor you want to find.</param>
      <returns>An instance of the editor that can be cast to the specified editor type, or null if no editor of the requested type can be found.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> or <paramref name="editorBaseType">editorBaseType</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="component">component</paramref> is a cross-process remoted object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary>Returns an editor with the specified base type for the specified type.</summary>
      <param name="type">The <see cref="T:System.Type"></see> of the target component.</param>
      <param name="editorBaseType">A <see cref="T:System.Type"></see> that represents the base type of the editor you are trying to find.</param>
      <returns>An instance of the editor object that can be cast to the given base type, or null if no editor of the requested type can be found.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> or <paramref name="editorBaseType">editorBaseType</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary>Returns an editor with the specified base type and with a custom type descriptor for the specified component.</summary>
      <param name="component">The component to get the editor for.</param>
      <param name="editorBaseType">A <see cref="T:System.Type"></see> that represents the base type of the editor you want to find.</param>
      <param name="noCustomTypeDesc">A flag indicating whether custom type description information should be considered.</param>
      <returns>An instance of the editor that can be cast to the specified editor type, or null if no editor of the requested type can be found.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> or <paramref name="editorBaseType">editorBaseType</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="component">component</paramref> is a cross-process remoted object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary>Returns the collection of events for the specified component.</summary>
      <param name="component">A component to get the events for.</param>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> with the events for this component.</returns>
      <exception cref="T:System.NotSupportedException"><paramref name="component">component</paramref> is a cross-process remoted object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary>Returns the collection of events for a specified type of component.</summary>
      <param name="componentType">The <see cref="T:System.Type"></see> of the target component.</param>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> with the events for this component.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary>Returns the collection of events for a specified component using a specified array of attributes as a filter.</summary>
      <param name="component">A component to get the events for.</param>
      <param name="attributes">An array of type <see cref="T:System.Attribute"></see> that you can use as a filter.</param>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> with the events that match the specified attributes for this component.</returns>
      <exception cref="T:System.NotSupportedException"><paramref name="component">component</paramref> is a cross-process remoted object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary>Returns the collection of events for a specified component with a custom type descriptor.</summary>
      <param name="component">A component to get the events for.</param>
      <param name="noCustomTypeDesc">true to consider custom type description information; otherwise, false.</param>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> with the events for this component.</returns>
      <exception cref="T:System.NotSupportedException"><paramref name="component">component</paramref> is a cross-process remoted object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary>Returns the collection of events for a specified type of component using a specified array of attributes as a filter.</summary>
      <param name="componentType">The <see cref="T:System.Type"></see> of the target component.</param>
      <param name="attributes">An array of type <see cref="T:System.Attribute"></see> that you can use as a filter.</param>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> with the events that match the specified attributes for this component.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary>Returns the collection of events for a specified component using a specified array of attributes as a filter and using a custom type descriptor.</summary>
      <param name="component">A component to get the events for.</param>
      <param name="attributes">An array of type <see cref="T:System.Attribute"></see> to use as a filter.</param>
      <param name="noCustomTypeDesc">true to consider custom type description information; otherwise, false.</param>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> with the events that match the specified attributes for this component.</returns>
      <exception cref="T:System.NotSupportedException"><paramref name="component">component</paramref> is a cross-process remoted object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary>Returns the fully qualified name of the component.</summary>
      <param name="component">The <see cref="T:System.ComponentModel.Component"></see> to find the name for.</param>
      <returns>The fully qualified name of the specified component, or null if the component has no name.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary>Returns the collection of properties for a specified component using a specified array of attributes as a filter and using a custom type descriptor.</summary>
      <param name="component">A component to get the properties for.</param>
      <param name="attributes">An array of type <see cref="T:System.Attribute"></see> to use as a filter.</param>
      <param name="noCustomTypeDesc">true to consider custom type description information; otherwise, false.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the events that match the specified attributes for the specified component.</returns>
      <exception cref="T:System.NotSupportedException"><paramref name="component">component</paramref> is a cross-process remoted object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary>Returns the collection of properties for a specified component using the default type descriptor.</summary>
      <param name="component">A component to get the properties for.</param>
      <param name="noCustomTypeDesc">true to not consider custom type description information; otherwise, false.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties for a specified component.</returns>
      <exception cref="T:System.NotSupportedException"><paramref name="component">component</paramref> is a cross-process remoted object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary>Returns the collection of properties for a specified type of component using a specified array of attributes as a filter.</summary>
      <param name="componentType">The <see cref="T:System.Type"></see> of the target component.</param>
      <param name="attributes">An array of type <see cref="T:System.Attribute"></see> to use as a filter.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties that match the specified attributes for this type of component.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary>Returns the collection of properties for a specified type of component.</summary>
      <param name="componentType">A <see cref="T:System.Type"></see> that represents the component to get properties for.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties for a specified type of component.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary>Returns the collection of properties for a specified component.</summary>
      <param name="component">A component to get the properties for.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties for the specified component.</returns>
      <exception cref="T:System.NotSupportedException"><paramref name="component">component</paramref> is a cross-process remoted object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary>Returns the collection of properties for a specified component using a specified array of attributes as a filter.</summary>
      <param name="component">A component to get the properties for.</param>
      <param name="attributes">An array of type <see cref="T:System.Attribute"></see> to use as a filter.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties that match the specified attributes for the specified component.</returns>
      <exception cref="T:System.NotSupportedException"><paramref name="component">component</paramref> is a cross-process remoted object.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary>Returns the type description provider for the specified component.</summary>
      <param name="instance">An instance of the target component.</param>
      <returns>A <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see> associated with the specified component.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="instance">instance</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary>Returns the type description provider for the specified type.</summary>
      <param name="type">The <see cref="T:System.Type"></see> of the target component.</param>
      <returns>A <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see> associated with the specified type.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary>Returns a <see cref="T:System.Type"></see> that can be used to perform reflection, given an object.</summary>
      <param name="instance">An instance of the target component.</param>
      <returns>A <see cref="T:System.Type"></see> for the specified object.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="instance">instance</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary>Returns a <see cref="T:System.Type"></see> that can be used to perform reflection, given a class type.</summary>
      <param name="type">The <see cref="T:System.Type"></see> of the target component.</param>
      <returns>A <see cref="T:System.Type"></see> of the specified class.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary>Gets a type that represents a type description provider for all interface types.</summary>
      <returns>A <see cref="T:System.Type"></see> that represents a custom type description provider for all interface types.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary>Clears the properties and events for the specified type of component from the cache.</summary>
      <param name="type">The <see cref="T:System.Type"></see> of the target component.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary>Clears the properties and events for the specified module from the cache.</summary>
      <param name="module">The <see cref="T:System.Reflection.Module"></see> that represents the module to refresh. Each <see cref="T:System.Type"></see> in this module will be refreshed.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary>Clears the properties and events for the specified component from the cache.</summary>
      <param name="component">A component for which the properties or events have changed.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary>Clears the properties and events for the specified assembly from the cache.</summary>
      <param name="assembly">The <see cref="T:System.Reflection.Assembly"></see> that represents the assembly to refresh. Each <see cref="T:System.Type"></see> in this assembly will be refreshed.</param>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary>Occurs when the cache for a component is cleared.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary>Removes an association between two objects.</summary>
      <param name="primary">The primary <see cref="T:System.Object"></see>.</param>
      <param name="secondary">The secondary <see cref="T:System.Object"></see>.</param>
      <exception cref="T:System.ArgumentNullException">One or both of the parameters are null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary>Removes all associations for a primary object.</summary>
      <param name="primary">The primary <see cref="T:System.Object"></see> in an association.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="primary">primary</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Removes a previously added type description provider that is associated with the specified object.</summary>
      <param name="provider">The <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see> to remove.</param>
      <param name="instance">An instance of the target component.</param>
      <exception cref="T:System.ArgumentNullException">One or both of the parameters are null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Removes a previously added type description provider that is associated with the specified type.</summary>
      <param name="provider">The <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see> to remove.</param>
      <param name="type">The <see cref="T:System.Type"></see> of the target component.</param>
      <exception cref="T:System.ArgumentNullException">One or both of the parameters are null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Removes a previously added type description provider that is associated with the specified type.</summary>
      <param name="provider">The <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see> to remove.</param>
      <param name="type">The <see cref="T:System.Type"></see> of the target component.</param>
      <exception cref="T:System.ArgumentNullException">One or both of the parameters are null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Removes a previously added type description provider that is associated with the specified object.</summary>
      <param name="provider">The <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see> to remove.</param>
      <param name="instance">An instance of the target component.</param>
      <exception cref="T:System.ArgumentNullException">One or both of the parameters are null.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary>Sorts descriptors using the name of the descriptor.</summary>
      <param name="infos">An <see cref="T:System.Collections.IList"></see> that contains the descriptors to sort.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="infos">infos</paramref> is null.</exception>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary>Provides a type converter that can be used to populate a list box with available types.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.TypeListConverter"></see> class using the type array as the available types.</summary>
      <param name="types">The array of type <see cref="T:System.Type"></see> to use as the available types.</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value indicating whether this converter can convert the specified <see cref="T:System.Type"></see> of the source object using the given context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="sourceType">The <see cref="T:System.Type"></see> of the source object.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you wish to convert to.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified object to the native type of the converter.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see> that specifies the culture used to represent the font.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified destination type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value to.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a collection of standard values for the data type this validator is designed for.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> that holds a standard set of valid values, or null if the data type does not support a standard set of values.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a value indicating whether the list of standard values returned from the <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"></see> method is an exclusive list.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true because the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> returned from <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"></see> is an exhaustive list of possible values. This method never returns false.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true because <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"></see> should be called to find a common set of values the object supports. This method never returns false.</returns>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary>Provides a type converter to convert 16-bit unsigned integer objects to and from other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.UInt16Converter"></see> class.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary>Provides a type converter to convert 32-bit unsigned integer objects to and from various other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.UInt32Converter"></see> class.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary>Provides a type converter to convert 64-bit unsigned integer objects to and from other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.UInt64Converter"></see> class.</summary>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary>Specifies an exception that is handled as a warning instead of an error.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.WarningException"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.WarningException"></see> class with the specified message and no Help file.</summary>
      <param name="message">The message to display to the end user.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.WarningException"></see> class using the specified serialization data and context.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to be used for deserialization.</param>
      <param name="context">The destination to be used for deserialization.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.WarningException"></see> class with the specified detailed description and the specified exception.</summary>
      <param name="message">A detailed description of the error.</param>
      <param name="innerException">A reference to the inner exception that is the cause of this exception.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.WarningException"></see> class with the specified message, and with access to the specified Help file.</summary>
      <param name="message">The message to display to the end user.</param>
      <param name="helpUrl">The Help file to display if the user requests help.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.WarningException"></see> class with the specified message, and with access to the specified Help file and topic.</summary>
      <param name="message">The message to display to the end user.</param>
      <param name="helpUrl">The Help file to display if the user requests help.</param>
      <param name="helpTopic">The Help topic to display if the user requests help.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the parameter name and additional exception information.</summary>
      <param name="info">Stores the data that was being used to serialize or deserialize the object that the <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer"></see> was serializing or deserializing.</param>
      <param name="context">Describes the source and destination of the stream that generated the exception, as well as a means for serialization to retain that context and an additional caller-defined context.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary>Gets the Help topic associated with the warning.</summary>
      <returns>The Help topic associated with the warning.</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary>Gets the Help file associated with the warning.</summary>
      <returns>The Help file associated with the warning.</returns>
    </member>
    <member name="T:System.IO.Compression.CompressionLevel">
      <summary>Specifies values that indicate whether a compression operation emphasizes speed or compression size.</summary>
    </member>
    <member name="F:System.IO.Compression.CompressionLevel.Fastest">
      <summary>The compression operation should complete as quickly as possible, even if the resulting file is not optimally compressed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Compression.CompressionLevel.NoCompression">
      <summary>No compression should be performed on the file.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Compression.CompressionLevel.Optimal">
      <summary>The compression operation should be optimally compressed, even if the operation takes a longer time to complete.</summary>
      <returns></returns>
    </member>
    <member name="T:System.IO.Compression.CompressionMode">
      <summary>Specifies whether to compress or decompress the underlying stream.</summary>
    </member>
    <member name="F:System.IO.Compression.CompressionMode.Compress">
      <summary>Compresses the underlying stream.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Compression.CompressionMode.Decompress">
      <summary>Decompresses the underlying stream.</summary>
      <returns></returns>
    </member>
    <member name="T:System.IO.Compression.DeflateStream">
      <summary>Provides methods and properties for compressing and decompressing streams by using the Deflate algorithm.</summary>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionLevel)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Compression.DeflateStream"></see> class by using the specified stream and compression level.</summary>
      <param name="stream">The stream to compress.</param>
      <param name="compressionLevel">One of the enumeration values that indicates whether to emphasize speed or compression efficiency when compressing the stream.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The stream does not support write operations such as compression. (The <see cref="P:System.IO.Stream.CanWrite"></see> property on the stream object is false.)</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Compression.DeflateStream"></see> class by using the specified stream and compression mode.</summary>
      <param name="stream">The stream to compress or decompress.</param>
      <param name="mode">One of the enumeration values that indicates whether to compress or decompress the stream.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="mode">mode</paramref> is not a valid <see cref="T:System.IO.Compression.CompressionMode"></see> value.   -or-  <see cref="T:System.IO.Compression.CompressionMode"></see> is <see cref="F:System.IO.Compression.CompressionMode.Compress"></see> and <see cref="P:System.IO.Stream.CanWrite"></see> is false.   -or-  <see cref="T:System.IO.Compression.CompressionMode"></see> is <see cref="F:System.IO.Compression.CompressionMode.Decompress"></see> and <see cref="P:System.IO.Stream.CanRead"></see> is false.</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionLevel,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Compression.DeflateStream"></see> class by using the specified stream and compression level, and optionally leaves the stream open.</summary>
      <param name="stream">The stream to compress.</param>
      <param name="compressionLevel">One of the enumeration values that indicates whether to emphasize speed or compression efficiency when compressing the stream.</param>
      <param name="leaveOpen">true to leave the stream object open after disposing the <see cref="T:System.IO.Compression.DeflateStream"></see> object; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The stream does not support write operations such as compression. (The <see cref="P:System.IO.Stream.CanWrite"></see> property on the stream object is false.)</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Compression.DeflateStream"></see> class by using the specified stream and compression mode, and optionally leaves the stream open.</summary>
      <param name="stream">The stream to compress or decompress.</param>
      <param name="mode">One of the enumeration values that indicates whether to compress or decompress the stream.</param>
      <param name="leaveOpen">true to leave the stream open after disposing the <see cref="T:System.IO.Compression.DeflateStream"></see> object; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="mode">mode</paramref> is not a valid <see cref="T:System.IO.Compression.CompressionMode"></see> value.   -or-  <see cref="T:System.IO.Compression.CompressionMode"></see> is <see cref="F:System.IO.Compression.CompressionMode.Compress"></see> and <see cref="P:System.IO.Stream.CanWrite"></see> is false.   -or-  <see cref="T:System.IO.Compression.CompressionMode"></see> is <see cref="F:System.IO.Compression.CompressionMode.Decompress"></see> and <see cref="P:System.IO.Stream.CanRead"></see> is false.</exception>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.BaseStream">
      <summary>Gets a reference to the underlying stream.</summary>
      <returns>A stream object that represents the underlying stream.</returns>
      <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous read operation. (Consider using the <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)"></see> method instead.)</summary>
      <param name="array"></param>
      <param name="offset">The byte offset in array at which to begin reading data from the stream.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <param name="asyncCallback"></param>
      <param name="asyncState"></param>
      <returns>An  object that represents the asynchronous read operation, which could still be pending.</returns>
      <exception cref="T:System.IO.IOException">The method tried to read asynchronously past the end of the stream, or a disk error occurred.</exception>
      <exception cref="T:System.ArgumentException">One or more of the arguments is invalid.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
      <exception cref="T:System.NotSupportedException">The current <see cref="T:System.IO.Compression.DeflateStream"></see> implementation does not support the read operation.</exception>
      <exception cref="T:System.InvalidOperationException">This call cannot be completed.</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous write operation. (Consider using the <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)"></see> method instead.)</summary>
      <param name="array"></param>
      <param name="offset">The byte offset in buffer to begin writing from.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <param name="asyncCallback"></param>
      <param name="asyncState"></param>
      <returns>An  object that represents the asynchronous write operation, which could still be pending.</returns>
      <exception cref="T:System.IO.IOException">The method tried to write asynchronously past the end of the stream, or a disk error occurred.</exception>
      <exception cref="T:System.ArgumentException">One or more of the arguments is invalid.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
      <exception cref="T:System.NotSupportedException">The current <see cref="T:System.IO.Compression.DeflateStream"></see> implementation does not support the write operation.</exception>
      <exception cref="T:System.InvalidOperationException">The write operation cannot be performed because the stream is closed.</exception>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.CanRead">
      <summary>Gets a value indicating whether the stream supports reading while decompressing a file.</summary>
      <returns>true if the <see cref="T:System.IO.Compression.CompressionMode"></see> value is Decompress, and the underlying stream is opened and supports reading; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.CanSeek">
      <summary>Gets a value indicating whether the stream supports seeking.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.CanWrite">
      <summary>Gets a value indicating whether the stream supports writing.</summary>
      <returns>true if the <see cref="T:System.IO.Compression.CompressionMode"></see> value is Compress, and the underlying stream supports writing and is not closed; otherwise, false.</returns>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Compression.DeflateStream"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.EndRead(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous read to complete. (Consider using the <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)"></see> method instead.)</summary>
      <param name="asyncResult"></param>
      <returns>The number of bytes read from the stream, between 0 (zero) and the number of bytes you requested. <see cref="T:System.IO.Compression.DeflateStream"></see> returns 0 only at the end of the stream; otherwise, it blocks until at least one byte is available.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="async_result">async_result</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="async_result">async_result</paramref> did not originate from a <see cref="M:System.IO.Compression.DeflateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see> method on the current stream.</exception>
      <exception cref="T:System.SystemException">An exception was thrown during a call to <see cref="M:System.Threading.WaitHandle.WaitOne"></see>.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is null.</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.EndWrite(System.IAsyncResult)">
      <summary>Ends an asynchronous write operation. (Consider using the <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)"></see> method instead.)</summary>
      <param name="asyncResult"></param>
      <exception cref="T:System.ArgumentNullException"><paramref name="async_result">async_result</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="async_result">async_result</paramref> did not originate from a <see cref="M:System.IO.Compression.DeflateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see> method on the current stream.</exception>
      <exception cref="T:System.Exception">An exception was thrown during a call to <see cref="M:System.Threading.WaitHandle.WaitOne"></see>.</exception>
      <exception cref="T:System.InvalidOperationException">The end write call is invalid.</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Flush">
      <summary>The current implementation of this method has no functionality.</summary>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.Length">
      <summary>This property is not supported and always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <returns>A long value.</returns>
      <exception cref="T:System.NotSupportedException">This property is not supported on this stream.</exception>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.Position">
      <summary>This property is not supported and always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <returns>A long value.</returns>
      <exception cref="T:System.NotSupportedException">This property is not supported on this stream.</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a number of decompressed bytes into the specified byte array.</summary>
      <param name="array">The array to store decompressed bytes.</param>
      <param name="offset">The byte offset in array at which the read bytes will be placed.</param>
      <param name="count">The maximum number of decompressed bytes to read.</param>
      <returns>The number of bytes that were read into the byte array.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.IO.Compression.CompressionMode"></see> value was Compress when the object was created.   - or -   The underlying stream does not support reading.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> is less than zero.   -or-  <paramref name="array">array</paramref> length minus the index starting point is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.IO.InvalidDataException">The data is in an invalid format.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>This operation is not supported and always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <param name="offset">The location in the stream.</param>
      <param name="origin">One of the <see cref="T:System.IO.SeekOrigin"></see> values.</param>
      <returns>A long value.</returns>
      <exception cref="T:System.NotSupportedException">This property is not supported on this stream.</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.SetLength(System.Int64)">
      <summary>This operation is not supported and always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <param name="value">The length of the stream.</param>
      <exception cref="T:System.NotSupportedException">This property is not supported on this stream.</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes compressed bytes to the underlying stream from the specified byte array.</summary>
      <param name="array">The buffer that contains the data to compress.</param>
      <param name="offset">The byte offset in array from which the bytes will be read.</param>
      <param name="count">The maximum number of bytes to write.</param>
    </member>
    <member name="T:System.IO.Compression.GZipStream">
      <summary>Provides methods and properties used to compress and decompress streams.</summary>
    </member>
    <member name="M:System.IO.Compression.GZipStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionLevel)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Compression.GZipStream"></see> class by using the specified stream and compression level.</summary>
      <param name="stream">The stream to write the compressed data to.</param>
      <param name="compressionLevel">One of the enumeration values that indicates whether to emphasize speed or compression efficiency when compressing the stream.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The stream does not support write operations such as compression. (The <see cref="P:System.IO.Stream.CanWrite"></see> property on the stream object is false.)</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Compression.GZipStream"></see> class by using the specified stream and compression mode.</summary>
      <param name="stream">The stream the compressed or decompressed data is written to.</param>
      <param name="mode">One of the enumeration values that indicates whether to compress or decompress the stream.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="mode">mode</paramref> is not a valid <see cref="T:System.IO.Compression.CompressionMode"></see> enumeration value.   -or-  <see cref="T:System.IO.Compression.CompressionMode"></see> is <see cref="F:System.IO.Compression.CompressionMode.Compress"></see> and <see cref="P:System.IO.Stream.CanWrite"></see> is false.   -or-  <see cref="T:System.IO.Compression.CompressionMode"></see> is <see cref="F:System.IO.Compression.CompressionMode.Decompress"></see> and <see cref="P:System.IO.Stream.CanRead"></see> is false.</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionLevel,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Compression.GZipStream"></see> class by using the specified stream and compression level, and optionally leaves the stream open.</summary>
      <param name="stream">The stream to write the compressed data to.</param>
      <param name="compressionLevel">One of the enumeration values that indicates whether to emphasize speed or compression efficiency when compressing the stream.</param>
      <param name="leaveOpen">true to leave the stream object open after disposing the <see cref="T:System.IO.Compression.GZipStream"></see> object; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The stream does not support write operations such as compression. (The <see cref="P:System.IO.Stream.CanWrite"></see> property on the stream object is false.)</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Compression.GZipStream"></see> class by using the specified stream and compression mode, and optionally leaves the stream open.</summary>
      <param name="stream">The stream the compressed or decompressed data is written to.</param>
      <param name="mode">One of the enumeration values that indicates whether to compress or decompress the stream.</param>
      <param name="leaveOpen">true to leave the stream open after disposing the <see cref="T:System.IO.Compression.GZipStream"></see> object; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="mode">mode</paramref> is not a valid <see cref="T:System.IO.Compression.CompressionMode"></see> value.   -or-  <see cref="T:System.IO.Compression.CompressionMode"></see> is <see cref="F:System.IO.Compression.CompressionMode.Compress"></see> and <see cref="P:System.IO.Stream.CanWrite"></see> is false.   -or-  <see cref="T:System.IO.Compression.CompressionMode"></see> is <see cref="F:System.IO.Compression.CompressionMode.Decompress"></see> and <see cref="P:System.IO.Stream.CanRead"></see> is false.</exception>
    </member>
    <member name="P:System.IO.Compression.GZipStream.BaseStream">
      <summary>Gets a reference to the underlying stream.</summary>
      <returns>A stream object that represents the underlying stream.</returns>
      <exception cref="T:System.ObjectDisposedException">The underlying stream is closed.</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous read operation. (Consider using the <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)"></see> method instead.)</summary>
      <param name="array"></param>
      <param name="offset">The byte offset in array at which to begin reading data from the stream.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <param name="asyncCallback"></param>
      <param name="asyncState"></param>
      <returns>An object that represents the asynchronous read operation, which could still be pending.</returns>
      <exception cref="T:System.IO.IOException">The method tried to  read asynchronously past the end of the stream, or a disk error occurred.</exception>
      <exception cref="T:System.ArgumentException">One or more of the arguments is invalid.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
      <exception cref="T:System.NotSupportedException">The current <see cref="T:System.IO.Compression.GZipStream"></see> implementation does not support the read operation.</exception>
      <exception cref="T:System.InvalidOperationException">A read operation cannot be performed because the stream is closed.</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous write operation. (Consider using the <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)"></see> method instead.)</summary>
      <param name="array"></param>
      <param name="offset">The byte offset in array at which to begin writing.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <param name="asyncCallback"></param>
      <param name="asyncState"></param>
      <returns>An  object that represents the asynchronous write operation, which could still be pending.</returns>
      <exception cref="T:System.InvalidOperationException">The underlying stream is null.   -or-   The underlying stream is closed.</exception>
    </member>
    <member name="P:System.IO.Compression.GZipStream.CanRead">
      <summary>Gets a value indicating whether the stream supports reading while decompressing a file.</summary>
      <returns>true if the <see cref="T:System.IO.Compression.CompressionMode"></see> value is Decompress, and the underlying stream supports reading and is not closed; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.Compression.GZipStream.CanSeek">
      <summary>Gets a value indicating whether the stream supports seeking.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.IO.Compression.GZipStream.CanWrite">
      <summary>Gets a value indicating whether the stream supports writing.</summary>
      <returns>true if the <see cref="T:System.IO.Compression.CompressionMode"></see> value is Compress, and the underlying stream supports writing and is not closed; otherwise, false.</returns>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Compression.GZipStream"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.Compression.GZipStream.EndRead(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous read to complete. (Consider using the the <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)"></see> method instead.)</summary>
      <param name="asyncResult"></param>
      <returns>The number of bytes read from the stream, between 0 (zero) and the number of bytes you requested. <see cref="T:System.IO.Compression.GZipStream"></see> returns 0 only at the end of the stream; otherwise, it blocks until at least one byte is available.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="async_result">async_result</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="async_result">async_result</paramref> did not originate from a <see cref="M:System.IO.Compression.DeflateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see> method on the current stream.</exception>
      <exception cref="T:System.InvalidOperationException">The end operation cannot be performed because the stream is closed.</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.EndWrite(System.IAsyncResult)">
      <summary>Handles the end of an asynchronous write operation. (Consider using the <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)"></see> method instead.)</summary>
      <param name="asyncResult"></param>
      <exception cref="T:System.InvalidOperationException">The underlying stream is null.   -or-   The underlying stream is closed.</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Flush">
      <summary>The current implementation of this method has no functionality.</summary>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="P:System.IO.Compression.GZipStream.Length">
      <summary>This property is not supported and always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <returns>A long value.</returns>
      <exception cref="T:System.NotSupportedException">This property is not supported on this stream.</exception>
    </member>
    <member name="P:System.IO.Compression.GZipStream.Position">
      <summary>This property is not supported and always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <returns>A long value.</returns>
      <exception cref="T:System.NotSupportedException">This property is not supported on this stream.</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a number of decompressed bytes into the specified byte array.</summary>
      <param name="array">The array used to store decompressed bytes.</param>
      <param name="offset">The byte offset in array at which the read bytes will be placed.</param>
      <param name="count">The maximum number of decompressed bytes to read.</param>
      <returns>The number of bytes that were decompressed into the byte array. If the end of the stream has been reached, zero or the number of bytes read is returned.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.IO.Compression.CompressionMode"></see> value was Compress when the object was created.   - or -   The underlying stream does not support reading.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> is less than zero.   -or-  <paramref name="array">array</paramref> length minus the index starting point is less than <paramref name="count">count</paramref>.</exception>
      <exception cref="T:System.IO.InvalidDataException">The data is in an invalid format.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>This property is not supported and always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <param name="offset">The location in the stream.</param>
      <param name="origin">One of the <see cref="T:System.IO.SeekOrigin"></see> values.</param>
      <returns>A long value.</returns>
      <exception cref="T:System.NotSupportedException">This property is not supported on this stream.</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.SetLength(System.Int64)">
      <summary>This property is not supported and always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <param name="value">The length of the stream.</param>
      <exception cref="T:System.NotSupportedException">This property is not supported on this stream.</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes compressed bytes to the underlying stream from the specified byte array.</summary>
      <param name="array">The buffer that contains the data to compress.</param>
      <param name="offset">The byte offset in array from which the bytes will be read.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <exception cref="T:System.ObjectDisposedException">The write operation cannot be performed because the stream is closed.</exception>
    </member>
    <member name="T:System.IO.ErrorEventArgs">
      <summary>Provides data for the <see cref="E:System.IO.FileSystemWatcher.Error"></see> event.</summary>
    </member>
    <member name="M:System.IO.ErrorEventArgs.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.ErrorEventArgs"></see> class.</summary>
      <param name="exception">An <see cref="T:System.Exception"></see> that represents the error that occurred.</param>
    </member>
    <member name="M:System.IO.ErrorEventArgs.GetException">
      <summary>Gets the <see cref="T:System.Exception"></see> that represents the error that occurred.</summary>
      <returns>An <see cref="T:System.Exception"></see> that represents the error that occurred.</returns>
    </member>
    <member name="T:System.IO.ErrorEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.IO.FileSystemWatcher.Error"></see> event of a <see cref="T:System.IO.FileSystemWatcher"></see> object.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An <see cref="T:System.IO.ErrorEventArgs"></see> object that contains the event data.</param>
    </member>
    <member name="T:System.Net.FileWebResponse">
      <summary>Provides a file system implementation of the <see cref="T:System.Net.WebResponse"></see> class.</summary>
    </member>
    <member name="M:System.Net.FileWebResponse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.FileWebResponse"></see> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> classes.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance that contains the information required to serialize the new <see cref="T:System.Net.FileWebResponse"></see> instance.</param>
      <param name="streamingContext">An instance of the <see cref="T:System.Runtime.Serialization.StreamingContext"></see> class that contains the source of the serialized stream associated with the new <see cref="T:System.Net.FileWebResponse"></see> instance.</param>
    </member>
    <member name="M:System.Net.FileWebResponse.Close">
      <summary>Closes the response stream.</summary>
    </member>
    <member name="P:System.Net.FileWebResponse.ContentLength">
      <summary>Gets the length of the content in the file system resource.</summary>
      <returns>The number of bytes returned from the file system resource.</returns>
    </member>
    <member name="P:System.Net.FileWebResponse.ContentType">
      <summary>Gets the content type of the file system resource.</summary>
      <returns>The value &quot;binary/octet-stream&quot;.</returns>
    </member>
    <member name="M:System.Net.FileWebResponse.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that specifies the destination for this serialization.</param>
    </member>
    <member name="M:System.Net.FileWebResponse.GetResponseStream">
      <summary>Returns the data stream from the file system resource.</summary>
      <returns>A <see cref="T:System.IO.Stream"></see> for reading data from the file system resource.</returns>
    </member>
    <member name="P:System.Net.FileWebResponse.Headers">
      <summary>Gets a collection of header name/value pairs associated with the response.</summary>
      <returns>A <see cref="T:System.Net.WebHeaderCollection"></see> that contains the header name/value pairs associated with the response.</returns>
    </member>
    <member name="P:System.Net.FileWebResponse.ResponseUri">
      <summary>Gets the URI of the file system resource that provided the response.</summary>
      <returns>A <see cref="T:System.Uri"></see> that contains the URI of the file system resource that provided the response.</returns>
    </member>
    <member name="P:System.Net.FileWebResponse.SupportsHeaders">
      <summary>Gets a value that indicates whether the <see cref="P:System.Net.FileWebResponse.Headers"></see> property is supported by the <see cref="T:System.Net.FileWebResponse"></see> instance.</summary>
      <returns>Returns <see cref="T:System.Boolean"></see>.   true if the <see cref="P:System.Net.FileWebResponse.Headers"></see> property is supported by the <see cref="T:System.Net.FileWebResponse"></see> instance; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.FileWebResponse.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance with the data needed to serialize the <see cref="T:System.Net.FileWebResponse"></see>.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> , which will hold the serialized data for the <see cref="T:System.Net.FileWebResponse"></see>.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> containing the destination of the serialized stream associated with the new <see cref="T:System.Net.FileWebResponse"></see>.</param>
    </member>
    <member name="T:System.Net.FtpStatusCode">
      <summary>Specifies the status codes returned for a File Transfer Protocol (FTP) operation.</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.AccountNeeded">
      <summary>Specifies that a user account on the server is required.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionAbortedLocalProcessingError">
      <summary>Specifies that an error occurred that prevented the request action from completing.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionAbortedUnknownPageType">
      <summary>Specifies that the requested action cannot be taken because the specified page type is unknown. Page types are described in RFC 959 Section 3.1.2.3</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionNotTakenFilenameNotAllowed">
      <summary>Specifies that the requested action cannot be performed on the specified file.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionNotTakenFileUnavailable">
      <summary>Specifies that the requested action cannot be performed on the specified file because the file is not available.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionNotTakenFileUnavailableOrBusy">
      <summary>Specifies that the requested action cannot be performed on the specified file because the file is not available or is being used.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionNotTakenInsufficientSpace">
      <summary>Specifies that the requested action cannot be performed because there is not enough space on the server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.ArgumentSyntaxError">
      <summary>Specifies that one or more command arguments has a syntax error.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.BadCommandSequence">
      <summary>Specifies that the sequence of commands is not in the correct order.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.CantOpenData">
      <summary>Specifies that the data connection cannot be opened.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.ClosingControl">
      <summary>Specifies that the server is closing the control connection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.ClosingData">
      <summary>Specifies that the server is closing the data connection and that the requested file action was successful.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.CommandExtraneous">
      <summary>Specifies that the command is not implemented by the server because it is not needed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.CommandNotImplemented">
      <summary>Specifies that the command is not implemented by the FTP server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.CommandOK">
      <summary>Specifies that the command completed successfully.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.CommandSyntaxError">
      <summary>Specifies that the command has a syntax error or is not a command recognized by the server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.ConnectionClosed">
      <summary>Specifies that the connection has been closed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.DataAlreadyOpen">
      <summary>Specifies that the data connection is already open and the requested transfer is starting.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.DirectoryStatus">
      <summary>Specifies the status of a directory.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.EnteringPassive">
      <summary>Specifies that the server is entering passive mode.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.FileActionAborted">
      <summary>Specifies that the requested action cannot be performed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.FileActionOK">
      <summary>Specifies that the requested file action completed successfully.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.FileCommandPending">
      <summary>Specifies that the requested file action requires additional information.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.FileStatus">
      <summary>Specifies the status of a file.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.LoggedInProceed">
      <summary>Specifies that the user is logged in and can send commands.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.NeedLoginAccount">
      <summary>Specifies that the server requires a login account to be supplied.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.NotLoggedIn">
      <summary>Specifies that login information must be sent to the server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.OpeningData">
      <summary>Specifies that the server is opening the data connection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.PathnameCreated">
      <summary>Specifies that the requested path name was created.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.RestartMarker">
      <summary>Specifies that the response contains a restart marker reply. The text of the description that accompanies this status contains the user data stream marker and the server marker.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.SendPasswordCommand">
      <summary>Specifies that the server expects a password to be supplied.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.SendUserCommand">
      <summary>Specifies that the server is ready for a user login operation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.ServerWantsSecureSession">
      <summary>Specifies that the server accepts the authentication mechanism specified by the client, and the exchange of security data is complete.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.ServiceNotAvailable">
      <summary>Specifies that the service is not available.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.ServiceTemporarilyNotAvailable">
      <summary>Specifies that the service is not available now; try your request later.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.SystemType">
      <summary>Specifies the system type name using the system names published in the Assigned Numbers document published by the Internet Assigned Numbers Authority.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.FtpStatusCode.Undefined">
      <summary>Included for completeness, this value is never returned by servers.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.FtpWebRequest">
      <summary>Implements a File Transfer Protocol (FTP) client.</summary>
    </member>
    <member name="M:System.Net.FtpWebRequest.Abort">
      <summary>Terminates an asynchronous FTP operation.</summary>
    </member>
    <member name="M:System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>Begins asynchronously opening a request's content stream for writing.</summary>
      <param name="callback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the operation. This object is passed to the callback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> instance that indicates the status of the operation.</returns>
      <exception cref="T:System.InvalidOperationException">A previous call to this method or <see cref="M:System.Net.FtpWebRequest.GetRequestStream"></see> has not yet completed.</exception>
      <exception cref="T:System.Net.WebException">A connection to the FTP server could not be established.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">The <see cref="P:System.Net.FtpWebRequest.Method"></see> property is not set to <see cref="F:System.Net.WebRequestMethods.Ftp.UploadFile"></see>.</exception>
    </member>
    <member name="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>Begins sending a request and receiving a response from an FTP server asynchronously.</summary>
      <param name="callback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the operation. This object is passed to the callback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> instance that indicates the status of the operation.</returns>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.FtpWebRequest.GetResponse"></see> or <see cref="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see> has already been called for this instance.</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.ClientCertificates">
      <summary>Gets or sets the certificates used for establishing an encrypted connection to the FTP server.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> object that contains the client certificates.</returns>
      <exception cref="T:System.ArgumentNullException">The value specified for a set operation is null.</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.ConnectionGroupName">
      <summary>Gets or sets the name of the connection group that contains the service point used to send the current request.</summary>
      <returns>A <see cref="T:System.String"></see> value that contains a connection group name.</returns>
      <exception cref="T:System.InvalidOperationException">A new value was specified for this property for a request that is already in progress.</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.ContentLength">
      <summary>Gets or sets a value that is ignored by the <see cref="T:System.Net.FtpWebRequest"></see> class.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that should be ignored.</returns>
    </member>
    <member name="P:System.Net.FtpWebRequest.ContentOffset">
      <summary>Gets or sets a byte offset into the file being downloaded by this request.</summary>
      <returns>An <see cref="T:System.Int64"></see> instance that specifies the file offset, in bytes. The default value is zero.</returns>
      <exception cref="T:System.InvalidOperationException">A new value was specified for this property for a request that is already in progress.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for this property is less than zero.</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.ContentType">
      <summary>Always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <returns>Always throws a <see cref="T:System.NotSupportedException"></see>.</returns>
      <exception cref="T:System.NotSupportedException">Content type information is not supported for FTP.</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.Credentials">
      <summary>Gets or sets the credentials used to communicate with the FTP server.</summary>
      <returns>An <see cref="T:System.Net.ICredentials"></see> instance; otherwise, null if the property has not been set.</returns>
      <exception cref="T:System.ArgumentNullException">The value specified for a set operation is null.</exception>
      <exception cref="T:System.ArgumentException">An <see cref="T:System.Net.ICredentials"></see> of a type other than <see cref="T:System.Net.NetworkCredential"></see> was specified for a set operation.</exception>
      <exception cref="T:System.InvalidOperationException">A new value was specified for this property for a request that is already in progress.</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.DefaultCachePolicy">
      <summary>Defines the default cache policy for all FTP requests.</summary>
      <returns>A <see cref="T:System.Net.Cache.RequestCachePolicy"></see> that defines the cache policy for FTP requests.</returns>
      <exception cref="T:System.ArgumentNullException">The caller tried to set this property to null.</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.EnableSsl">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> that specifies that an SSL connection should be used.</summary>
      <returns>true if control and data transmissions are encrypted; otherwise, false. The default value is false.</returns>
      <exception cref="T:System.InvalidOperationException">The connection to the FTP server has already been established.</exception>
    </member>
    <member name="M:System.Net.FtpWebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>Ends a pending asynchronous operation started with <see cref="M:System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see>.</summary>
      <param name="asyncResult">The <see cref="T:System.IAsyncResult"></see> object that was returned when the operation started.</param>
      <returns>A writable <see cref="T:System.IO.Stream"></see> instance associated with this instance.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not obtained by calling <see cref="M:System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see>.</exception>
      <exception cref="T:System.InvalidOperationException">This method was already called for the operation identified by <paramref name="asyncResult">asyncResult</paramref>.</exception>
    </member>
    <member name="M:System.Net.FtpWebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>Ends a pending asynchronous operation started with <see cref="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see>.</summary>
      <param name="asyncResult">The <see cref="T:System.IAsyncResult"></see> that was returned when the operation started.</param>
      <returns>A <see cref="T:System.Net.WebResponse"></see> reference that contains an <see cref="T:System.Net.FtpWebResponse"></see> instance. This object contains the FTP server's response to the request.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not obtained by calling <see cref="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see>.</exception>
      <exception cref="T:System.InvalidOperationException">This method was already called for the operation identified by <paramref name="asyncResult">asyncResult</paramref>.</exception>
      <exception cref="T:System.Net.WebException">An error occurred using an HTTP proxy.</exception>
    </member>
    <member name="M:System.Net.FtpWebRequest.GetRequestStream">
      <summary>Retrieves the stream used to upload data to an FTP server.</summary>
      <returns>A writable <see cref="T:System.IO.Stream"></see> instance used to store data to be sent to the server by the current request.</returns>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see> has been called and has not completed.   - or -   An HTTP proxy is enabled, and you attempted to use an FTP command other than <see cref="F:System.Net.WebRequestMethods.Ftp.DownloadFile"></see>, <see cref="F:System.Net.WebRequestMethods.Ftp.ListDirectory"></see>, or <see cref="F:System.Net.WebRequestMethods.Ftp.ListDirectoryDetails"></see>.</exception>
      <exception cref="T:System.Net.WebException">A connection to the FTP server could not be established.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">The <see cref="P:System.Net.FtpWebRequest.Method"></see> property is not set to <see cref="F:System.Net.WebRequestMethods.Ftp.UploadFile"></see> or <see cref="F:System.Net.WebRequestMethods.Ftp.AppendFile"></see>.</exception>
    </member>
    <member name="M:System.Net.FtpWebRequest.GetResponse">
      <summary>Returns the FTP server response.</summary>
      <returns>A <see cref="T:System.Net.WebResponse"></see> reference that contains an <see cref="T:System.Net.FtpWebResponse"></see> instance. This object contains the FTP server's response to the request.</returns>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.FtpWebRequest.GetResponse"></see> or <see cref="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see> has already been called for this instance.   - or -   An HTTP proxy is enabled, and you attempted to use an FTP command other than <see cref="F:System.Net.WebRequestMethods.Ftp.DownloadFile"></see>, <see cref="F:System.Net.WebRequestMethods.Ftp.ListDirectory"></see>, or <see cref="F:System.Net.WebRequestMethods.Ftp.ListDirectoryDetails"></see>.</exception>
      <exception cref="T:System.Net.WebException"><see cref="P:System.Net.FtpWebRequest.EnableSsl"></see> is set to true, but the server does not support this feature.   - or -   A <see cref="P:System.Net.FtpWebRequest.Timeout"></see> was specified and the timeout has expired.</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.Headers">
      <summary>Gets an empty <see cref="T:System.Net.WebHeaderCollection"></see> object.</summary>
      <returns>An empty <see cref="T:System.Net.WebHeaderCollection"></see> object.</returns>
    </member>
    <member name="P:System.Net.FtpWebRequest.KeepAlive">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that specifies whether the control connection to the FTP server is closed after the request completes.</summary>
      <returns>true if the connection to the server should not be destroyed; otherwise, false. The default value is true.</returns>
      <exception cref="T:System.InvalidOperationException">A new value was specified for this property for a request that is already in progress.</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.Method">
      <summary>Gets or sets the command to send to the FTP server.</summary>
      <returns>A <see cref="T:System.String"></see> value that contains the FTP command to send to the server. The default value is <see cref="F:System.Net.WebRequestMethods.Ftp.DownloadFile"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">A new value was specified for this property for a request that is already in progress.</exception>
      <exception cref="T:System.ArgumentException">The method is invalid.   - or -   The method is not supported.   - or -   Multiple methods were specified.</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.PreAuthenticate">
      <summary>Always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <returns>Always throws a <see cref="T:System.NotSupportedException"></see>.</returns>
      <exception cref="T:System.NotSupportedException">Preauthentication is not supported for FTP.</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.Proxy">
      <summary>Gets or sets the proxy used to communicate with the FTP server.</summary>
      <returns>An <see cref="T:System.Net.IWebProxy"></see> instance responsible for communicating with the FTP server.</returns>
      <exception cref="T:System.ArgumentNullException">This property cannot be set to null.</exception>
      <exception cref="T:System.InvalidOperationException">A new value was specified for this property for a request that is already in progress.</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.ReadWriteTimeout">
      <summary>Gets or sets a time-out when reading from or writing to a stream.</summary>
      <returns>The number of milliseconds before the reading or writing times out. The default value is 300,000 milliseconds (5 minutes).</returns>
      <exception cref="T:System.InvalidOperationException">The request has already been sent.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than or equal to zero and is not equal to <see cref="F:System.Threading.Timeout.Infinite"></see>.</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.RenameTo">
      <summary>Gets or sets the new name of a file being renamed.</summary>
      <returns>The new name of the file being renamed.</returns>
      <exception cref="T:System.ArgumentException">The value specified for a set operation is null or an empty string.</exception>
      <exception cref="T:System.InvalidOperationException">A new value was specified for this property for a request that is already in progress.</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.RequestUri">
      <summary>Gets the URI requested by this instance.</summary>
      <returns>A <see cref="T:System.Uri"></see> instance that identifies a resource that is accessed using the File Transfer Protocol.</returns>
    </member>
    <member name="P:System.Net.FtpWebRequest.ServicePoint">
      <summary>Gets the <see cref="T:System.Net.ServicePoint"></see> object used to connect to the FTP server.</summary>
      <returns>A <see cref="T:System.Net.ServicePoint"></see> object that can be used to customize connection behavior.</returns>
    </member>
    <member name="P:System.Net.FtpWebRequest.Timeout">
      <summary>Gets or sets the number of milliseconds to wait for a request.</summary>
      <returns>An <see cref="T:System.Int32"></see> value that contains the number of milliseconds to wait before a request times out. The default value is <see cref="F:System.Threading.Timeout.Infinite"></see>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than zero and is not <see cref="F:System.Threading.Timeout.Infinite"></see>.</exception>
      <exception cref="T:System.InvalidOperationException">A new value was specified for this property for a request that is already in progress.</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.UseBinary">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that specifies the data type for file transfers.</summary>
      <returns>true to indicate to the server that the data to be transferred is binary; false to indicate that the data is text. The default value is true.</returns>
      <exception cref="T:System.InvalidOperationException">A new value was specified for this property for a request that is already in progress.</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.UseDefaultCredentials">
      <summary>Always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <returns>Always throws a <see cref="T:System.NotSupportedException"></see>.</returns>
      <exception cref="T:System.NotSupportedException">Default credentials are not supported for FTP.</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.UsePassive">
      <summary>Gets or sets the behavior of a client application's data transfer process.</summary>
      <returns>false if the client application's data transfer process listens for a connection on the data port; otherwise, true if the client should initiate a connection on the data port. The default value is true.</returns>
      <exception cref="T:System.InvalidOperationException">A new value was specified for this property for a request that is already in progress.</exception>
    </member>
    <member name="T:System.Net.FtpWebResponse">
      <summary>Encapsulates a File Transfer Protocol (FTP) server's response to a request.</summary>
    </member>
    <member name="P:System.Net.FtpWebResponse.BannerMessage">
      <summary>Gets the message sent by the FTP server when a connection is established prior to logon.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the banner message sent by the server; otherwise, <see cref="F:System.String.Empty"></see> if no message is sent.</returns>
    </member>
    <member name="M:System.Net.FtpWebResponse.Close">
      <summary>Frees the resources held by the response.</summary>
    </member>
    <member name="P:System.Net.FtpWebResponse.ContentLength">
      <summary>Gets the length of the data received from the FTP server.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that contains the number of bytes of data received from the FTP server.</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.ExitMessage">
      <summary>Gets the message sent by the server when the FTP session is ending.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the exit message sent by the server; otherwise, <see cref="F:System.String.Empty"></see> if no message is sent.</returns>
    </member>
    <member name="M:System.Net.FtpWebResponse.GetResponseStream">
      <summary>Retrieves the stream that contains response data sent from an FTP server.</summary>
      <returns>A readable <see cref="T:System.IO.Stream"></see> instance that contains data returned with the response; otherwise, <see cref="F:System.IO.Stream.Null"></see> if no response data was returned by the server.</returns>
      <exception cref="T:System.InvalidOperationException">The response did not return a data stream.</exception>
    </member>
    <member name="P:System.Net.FtpWebResponse.Headers">
      <summary>Gets an empty <see cref="T:System.Net.WebHeaderCollection"></see> object.</summary>
      <returns>An empty <see cref="T:System.Net.WebHeaderCollection"></see> object.</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.LastModified">
      <summary>Gets the date and time that a file on an FTP server was last modified.</summary>
      <returns>A <see cref="T:System.DateTime"></see> that contains the last modified date and time for a file.</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.ResponseUri">
      <summary>Gets the URI that sent the response to the request.</summary>
      <returns>A <see cref="T:System.Uri"></see> instance that identifies the resource associated with this response.</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.StatusCode">
      <summary>Gets the most recent status code sent from the FTP server.</summary>
      <returns>An <see cref="T:System.Net.FtpStatusCode"></see> value that indicates the most recent status code returned with this response.</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.StatusDescription">
      <summary>Gets text that describes a status code sent from the FTP server.</summary>
      <returns>A <see cref="T:System.String"></see> instance that contains the status code and message returned with this response.</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.SupportsHeaders">
      <summary>Gets a value that indicates whether the <see cref="P:System.Net.FtpWebResponse.Headers"></see> property is supported by the <see cref="T:System.Net.FtpWebResponse"></see> instance.</summary>
      <returns>Returns <see cref="T:System.Boolean"></see>.  true if the <see cref="P:System.Net.FtpWebResponse.Headers"></see> property is supported by the <see cref="T:System.Net.FtpWebResponse"></see> instance; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.WelcomeMessage">
      <summary>Gets the message sent by the FTP server when authentication is complete.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the welcome message sent by the server; otherwise, <see cref="F:System.String.Empty"></see> if no message is sent.</returns>
    </member>
    <member name="T:System.Net.GlobalProxySelection">
      <summary>Contains a global default proxy instance for all HTTP requests.</summary>
    </member>
    <member name="M:System.Net.GlobalProxySelection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.GlobalProxySelection"></see> class.</summary>
    </member>
    <member name="M:System.Net.GlobalProxySelection.GetEmptyWebProxy">
      <summary>Returns an empty proxy instance.</summary>
      <returns>An <see cref="T:System.Net.IWebProxy"></see> that contains no information.</returns>
    </member>
    <member name="P:System.Net.GlobalProxySelection.Select">
      <summary>Gets or sets the global HTTP proxy.</summary>
      <returns>An <see cref="T:System.Net.IWebProxy"></see> that every call to <see cref="M:System.Net.HttpWebRequest.GetResponse"></see> uses.</returns>
      <exception cref="T:System.ArgumentNullException">The value specified for a set operation was null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have permission for the requested operation.</exception>
    </member>
    <member name="T:System.Net.HttpContinueDelegate">
      <summary>Represents the method that notifies callers when a continue response is received by the client.</summary>
      <param name="StatusCode">The numeric value of the HTTP status from the server.</param>
      <param name="httpHeaders">The headers returned with the 100-continue response from the server.</param>
    </member>
    <member name="T:System.Net.HttpListener.ExtendedProtectionSelector">
      <summary>A delegate called to determine the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> to use for each <see cref="T:System.Net.HttpListener"></see> request.</summary>
      <param name="request">The <see cref="T:System.Net.HttpListenerRequest"></see> to determine the extended protection policy that the <see cref="T:System.Net.HttpListener"></see> instance will use to provide extended protection.</param>
      <returns></returns>
    </member>
    <member name="T:System.Net.HttpListener">
      <summary>Provides a simple, programmatically controlled HTTP protocol listener. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Net.HttpListener.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.HttpListener"></see> class.</summary>
      <exception cref="T:System.PlatformNotSupportedException">This class cannot be used on the current operating system. Windows Server 2003 or Windows XP SP2 is required to use instances of this class.</exception>
    </member>
    <member name="M:System.Net.HttpListener.Abort">
      <summary>Shuts down the <see cref="T:System.Net.HttpListener"></see> object immediately, discarding all currently queued requests.</summary>
    </member>
    <member name="P:System.Net.HttpListener.AuthenticationSchemes">
      <summary>Gets or sets the scheme used to authenticate clients.</summary>
      <returns>A bitwise combination of <see cref="T:System.Net.AuthenticationSchemes"></see> enumeration values that indicates how clients are to be authenticated. The default value is <see cref="F:System.Net.AuthenticationSchemes.Anonymous"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
    </member>
    <member name="P:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate">
      <summary>Gets or sets the delegate called to determine the protocol used to authenticate clients.</summary>
      <returns>An <see cref="T:System.Net.AuthenticationSchemeSelector"></see> delegate that invokes the method used to select an authentication protocol. The default value is null.</returns>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
    </member>
    <member name="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)">
      <summary>Begins asynchronously retrieving an incoming request.</summary>
      <param name="callback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when a client request is available.</param>
      <param name="state">A user-defined object that contains information about the operation. This object is passed to the callback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object that indicates the status of the asynchronous operation.</returns>
      <exception cref="T:System.Net.HttpListenerException">A Win32 function call failed. Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode"></see> property to determine the cause of the exception.</exception>
      <exception cref="T:System.InvalidOperationException">This object has not been started or is currently stopped.</exception>
      <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
    </member>
    <member name="M:System.Net.HttpListener.Close">
      <summary>Shuts down the <see cref="T:System.Net.HttpListener"></see>.</summary>
    </member>
    <member name="P:System.Net.HttpListener.DefaultServiceNames">
      <summary>Gets a default list of Service Provider Names (SPNs) as determined by registered prefixes.</summary>
      <returns>A <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection"></see> that contains a list of SPNs.</returns>
    </member>
    <member name="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to retrieve an incoming client request.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> object that was obtained when the asynchronous operation was started.</param>
      <returns>An <see cref="T:System.Net.HttpListenerContext"></see> object that represents the client request.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not obtained by calling the <see cref="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)"></see> method.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)"></see> method was already called for the specified <paramref name="asyncResult">asyncResult</paramref> object.</exception>
      <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
    </member>
    <member name="P:System.Net.HttpListener.ExtendedProtectionPolicy">
      <summary>Get or set the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> to use for extended protection for a session.</summary>
      <returns>A <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> that specifies the policy to use for extended protection.</returns>
      <exception cref="T:System.ArgumentException">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy"></see> property, but the <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding"></see> property was not null.</exception>
      <exception cref="T:System.ArgumentNullException">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy"></see> property to null.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy"></see> property after the <see cref="M:System.Net.HttpListener.Start"></see> method was already called.</exception>
      <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement"></see> property was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always"></see> on a platform that does not support extended protection.</exception>
    </member>
    <member name="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate">
      <summary>Get or set the delegate called to determine the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> to use for each request.</summary>
      <returns>A <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> that specifies the policy to use for extended protection.</returns>
      <exception cref="T:System.ArgumentException">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate"></see> property, but the <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding"></see> property must be null.</exception>
      <exception cref="T:System.ArgumentNullException">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate"></see> property to null.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate"></see> property after the <see cref="M:System.Net.HttpListener.Start"></see> method was already called.</exception>
      <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate"></see> property on a platform that does not support extended protection.</exception>
    </member>
    <member name="M:System.Net.HttpListener.GetContext">
      <summary>Waits for an incoming request and returns when one is received.</summary>
      <returns>An <see cref="T:System.Net.HttpListenerContext"></see> object that represents a client request.</returns>
      <exception cref="T:System.Net.HttpListenerException">A Win32 function call failed. Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode"></see> property to determine the cause of the exception.</exception>
      <exception cref="T:System.InvalidOperationException">This object has not been started or is currently stopped.   -or-   The <see cref="T:System.Net.HttpListener"></see> does not have any Uniform Resource Identifier (URI) prefixes to respond to.</exception>
      <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
    </member>
    <member name="M:System.Net.HttpListener.GetContextAsync">
      <summary>Waits for an incoming request as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns an <see cref="T:System.Net.HttpListenerContext"></see> object that represents a client request.</returns>
    </member>
    <member name="P:System.Net.HttpListener.IgnoreWriteExceptions">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that specifies whether your application receives exceptions that occur when an <see cref="T:System.Net.HttpListener"></see> sends the response to the client.</summary>
      <returns>true if this <see cref="T:System.Net.HttpListener"></see> should not return exceptions that occur when sending the response to the client; otherwise false. The default value is false.</returns>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
    </member>
    <member name="P:System.Net.HttpListener.IsListening">
      <summary>Gets a value that indicates whether <see cref="T:System.Net.HttpListener"></see> has been started.</summary>
      <returns>true if the <see cref="T:System.Net.HttpListener"></see> was started; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.HttpListener.IsSupported">
      <summary>Gets a value that indicates whether <see cref="T:System.Net.HttpListener"></see> can be used with the current operating system.</summary>
      <returns>true if <see cref="T:System.Net.HttpListener"></see> is supported; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.HttpListener.Prefixes">
      <summary>Gets the Uniform Resource Identifier (URI) prefixes handled by this <see cref="T:System.Net.HttpListener"></see> object.</summary>
      <returns>An <see cref="T:System.Net.HttpListenerPrefixCollection"></see> that contains the URI prefixes that this <see cref="T:System.Net.HttpListener"></see> object is configured to handle.</returns>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
    </member>
    <member name="P:System.Net.HttpListener.Realm">
      <summary>Gets or sets the realm, or resource partition, associated with this <see cref="T:System.Net.HttpListener"></see> object.</summary>
      <returns>A <see cref="T:System.String"></see> value that contains the name of the realm associated with the <see cref="T:System.Net.HttpListener"></see> object.</returns>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
    </member>
    <member name="M:System.Net.HttpListener.Start">
      <summary>Allows this instance to receive incoming requests.</summary>
      <exception cref="T:System.Net.HttpListenerException">A Win32 function call failed. Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode"></see> property to determine the cause of the exception.</exception>
      <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
    </member>
    <member name="M:System.Net.HttpListener.Stop">
      <summary>Causes this instance to stop receiving incoming requests.</summary>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
    </member>
    <member name="P:System.Net.HttpListener.TimeoutManager">
      <summary>The timeout manager for this <see cref="T:System.Net.HttpListener"></see> instance.</summary>
      <returns>Returns <see cref="T:System.Net.HttpListenerTimeoutManager"></see>.   The timeout manager for this <see cref="T:System.Net.HttpListener"></see> instance.</returns>
    </member>
    <member name="P:System.Net.HttpListener.UnsafeConnectionNtlmAuthentication">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that controls whether, when NTLM is used, additional requests using the same Transmission Control Protocol (TCP) connection are required to authenticate.</summary>
      <returns>true if the <see cref="T:System.Security.Principal.IIdentity"></see> of the first request will be used for subsequent requests on the same connection; otherwise, false. The default value is false.</returns>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
    </member>
    <member name="M:System.Net.HttpListener.System#IDisposable#Dispose">
      <summary>Releases the resources held by this <see cref="T:System.Net.HttpListener"></see> object.</summary>
    </member>
    <member name="T:System.Net.HttpListenerBasicIdentity">
      <summary>Holds the user name and password from a basic authentication request.</summary>
    </member>
    <member name="M:System.Net.HttpListenerBasicIdentity.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.HttpListenerBasicIdentity"></see> class using the specified user name and password.</summary>
      <param name="username">The user name.</param>
      <param name="password">The password.</param>
    </member>
    <member name="P:System.Net.HttpListenerBasicIdentity.Password">
      <summary>Indicates the password from a basic authentication attempt.</summary>
      <returns>A <see cref="T:System.String"></see> that holds the password.</returns>
    </member>
    <member name="T:System.Net.HttpListenerContext">
      <summary>Provides access to the request and response objects used by the <see cref="T:System.Net.HttpListener"></see> class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)">
      <summary>Accept a WebSocket connection as an asynchronous operation.</summary>
      <param name="subProtocol">The supported WebSocket sub-protocol.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns an <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext"></see> object.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="subProtocol">subProtocol</paramref> is an empty string   -or-  <paramref name="subProtocol">subProtocol</paramref> contains illegal characters.</exception>
      <exception cref="T:System.Net.WebSockets.WebSocketException">An error occurred when sending the response to complete the WebSocket handshake.</exception>
    </member>
    <member name="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)">
      <summary>Accept a WebSocket connection specifying the supported WebSocket sub-protocol  and WebSocket keep-alive interval as an asynchronous operation.</summary>
      <param name="subProtocol">The supported WebSocket sub-protocol.</param>
      <param name="keepAliveInterval">The WebSocket protocol keep-alive interval in milliseconds.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns an <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext"></see> object.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="subProtocol">subProtocol</paramref> is an empty string   -or-  <paramref name="subProtocol">subProtocol</paramref> contains illegal characters.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keepAliveInterval">keepAliveInterval</paramref> is too small.</exception>
      <exception cref="T:System.Net.WebSockets.WebSocketException">An error occurred when sending the response to complete the WebSocket handshake.</exception>
    </member>
    <member name="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
      <summary>Accept a WebSocket connection specifying the supported WebSocket sub-protocol, receive buffer size, and WebSocket keep-alive interval as an asynchronous operation.</summary>
      <param name="subProtocol">The supported WebSocket sub-protocol.</param>
      <param name="receiveBufferSize">The receive buffer size in bytes.</param>
      <param name="keepAliveInterval">The WebSocket protocol keep-alive interval in milliseconds.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns an <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext"></see> object.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="subProtocol">subProtocol</paramref> is an empty string   -or-  <paramref name="subProtocol">subProtocol</paramref> contains illegal characters.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keepAliveInterval">keepAliveInterval</paramref> is too small.   -or-  <paramref name="receiveBufferSize">receiveBufferSize</paramref> is less than 16 bytes   -or-  <paramref name="receiveBufferSize">receiveBufferSize</paramref> is greater than 64K bytes.</exception>
      <exception cref="T:System.Net.WebSockets.WebSocketException">An error occurred when sending the response to complete the WebSocket handshake.</exception>
    </member>
    <member name="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
      <summary>Accept a WebSocket connection specifying the supported WebSocket sub-protocol, receive buffer size, WebSocket keep-alive interval, and the internal buffer as an asynchronous operation.</summary>
      <param name="subProtocol">The supported WebSocket sub-protocol.</param>
      <param name="receiveBufferSize">The receive buffer size in bytes.</param>
      <param name="keepAliveInterval">The WebSocket protocol keep-alive interval in milliseconds.</param>
      <param name="internalBuffer">An internal buffer to use for this operation.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns an <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext"></see> object.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="subProtocol">subProtocol</paramref> is an empty string   -or-  <paramref name="subProtocol">subProtocol</paramref> contains illegal characters.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keepAliveInterval">keepAliveInterval</paramref> is too small.   -or-  <paramref name="receiveBufferSize">receiveBufferSize</paramref> is less than 16 bytes   -or-  <paramref name="receiveBufferSize">receiveBufferSize</paramref> is greater than 64K bytes.</exception>
      <exception cref="T:System.Net.WebSockets.WebSocketException">An error occurred when sending the response to complete the WebSocket handshake.</exception>
    </member>
    <member name="P:System.Net.HttpListenerContext.Request">
      <summary>Gets the <see cref="T:System.Net.HttpListenerRequest"></see> that represents a client's request for a resource.</summary>
      <returns>An <see cref="T:System.Net.HttpListenerRequest"></see> object that represents the client request.</returns>
    </member>
    <member name="P:System.Net.HttpListenerContext.Response">
      <summary>Gets the <see cref="T:System.Net.HttpListenerResponse"></see> object that will be sent to the client in response to the client's request.</summary>
      <returns>An <see cref="T:System.Net.HttpListenerResponse"></see> object used to send a response back to the client.</returns>
    </member>
    <member name="P:System.Net.HttpListenerContext.User">
      <summary>Gets an object used to obtain identity, authentication information, and security roles for the client whose request is represented by this <see cref="T:System.Net.HttpListenerContext"></see> object.</summary>
      <returns>An <see cref="T:System.Security.Principal.IPrincipal"></see> object that describes the client, or null if the <see cref="T:System.Net.HttpListener"></see> that supplied this <see cref="T:System.Net.HttpListenerContext"></see> does not require authentication.</returns>
    </member>
    <member name="T:System.Net.HttpListenerException">
      <summary>The exception that is thrown when an error occurs processing an HTTP request.</summary>
    </member>
    <member name="M:System.Net.HttpListenerException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.HttpListenerException"></see> class.</summary>
    </member>
    <member name="M:System.Net.HttpListenerException.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.HttpListenerException"></see> class using the specified error code.</summary>
      <param name="errorCode">A <see cref="T:System.Int32"></see> value that identifies the error that occurred.</param>
    </member>
    <member name="M:System.Net.HttpListenerException.#ctor(System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.HttpListenerException"></see> class using the specified error code and message.</summary>
      <param name="errorCode">A <see cref="T:System.Int32"></see> value that identifies the error that occurred.</param>
      <param name="message">A <see cref="T:System.String"></see> that describes the error that occurred.</param>
    </member>
    <member name="M:System.Net.HttpListenerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.HttpListenerException"></see> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> classes.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that contains the information required to deserialize the new <see cref="T:System.Net.HttpListenerException"></see> object.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object.</param>
    </member>
    <member name="P:System.Net.HttpListenerException.ErrorCode">
      <summary>Gets a value that identifies the error that occurred.</summary>
      <returns>A <see cref="T:System.Int32"></see> value.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Capture">
      <summary>Represents the results from a single successful subexpression capture.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
      <summary>The position in the original string where the first character of the captured substring is found.</summary>
      <returns>The zero-based starting position in the original string where the captured substring is found.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
      <summary>Gets the length of the captured substring.</summary>
      <returns>The length of the captured substring.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
      <summary>Retrieves the captured substring from the input string by calling the <see cref="P:System.Text.RegularExpressions.Capture.Value"></see> property.</summary>
      <returns>The substring that was captured by the match.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
      <summary>Gets the captured substring from the input string.</summary>
      <returns>The substring that is captured by the match.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
      <summary>Represents the set of captures made by a single capturing group.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies all the elements of the collection to the given array beginning at the given index.</summary>
      <param name="array">The array the collection is to be copied into.</param>
      <param name="arrayIndex">The position in the destination array where copying is to begin.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex">arrayIndex</paramref> is outside the bounds of <paramref name="array">array</paramref>.   -or-  <paramref name="arrayIndex">arrayIndex</paramref> plus <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count"></see> is outside the bounds of <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
      <summary>Gets the number of substrings captured by the group.</summary>
      <returns>The number of items in the <see cref="T:System.Text.RegularExpressions.CaptureCollection"></see>.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
      <summary>Provides an enumerator that iterates through the collection.</summary>
      <returns>An object that contains all <see cref="T:System.Text.RegularExpressions.Capture"></see> objects within the <see cref="T:System.Text.RegularExpressions.CaptureCollection"></see>.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read only.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized (thread-safe).</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
      <summary>Gets an individual member of the collection.</summary>
      <param name="i">Index into the capture collection.</param>
      <returns>The captured substring at position <paramref name="i">i</paramref> in the collection.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i">i</paramref> is less than 0 or greater than <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count"></see>.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="T:System.Windows.Input.ICommand">
      <summary>Defines a command.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
      <summary>Defines the method that determines whether the command can execute in its current state.</summary>
      <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
      <returns>true if this command can be executed; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
      <summary>Occurs when changes occur that affect whether or not the command should execute.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
      <summary>Defines the method to be called when the command is invoked.</summary>
      <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary>Represents a statement using a literal code fragment.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetStatement"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetStatement"></see> class using the specified code fragment.</summary>
      <param name="value">The literal code fragment of the statement to represent.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary>Gets or sets the literal code fragment statement.</summary>
      <returns>The literal code fragment statement.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary>Represents a member of a type using a literal code fragment.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetTypeMember"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetTypeMember"></see> class using the specified text.</summary>
      <param name="text">The literal code fragment for the type member.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary>Gets or sets the literal code fragment for the type member.</summary>
      <returns>The literal code fragment for the type member.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary>Represents the abstract base class from which all code statements derive.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeStatement"></see> class.</summary>
    </member>
    <member name="P:System.CodeDom.CodeStatement.EndDirectives">
      <summary>Gets a <see cref="T:System.CodeDom.CodeDirectiveCollection"></see> object that contains end directives.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeDirectiveCollection"></see> object containing end directives.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary>Gets or sets the line on which the code statement occurs.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeLinePragma"></see> object that indicates the context of the code statement.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.StartDirectives">
      <summary>Gets a <see cref="T:System.CodeDom.CodeDirectiveCollection"></see> object that contains start directives.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeDirectiveCollection"></see> object containing start directives.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary>Represents a collection of <see cref="T:System.CodeDom.CodeStatement"></see> objects.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeStatementCollection"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeStatementCollection"></see> class that contains the specified array of <see cref="T:System.CodeDom.CodeStatement"></see> objects.</summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeStatement"></see> objects with which to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeStatementCollection"></see> class that contains the elements of the specified source collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeStatementCollection"></see> object with which to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary>Adds the specified <see cref="T:System.CodeDom.CodeExpression"></see> object to the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeExpression"></see> object to add.</param>
      <returns>The index at which the new element was inserted.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary>Adds the specified <see cref="T:System.CodeDom.CodeStatement"></see> object to the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeStatement"></see> object to add.</param>
      <returns>The index at which the new element was inserted.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary>Adds a set of <see cref="T:System.CodeDom.CodeStatement"></see> objects to the collection.</summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeStatement"></see> objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary>Adds the contents of another <see cref="T:System.CodeDom.CodeStatementCollection"></see> object to the end of the collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeStatementCollection"></see> object that contains the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary>Gets a value that indicates whether the collection contains the specified <see cref="T:System.CodeDom.CodeStatement"></see> object.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeStatement"></see> object to search for in the collection.</param>
      <returns>true if the collection contains the specified object; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.CodeDom.CodeStatementCollection"></see> object to a one-dimensional <see cref="T:System.Array"></see> instance, starting at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the values copied from the collection.</param>
      <param name="index">The index of the array at which to begin inserting.</param>
      <exception cref="T:System.ArgumentException">The destination array is multidimensional.   -or-   The number of elements in the <see cref="T:System.CodeDom.CodeStatementCollection"></see> is greater than the available space between the index of the target array specified by the <paramref name="index">index</paramref> parameter and the end of the target array.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array">array</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is less than the target array's minimum index.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary>Gets the index of the specified <see cref="T:System.CodeDom.CodeStatement"></see> object in the <see cref="T:System.CodeDom.CodeStatementCollection"></see>, if it exists in the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeStatement"></see> to locate in the collection.</param>
      <returns>The index of the specified object, if it is found, in the collection; otherwise, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary>Inserts the specified <see cref="T:System.CodeDom.CodeStatement"></see> object into the collection at the specified index.</summary>
      <param name="index">The zero-based index where the specified object should be inserted.</param>
      <param name="value">The <see cref="T:System.CodeDom.CodeStatement"></see> object to insert.</param>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.CodeDom.CodeStatement"></see> object at the specified index in the collection.</summary>
      <param name="index">The index of the collection to access.</param>
      <returns>A <see cref="T:System.CodeDom.CodeStatement"></see> at each valid index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary>Removes the specified <see cref="T:System.CodeDom.CodeStatement"></see> object from the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeStatement"></see> to remove from the collection.</param>
      <exception cref="T:System.ArgumentException">The specified object is not found in the collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary>Represents a reference to the current local class instance.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThisReferenceExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeThisReferenceExpression"></see> class.</summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary>Represents a statement that throws an exception.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeThrowExceptionStatement"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeThrowExceptionStatement"></see> class with the specified exception type instance.</summary>
      <param name="toThrow">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the exception to throw.</param>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary>Gets or sets the exception to throw.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> representing an instance of the exception to throw.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary>Represents a try block with any number of catch clauses and, optionally, a finally block.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement"></see> class using the specified statements for try and catch clauses.</summary>
      <param name="tryStatements">An array of <see cref="T:System.CodeDom.CodeStatement"></see> objects that indicate the statements to try.</param>
      <param name="catchClauses">An array of <see cref="T:System.CodeDom.CodeCatchClause"></see> objects that indicate the clauses to catch.</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement"></see> class using the specified statements for try, catch clauses, and finally statements.</summary>
      <param name="tryStatements">An array of <see cref="T:System.CodeDom.CodeStatement"></see> objects that indicate the statements to try.</param>
      <param name="catchClauses">An array of <see cref="T:System.CodeDom.CodeCatchClause"></see> objects that indicate the clauses to catch.</param>
      <param name="finallyStatements">An array of <see cref="T:System.CodeDom.CodeStatement"></see> objects that indicate the finally statements to use.</param>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary>Gets the catch clauses to use.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeCatchClauseCollection"></see> that indicates the catch clauses to use.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary>Gets the finally statements to use.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeStatementCollection"></see> that indicates the finally statements.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary>Gets the statements to try.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeStatementCollection"></see> that indicates the statements to try.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary>Represents a static constructor for a class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeConstructor"></see> class.</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary>Represents a type declaration for a class, structure, interface, or enumeration.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> class with the specified name.</summary>
      <param name="name">The name for the new type.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary>Gets the base types of the type.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReferenceCollection"></see> object that indicates the base types of the type.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary>Gets or sets a value indicating whether the type is a class or reference type.</summary>
      <returns>true if the type is a class or reference type; otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary>Gets or sets a value indicating whether the type is an enumeration.</summary>
      <returns>true if the type is an enumeration; otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary>Gets or sets a value indicating whether the type is an interface.</summary>
      <returns>true if the type is an interface; otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
      <summary>Gets or sets a value indicating whether the type declaration is complete or partial.</summary>
      <returns>true if the class or structure declaration is a partial representation of the implementation; false if the declaration is a complete implementation of the class or structure. The default is false.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary>Gets or sets a value indicating whether the type is a value type (struct).</summary>
      <returns>true if the type is a value type; otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary>Gets the collection of class members for the represented type.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeMemberCollection"></see> object that indicates the class members.</returns>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary>Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes"></see> collection is accessed for the first time.</summary>
      <returns></returns>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary>Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.Members"></see> collection is accessed for the first time.</summary>
      <returns></returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary>Gets or sets the attributes of the type.</summary>
      <returns>A <see cref="T:System.Reflection.TypeAttributes"></see> object that indicates the attributes of the type.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
      <summary>Gets the type parameters for the type declaration.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeParameterCollection"></see> that contains the type parameters for the type declaration.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary>Represents a collection of <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> objects.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"></see> class that contains the specified array of <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> objects.</summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> objects with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"></see> class that contains the elements of the specified source collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"></see> object with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary>Adds the specified <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> object to the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> object to add.</param>
      <returns>The index at which the new element was inserted.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary>Copies the elements of the specified array to the end of the collection.</summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> that contains the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>Adds the contents of another <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"></see> object to the end of the collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"></see> object that contains the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary>Gets a value that indicates whether the collection contains the specified <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> object.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> object to search for in the collection.</param>
      <returns>true if the collection contains the specified object; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary>Copies the elements in the <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"></see> object to a one-dimensional <see cref="T:System.Array"></see> instance, starting at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the values copied from the collection.</param>
      <param name="index">The index of the array at which to begin inserting.</param>
      <exception cref="T:System.ArgumentException">The destination array is multidimensional.   -or-   The number of elements in the <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"></see> is greater than the available space between the index of the target array specified by the <paramref name="index">index</paramref> parameter and the end of the target array.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array">array</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is less than the target array's minimum index.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary>Gets the index of the specified <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> object in the <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"></see>, if it exists in the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> to locate in the collection.</param>
      <returns>The index of the specified object, if it is found, in the collection; otherwise, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary>Inserts the specified <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> object into the collection at the specified index.</summary>
      <param name="index">The zero-based index where the specified object should be inserted.</param>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> object to insert.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> object at the specified index in the collection.</summary>
      <param name="index">The index of the collection to access.</param>
      <returns>A <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> at each valid index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary>Removes the specified <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> object from the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> to remove from the collection.</param>
      <exception cref="T:System.ArgumentException">The specified object is not found in the collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary>Represents a delegate declaration.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDelegate"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDelegate"></see> class.</summary>
      <param name="name">The name of the delegate.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary>Gets the parameters of the delegate.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"></see> that indicates the parameters of the delegate.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary>Gets or sets the return type of the delegate.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the return type of the delegate.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary>Provides a base class for a member of a type. Type members include fields, methods, properties, constructors and nested types.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMember.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeMember"></see> class.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary>Gets or sets the attributes of the member.</summary>
      <returns>A bitwise combination of the <see cref="T:System.CodeDom.MemberAttributes"></see> values used to indicate the attributes of the member. The default value is <see cref="F:System.CodeDom.MemberAttributes.Private"></see> | <see cref="F:System.CodeDom.MemberAttributes.Final"></see>.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary>Gets the collection of comments for the type member.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeCommentStatementCollection"></see> that indicates the comments for the member.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary>Gets or sets the custom attributes of the member.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"></see> that indicates the custom attributes of the member.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.EndDirectives">
      <summary>Gets the end directives for the member.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeDirectiveCollection"></see> object containing end directives.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary>Gets or sets the line on which the type member statement occurs.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeLinePragma"></see> object that indicates the location of the type member declaration.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary>Gets or sets the name of the member.</summary>
      <returns>The name of the member.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.StartDirectives">
      <summary>Gets the start directives for the member.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeDirectiveCollection"></see> object containing start directives.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary>Represents a collection of <see cref="T:System.CodeDom.CodeTypeMember"></see> objects.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeMemberCollection"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeMemberCollection"></see> class containing the specified array of <see cref="T:System.CodeDom.CodeTypeMember"></see> objects.</summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeTypeMember"></see> objects with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeMemberCollection"></see> class containing the elements of the specified source collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeTypeMemberCollection"></see> with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary>Adds a <see cref="T:System.CodeDom.CodeTypeMember"></see> with the specified value to the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeMember"></see> to add.</param>
      <returns>The index at which the new element was inserted.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary>Copies the elements of the specified <see cref="T:System.CodeDom.CodeTypeMember"></see> array to the end of the collection.</summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeTypeMember"></see> containing the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary>Adds the contents of another <see cref="T:System.CodeDom.CodeTypeMemberCollection"></see> to the end of the collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeTypeMemberCollection"></see> containing the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary>Gets a value indicating whether the collection contains the specified <see cref="T:System.CodeDom.CodeTypeMember"></see>.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeMember"></see> to search for in the collection.</param>
      <returns>true if the collection contains the specified object; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary>Copies the collection objects to a one-dimensional <see cref="T:System.Array"></see> instance, beginning at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the values copied from the collection.</param>
      <param name="index">The index of the array at which to begin inserting.</param>
      <exception cref="T:System.ArgumentException">The destination array is multidimensional.   -or-   The number of elements in the <see cref="T:System.CodeDom.CodeTypeMemberCollection"></see> is greater than the available space between the index of the target array specified by the <paramref name="index">index</paramref> parameter and the end of the target array.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array">array</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is less than the target array's minimum index.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary>Gets the index in the collection of the specified <see cref="T:System.CodeDom.CodeTypeMember"></see>, if it exists in the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeMember"></see> to locate in the collection.</param>
      <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary>Inserts the specified <see cref="T:System.CodeDom.CodeTypeMember"></see> into the collection at the specified index.</summary>
      <param name="index">The zero-based index where the specified object should be inserted.</param>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeMember"></see> to insert.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.CodeDom.CodeTypeMember"></see> at the specified index in the collection.</summary>
      <param name="index">The index of the collection to access.</param>
      <returns>A <see cref="T:System.CodeDom.CodeTypeMember"></see> at each valid index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary>Removes a specific <see cref="T:System.CodeDom.CodeTypeMember"></see> from the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeMember"></see> to remove from the collection.</param>
      <exception cref="T:System.ArgumentException">The specified object is not found in the collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary>Represents a typeof expression, an expression that returns a <see cref="T:System.Type"></see> for a specified type name.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeOfExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeOfExpression"></see> class.</summary>
      <param name="type">A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the data type for the typeof expression.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeOfExpression"></see> class using the specified type.</summary>
      <param name="type">The name of the data type for the typeof expression.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeOfExpression"></see> class using the specified type.</summary>
      <param name="type">The data type of the data type of the typeof expression.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary>Gets or sets the data type referenced by the typeof expression.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the data type referenced by the typeof expression. This property will never return null, and defaults to the <see cref="T:System.Void"></see> type.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameter">
      <summary>Represents a type parameter of a generic type or method.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeParameter"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeParameter"></see> class with the specified type parameter name.</summary>
      <param name="name">The name of the type parameter.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Constraints">
      <summary>Gets the constraints for the type parameter.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReferenceCollection"></see> object that contains the constraints for the type parameter.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.CustomAttributes">
      <summary>Gets the custom attributes of the type parameter.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"></see> that indicates the custom attributes of the type parameter. The default is null.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.HasConstructorConstraint">
      <summary>Gets or sets a value indicating whether the type parameter has a constructor constraint.</summary>
      <returns>true if the type parameter has a constructor constraint; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Name">
      <summary>Gets or sets the name of the type parameter.</summary>
      <returns>The name of the type parameter. The default is an empty string (&quot;&quot;).</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameterCollection">
      <summary>Represents a collection of <see cref="T:System.CodeDom.CodeTypeParameter"></see> objects.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor">
      <summary>Initializes a new, empty instance of the <see cref="T:System.CodeDom.CodeTypeParameterCollection"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameter[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeParameterCollection"></see> class containing the specified array of <see cref="T:System.CodeDom.CodeTypeParameter"></see> objects.</summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeTypeParameter"></see> objects with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameterCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeParameterCollection"></see> class containing the elements of the specified source collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeTypeParameterCollection"></see> with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.CodeDom.CodeTypeParameter)">
      <summary>Adds the specified <see cref="T:System.CodeDom.CodeTypeParameter"></see> object to the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeParameter"></see> to add.</param>
      <returns>The zero-based index at which the new element was inserted.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.String)">
      <summary>Adds the specified <see cref="T:System.CodeDom.CodeTypeParameter"></see> object to the collection using the specified data type name.</summary>
      <param name="value">The name of a data type for which to add the <see cref="T:System.CodeDom.CodeTypeParameter"></see> object to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameter[])">
      <summary>Copies the elements of the specified <see cref="T:System.CodeDom.CodeTypeParameter"></see> array to the end of the collection.</summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeTypeParameter"></see> containing the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameterCollection)">
      <summary>Copies the elements of the specified <see cref="T:System.CodeDom.CodeTypeParameterCollection"></see> to the end of the collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeTypeParameterCollection"></see> containing the <see cref="T:System.CodeDom.CodeTypeParameter"></see> objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Contains(System.CodeDom.CodeTypeParameter)">
      <summary>Determines whether the collection contains the specified <see cref="T:System.CodeDom.CodeTypeParameter"></see> object.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeParameter"></see> object to search for in the collection.</param>
      <returns>true if the <see cref="T:System.CodeDom.CodeTypeParameter"></see> object is contained in the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.CopyTo(System.CodeDom.CodeTypeParameter[],System.Int32)">
      <summary>Copies the items in the collection to the specified one-dimensional <see cref="T:System.Array"></see> at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the values copied from the collection.</param>
      <param name="index">The index of the array at which to begin inserting.</param>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-   The number of elements in the <see cref="T:System.CodeDom.CodeTypeParameterCollection"></see> is greater than the available space between the index of the target array specified by <paramref name="index">index</paramref> and the end of the target array.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than the target array's lowest index.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.IndexOf(System.CodeDom.CodeTypeParameter)">
      <summary>Gets the index in the collection of the specified <see cref="T:System.CodeDom.CodeTypeParameter"></see> object, if it exists in the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeParameter"></see> object to locate in the collection.</param>
      <returns>The zero-based index of the specified <see cref="T:System.CodeDom.CodeTypeParameter"></see> object in the collection if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Insert(System.Int32,System.CodeDom.CodeTypeParameter)">
      <summary>Inserts the specified <see cref="T:System.CodeDom.CodeTypeParameter"></see> object into the collection at the specified index.</summary>
      <param name="index">The zero-based index at which to insert the item.</param>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeParameter"></see> object to insert.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameterCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.CodeDom.CodeTypeParameter"></see> object at the specified index in the collection.</summary>
      <param name="index">The zero-based index of the collection object to access.</param>
      <returns>The <see cref="T:System.CodeDom.CodeTypeParameter"></see> object at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Remove(System.CodeDom.CodeTypeParameter)">
      <summary>Removes the specified <see cref="T:System.CodeDom.CodeTypeParameter"></see> object from the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeParameter"></see> object to remove from the collection.</param>
      <exception cref="T:System.ArgumentException">The specified object is not found in the collection.</exception>
    </member>
    <member name="T:System.ComponentModel.DataErrorsChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged"></see> event.</summary>
    </member>
    <member name="M:System.ComponentModel.DataErrorsChangedEventArgs.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataErrorsChangedEventArgs"></see> class.</summary>
      <param name="propertyName">The name of the property that has an error.  null or <see cref="F:System.String.Empty"></see> if the error is object-level.</param>
    </member>
    <member name="P:System.ComponentModel.DataErrorsChangedEventArgs.PropertyName">
      <summary>Gets the name of the property that has an error.</summary>
      <returns>The name of the property that has an error. null or <see cref="F:System.String.Empty"></see> if the error is object-level.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary>Identifies a type as an object suitable for binding to an <see cref="T:System.Web.UI.WebControls.ObjectDataSource"></see> object. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataObjectAttribute"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataObjectAttribute"></see> class and indicates whether an object is suitable for binding to an <see cref="T:System.Web.UI.WebControls.ObjectDataSource"></see> object.</summary>
      <param name="isDataObject">true if the object is suitable for binding to an <see cref="T:System.Web.UI.WebControls.ObjectDataSource"></see> object; otherwise, false.</param>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary>Indicates that the class is suitable for binding to an <see cref="T:System.Web.UI.WebControls.ObjectDataSource"></see> object at design time. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary>Represents the default value of the <see cref="T:System.ComponentModel.DataObjectAttribute"></see> class, which indicates that the class is suitable for binding to an <see cref="T:System.Web.UI.WebControls.ObjectDataSource"></see> object at design time. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary>Determines whether this instance of <see cref="T:System.ComponentModel.DataObjectAttribute"></see> fits the pattern of another object.</summary>
      <param name="obj">An object to compare with this instance of <see cref="T:System.ComponentModel.DataObjectAttribute"></see>.</param>
      <returns>true if this instance is the same as the instance specified by the <paramref name="obj">obj</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary>Gets a value indicating whether an object should be considered suitable for binding to an <see cref="T:System.Web.UI.WebControls.ObjectDataSource"></see> object at design time.</summary>
      <returns>true if the object should be considered suitable for binding to an <see cref="T:System.Web.UI.WebControls.ObjectDataSource"></see> object; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary>Gets a value indicating whether the current value of the attribute is the default value for the attribute.</summary>
      <returns>true if the current value of the attribute is the default; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary>Indicates that the class is not suitable for binding to an <see cref="T:System.Web.UI.WebControls.ObjectDataSource"></see> object at design time. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary>Provides metadata for a property representing a data field. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataObjectFieldAttribute"></see> class and indicates whether the field is the primary key for the data row.</summary>
      <param name="primaryKey">true to indicate that the field is in the primary key of the data row; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataObjectFieldAttribute"></see> class and indicates whether the field is the primary key for the data row, and whether the field is a database identity field.</summary>
      <param name="primaryKey">true to indicate that the field is in the primary key of the data row; otherwise, false.</param>
      <param name="isIdentity">true to indicate that the field is an identity field that uniquely identifies the data row; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataObjectFieldAttribute"></see> class and indicates whether the field is the primary key for the data row, whether the field is a database identity field, and whether the field can be null.</summary>
      <param name="primaryKey">true to indicate that the field is in the primary key of the data row; otherwise, false.</param>
      <param name="isIdentity">true to indicate that the field is an identity field that uniquely identifies the data row; otherwise, false.</param>
      <param name="isNullable">true to indicate that the field can be null in the data store; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataObjectFieldAttribute"></see> class and indicates whether the field is the primary key for the data row, whether it is a database identity field, and whether it can be null and sets the length of the field.</summary>
      <param name="primaryKey">true to indicate that the field is in the primary key of the data row; otherwise, false.</param>
      <param name="isIdentity">true to indicate that the field is an identity field that uniquely identifies the data row; otherwise, false.</param>
      <param name="isNullable">true to indicate that the field can be null in the data store; otherwise, false.</param>
      <param name="length">The length of the field in bytes.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance of <see cref="T:System.ComponentModel.DataObjectFieldAttribute"></see>.</param>
      <returns>true if this instance is the same as the instance specified by the <paramref name="obj">obj</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary>Gets a value indicating whether a property represents an identity field in the underlying data.</summary>
      <returns>true if the property represents an identity field in the underlying data; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary>Gets a value indicating whether a property represents a field that can be null in the underlying data store.</summary>
      <returns>true if the property represents a field that can be null in the underlying data store; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary>Gets the length of the property in bytes.</summary>
      <returns>The length of the property in bytes, or -1 if not set.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary>Gets a value indicating whether a property is in the primary key in the underlying data.</summary>
      <returns>true if the property is in the primary key of the data store; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary>Identifies a data operation method exposed by a type, what type of operation the method performs, and whether the method is the default data method. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataObjectMethodAttribute"></see> class and identifies the type of data operation the method performs.</summary>
      <param name="methodType">One of the <see cref="T:System.ComponentModel.DataObjectMethodType"></see> values that describes the data operation the method performs.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataObjectMethodAttribute"></see> class, identifies the type of data operation the method performs, and identifies whether the method is the default data method that the data object exposes.</summary>
      <param name="methodType">One of the <see cref="T:System.ComponentModel.DataObjectMethodType"></see> values that describes the data operation the method performs.</param>
      <param name="isDefault">true to indicate the method that the attribute is applied to is the default method of the data object for the specified methodType; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance of <see cref="T:System.ComponentModel.DataObjectMethodAttribute"></see>.</param>
      <returns>true if this instance is the same as the instance specified by the <paramref name="obj">obj</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary>Gets a value indicating whether the method that the <see cref="T:System.ComponentModel.DataObjectMethodAttribute"></see> is applied to is the default data method exposed by the data object for a specific method type.</summary>
      <returns>true if the method is the default method exposed by the object for a method type; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary>Gets a value indicating whether this instance shares a common pattern with a specified attribute.</summary>
      <param name="obj">An object to compare with this instance of <see cref="T:System.ComponentModel.DataObjectMethodAttribute"></see>.</param>
      <returns>true if this instance is the same as the instance specified by the <paramref name="obj">obj</paramref> parameter; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary>Gets a <see cref="T:System.ComponentModel.DataObjectMethodType"></see> value indicating the type of data operation the method performs.</summary>
      <returns>One of the <see cref="T:System.ComponentModel.DataObjectMethodType"></see> values that identifies the type of data operation performed by the method to which the <see cref="T:System.ComponentModel.DataObjectMethodAttribute"></see> is applied.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary>Identifies the type of data operation performed by a method, as specified by the <see cref="T:System.ComponentModel.DataObjectMethodAttribute"></see> applied to the method.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary>Indicates that a method is used for a data operation that deletes data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary>Indicates that a method is used for a data operation that fills a <see cref="T:System.Data.DataSet"></see> object.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary>Indicates that a method is used for a data operation that inserts data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary>Indicates that a method is used for a data operation that retrieves data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary>Indicates that a method is used for a data operation that updates data.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary>Provides a type converter to convert <see cref="T:System.DateTime"></see> objects to and from various other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DateTimeConverter"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value indicating whether this converter can convert an object in the given source type to a <see cref="T:System.DateTime"></see> using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from.</param>
      <returns>true if this object can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you wish to convert to.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given value object to a <see cref="T:System.DateTime"></see>.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a valid value for the target type.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to a <see cref="T:System.DateTime"></see> using the arguments.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value to.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary>Provides a type converter to convert <see cref="T:System.DateTimeOffset"></see> structures to and from various other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DateTimeOffsetConverter"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether an object of the specified source type can be converted to a <see cref="T:System.DateTimeOffset"></see>.</summary>
      <param name="context">The date format context.</param>
      <param name="sourceType">The source type to check.</param>
      <returns>true if the specified type can be converted to a <see cref="T:System.DateTimeOffset"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether a <see cref="T:System.DateTimeOffset"></see> can be converted to an object of the specified type.</summary>
      <param name="context">The date format context.</param>
      <param name="destinationType">The destination type to check.</param>
      <returns>true if a <see cref="T:System.DateTimeOffset"></see> can be converted to the specified type; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified object to a <see cref="T:System.DateTimeOffset"></see>.</summary>
      <param name="context">The date format context.</param>
      <param name="culture">The date culture.</param>
      <param name="value">The object to be converted.</param>
      <returns>A <see cref="T:System.DateTimeOffset"></see> that represents the specified object.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:System.DateTimeOffset"></see> to an object of the specified type.</summary>
      <param name="context">The date format context.</param>
      <param name="culture">The date culture.</param>
      <param name="value">The <see cref="T:System.DateTimeOffset"></see> to be converted.</param>
      <param name="destinationType">The type to convert to.</param>
      <returns>An object of the specified type that represents the <see cref="T:System.DateTimeOffset"></see>.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary>Provides a type converter to convert <see cref="T:System.Decimal"></see> objects to and from various other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DecimalConverter"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you wish to convert to.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to a <see cref="T:System.Decimal"></see> using the arguments.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value to.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType">destinationType</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary>Specifies the default binding property for a component. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute"></see> class using no parameters.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute"></see> class using the specified property name.</summary>
      <param name="name">The name of the default binding property.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary>Represents the default value for the <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute"></see> class.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute"></see> instance.</summary>
      <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute"></see> instance</param>
      <returns>true if the object is equal to the current instance; otherwise, false, indicating they are not equal.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary>Gets the name of the default binding property for the component to which the <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute"></see> is bound.</summary>
      <returns>The name of the default binding property for the component to which the <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute"></see> is bound.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary>Specifies the default event for a component.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultEventAttribute"></see> class.</summary>
      <param name="name">The name of the default event for the component this attribute is bound to.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary>Specifies the default value for the <see cref="T:System.ComponentModel.DefaultEventAttribute"></see>, which is null. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.DefaultEventAttribute"></see>.</summary>
      <param name="obj">The object to test the value equality of.</param>
      <returns>true if the value of the given object is equal to that of the current; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary>Gets the name of the default event for the component this attribute is bound to.</summary>
      <returns>The name of the default event for the component this attribute is bound to. The default value is null.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary>Specifies the default property for a component.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultPropertyAttribute"></see> class.</summary>
      <param name="name">The name of the default property for the component this attribute is bound to.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary>Specifies the default value for the <see cref="T:System.ComponentModel.DefaultPropertyAttribute"></see>, which is null. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.DefaultPropertyAttribute"></see>.</summary>
      <param name="obj">The object to test the value equality of.</param>
      <returns>true if the value of the given object is equal to that of the current; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary>Gets the name of the default property for the component this attribute is bound to.</summary>
      <returns>The name of the default property for the component this attribute is bound to. The default value is null.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
      <summary>Specifies the default value for a property.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute"></see> class using a <see cref="T:System.Boolean"></see> value.</summary>
      <param name="value">A <see cref="T:System.Boolean"></see> that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute"></see> class, converting the specified value to the specified type, and using an invariant culture as the translation context.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type to convert the value to.</param>
      <param name="value">A <see cref="T:System.String"></see> that can be converted to the type using the <see cref="T:System.ComponentModel.TypeConverter"></see> for the type and the U.S. English culture.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute"></see> class using a <see cref="T:System.String"></see>.</summary>
      <param name="value">A <see cref="T:System.String"></see> that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute"></see> class using a single-precision floating point number.</summary>
      <param name="value">A single-precision floating point number that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute"></see> class using a 64-bit signed integer.</summary>
      <param name="value">A 64-bit signed integer that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute"></see> class using a 32-bit signed integer.</summary>
      <param name="value">A 32-bit signed integer that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute"></see> class using a 16-bit signed integer.</summary>
      <param name="value">A 16-bit signed integer that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute"></see> class using a double-precision floating point number.</summary>
      <param name="value">A double-precision floating point number that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute"></see> class using a Unicode character.</summary>
      <param name="value">A Unicode character that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute"></see> class using an 8-bit unsigned integer.</summary>
      <param name="value">An 8-bit unsigned integer that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute"></see> class.</summary>
      <param name="value">An <see cref="T:System.Object"></see> that represents the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.Equals(System.Object)">
      <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.DefaultValueAttribute"></see>.</summary>
      <param name="obj">The object to test the value equality of.</param>
      <returns>true if the value of the given object is equal to that of the current; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.SetValue(System.Object)">
      <summary>Sets the default value for the property to which this attribute is bound.</summary>
      <param name="value">The default value.</param>
    </member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
      <summary>Gets the default value of the property this attribute is bound to.</summary>
      <returns>An <see cref="T:System.Object"></see> that represents the default value of the property this attribute is bound to.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary>Provides a description of the sort operation applied to a data source.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ListSortDescription"></see> class with the specified property description and direction.</summary>
      <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that describes the property by which the data source is sorted.</param>
      <param name="direction">One of the <see cref="T:System.ComponentModel.ListSortDescription"></see> values.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary>Gets or sets the abstract description of a class property associated with this <see cref="T:System.ComponentModel.ListSortDescription"></see></summary>
      <returns>The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> associated with this <see cref="T:System.ComponentModel.ListSortDescription"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary>Gets or sets the direction of the sort operation associated with this <see cref="T:System.ComponentModel.ListSortDescription"></see>.</summary>
      <returns>One of the <see cref="T:System.ComponentModel.ListSortDirection"></see> values.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary>Represents a collection of <see cref="T:System.ComponentModel.ListSortDescription"></see> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ListSortDescriptionCollection"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ListSortDescriptionCollection"></see> class with the specified array of <see cref="T:System.ComponentModel.ListSortDescription"></see> objects.</summary>
      <param name="sorts">The array of <see cref="T:System.ComponentModel.ListSortDescription"></see> objects to be contained in the collection.</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary>Determines if the <see cref="T:System.ComponentModel.ListSortDescriptionCollection"></see> contains a specific value.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the collection.</param>
      <returns>true if the <see cref="T:System.Object"></see> is found in the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies the contents of the collection to the specified array, starting at the specified destination array index.</summary>
      <param name="array">The destination array for the items copied from the collection.</param>
      <param name="index">The index of the destination array at which copying begins.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary>Gets the number of items in the collection.</summary>
      <returns>The number of items in the collection.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary>Returns the index of the specified item in the collection.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the collection.</param>
      <returns>The index of <paramref name="value">value</paramref> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary>Gets or sets the specified <see cref="T:System.ComponentModel.ListSortDescription"></see>.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.ComponentModel.ListSortDescription"></see> to get or set in the collection.</param>
      <returns>The <see cref="T:System.ComponentModel.ListSortDescription"></see> with the specified index.</returns>
      <exception cref="T:System.InvalidOperationException">An item is set in the <see cref="T:System.ComponentModel.ListSortDescriptionCollection"></see>, which is read-only.</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the collection is thread safe.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets the current instance that can be used to synchronize access to the collection.</summary>
      <returns>The current instance of the <see cref="T:System.ComponentModel.ListSortDescriptionCollection"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets a <see cref="T:System.Collections.IEnumerator"></see> that can be used to iterate through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the collection.</summary>
      <param name="value">The item to add to the collection.</param>
      <returns>The position into which the new element was inserted.</returns>
      <exception cref="T:System.InvalidOperationException">In all cases.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary>Removes all items from the collection.</summary>
      <exception cref="T:System.InvalidOperationException">In all cases.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item into the collection at a specified index.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.ComponentModel.ListSortDescription"></see> to get or set in the collection</param>
      <param name="value">The item to insert into the collection.</param>
      <exception cref="T:System.InvalidOperationException">In all cases.</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the collection has a fixed size.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the collection is read-only.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Gets the specified <see cref="T:System.ComponentModel.ListSortDescription"></see>.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.ComponentModel.ListSortDescription"></see> to get in the collection</param>
      <returns>The <see cref="T:System.ComponentModel.ListSortDescription"></see> with the specified index.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of an item from the collection.</summary>
      <param name="value">The item to remove from the collection.</param>
      <exception cref="T:System.InvalidOperationException">In all cases.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes an item from the collection at a specified index.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.ComponentModel.ListSortDescription"></see> to remove from the collection</param>
      <exception cref="T:System.InvalidOperationException">In all cases.</exception>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>Specifies the direction of a sort operation.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>Sorts in ascending order.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>Sorts in descending order.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.LocalizableAttribute">
      <summary>Specifies whether a property should be localized. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.LocalizableAttribute"></see> class.</summary>
      <param name="isLocalizable">true if a property should be localized; otherwise, false.</param>
    </member>
    <member name="F:System.ComponentModel.LocalizableAttribute.Default">
      <summary>Specifies the default value, which is <see cref="F:System.ComponentModel.LocalizableAttribute.No"></see>. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.Equals(System.Object)">
      <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.LocalizableAttribute"></see>.</summary>
      <param name="obj">The object to test the value equality of.</param>
      <returns>true if the value of the given object is equal to that of the current; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.LocalizableAttribute"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.IsDefaultAttribute">
      <summary>Determines if this attribute is the default.</summary>
      <returns>true if the attribute is the default value for this attribute class; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.LocalizableAttribute.IsLocalizable">
      <summary>Gets a value indicating whether a property should be localized.</summary>
      <returns>true if a property should be localized; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.LocalizableAttribute.No">
      <summary>Specifies that a property should not be localized. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.LocalizableAttribute.Yes">
      <summary>Specifies that a property should be localized. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary>Specifies the properties that support lookup-based binding. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"></see> class using no parameters.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"></see> class.</summary>
      <param name="dataSource">The name of the property to be used as the data source.</param>
      <param name="displayMember">The name of the property to be used for the display name.</param>
      <param name="valueMember">The name of the property to be used as the source for values.</param>
      <param name="lookupMember">The name of the property to be used for lookups.</param>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary>Gets the name of the data source property for the component to which the <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"></see> is bound.</summary>
      <returns>The data source property for the component to which the <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"></see> is bound.</returns>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary>Represents the default value for the <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"></see> class.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary>Gets the name of the display member property for the component to which the <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"></see> is bound.</summary>
      <returns>The name of the display member property for the component to which the <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"></see> is bound.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"></see> instance.</summary>
      <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"></see> instance</param>
      <returns>true if the object is equal to the current instance; otherwise, false, indicating they are not equal.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary>Gets the name of the lookup member for the component to which this attribute is bound.</summary>
      <returns>The name of the lookup member for the component to which the <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"></see> is bound.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary>Gets the name of the value member property for the component to which the <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"></see> is bound.</summary>
      <returns>The name of the value member property for the component to which the <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"></see> is bound.</returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary>Implements <see cref="T:System.ComponentModel.IComponent"></see> and provides the base implementation for remotable components that are marshaled by value (a copy of the serialized object is passed).</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.MarshalByValueComponent"></see> class.</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary>Gets the container for the component.</summary>
      <returns>An object implementing the <see cref="T:System.ComponentModel.IContainer"></see> interface that represents the component's container, or null if the component does not have a site.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary>Gets a value indicating whether the component is currently in design mode.</summary>
      <returns>true if the component is in design mode; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.ComponentModel.MarshalByValueComponent"></see>.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.MarshalByValueComponent"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary>Adds an event handler to listen to the <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed"></see> event on the component.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary>Gets the list of event handlers that are attached to this component.</summary>
      <returns>An <see cref="T:System.ComponentModel.EventHandlerList"></see> that provides the delegates for this component.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary>Gets the implementer of the <see cref="T:System.IServiceProvider"></see>.</summary>
      <param name="service">A <see cref="T:System.Type"></see> that represents the type of service you want.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the implementer of the <see cref="T:System.IServiceProvider"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary>Gets or sets the site of the component.</summary>
      <returns>An object implementing the <see cref="T:System.ComponentModel.ISite"></see> interface that represents the site of the component.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary>Returns a <see cref="T:System.String"></see> containing the name of the <see cref="T:System.ComponentModel.Component"></see>, if any. This method should not be overridden.</summary>
      <returns>A <see cref="T:System.String"></see> containing the name of the <see cref="T:System.ComponentModel.Component"></see>, if any.  null if the <see cref="T:System.ComponentModel.Component"></see> is unnamed.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary>Represents a mask-parsing service that can be used by any number of controls that support masking, such as the <see cref="T:System.Windows.Forms.MaskedTextBox"></see> control.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.MaskedTextProvider"></see> class using the specified mask.</summary>
      <param name="mask">A <see cref="T:System.String"></see> that represents the input mask.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.MaskedTextProvider"></see> class using the specified mask and ASCII restriction value.</summary>
      <param name="mask">A <see cref="T:System.String"></see> that represents the input mask.</param>
      <param name="restrictToAscii">true to restrict input to ASCII-compatible characters; otherwise false to allow the entire Unicode set.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.MaskedTextProvider"></see> class using the specified mask and culture.</summary>
      <param name="mask">A <see cref="T:System.String"></see> that represents the input mask.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see> that is used to set region-sensitive separator characters.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.MaskedTextProvider"></see> class using the specified mask, password character, and prompt usage value.</summary>
      <param name="mask">A <see cref="T:System.String"></see> that represents the input mask.</param>
      <param name="passwordChar">A <see cref="T:System.Char"></see> that will be displayed for characters entered into a password string.</param>
      <param name="allowPromptAsInput">true to allow the prompt character as input; otherwise false.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.MaskedTextProvider"></see> class using the specified mask, culture, and ASCII restriction value.</summary>
      <param name="mask">A <see cref="T:System.String"></see> that represents the input mask.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see> that is used to set region-sensitive separator characters.</param>
      <param name="restrictToAscii">true to restrict input to ASCII-compatible characters; otherwise false to allow the entire Unicode set.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.MaskedTextProvider"></see> class using the specified mask, culture, password character, and prompt usage value.</summary>
      <param name="mask">A <see cref="T:System.String"></see> that represents the input mask.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see> that is used to set region-sensitive separator characters.</param>
      <param name="passwordChar">A <see cref="T:System.Char"></see> that will be displayed for characters entered into a password string.</param>
      <param name="allowPromptAsInput">true to allow the prompt character as input; otherwise false.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.MaskedTextProvider"></see> class using the specified mask, culture, prompt usage value, prompt character, password character, and ASCII restriction value.</summary>
      <param name="mask">A <see cref="T:System.String"></see> that represents the input mask.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see> that is used to set region-sensitive separator characters.</param>
      <param name="allowPromptAsInput">A <see cref="T:System.Boolean"></see> value that specifies whether the prompt character should be allowed as a valid input character.</param>
      <param name="promptChar">A <see cref="T:System.Char"></see> that will be displayed as a placeholder for user input.</param>
      <param name="passwordChar">A <see cref="T:System.Char"></see> that will be displayed for characters entered into a password string.</param>
      <param name="restrictToAscii">true to restrict input to ASCII-compatible characters; otherwise false to allow the entire Unicode set.</param>
      <exception cref="T:System.ArgumentException">The mask parameter is null or <see cref="F:System.String.Empty"></see>.   -or-   The mask contains one or more non-printable characters.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Adds the characters in the specified input string to the end of the formatted string, and then outputs position and descriptive information.</summary>
      <param name="input">A <see cref="T:System.String"></see> containing character values to be appended to the formatted string.</param>
      <param name="testPosition">The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.</param>
      <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint"></see> that succinctly describes the result of the operation. An output parameter.</param>
      <returns>true if all the characters from the input string were added successfully; otherwise false to indicate that no characters were added.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Adds the specified input character to the end of the formatted string, and then outputs position and descriptive information.</summary>
      <param name="input">A <see cref="T:System.Char"></see> value to be appended to the formatted string.</param>
      <param name="testPosition">The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.</param>
      <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint"></see> that succinctly describes the result of the operation. An output parameter.</param>
      <returns>true if the input character was added successfully; otherwise false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary>Adds the specified input character to the end of the formatted string.</summary>
      <param name="input">A <see cref="T:System.Char"></see> value to be appended to the formatted string.</param>
      <returns>true if the input character was added successfully; otherwise false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary>Adds the characters in the specified input string to the end of the formatted string.</summary>
      <param name="input">A <see cref="T:System.String"></see> containing character values to be appended to the formatted string.</param>
      <returns>true if all the characters from the input string were added successfully; otherwise false to indicate that no characters were added.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input">input</paramref> parameter is null.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary>Gets a value indicating whether the prompt character should be treated as a valid input character or not.</summary>
      <returns>true if the user can enter <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar"></see> into the control; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary>Gets a value indicating whether the mask accepts characters outside of the ASCII character set.</summary>
      <returns>true if only ASCII is accepted; false if <see cref="T:System.ComponentModel.MaskedTextProvider"></see> can accept any arbitrary Unicode character. The default is false.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary>Gets the number of editable character positions that have already been successfully assigned an input value.</summary>
      <returns>An <see cref="T:System.Int32"></see> containing the number of editable character positions in the input mask that have already been assigned a character value in the formatted string.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary>Gets the number of editable character positions in the input mask that have not yet been assigned an input value.</summary>
      <returns>An <see cref="T:System.Int32"></see> containing the number of editable character positions that not yet been assigned a character value.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary>Clears all the editable input characters from the formatted string, replacing them with prompt characters.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary>Clears all the editable input characters from the formatted string, replacing them with prompt characters, and then outputs descriptive information.</summary>
      <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint"></see> that succinctly describes the result of the operation. An output parameter.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary>Creates a copy of the current <see cref="T:System.ComponentModel.MaskedTextProvider"></see>.</summary>
      <returns>The <see cref="T:System.ComponentModel.MaskedTextProvider"></see> object this method creates, cast as an object.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary>Gets the culture that determines the value of the localizable separators and placeholders in the input mask.</summary>
      <returns>A <see cref="T:System.Globalization.CultureInfo"></see> containing the culture information associated with the input mask.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary>Gets the default password character used obscure user input.</summary>
      <returns>A <see cref="T:System.Char"></see> that represents the default password character.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary>Gets the number of editable positions in the formatted string.</summary>
      <returns>An <see cref="T:System.Int32"></see> containing the number of editable positions in the formatted string.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary>Gets a newly created enumerator for the editable positions in the formatted string.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that supports enumeration over the editable positions in the formatted string.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Returns the position of the first assigned editable position after the specified position using the specified search direction.</summary>
      <param name="position">The zero-based position in the formatted string to start the search.</param>
      <param name="direction">A <see cref="T:System.Boolean"></see> indicating the search direction; either true to search forward or false to search backward.</param>
      <returns>If successful, an <see cref="T:System.Int32"></see> representing the zero-based position of the first assigned editable position encountered; otherwise <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Returns the position of the first assigned editable position between the specified positions using the specified search direction.</summary>
      <param name="startPosition">The zero-based position in the formatted string where the search starts.</param>
      <param name="endPosition">The zero-based position in the formatted string where the search ends.</param>
      <param name="direction">A <see cref="T:System.Boolean"></see> indicating the search direction; either true to search forward or false to search backward.</param>
      <returns>If successful, an <see cref="T:System.Int32"></see> representing the zero-based position of the first assigned editable position encountered; otherwise <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Returns the position of the first editable position after the specified position using the specified search direction.</summary>
      <param name="position">The zero-based position in the formatted string to start the search.</param>
      <param name="direction">A <see cref="T:System.Boolean"></see> indicating the search direction; either true to search forward or false to search backward.</param>
      <returns>If successful, an <see cref="T:System.Int32"></see> representing the zero-based position of the first editable position encountered; otherwise <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Returns the position of the first editable position between the specified positions using the specified search direction.</summary>
      <param name="startPosition">The zero-based position in the formatted string where the search starts.</param>
      <param name="endPosition">The zero-based position in the formatted string where the search ends.</param>
      <param name="direction">A <see cref="T:System.Boolean"></see> indicating the search direction; either true to search forward or false to search backward.</param>
      <returns>If successful, an <see cref="T:System.Int32"></see> representing the zero-based position of the first editable position encountered; otherwise <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Returns the position of the first non-editable position after the specified position using the specified search direction.</summary>
      <param name="position">The zero-based position in the formatted string to start the search.</param>
      <param name="direction">A <see cref="T:System.Boolean"></see> indicating the search direction; either true to search forward or false to search backward.</param>
      <returns>If successful, an <see cref="T:System.Int32"></see> representing the zero-based position of the first literal position encountered; otherwise <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Returns the position of the first non-editable position between the specified positions using the specified search direction.</summary>
      <param name="startPosition">The zero-based position in the formatted string where the search starts.</param>
      <param name="endPosition">The zero-based position in the formatted string where the search ends.</param>
      <param name="direction">A <see cref="T:System.Boolean"></see> indicating the search direction; either true to search forward or false to search backward.</param>
      <returns>If successful, an <see cref="T:System.Int32"></see> representing the zero-based position of the first literal position encountered; otherwise <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Returns the position of the first unassigned editable position after the specified position using the specified search direction.</summary>
      <param name="position">The zero-based position in the formatted string to start the search.</param>
      <param name="direction">A <see cref="T:System.Boolean"></see> indicating the search direction; either true to search forward or false to search backward.</param>
      <returns>If successful, an <see cref="T:System.Int32"></see> representing the zero-based position of the first unassigned editable position encountered; otherwise <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Returns the position of the first unassigned editable position between the specified positions using the specified search direction.</summary>
      <param name="startPosition">The zero-based position in the formatted string where the search starts.</param>
      <param name="endPosition">The zero-based position in the formatted string where the search ends.</param>
      <param name="direction">A <see cref="T:System.Boolean"></see> indicating the search direction; either true to search forward or false to search backward.</param>
      <returns>If successful, an <see cref="T:System.Int32"></see> representing the zero-based position of the first unassigned editable position encountered; otherwise <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary>Determines whether the specified <see cref="T:System.ComponentModel.MaskedTextResultHint"></see> denotes success or failure.</summary>
      <param name="hint">A <see cref="T:System.ComponentModel.MaskedTextResultHint"></see> value typically obtained as an output parameter from a previous operation.</param>
      <returns>true if the specified <see cref="T:System.ComponentModel.MaskedTextResultHint"></see> value represents a success; otherwise, false if it represents failure.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary>Gets or sets a value that indicates whether literal characters in the input mask should be included in the formatted string.</summary>
      <returns>true if literals are included; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary>Gets or sets a value indicating whether <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar"></see> is used to represent the absence of user input when displaying the formatted string.</summary>
      <returns>true if the prompt character is used to represent the positions where no user input was provided; otherwise, false. The default is true.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary>Inserts the specified character at the specified position within the formatted string.</summary>
      <param name="input">The <see cref="T:System.Char"></see> to be inserted.</param>
      <param name="position">The zero-based position in the formatted string to insert the character.</param>
      <returns>true if the insertion was successful; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary>Inserts the specified string at a specified position within the formatted string.</summary>
      <param name="input">The <see cref="T:System.String"></see> to be inserted.</param>
      <param name="position">The zero-based position in the formatted string to insert the input string.</param>
      <returns>true if the insertion was successful; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input">input</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Inserts the specified character at the specified position within the formatted string, returning the last insertion position and the status of the operation.</summary>
      <param name="input">The <see cref="T:System.Char"></see> to be inserted.</param>
      <param name="position">The zero-based position in the formatted string to insert the character.</param>
      <param name="testPosition">If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.</param>
      <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint"></see> that succinctly describes the result of the insertion operation. An output parameter.</param>
      <returns>true if the insertion was successful; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Inserts the specified string at a specified position within the formatted string, returning the last insertion position and the status of the operation.</summary>
      <param name="input">The <see cref="T:System.String"></see> to be inserted.</param>
      <param name="position">The zero-based position in the formatted string to insert the input string.</param>
      <param name="testPosition">If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.</param>
      <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint"></see> that succinctly describes the result of the insertion operation. An output parameter.</param>
      <returns>true if the insertion was successful; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input">input</paramref> parameter is null.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary>Gets the upper bound of the range of invalid indexes.</summary>
      <returns>A value representing the largest invalid index, as determined by the provider implementation. For example, if the lowest valid index is 0, this property will return -1.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary>Determines whether the specified position is available for assignment.</summary>
      <param name="position">The zero-based position in the mask to test.</param>
      <returns>true if the specified position in the formatted string is editable and has not been assigned to yet; otherwise false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary>Determines whether the specified position is editable.</summary>
      <param name="position">The zero-based position in the mask to test.</param>
      <returns>true if the specified position in the formatted string is editable; otherwise false.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary>Gets or sets a value that determines whether password protection should be applied to the formatted string.</summary>
      <returns>true if the input string is to be treated as a password string; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary>Determines whether the specified character is a valid input character.</summary>
      <param name="c">The <see cref="T:System.Char"></see> value to test.</param>
      <returns>true if the specified character contains a valid input value; otherwise false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary>Determines whether the specified character is a valid mask character.</summary>
      <param name="c">The <see cref="T:System.Char"></see> value to test.</param>
      <returns>true if the specified character contains a valid mask value; otherwise false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary>Determines whether the specified character is a valid password character.</summary>
      <param name="c">The <see cref="T:System.Char"></see> value to test.</param>
      <returns>true if the specified character contains a valid password value; otherwise false.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary>Gets the element at the specified position in the formatted string.</summary>
      <param name="index">A zero-based index of the element to retrieve.</param>
      <returns>The <see cref="T:System.Char"></see> at the specified position in the formatted string.</returns>
      <exception cref="T:System.IndexOutOfRangeException"><paramref name="index">index</paramref> is less than zero or greater than or equal to the <see cref="P:System.ComponentModel.MaskedTextProvider.Length"></see> of the mask.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary>Gets the index in the mask of the rightmost input character that has been assigned to the mask.</summary>
      <returns>If at least one input character has been assigned to the mask, an <see cref="T:System.Int32"></see> containing the index of rightmost assigned position; otherwise, if no position has been assigned, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary>Gets the length of the mask, absent any mask modifier characters.</summary>
      <returns>An <see cref="T:System.Int32"></see> containing the number of positions in the mask, excluding characters that modify mask input.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary>Gets the input mask.</summary>
      <returns>A <see cref="T:System.String"></see> containing the full mask.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary>Gets a value indicating whether all required inputs have been entered into the formatted string.</summary>
      <returns>true if all required input has been entered into the mask; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary>Gets a value indicating whether all required and optional inputs have been entered into the formatted string.</summary>
      <returns>true if all required and optional inputs have been entered; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary>Gets or sets the character to be substituted for the actual input characters.</summary>
      <returns>The <see cref="T:System.Char"></see> value used as the password character.</returns>
      <exception cref="T:System.InvalidOperationException">The password character specified when setting this property is the same as the current prompt character, <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar"></see>. The two are required to be different.</exception>
      <exception cref="T:System.ArgumentException">The character specified when setting this property is not a valid password character, as determined by the <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)"></see> method.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary>Gets or sets the character used to represent the absence of user input for all available edit positions.</summary>
      <returns>The character used to prompt the user for input. The default is an underscore (_).</returns>
      <exception cref="T:System.InvalidOperationException">The prompt character specified when setting this property is the same as the current password character, <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar"></see>. The two are required to be different.</exception>
      <exception cref="T:System.ArgumentException">The character specified when setting this property is not a valid password character, as determined by the <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)"></see> method.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary>Removes the last assigned character from the formatted string.</summary>
      <returns>true if the character was successfully removed; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Removes the last assigned character from the formatted string, and then outputs the removal position and descriptive information.</summary>
      <param name="testPosition">The zero-based position in the formatted string where the character was actually removed. An output parameter.</param>
      <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint"></see> that succinctly describes the result of the operation. An output parameter.</param>
      <returns>true if the character was successfully removed; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary>Removes the assigned character at the specified position from the formatted string.</summary>
      <param name="position">The zero-based position of the assigned character to remove.</param>
      <returns>true if the character was successfully removed; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary>Removes the assigned characters between the specified positions from the formatted string.</summary>
      <param name="startPosition">The zero-based index of the first assigned character to remove.</param>
      <param name="endPosition">The zero-based index of the last assigned character to remove.</param>
      <returns>true if the character was successfully removed; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Removes the assigned characters between the specified positions from the formatted string, and then outputs the removal position and descriptive information.</summary>
      <param name="startPosition">The zero-based index of the first assigned character to remove.</param>
      <param name="endPosition">The zero-based index of the last assigned character to remove.</param>
      <param name="testPosition">If successful, the zero-based position in the formatted string of where the characters were actually removed; otherwise, the first position where the operation failed. An output parameter.</param>
      <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint"></see> that succinctly describes the result of the operation. An output parameter.</param>
      <returns>true if the character was successfully removed; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Replaces a range of editable characters between the specified starting and ending positions with the specified string, and then outputs the removal position and descriptive information.</summary>
      <param name="input">The <see cref="T:System.String"></see> value used to replace the existing editable characters.</param>
      <param name="startPosition">The zero-based position in the formatted string where the replacement starts.</param>
      <param name="endPosition">The zero-based position in the formatted string where the replacement ends.</param>
      <param name="testPosition">If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.</param>
      <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint"></see> that succinctly describes the result of the replacement operation. An output parameter.</param>
      <returns>true if all the characters were successfully replaced; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Replaces a single character between the specified starting and ending positions with the specified character value, and then outputs the removal position and descriptive information.</summary>
      <param name="input">The <see cref="T:System.Char"></see> value that replaces the existing value.</param>
      <param name="startPosition">The zero-based position in the formatted string where the replacement starts.</param>
      <param name="endPosition">The zero-based position in the formatted string where the replacement ends.</param>
      <param name="testPosition">If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.</param>
      <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint"></see> that succinctly describes the result of the replacement operation. An output parameter.</param>
      <returns>true if the character was successfully replaced; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Replaces a range of editable characters starting at the specified position with the specified string, and then outputs the removal position and descriptive information.</summary>
      <param name="input">The <see cref="T:System.String"></see> value used to replace the existing editable characters.</param>
      <param name="position">The zero-based position to search for the first editable character to replace.</param>
      <param name="testPosition">If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.</param>
      <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint"></see> that succinctly describes the result of the replacement operation. An output parameter.</param>
      <returns>true if all the characters were successfully replaced; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Replaces a single character at or beyond the specified position with the specified character value, and then outputs the removal position and descriptive information.</summary>
      <param name="input">The <see cref="T:System.Char"></see> value that replaces the existing value.</param>
      <param name="position">The zero-based position to search for the first editable character to replace.</param>
      <param name="testPosition">If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.</param>
      <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint"></see> that succinctly describes the result of the replacement operation. An output parameter.</param>
      <returns>true if the character was successfully replaced; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary>Replaces a range of editable characters starting at the specified position with the specified string.</summary>
      <param name="input">The <see cref="T:System.String"></see> value used to replace the existing editable characters.</param>
      <param name="position">The zero-based position to search for the first editable character to replace.</param>
      <returns>true if all the characters were successfully replaced; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input">input</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary>Replaces a single character at or beyond the specified position with the specified character value.</summary>
      <param name="input">The <see cref="T:System.Char"></see> value that replaces the existing value.</param>
      <param name="position">The zero-based position to search for the first editable character to replace.</param>
      <returns>true if the character was successfully replaced; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary>Gets or sets a value that determines how an input character that matches the prompt character should be handled.</summary>
      <returns>true if the prompt character entered as input causes the current editable position in the mask to be reset; otherwise, false to indicate that the prompt character is to be processed as a normal input character. The default is true.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary>Gets or sets a value that determines how a space input character should be handled.</summary>
      <returns>true if the space input character causes the current editable position in the mask to be reset; otherwise, false to indicate that it is to be processed as a normal input character. The default is true.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary>Sets the formatted string to the specified input string.</summary>
      <param name="input">The <see cref="T:System.String"></see> value used to set the formatted string.</param>
      <returns>true if all the characters were successfully set; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input">input</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Sets the formatted string to the specified input string, and then outputs the removal position and descriptive information.</summary>
      <param name="input">The <see cref="T:System.String"></see> value used to set the formatted string.</param>
      <param name="testPosition">If successful, the zero-based position in the formatted string where the last character was actually set; otherwise, the first position where the operation failed. An output parameter.</param>
      <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint"></see> that succinctly describes the result of the set operation. An output parameter.</param>
      <returns>true if all the characters were successfully set; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input">input</paramref> parameter is null.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary>Gets or sets a value indicating whether literal character positions in the mask can be overwritten by their same values.</summary>
      <returns>true to allow literals to be added back; otherwise, false to not allow the user to overwrite literal characters. The default is true.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary>Returns the formatted string in a displayable form.</summary>
      <returns>The formatted <see cref="T:System.String"></see> that includes prompts and mask literals.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>Returns a substring of the formatted string, optionally including prompt, literal, and password characters.</summary>
      <param name="ignorePasswordChar">true to return the actual editable characters; otherwise, false to indicate that the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar"></see> property is to be honored.</param>
      <param name="includePrompt">true to include prompt characters in the return string; otherwise, false.</param>
      <param name="includeLiterals">true to return literal characters in the return string; otherwise, false.</param>
      <param name="startPosition">The zero-based position in the formatted string where the output begins.</param>
      <param name="length">The number of characters to return.</param>
      <returns>If successful, a substring of the formatted <see cref="T:System.String"></see>, which includes all the assigned character values and optionally includes literals, prompts, and password characters; otherwise the <see cref="F:System.String.Empty"></see> string.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>Returns a substring of the formatted string, optionally including prompt and literal characters.</summary>
      <param name="includePrompt">true to include prompt characters in the return string; otherwise, false.</param>
      <param name="includeLiterals">true to include literal characters in the return string; otherwise, false.</param>
      <param name="startPosition">The zero-based position in the formatted string where the output begins.</param>
      <param name="length">The number of characters to return.</param>
      <returns>If successful, a substring of the formatted <see cref="T:System.String"></see>, which includes all the assigned character values and optionally includes literals and prompts; otherwise the <see cref="F:System.String.Empty"></see> string.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary>Returns a substring of the formatted string, optionally including password characters.</summary>
      <param name="ignorePasswordChar">true to return the actual editable characters; otherwise, false to indicate that the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar"></see> property is to be honored.</param>
      <param name="startPosition">The zero-based position in the formatted string where the output begins.</param>
      <param name="length">The number of characters to return.</param>
      <returns>If successful, a substring of the formatted <see cref="T:System.String"></see>, which includes literals, prompts, and optionally password characters; otherwise the <see cref="F:System.String.Empty"></see> string.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary>Returns the formatted string, optionally including password characters.</summary>
      <param name="ignorePasswordChar">true to return the actual editable characters; otherwise, false to indicate that the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar"></see> property is to be honored.</param>
      <returns>The formatted <see cref="T:System.String"></see> that includes literals, prompts, and optionally password characters.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary>Returns the formatted string, optionally including prompt and literal characters.</summary>
      <param name="includePrompt">true to include prompt characters in the return string; otherwise, false.</param>
      <param name="includeLiterals">true to include literal characters in the return string; otherwise, false.</param>
      <returns>The formatted <see cref="T:System.String"></see> that includes all the assigned character values and optionally includes literals and prompts.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary>Returns the formatted string that includes all the assigned character values.</summary>
      <returns>The formatted <see cref="T:System.String"></see> that includes all the assigned character values.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary>Returns a substring of the formatted string.</summary>
      <param name="startPosition">The zero-based position in the formatted string where the output begins.</param>
      <param name="length">The number of characters to return.</param>
      <returns>If successful, a substring of the formatted <see cref="T:System.String"></see>, which includes all the assigned character values; otherwise the <see cref="F:System.String.Empty"></see> string.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Tests whether the specified character could be set successfully at the specified position.</summary>
      <param name="input">The <see cref="T:System.Char"></see> value to test.</param>
      <param name="position">The position in the mask to test the input character against.</param>
      <param name="hint">A <see cref="T:System.ComponentModel.MaskedTextResultHint"></see> that succinctly describes the result of the operation. An output parameter.</param>
      <returns>true if the specified character is valid for the specified position; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary>Tests whether the specified character would be escaped at the specified position.</summary>
      <param name="input">The <see cref="T:System.Char"></see> value to test.</param>
      <param name="position">The position in the mask to test the input character against.</param>
      <returns>true if the specified character would be escaped at the specified position; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary>Tests whether the specified string could be set successfully.</summary>
      <param name="input">The <see cref="T:System.String"></see> value to test.</param>
      <returns>true if the specified string represents valid input; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Tests whether the specified string could be set successfully, and then outputs position and descriptive information.</summary>
      <param name="input">The <see cref="T:System.String"></see> value to test.</param>
      <param name="testPosition">If successful, the zero-based position of the last character actually tested; otherwise, the first position where the test failed. An output parameter.</param>
      <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint"></see> that succinctly describes the result of the test operation. An output parameter.</param>
      <returns>true if the specified string represents valid input; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary>Specifies values that succinctly describe the results of a masked text parsing operation.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary>Operation did not succeed.An input character was encountered that was not alphanumeric. .</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary>Operation did not succeed.An input character was encountered that was not a member of the ASCII character set.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary>Success. The operation succeeded because a literal, prompt or space character was an escaped character. For more information about escaped characters, see the <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary>Operation did not succeed. An input character was encountered that was not a digit.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary>Operation did not succeed. The program encountered an  input character that was not valid. For more information about characters that are not valid, see the <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary>Operation did not succeed. An input character was encountered that was not a letter.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary>Success. The primary operation was not performed because it was not needed; therefore, no side effect was produced.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary>Operation did not succeed. The current position in the formatted string is a literal character.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary>Operation did not succeed. The specified position is not in the range of the target string; typically it is either less than zero or greater then the length of the target string.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary>Operation did not succeed. The prompt character is not valid at input, perhaps because the <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput"></see> property is set to false.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary>Success. The primary operation was not performed because it was not needed, but the method produced a side effect. For example, the <see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt"></see> method can delete an unassigned edit position, which causes left-shifting of subsequent characters in the formatted string.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary>Operation did not succeed. An input character was encountered that was not a signed digit.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary>Success. The primary operation succeeded.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary>Operation did not succeed. There were not enough edit positions available to fulfill the request.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary>Unknown. The result of the operation could not be determined.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary>Represents a class member, such as a property or event. This is an abstract base class.</summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.MemberDescriptor"></see> class with the specified <see cref="T:System.ComponentModel.MemberDescriptor"></see>.</summary>
      <param name="descr">A <see cref="T:System.ComponentModel.MemberDescriptor"></see> that contains the name of the member and its attributes.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.MemberDescriptor"></see> class with the specified name of the member.</summary>
      <param name="name">The name of the member.</param>
      <exception cref="T:System.ArgumentException">The name is an empty string (&quot;&quot;) or null.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.MemberDescriptor"></see> class with the name in the specified <see cref="T:System.ComponentModel.MemberDescriptor"></see> and the attributes in both the old <see cref="T:System.ComponentModel.MemberDescriptor"></see> and the <see cref="T:System.Attribute"></see> array.</summary>
      <param name="oldMemberDescriptor">A <see cref="T:System.ComponentModel.MemberDescriptor"></see> that has the name of the member and its attributes.</param>
      <param name="newAttributes">An array of <see cref="T:System.Attribute"></see> objects with the attributes you want to add to the member.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.MemberDescriptor"></see> class with the specified name of the member and an array of attributes.</summary>
      <param name="name">The name of the member.</param>
      <param name="attributes">An array of type <see cref="T:System.Attribute"></see> that contains the member attributes.</param>
      <exception cref="T:System.ArgumentException">The name is an empty string (&quot;&quot;) or null.</exception>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary>Gets or sets an array of attributes.</summary>
      <returns>An array of type <see cref="T:System.Attribute"></see> that contains the attributes of this member.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary>Gets the collection of attributes for this member.</summary>
      <returns>An <see cref="T:System.ComponentModel.AttributeCollection"></see> that provides the attributes for this member, or an empty collection if there are no attributes in the <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary>Gets the name of the category to which the member belongs, as specified in the <see cref="T:System.ComponentModel.CategoryAttribute"></see>.</summary>
      <returns>The name of the category to which the member belongs. If there is no <see cref="T:System.ComponentModel.CategoryAttribute"></see>, the category name is set to the default category, Misc.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary>Creates a collection of attributes using the array of attributes passed to the constructor.</summary>
      <returns>A new <see cref="T:System.ComponentModel.AttributeCollection"></see> that contains the <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray"></see> attributes.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary>Gets the description of the member, as specified in the <see cref="T:System.ComponentModel.DescriptionAttribute"></see>.</summary>
      <returns>The description of the member. If there is no <see cref="T:System.ComponentModel.DescriptionAttribute"></see>, the property value is set to the default, which is an empty string (&quot;&quot;).</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary>Gets whether this member should be set only at design time, as specified in the <see cref="T:System.ComponentModel.DesignOnlyAttribute"></see>.</summary>
      <returns>true if this member should be set only at design time; false if the member can be set during run time.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary>Gets the name that can be displayed in a window, such as a Properties window.</summary>
      <returns>The name to display for the member.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary>Compares this instance to the given object to see if they are equivalent.</summary>
      <param name="obj">The object to compare to the current instance.</param>
      <returns>true if equivalent; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary>When overridden in a derived class, adds the attributes of the inheriting class to the specified list of attributes in the parent class.</summary>
      <param name="attributeList">An <see cref="T:System.Collections.IList"></see> that lists the attributes in the parent class. Initially, this is empty.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary>Finds the given method through reflection, searching only for public methods.</summary>
      <param name="componentClass">The component that contains the method.</param>
      <param name="name">The name of the method to find.</param>
      <param name="args">An array of parameters for the method, used to choose between overloaded methods.</param>
      <param name="returnType">The type to return for the method.</param>
      <returns>A <see cref="T:System.Reflection.MethodInfo"></see> that represents the method, or null if the method is not found.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary>Finds the given method through reflection, with an option to search only public methods.</summary>
      <param name="componentClass">The component that contains the method.</param>
      <param name="name">The name of the method to find.</param>
      <param name="args">An array of parameters for the method, used to choose between overloaded methods.</param>
      <param name="returnType">The type to return for the method.</param>
      <param name="publicOnly">Whether to restrict search to public methods.</param>
      <returns>A <see cref="T:System.Reflection.MethodInfo"></see> that represents the method, or null if the method is not found.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.MemberDescriptor"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>Retrieves the object that should be used during invocation of members.</summary>
      <param name="type">The <see cref="T:System.Type"></see> of the invocation target.</param>
      <param name="instance">The potential invocation target.</param>
      <returns>The object to be used during member invocations.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> or <paramref name="instance">instance</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary>Gets the component on which to invoke a method.</summary>
      <param name="componentClass">A <see cref="T:System.Type"></see> representing the type of component this <see cref="T:System.ComponentModel.MemberDescriptor"></see> is bound to. For example, if this <see cref="T:System.ComponentModel.MemberDescriptor"></see> describes a property, this parameter should be the class that the property is declared on.</param>
      <param name="component">An instance of the object to call.</param>
      <returns>An instance of the component to invoke. This method returns a visual designer when the property is attached to a visual designer.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="componentClass">componentClass</paramref> or <paramref name="component">component</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary>Gets a component site for the given component.</summary>
      <param name="component">The component for which you want to find a site.</param>
      <returns>The site of the component, or null if a site does not exist.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary>Gets a value indicating whether the member is browsable, as specified in the <see cref="T:System.ComponentModel.BrowsableAttribute"></see>.</summary>
      <returns>true if the member is browsable; otherwise, false. If there is no <see cref="T:System.ComponentModel.BrowsableAttribute"></see>, the property value is set to the default, which is true.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary>Gets the name of the member.</summary>
      <returns>The name of the member.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary>Gets the hash code for the name of the member, as specified in <see cref="M:System.String.GetHashCode"></see>.</summary>
      <returns>The hash code for the name of the member.</returns>
    </member>
    <member name="T:System.ComponentModel.MergablePropertyAttribute">
      <summary>Specifies that this property can be combined with properties belonging to other objects in a Properties window.</summary>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.MergablePropertyAttribute"></see> class.</summary>
      <param name="allowMerge">true if this property can be combined with properties belonging to other objects in a Properties window; otherwise, false.</param>
    </member>
    <member name="P:System.ComponentModel.MergablePropertyAttribute.AllowMerge">
      <summary>Gets a value indicating whether this property can be combined with properties belonging to other objects in a Properties window.</summary>
      <returns>true if this property can be combined with properties belonging to other objects in a Properties window; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.MergablePropertyAttribute.Default">
      <summary>Specifies the default value, which is <see cref="F:System.ComponentModel.MergablePropertyAttribute.Yes"></see>, that is a property can be combined with properties belonging to other objects in a Properties window. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">Another object to compare to.</param>
      <returns>true if <paramref name="obj">obj</paramref> is equal to this instance; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.MergablePropertyAttribute"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.IsDefaultAttribute">
      <summary>Determines if this attribute is the default.</summary>
      <returns>true if the attribute is the default value for this attribute class; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.MergablePropertyAttribute.No">
      <summary>Specifies that a property cannot be combined with properties belonging to other objects in a Properties window. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.MergablePropertyAttribute.Yes">
      <summary>Specifies that a property can be combined with properties belonging to other objects in a Properties window. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary>Provides a type converter to convert multiline strings to a simple string.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.MultilineStringConverter"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Returns a collection of properties for the type of array specified by the <paramref name="value">value</paramref> parameter, using the specified context and attributes.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="value">An <see cref="T:System.Object"></see> that specifies the type of array for which to get properties.</param>
      <param name="attributes">An array of type <see cref="T:System.Attribute"></see> that is used as a filter.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties that are exposed for this data type, or null if there are no properties.</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns whether this object supports properties, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true if <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties"></see> should be called to find the properties of this object; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary>Provides the base implementation for the <see cref="T:System.ComponentModel.INestedContainer"></see> interface, which enables containers to have an owning component.</summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.NestedContainer"></see> class.</summary>
      <param name="owner">The <see cref="T:System.ComponentModel.IComponent"></see> that owns this nested container.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="owner">owner</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>Creates a site for the component within the container.</summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent"></see> to create a site for.</param>
      <param name="name">The name to assign to component, or null to skip the name assignment.</param>
      <returns>The newly created <see cref="T:System.ComponentModel.ISite"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary>Releases the resources used by the nested container.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary>Gets the service object of the specified type, if it is available.</summary>
      <param name="service">The <see cref="T:System.Type"></see> of the service to retrieve.</param>
      <returns>An <see cref="T:System.Object"></see> that implements the requested service, or null if the service cannot be resolved.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary>Gets the owning component for this nested container.</summary>
      <returns>The <see cref="T:System.ComponentModel.IComponent"></see> that owns this nested container.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary>Gets the name of the owning component.</summary>
      <returns>The name of the owning component.</returns>
    </member>
    <member name="T:System.ComponentModel.NotifyParentPropertyAttribute">
      <summary>Indicates that the parent property is notified when the value of the property that this attribute is applied to is modified. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.NotifyParentPropertyAttribute"></see> class, using the specified value to determine whether the parent property is notified of changes to the value of the property.</summary>
      <param name="notifyParent">true if the parent should be notified of changes; otherwise, false.</param>
    </member>
    <member name="F:System.ComponentModel.NotifyParentPropertyAttribute.Default">
      <summary>Indicates the default attribute state, that the property should not notify the parent property of changes to its value. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.Equals(System.Object)">
      <summary>Gets a value indicating whether the specified object is the same as the current object.</summary>
      <param name="obj">The object to test for equality.</param>
      <returns>true if the object is the same as this object; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code for the object the attribute belongs to.</returns>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.IsDefaultAttribute">
      <summary>Gets a value indicating whether the current value of the attribute is the default value for the attribute.</summary>
      <returns>true if the current value of the attribute is the default value of the attribute; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.NotifyParentPropertyAttribute.No">
      <summary>Indicates that the parent property is not be notified of changes to the value of the property. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.NotifyParentPropertyAttribute.NotifyParent">
      <summary>Gets or sets a value indicating whether the parent property should be notified of changes to the value of the property.</summary>
      <returns>true if the parent property should be notified of changes; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.NotifyParentPropertyAttribute.Yes">
      <summary>Indicates that the parent property is notified of changes to the value of the property. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary>Provides automatic conversion between a nullable type and its underlying primitive type.</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.NullableConverter"></see> class.</summary>
      <param name="type">The specified nullable type.</param>
      <exception cref="T:System.ArgumentException"><paramref name="type">type</paramref> is not a nullable type.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert the object to the specified type, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"></see> is associated with, using the specified context, given a set of property values for the object.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"></see> of new property values.</param>
      <returns>An <see cref="T:System.Object"></see> representing the given <see cref="T:System.Collections.IDictionary"></see>, or null if the object cannot be created. This method always returns null.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns whether changing a value on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"></see> to create a new value, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true if changing a property on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"></see> to create a new value; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="value">An <see cref="T:System.Object"></see> that specifies the type of array for which to get properties.</param>
      <param name="attributes">An array of type <see cref="T:System.Attribute"></see> that is used as a filter.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties that are exposed for this data type, or null if there are no properties.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns whether this object supports properties, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"></see> should be called to find the properties of this object; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.</param>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> that holds a standard set of valid values, or null if the data type does not support a standard set of values.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns whether the collection of standard values returned from <see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exclusive list of possible values, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true if the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exhaustive list of possible values; false if other values are possible.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> should be called to find a common set of values the object supports; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Returns whether the given value object is valid for this type and for the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
      <returns>true if the specified value is valid for this object; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary>Gets the nullable type.</summary>
      <returns>A <see cref="T:System.Type"></see> that represents the nullable type.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary>Gets the underlying type.</summary>
      <returns>A <see cref="T:System.Type"></see> that represents the underlying type.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary>Gets the underlying type converter.</summary>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter"></see> that represents the underlying type converter.</returns>
    </member>
    <member name="T:System.ComponentModel.ParenthesizePropertyNameAttribute">
      <summary>Indicates whether the name of the associated property is displayed with parentheses in the Properties window. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ParenthesizePropertyNameAttribute"></see> class that indicates that the associated property should not be shown with parentheses.</summary>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ParenthesizePropertyNameAttribute"></see> class, using the specified value to indicate whether the attribute is displayed with parentheses.</summary>
      <param name="needParenthesis">true if the name should be enclosed in parentheses; otherwise, false.</param>
    </member>
    <member name="F:System.ComponentModel.ParenthesizePropertyNameAttribute.Default">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ParenthesizePropertyNameAttribute"></see> class with a default value that indicates that the associated property should not be shown with parentheses. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.Equals(System.Object)">
      <summary>Compares the specified object to this object and tests for equality.</summary>
      <param name="o">The object to be compared.</param>
      <returns>true if equal; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code for the object the attribute belongs to.</returns>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.IsDefaultAttribute">
      <summary>Gets a value indicating whether the current value of the attribute is the default value for the attribute.</summary>
      <returns>true if the current value of the attribute is the default value of the attribute; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ParenthesizePropertyNameAttribute.NeedParenthesis">
      <summary>Gets a value indicating whether the Properties window displays the name of the property in parentheses in the Properties window.</summary>
      <returns>true if the property is displayed with parentheses; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary>Indicates that an object's text representation is obscured by characters such as asterisks. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute"></see> class, optionally showing password text.</summary>
      <param name="password">true to indicate that the property should be shown as password text; otherwise, false. The default is false.</param>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary>Specifies the default value for the <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute"></see>.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute"></see> instances are equal.</summary>
      <param name="o">The <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute"></see> to compare with the current <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute"></see>.</param>
      <returns>true if the specified <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute"></see> is equal to the current <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary>Returns an indication whether the value of this instance is the default value.</summary>
      <returns>true if this instance is the default attribute for the class; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary>Specifies that a text property is not used as a password. This static (Shared in Visual Basic) field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary>Gets a value indicating if the property for which the <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute"></see> is defined should be shown as password text.</summary>
      <returns>true if the property should be shown as password text; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary>Specifies that a text property is used as a password. This static (Shared in Visual Basic) field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged"></see> event.</summary>
    </member>
    <member name="M:System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ProgressChangedEventArgs"></see> class.</summary>
      <param name="progressPercentage">The percentage of an asynchronous task that has been completed.</param>
      <param name="userState">A unique user state.</param>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">
      <summary>Gets the asynchronous task progress percentage.</summary>
      <returns>A percentage value indicating the asynchronous task progress.</returns>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.UserState">
      <summary>Gets a unique user state.</summary>
      <returns>A unique <see cref="T:System.Object"></see> indicating the user state.</returns>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged"></see> event of the <see cref="T:System.ComponentModel.BackgroundWorker"></see> class. This class cannot be inherited.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.ProgressChangedEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"></see> event.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyChangedEventArgs"></see> class.</summary>
      <param name="propertyName">The name of the property that changed.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName">
      <summary>Gets the name of the property that changed.</summary>
      <returns>The name of the property that changed.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"></see> event raised when a property is changed on a component.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging"></see> event.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangingEventArgs.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyChangingEventArgs"></see> class.</summary>
      <param name="propertyName">The name of the property whose value is changing.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangingEventArgs.PropertyName">
      <summary>Gets the name of the property whose value is changing.</summary>
      <returns>The name of the property whose value is changing.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging"></see> event of an <see cref="T:System.ComponentModel.INotifyPropertyChanging"></see> interface.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.PropertyChangingEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>Provides an abstraction of a property on a class.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> class with the name and attributes in the specified <see cref="T:System.ComponentModel.MemberDescriptor"></see>.</summary>
      <param name="descr">A <see cref="T:System.ComponentModel.MemberDescriptor"></see> that contains the name of the property and its attributes.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> class with the name in the specified <see cref="T:System.ComponentModel.MemberDescriptor"></see> and the attributes in both the <see cref="T:System.ComponentModel.MemberDescriptor"></see> and the <see cref="T:System.Attribute"></see> array.</summary>
      <param name="descr">A <see cref="T:System.ComponentModel.MemberDescriptor"></see> containing the name of the member and its attributes.</param>
      <param name="attrs">An <see cref="T:System.Attribute"></see> array containing the attributes you want to associate with the property.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> class with the specified name and attributes.</summary>
      <param name="name">The name of the property.</param>
      <param name="attrs">An array of type <see cref="T:System.Attribute"></see> that contains the property attributes.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>Enables other objects to be notified when this property changes.</summary>
      <param name="component">The component to add the handler for.</param>
      <param name="handler">The delegate to add as a listener.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> or <paramref name="handler">handler</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary>When overridden in a derived class, returns whether resetting an object changes its value.</summary>
      <param name="component">The component to test for reset capability.</param>
      <returns>true if resetting the component changes its value; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary>When overridden in a derived class, gets the type of the component this property is bound to.</summary>
      <returns>A <see cref="T:System.Type"></see> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"></see> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"></see> methods are invoked, the object specified might be an instance of this type.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary>Gets the type converter for this property.</summary>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter"></see> that is used to convert the <see cref="T:System.Type"></see> of this property.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary>Creates an instance of the specified type.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type to create.</param>
      <returns>A new instance of the type.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary>Compares this to another object to see if they are equivalent.</summary>
      <param name="obj">The object to compare to this <see cref="T:System.ComponentModel.PropertyDescriptor"></see>.</param>
      <returns>true if the values are equivalent; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary>Adds the attributes of the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to the specified list of attributes in the parent class.</summary>
      <param name="attributeList">An <see cref="T:System.Collections.IList"></see> that lists the attributes in the parent class. Initially, this is empty.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary>Returns the default <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see>.</summary>
      <returns>A collection of property descriptor.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> using a specified array of attributes as a filter.</summary>
      <param name="filter">An array of type <see cref="T:System.Attribute"></see> to use as a filter.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties that match the specified attributes.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> for a given object.</summary>
      <param name="instance">A component to get the properties for.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties for the specified component.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> for a given object using a specified array of attributes as a filter.</summary>
      <param name="instance">A component to get the properties for.</param>
      <param name="filter">An array of type <see cref="T:System.Attribute"></see> to use as a filter.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties that match the specified attributes for the specified component.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary>Gets an editor of the specified type.</summary>
      <param name="editorBaseType">The base type of editor, which is used to differentiate between multiple editors that a property supports.</param>
      <returns>An instance of the requested editor type, or null if an editor cannot be found.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary>Returns the hash code for this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>This method returns the object that should be used during invocation of members.</summary>
      <param name="type">The <see cref="T:System.Type"></see> of the invocation target.</param>
      <param name="instance">The potential invocation target.</param>
      <returns>The <see cref="T:System.Object"></see> that should be used during invocation of members.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary>Returns a type using its name.</summary>
      <param name="typeName">The assembly-qualified name of the type to retrieve.</param>
      <returns>A <see cref="T:System.Type"></see> that matches the given type name, or null if a match cannot be found.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary>When overridden in a derived class, gets the current value of the property on a component.</summary>
      <param name="component">The component with the property for which to retrieve the value.</param>
      <returns>The value of a property for a given component.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary>Retrieves the current set of ValueChanged event handlers for a specific component</summary>
      <param name="component">The component for which to retrieve event handlers.</param>
      <returns>A combined multicast event handler, or null if no event handlers are currently assigned to <paramref name="component">component</paramref>.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary>Gets a value indicating whether this property should be localized, as specified in the <see cref="T:System.ComponentModel.LocalizableAttribute"></see>.</summary>
      <returns>true if the member is marked with the <see cref="T:System.ComponentModel.LocalizableAttribute"></see> set to true; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary>When overridden in a derived class, gets a value indicating whether this property is read-only.</summary>
      <returns>true if the property is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary>Raises the ValueChanged event that you implemented.</summary>
      <param name="component">The object that raises the event.</param>
      <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary>When overridden in a derived class, gets the type of the property.</summary>
      <returns>A <see cref="T:System.Type"></see> that represents the type of the property.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>Enables other objects to be notified when this property changes.</summary>
      <param name="component">The component to remove the handler for.</param>
      <param name="handler">The delegate to remove as a listener.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> or <paramref name="handler">handler</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary>When overridden in a derived class, resets the value for this property of the component to the default value.</summary>
      <param name="component">The component with the property value that is to be reset to the default value.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary>Gets a value indicating whether this property should be serialized, as specified in the <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute"></see>.</summary>
      <returns>One of the <see cref="T:System.ComponentModel.DesignerSerializationVisibility"></see> enumeration values that specifies whether this property should be serialized.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>When overridden in a derived class, sets the value of the component to a different value.</summary>
      <param name="component">The component with the property value that is to be set.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.</summary>
      <param name="component">The component with the property to be examined for persistence.</param>
      <returns>true if the property should be persisted; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary>Gets a value indicating whether value change notifications for this property may originate from outside the property descriptor.</summary>
      <returns>true if value change notifications may originate from outside the property descriptor; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary>Represents a collection of <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> class.</summary>
      <param name="properties">An array of type <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that provides the properties for this collection.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> class, which is optionally read-only.</summary>
      <param name="properties">An array of type <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that provides the properties for this collection.</param>
      <param name="readOnly">If true, specifies that the collection cannot be modified.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary>Adds the specified <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to the collection.</summary>
      <param name="value">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to add to the collection.</param>
      <returns>The index of the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that was added to the collection.</returns>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary>Removes all <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects from the collection.</summary>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary>Returns whether the collection contains the given <see cref="T:System.ComponentModel.PropertyDescriptor"></see>.</summary>
      <param name="value">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to find in the collection.</param>
      <returns>true if the collection contains the given <see cref="T:System.ComponentModel.PropertyDescriptor"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies the entire collection to an array, starting at the specified index number.</summary>
      <param name="array">An array of <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects to copy elements of the collection to.</param>
      <param name="index">The index of the array parameter at which copying begins.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary>Gets the number of property descriptors in the collection.</summary>
      <returns>The number of property descriptors in the collection.</returns>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary>Specifies an empty collection that you can use instead of creating a new one with no items. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>Returns the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> with the specified name, using a Boolean to indicate whether to ignore case.</summary>
      <param name="name">The name of the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to return from the collection.</param>
      <param name="ignoreCase">true if you want to ignore the case of the property name; otherwise, false.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> with the specified name, or null if the property does not exist.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary>Returns an enumerator for this class.</summary>
      <returns>An enumerator of type <see cref="T:System.Collections.IEnumerator"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary>Returns the index of the given <see cref="T:System.ComponentModel.PropertyDescriptor"></see>.</summary>
      <param name="value">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to return the index of.</param>
      <returns>The index of the given <see cref="T:System.ComponentModel.PropertyDescriptor"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>Adds the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to the collection at the specified index number.</summary>
      <param name="index">The index at which to add the value parameter to the collection.</param>
      <param name="value">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to add to the collection.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>Sorts the members of this collection, using the specified <see cref="T:System.Collections.IComparer"></see>.</summary>
      <param name="sorter">A comparer to use to sort the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects in this collection.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary>Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.</summary>
      <param name="names">An array of strings describing the order in which to sort the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects in this collection.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> at the specified index number.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to get or set.</param>
      <returns>The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> with the specified index number.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The <paramref name="index">index</paramref> parameter is not a valid index for <see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)"></see>.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary>Gets or sets the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> with the specified name.</summary>
      <param name="name">The name of the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to get from the collection.</param>
      <returns>The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> with the specified name, or null if the property does not exist.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary>Removes the specified <see cref="T:System.ComponentModel.PropertyDescriptor"></see> from the collection.</summary>
      <param name="value">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to remove from the collection.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> at the specified index from the collection.</summary>
      <param name="index">The index of the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to remove from the collection.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary>Sorts the members of this collection, using the default sort for this collection, which is usually alphabetical.</summary>
      <returns>A new <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> that contains the sorted <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>Sorts the members of this collection, using the specified <see cref="T:System.Collections.IComparer"></see>.</summary>
      <param name="comparer">A comparer to use to sort the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects in this collection.</param>
      <returns>A new <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> that contains the sorted <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary>Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.</summary>
      <param name="names">An array of strings describing the order in which to sort the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects in this collection.</param>
      <returns>A new <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> that contains the sorted <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>Sorts the members of this collection. The specified order is applied first, followed by the sort using the specified <see cref="T:System.Collections.IComparer"></see>.</summary>
      <param name="names">An array of strings describing the order in which to sort the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects in this collection.</param>
      <param name="comparer">A comparer to use to sort the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects in this collection.</param>
      <returns>A new <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> that contains the sorted <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary>Gets the number of elements contained in the collection.</summary>
      <returns>The number of elements contained in the collection.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the collection is synchronized (thread safe).</summary>
      <returns>true if access to the collection is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see>.</summary>
      <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
      <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.IDictionary"></see>.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IDictionary"></see> contains an element with the specified key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see>.</param>
      <returns>true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary>Returns an enumerator for this class.</summary>
      <returns>An enumerator of type <see cref="T:System.Collections.IEnumerator"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary"></see> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary"></see> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary>Gets or sets the element with the specified key.</summary>
      <param name="key">The key of the element to get or set.</param>
      <returns>The element with the specified key.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection"></see> containing the keys of the <see cref="T:System.Collections.IDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.ICollection"></see> containing the keys of the <see cref="T:System.Collections.IDictionary"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"></see>.</summary>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection"></see> containing the values in the <see cref="T:System.Collections.IDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.ICollection"></see> containing the values in the <see cref="T:System.Collections.IDictionary"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator"></see> for the <see cref="T:System.Collections.IDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> for the <see cref="T:System.Collections.IDictionary"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList"></see>.</summary>
      <param name="value">The item to add to the collection.</param>
      <returns>The position into which the new element was inserted.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary>Removes all items from the collection.</summary>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the collection contains a specific value.</summary>
      <param name="value">The item to locate in the collection.</param>
      <returns>true if the item is found in the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specified item in the collection.</summary>
      <param name="value">The item to locate in the collection.</param>
      <returns>The index of <paramref name="value">value</paramref> if found in the list, otherwise -1.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item into the collection at a specified index.</summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">The item to insert into the collection.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the collection has a fixed size.</summary>
      <returns>true if the collection has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets an item from the collection at a specified index.</summary>
      <param name="index">The zero-based index of the item to get or set.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> is not a <see cref="T:System.ComponentModel.PropertyDescriptor"></see>.</exception>
      <exception cref="T:System.IndexOutOfRangeException"><paramref name="index">index</paramref> is less than 0.   -or-  <paramref name="index">index</paramref> is equal to or greater than <see cref="P:System.ComponentModel.EventDescriptorCollection.Count"></see>.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specified value from the collection.</summary>
      <param name="value">The item to remove from the collection.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes the item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary>Identifies the property tab or tabs to display for the specified class or classes.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyTabAttribute"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyTabAttribute"></see> class using the specified tab class name.</summary>
      <param name="tabClassName">The assembly qualified name of the type of tab to create. For an example of this format convention, see <see cref="P:System.Type.AssemblyQualifiedName"></see>.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyTabAttribute"></see> class using the specified type of tab.</summary>
      <param name="tabClass">The type of tab to create.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyTabAttribute"></see> class using the specified tab class name and tab scope.</summary>
      <param name="tabClassName">The assembly qualified name of the type of tab to create. For an example of this format convention, see <see cref="P:System.Type.AssemblyQualifiedName"></see>.</param>
      <param name="tabScope">A <see cref="T:System.ComponentModel.PropertyTabScope"></see> that indicates the scope of this tab. If the scope is <see cref="F:System.ComponentModel.PropertyTabScope.Component"></see>, it is shown only for components with the corresponding <see cref="T:System.ComponentModel.PropertyTabAttribute"></see>. If it is <see cref="F:System.ComponentModel.PropertyTabScope.Document"></see>, it is shown for all components on the document.</param>
      <exception cref="T:System.ArgumentException"><paramref name="tabScope">tabScope</paramref> is not <see cref="F:System.ComponentModel.PropertyTabScope.Document"></see> or <see cref="F:System.ComponentModel.PropertyTabScope.Component"></see>.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyTabAttribute"></see> class using the specified type of tab and tab scope.</summary>
      <param name="tabClass">The type of tab to create.</param>
      <param name="tabScope">A <see cref="T:System.ComponentModel.PropertyTabScope"></see> that indicates the scope of this tab. If the scope is <see cref="F:System.ComponentModel.PropertyTabScope.Component"></see>, it is shown only for components with the corresponding <see cref="T:System.ComponentModel.PropertyTabAttribute"></see>. If it is <see cref="F:System.ComponentModel.PropertyTabScope.Document"></see>, it is shown for all components on the document.</param>
      <exception cref="T:System.ArgumentException"><paramref name="tabScope">tabScope</paramref> is not <see cref="F:System.ComponentModel.PropertyTabScope.Document"></see> or <see cref="F:System.ComponentModel.PropertyTabScope.Component"></see>.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary>Returns a value indicating whether this instance is equal to a specified attribute.</summary>
      <param name="other">A <see cref="T:System.ComponentModel.PropertyTabAttribute"></see> to compare to this instance, or null.</param>
      <returns>true if the <see cref="T:System.ComponentModel.PropertyTabAttribute"></see> instances are equal; otherwise, false.</returns>
      <exception cref="T:System.TypeLoadException">The types specified by the <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames"></see> property of the <paramref name="other">other</paramref> parameter cannot be found.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="other">An object to compare to this instance, or null.</param>
      <returns>true if <paramref name="other">other</paramref> refers to the same <see cref="T:System.ComponentModel.PropertyTabAttribute"></see> instance; otherwise, false.</returns>
      <exception cref="T:System.TypeLoadException">The types specified by the <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames"></see> property of the <paramref name="other">other</paramref> parameter could not be found.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code for the object the attribute belongs to.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary>Initializes the attribute using the specified names of tab classes and array of tab scopes.</summary>
      <param name="tabClassNames">An array of fully qualified type names of the types to create for tabs on the Properties window.</param>
      <param name="tabScopes">The scope of each tab. If the scope is <see cref="F:System.ComponentModel.PropertyTabScope.Component"></see>, it is shown only for components with the corresponding <see cref="T:System.ComponentModel.PropertyTabAttribute"></see>. If it is <see cref="F:System.ComponentModel.PropertyTabScope.Document"></see>, it is shown for all components on the document.</param>
      <exception cref="T:System.ArgumentException">One or more of the values in <paramref name="tabScopes">tabScopes</paramref> is not <see cref="F:System.ComponentModel.PropertyTabScope.Document"></see> or <see cref="F:System.ComponentModel.PropertyTabScope.Component"></see>.   -or-   The length of the <paramref name="tabClassNames">tabClassNames</paramref> and <paramref name="tabScopes">tabScopes</paramref> arrays do not match.   -or-  <paramref name="tabClassNames">tabClassNames</paramref> or <paramref name="tabScopes">tabScopes</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary>Initializes the attribute using the specified names of tab classes and array of tab scopes.</summary>
      <param name="tabClasses">The types of tabs to create.</param>
      <param name="tabScopes">The scope of each tab. If the scope is <see cref="F:System.ComponentModel.PropertyTabScope.Component"></see>, it is shown only for components with the corresponding <see cref="T:System.ComponentModel.PropertyTabAttribute"></see>. If it is <see cref="F:System.ComponentModel.PropertyTabScope.Document"></see>, it is shown for all components on the document.</param>
      <exception cref="T:System.ArgumentException">One or more of the values in <paramref name="tabScopes">tabScopes</paramref> is not <see cref="F:System.ComponentModel.PropertyTabScope.Document"></see> or <see cref="F:System.ComponentModel.PropertyTabScope.Component"></see>.   -or-   The length of the <paramref name="tabClassNames">tabClassNames</paramref> and <paramref name="tabScopes">tabScopes</paramref> arrays do not match.   -or-  <paramref name="tabClassNames">tabClassNames</paramref> or <paramref name="tabScopes">tabScopes</paramref> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary>Gets the types of tabs that this attribute uses.</summary>
      <returns>An array of types indicating the types of tabs that this attribute uses.</returns>
      <exception cref="T:System.TypeLoadException">The types specified by the <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames"></see> property could not be found.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary>Gets the names of the tab classes that this attribute uses.</summary>
      <returns>The names of the tab classes that this attribute uses.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary>Gets an array of tab scopes of each tab of this <see cref="T:System.ComponentModel.PropertyTabAttribute"></see>.</summary>
      <returns>An array of <see cref="T:System.ComponentModel.PropertyTabScope"></see> objects that indicate the scopes of the tabs.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary>Defines identifiers that indicate the persistence scope of a tab in the Properties window.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary>This tab is specific to the current component. This tab is added to the Properties window for the current component only and is removed when the component is no longer selected.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary>This tab is specific to the current document. This tab is added to the Properties window and is removed when the currently selected document changes.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary>This tab is added to the Properties window and can only be removed explicitly by a parent component.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary>This tab is added to the Properties window and cannot be removed.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary>Specifies the name of the property that an implementer of <see cref="T:System.ComponentModel.IExtenderProvider"></see> offers to other components. This class cannot be inherited</summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ProvidePropertyAttribute"></see> class with the name of the property and the type of its receiver.</summary>
      <param name="propertyName">The name of the property extending to an object of the specified type.</param>
      <param name="receiverTypeName">The name of the data type this property can extend.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ProvidePropertyAttribute"></see> class with the name of the property and its <see cref="T:System.Type"></see>.</summary>
      <param name="propertyName">The name of the property extending to an object of the specified type.</param>
      <param name="receiverType">The <see cref="T:System.Type"></see> of the data type of the object that can receive the property.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.ProvidePropertyAttribute"></see>.</summary>
      <param name="obj">The object to test the value equality of.</param>
      <returns>true if the value of the given object is equal to that of the current; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.ProvidePropertyAttribute"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary>Gets the name of a property that this class provides.</summary>
      <returns>The name of a property that this class provides.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary>Gets the name of the data type this property can extend.</summary>
      <returns>The name of the data type this property can extend.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary>Gets a unique identifier for this attribute.</summary>
      <returns>An <see cref="T:System.Object"></see> that is a unique identifier for the attribute.</returns>
    </member>
    <member name="T:System.ComponentModel.ReadOnlyAttribute">
      <summary>Specifies whether the property this attribute is bound to is read-only or read/write. This class cannot be inherited</summary>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ReadOnlyAttribute"></see> class.</summary>
      <param name="isReadOnly">true to show that the property this attribute is bound to is read-only; false to show that the property is read/write.</param>
    </member>
    <member name="F:System.ComponentModel.ReadOnlyAttribute.Default">
      <summary>Specifies the default value for the <see cref="T:System.ComponentModel.ReadOnlyAttribute"></see>, which is <see cref="F:System.ComponentModel.ReadOnlyAttribute.No"></see> (that is, the property this attribute is bound to is read/write). This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="value">Another object to compare to.</param>
      <returns>true if <paramref name="value">value</paramref> is equal to this instance; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.ReadOnlyAttribute"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute">
      <summary>Determines if this attribute is the default.</summary>
      <returns>true if the attribute is the default value for this attribute class; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
      <summary>Gets a value indicating whether the property this attribute is bound to is read-only.</summary>
      <returns>true if the property this attribute is bound to is read-only; false if the property is read/write.</returns>
    </member>
    <member name="F:System.ComponentModel.ReadOnlyAttribute.No">
      <summary>Specifies that the property this attribute is bound to is read/write and can be modified. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.ReadOnlyAttribute.Yes">
      <summary>Specifies that the property this attribute is bound to is read-only and cannot be modified in the server explorer. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Configuration.SchemeSettingElement">
      <summary>Represents an element in a <see cref="T:System.Configuration.SchemeSettingElementCollection"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.SchemeSettingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SchemeSettingElement"></see> class.</summary>
    </member>
    <member name="P:System.Configuration.SchemeSettingElement.GenericUriParserOptions">
      <summary>Gets the value of the GenericUriParserOptions entry from a <see cref="T:System.Configuration.SchemeSettingElement"></see> instance.</summary>
      <returns>The value of GenericUriParserOptions entry.</returns>
    </member>
    <member name="P:System.Configuration.SchemeSettingElement.Name">
      <summary>Gets the value of the Name entry from a <see cref="T:System.Configuration.SchemeSettingElement"></see> instance.</summary>
      <returns>The protocol used by this schema setting.</returns>
    </member>
    <member name="T:System.Configuration.SchemeSettingElementCollection">
      <summary>Represents a collection of <see cref="T:System.Configuration.SchemeSettingElement"></see> objects.</summary>
    </member>
    <member name="M:System.Configuration.SchemeSettingElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SchemeSettingElementCollection"></see> class.</summary>
    </member>
    <member name="P:System.Configuration.SchemeSettingElementCollection.CollectionType">
      <summary>Gets the default collection type of <see cref="T:System.Configuration.SchemeSettingElementCollection"></see>.</summary>
      <returns>The default collection type of <see cref="T:System.Configuration.SchemeSettingElementCollection"></see>.</returns>
    </member>
    <member name="M:System.Configuration.SchemeSettingElementCollection.IndexOf(System.Configuration.SchemeSettingElement)">
      <summary>The index of the specified <see cref="T:System.Configuration.SchemeSettingElement"></see>.</summary>
      <param name="element">The <see cref="T:System.Configuration.SchemeSettingElement"></see> for the specified index location.</param>
      <returns>The index of the specified <see cref="T:System.Configuration.SchemeSettingElement"></see>; otherwise, -1.</returns>
    </member>
    <member name="P:System.Configuration.SchemeSettingElementCollection.Item(System.Int32)">
      <summary>Gets an item at the specified index in the <see cref="T:System.Configuration.SchemeSettingElementCollection"></see> collection.</summary>
      <param name="index">The index of the <see cref="T:System.Configuration.SchemeSettingElement"></see> to return.</param>
      <returns>The specified <see cref="T:System.Configuration.SchemeSettingElement"></see>.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The <paramref name="index">index</paramref> parameter is less than zero.   -or-   The item specified by the parameter is null or has been removed.</exception>
    </member>
    <member name="P:System.Configuration.SchemeSettingElementCollection.Item(System.String)">
      <summary>Gets an item from the <see cref="T:System.Configuration.SchemeSettingElementCollection"></see> collection.</summary>
      <param name="name">A string reference to the <see cref="T:System.Configuration.SchemeSettingElement"></see> object within the collection.</param>
      <returns>A <see cref="T:System.Configuration.SchemeSettingElement"></see> object contained in the collection.</returns>
    </member>
    <member name="T:System.Configuration.SettingAttribute">
      <summary>Represents a custom settings attribute used to associate settings information with a settings property.</summary>
    </member>
    <member name="M:System.Configuration.SettingAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingAttribute"></see> class.</summary>
    </member>
    <member name="T:System.Configuration.SettingChangingEventArgs">
      <summary>Provides data for the <see cref="E:System.Configuration.ApplicationSettingsBase.SettingChanging"></see> event.</summary>
    </member>
    <member name="M:System.Configuration.SettingChangingEventArgs.#ctor(System.String,System.String,System.String,System.Object,System.Boolean)">
      <summary>Initializes an instance of the <see cref="T:System.Configuration.SettingChangingEventArgs"></see> class.</summary>
      <param name="settingName">A <see cref="T:System.String"></see> containing the name of the application setting.</param>
      <param name="settingClass">A <see cref="T:System.String"></see> containing a category description of the setting. Often this parameter is set to the application settings group name.</param>
      <param name="settingKey">A <see cref="T:System.String"></see> containing the application settings key.</param>
      <param name="newValue">An <see cref="T:System.Object"></see> that contains the new value to be assigned to the application settings property.</param>
      <param name="cancel">true to cancel the event; otherwise, false.</param>
    </member>
    <member name="P:System.Configuration.SettingChangingEventArgs.NewValue">
      <summary>Gets the new value being assigned to the application settings property.</summary>
      <returns>An <see cref="T:System.Object"></see> that contains the new value to be assigned to the application settings property.</returns>
    </member>
    <member name="P:System.Configuration.SettingChangingEventArgs.SettingClass">
      <summary>Gets the application settings property category.</summary>
      <returns>A <see cref="T:System.String"></see> containing a category description of the setting. Typically, this parameter is set to the application settings group name.</returns>
    </member>
    <member name="P:System.Configuration.SettingChangingEventArgs.SettingKey">
      <summary>Gets the application settings key associated with the property.</summary>
      <returns>A <see cref="T:System.String"></see> containing the application settings key.</returns>
    </member>
    <member name="P:System.Configuration.SettingChangingEventArgs.SettingName">
      <summary>Gets the name of the application setting associated with the application settings property.</summary>
      <returns>A <see cref="T:System.String"></see> containing the name of the application setting.</returns>
    </member>
    <member name="T:System.Configuration.SettingChangingEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Configuration.ApplicationSettingsBase.SettingChanging"></see> event.</summary>
      <param name="sender">The source of the event, typically an application settings wrapper class derived from the <see cref="T:System.Configuration.ApplicationSettingsBase"></see> class.</param>
      <param name="e">A <see cref="T:System.Configuration.SettingChangingEventArgs"></see> containing the data for the event.</param>
    </member>
    <member name="T:System.Configuration.SettingElement">
      <summary>Represents a simplified configuration element used for updating elements in the configuration. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.SettingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingElement"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.SettingElement.#ctor(System.String,System.Configuration.SettingsSerializeAs)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingElement"></see> class based on supplied parameters.</summary>
      <param name="name">The name of the <see cref="T:System.Configuration.SettingElement"></see> object.</param>
      <param name="serializeAs">A <see cref="T:System.Configuration.SettingsSerializeAs"></see> object. This object is an enumeration used as the serialization scheme to store configuration settings.</param>
    </member>
    <member name="M:System.Configuration.SettingElement.Equals(System.Object)">
      <summary>Compares the current <see cref="T:System.Configuration.SettingElement"></see> instance to the specified object.</summary>
      <param name="settings"></param>
      <returns>true if the <see cref="T:System.Configuration.SettingElement"></see> instance is equal to the specified object; otherwise, false.</returns>
    </member>
    <member name="M:System.Configuration.SettingElement.GetHashCode">
      <summary>Gets a unique value representing the <see cref="T:System.Configuration.SettingElement"></see> current instance.</summary>
      <returns>A unique value representing the <see cref="T:System.Configuration.SettingElement"></see> current instance.</returns>
    </member>
    <member name="P:System.Configuration.SettingElement.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Configuration.SettingElement"></see> object.</summary>
      <returns>The name of the <see cref="T:System.Configuration.SettingElement"></see> object.</returns>
    </member>
    <member name="P:System.Configuration.SettingElement.SerializeAs">
      <summary>Gets or sets the serialization mechanism used to persist the values of the <see cref="T:System.Configuration.SettingElement"></see> object.</summary>
      <returns>A <see cref="T:System.Configuration.SettingsSerializeAs"></see> object.</returns>
    </member>
    <member name="P:System.Configuration.SettingElement.Value">
      <summary>Gets or sets the value of a <see cref="T:System.Configuration.SettingElement"></see> object by using a <see cref="T:System.Configuration.SettingValueElement"></see> object.</summary>
      <returns>A <see cref="T:System.Configuration.SettingValueElement"></see> object containing the value of the <see cref="T:System.Configuration.SettingElement"></see> object.</returns>
    </member>
    <member name="T:System.Configuration.SettingElementCollection">
      <summary>Contains a collection of <see cref="T:System.Configuration.SettingElement"></see> objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.SettingElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingElementCollection"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.SettingElementCollection.Add(System.Configuration.SettingElement)">
      <summary>Adds a <see cref="T:System.Configuration.SettingElement"></see> object to the collection.</summary>
      <param name="element">The <see cref="T:System.Configuration.SettingElement"></see> object to add to the collection.</param>
    </member>
    <member name="M:System.Configuration.SettingElementCollection.Clear">
      <summary>Removes all <see cref="T:System.Configuration.SettingElement"></see> objects from the collection.</summary>
    </member>
    <member name="P:System.Configuration.SettingElementCollection.CollectionType">
      <summary>Gets the type of the configuration collection.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"></see> object of the collection.</returns>
    </member>
    <member name="M:System.Configuration.SettingElementCollection.Get(System.String)">
      <summary>Gets a <see cref="T:System.Configuration.SettingElement"></see> object from the collection.</summary>
      <param name="elementKey">A string value representing the <see cref="T:System.Configuration.SettingElement"></see> object in the collection.</param>
      <returns>A <see cref="T:System.Configuration.SettingElement"></see> object.</returns>
    </member>
    <member name="M:System.Configuration.SettingElementCollection.Remove(System.Configuration.SettingElement)">
      <summary>Removes a <see cref="T:System.Configuration.SettingElement"></see> object from the collection.</summary>
      <param name="element">A <see cref="T:System.Configuration.SettingElement"></see> object.</param>
    </member>
    <member name="T:System.Configuration.SettingsAttributeDictionary">
      <summary>Represents a collection of key/value pairs used to describe a configuration object as well as a <see cref="T:System.Configuration.SettingsProperty"></see> object.</summary>
    </member>
    <member name="M:System.Configuration.SettingsAttributeDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsAttributeDictionary"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.SettingsAttributeDictionary.#ctor(System.Configuration.SettingsAttributeDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsAttributeDictionary"></see> class.</summary>
      <param name="attributes">A collection of key/value pairs that are related to configuration settings.</param>
    </member>
    <member name="T:System.Configuration.SettingsBase">
      <summary>Provides the base class used to support user property settings.</summary>
    </member>
    <member name="M:System.Configuration.SettingsBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsBase"></see> class.</summary>
    </member>
    <member name="P:System.Configuration.SettingsBase.Context">
      <summary>Gets the associated settings context.</summary>
      <returns>A <see cref="T:System.Configuration.SettingsContext"></see> associated with the settings instance.</returns>
    </member>
    <member name="M:System.Configuration.SettingsBase.Initialize(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection,System.Configuration.SettingsProviderCollection)">
      <summary>Initializes internal properties used by <see cref="T:System.Configuration.SettingsBase"></see> object.</summary>
      <param name="context">The settings context related to the settings properties.</param>
      <param name="properties">The settings properties that will be accessible from the <see cref="T:System.Configuration.SettingsBase"></see> instance.</param>
      <param name="providers">The initialized providers that should be used when loading and saving property values.</param>
    </member>
    <member name="P:System.Configuration.SettingsBase.IsSynchronized">
      <summary>Gets a value indicating whether access to the object is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Configuration.SettingsBase"></see> is synchronized; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.SettingsBase.Item(System.String)">
      <summary>Gets or sets the value of the specified settings property.</summary>
      <param name="propertyName">A <see cref="T:System.String"></see> containing the name of the property to access.</param>
      <returns>If found, the value of the named settings property.</returns>
      <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">There are no properties associated with the current object, or the specified property could not be found.</exception>
      <exception cref="T:System.Configuration.SettingsPropertyIsReadOnlyException">An attempt was made to set a read-only property.</exception>
      <exception cref="T:System.Configuration.SettingsPropertyWrongTypeException">The value supplied is of a type incompatible with the settings property, during a set operation.</exception>
    </member>
    <member name="P:System.Configuration.SettingsBase.Properties">
      <summary>Gets the collection of settings properties.</summary>
      <returns>A <see cref="T:System.Configuration.SettingsPropertyCollection"></see> collection containing all the <see cref="T:System.Configuration.SettingsProperty"></see> objects.</returns>
    </member>
    <member name="P:System.Configuration.SettingsBase.PropertyValues">
      <summary>Gets a collection of settings property values.</summary>
      <returns>A collection of <see cref="T:System.Configuration.SettingsPropertyValue"></see> objects representing the actual data values for the properties managed by the <see cref="T:System.Configuration.SettingsBase"></see> instance.</returns>
    </member>
    <member name="P:System.Configuration.SettingsBase.Providers">
      <summary>Gets a collection of settings providers.</summary>
      <returns>A <see cref="T:System.Configuration.SettingsProviderCollection"></see> containing <see cref="T:System.Configuration.SettingsProvider"></see> objects.</returns>
    </member>
    <member name="M:System.Configuration.SettingsBase.Save">
      <summary>Stores the current values of the settings properties.</summary>
    </member>
    <member name="M:System.Configuration.SettingsBase.Synchronized(System.Configuration.SettingsBase)">
      <summary>Provides a <see cref="T:System.Configuration.SettingsBase"></see> class that is synchronized (thread safe).</summary>
      <param name="settingsBase">The class used to support user property settings.</param>
      <returns>A <see cref="T:System.Configuration.SettingsBase"></see> class that is synchronized.</returns>
    </member>
    <member name="T:System.Configuration.SettingsContext">
      <summary>Provides contextual information that the provider can use when persisting settings.</summary>
    </member>
    <member name="M:System.Configuration.SettingsContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsContext"></see> class.</summary>
    </member>
    <member name="T:System.Configuration.SettingsDescriptionAttribute">
      <summary>Provides a string that describes an individual configuration property. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.SettingsDescriptionAttribute.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Configuration.SettingsDescriptionAttribute"></see> class.</summary>
      <param name="description">The <see cref="T:System.String"></see> used as descriptive text.</param>
    </member>
    <member name="P:System.Configuration.SettingsDescriptionAttribute.Description">
      <summary>Gets the descriptive text for the associated configuration property.</summary>
      <returns>A <see cref="T:System.String"></see> containing the descriptive text for the associated configuration property.</returns>
    </member>
    <member name="T:System.Configuration.SettingsGroupDescriptionAttribute">
      <summary>Provides a string that describes an application settings property group. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.SettingsGroupDescriptionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsGroupDescriptionAttribute"></see> class.</summary>
      <param name="description">A <see cref="T:System.String"></see> containing the descriptive text for the application settings group.</param>
    </member>
    <member name="P:System.Configuration.SettingsGroupDescriptionAttribute.Description">
      <summary>The descriptive text for the application settings properties group.</summary>
      <returns>A <see cref="T:System.String"></see> containing the descriptive text for the application settings group.</returns>
    </member>
    <member name="T:System.Configuration.SettingsGroupNameAttribute">
      <summary>Specifies a name for application settings property group. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.SettingsGroupNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsGroupNameAttribute"></see> class.</summary>
      <param name="groupName">A <see cref="T:System.String"></see> containing the name of the application settings property group.</param>
    </member>
    <member name="P:System.Configuration.SettingsGroupNameAttribute.GroupName">
      <summary>Gets the name of the application settings property group.</summary>
      <returns>A <see cref="T:System.String"></see> containing the name of the application settings property group.</returns>
    </member>
    <member name="T:System.Configuration.SettingsLoadedEventArgs">
      <summary>Provides data for the <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded"></see> event.</summary>
    </member>
    <member name="M:System.Configuration.SettingsLoadedEventArgs.#ctor(System.Configuration.SettingsProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsLoadedEventArgs"></see> class.</summary>
      <param name="provider">A <see cref="T:System.Configuration.SettingsProvider"></see> object from which settings are loaded.</param>
    </member>
    <member name="P:System.Configuration.SettingsLoadedEventArgs.Provider">
      <summary>Gets the settings provider used to store configuration settings.</summary>
      <returns>A settings provider.</returns>
    </member>
    <member name="T:System.Configuration.SettingsLoadedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded"></see> event.</summary>
      <param name="sender">The source of the event, typically the settings class.</param>
      <param name="e">A <see cref="T:System.Configuration.SettingsLoadedEventArgs"></see> object that contains the event data.</param>
    </member>
    <member name="T:System.Configuration.SettingsManageability">
      <summary>Provides values to indicate which services should be made available to application settings.</summary>
    </member>
    <member name="F:System.Configuration.SettingsManageability.Roaming">
      <summary>Enables application settings to be stored in roaming user profiles. For more information about roaming user profiles, see <see cref="http://msdn.microsoft.com/en-us/d3cca593-4521-408d-b323-ea398d226de3">Isolated Storage and Roaming</see>.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Configuration.SettingsManageabilityAttribute">
      <summary>Specifies special services for application settings properties. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.SettingsManageabilityAttribute.#ctor(System.Configuration.SettingsManageability)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsManageabilityAttribute"></see> class.</summary>
      <param name="manageability">A <see cref="T:System.Configuration.SettingsManageability"></see> value that enumerates the services being requested.</param>
    </member>
    <member name="P:System.Configuration.SettingsManageabilityAttribute.Manageability">
      <summary>Gets the set of special services that have been requested.</summary>
      <returns>A value that results from using the logical OR operator to combine all the <see cref="T:System.Configuration.SettingsManageability"></see> enumeration values corresponding to the requested services.</returns>
    </member>
    <member name="T:System.Configuration.SettingsProperty">
      <summary>Used internally as the class that represents metadata about an individual configuration property.</summary>
    </member>
    <member name="M:System.Configuration.SettingsProperty.#ctor(System.Configuration.SettingsProperty)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsProperty"></see> class, based on the supplied parameter.</summary>
      <param name="propertyToCopy">Specifies a copy of an existing <see cref="T:System.Configuration.SettingsProperty"></see> object.</param>
    </member>
    <member name="M:System.Configuration.SettingsProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsProperty"></see> class. based on the supplied parameter.</summary>
      <param name="name">Specifies the name of an existing <see cref="T:System.Configuration.SettingsProperty"></see> object.</param>
    </member>
    <member name="M:System.Configuration.SettingsProperty.#ctor(System.String,System.Type,System.Configuration.SettingsProvider,System.Boolean,System.Object,System.Configuration.SettingsSerializeAs,System.Configuration.SettingsAttributeDictionary,System.Boolean,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.Configuration.SettingsProperty"></see> class based on the supplied parameters.</summary>
      <param name="name">The name of the <see cref="T:System.Configuration.SettingsProperty"></see> object.</param>
      <param name="propertyType">The type of <see cref="T:System.Configuration.SettingsProperty"></see> object.</param>
      <param name="provider">A <see cref="T:System.Configuration.SettingsProvider"></see> object to use for persistence.</param>
      <param name="isReadOnly">A <see cref="T:System.Boolean"></see> value specifying whether the <see cref="T:System.Configuration.SettingsProperty"></see> object is read-only.</param>
      <param name="defaultValue">The default value of the <see cref="T:System.Configuration.SettingsProperty"></see> object.</param>
      <param name="serializeAs">A <see cref="T:System.Configuration.SettingsSerializeAs"></see> object. This object is an enumeration used to set the serialization scheme for storing application settings.</param>
      <param name="attributes">A <see cref="T:System.Configuration.SettingsAttributeDictionary"></see> object.</param>
      <param name="throwOnErrorDeserializing">A Boolean value specifying whether an error will be thrown when the property is unsuccessfully deserialized.</param>
      <param name="throwOnErrorSerializing">A Boolean value specifying whether an error will be thrown when the property is unsuccessfully serialized.</param>
    </member>
    <member name="P:System.Configuration.SettingsProperty.Attributes">
      <summary>Gets a <see cref="T:System.Configuration.SettingsAttributeDictionary"></see> object containing the attributes of the <see cref="T:System.Configuration.SettingsProperty"></see> object.</summary>
      <returns>A <see cref="T:System.Configuration.SettingsAttributeDictionary"></see> object.</returns>
    </member>
    <member name="P:System.Configuration.SettingsProperty.DefaultValue">
      <summary>Gets or sets the default value of the <see cref="T:System.Configuration.SettingsProperty"></see> object.</summary>
      <returns>An object containing the default value of the <see cref="T:System.Configuration.SettingsProperty"></see> object.</returns>
    </member>
    <member name="P:System.Configuration.SettingsProperty.IsReadOnly">
      <summary>Gets or sets a value specifying whether a <see cref="T:System.Configuration.SettingsProperty"></see> object is read-only.</summary>
      <returns>true if the <see cref="T:System.Configuration.SettingsProperty"></see> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.SettingsProperty.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Configuration.SettingsProperty"></see>.</summary>
      <returns>The name of the <see cref="T:System.Configuration.SettingsProperty"></see>.</returns>
    </member>
    <member name="P:System.Configuration.SettingsProperty.PropertyType">
      <summary>Gets or sets the type for the <see cref="T:System.Configuration.SettingsProperty"></see>.</summary>
      <returns>The type for the <see cref="T:System.Configuration.SettingsProperty"></see>.</returns>
    </member>
    <member name="P:System.Configuration.SettingsProperty.Provider">
      <summary>Gets or sets the provider for the <see cref="T:System.Configuration.SettingsProperty"></see>.</summary>
      <returns>A <see cref="T:System.Configuration.SettingsProvider"></see> object.</returns>
    </member>
    <member name="P:System.Configuration.SettingsProperty.SerializeAs">
      <summary>Gets or sets a <see cref="T:System.Configuration.SettingsSerializeAs"></see> object for the <see cref="T:System.Configuration.SettingsProperty"></see>.</summary>
      <returns>A <see cref="T:System.Configuration.SettingsSerializeAs"></see> object.</returns>
    </member>
    <member name="P:System.Configuration.SettingsProperty.ThrowOnErrorDeserializing">
      <summary>Gets or sets a value specifying whether an error will be thrown when the property is unsuccessfully deserialized.</summary>
      <returns>true if the error will be thrown when the property is unsuccessfully deserialized; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.SettingsProperty.ThrowOnErrorSerializing">
      <summary>Gets or sets a value specifying whether an error will be thrown when the property is unsuccessfully serialized.</summary>
      <returns>true if the error will be thrown when the property is unsuccessfully serialized; otherwise, false.</returns>
    </member>
    <member name="T:System.Diagnostics.EventLogPermission">
      <summary>Controls code access permissions for event logging.</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogPermission"></see> class.</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor(System.Diagnostics.EventLogPermissionEntry[])">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogPermission"></see> class with the specified permission entries.</summary>
      <param name="permissionAccessEntries">An array of  objects that represent permission entries. The <see cref="P:System.Diagnostics.EventLogPermission.PermissionEntries"></see> property is set to this value.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="permissionAccessEntries">permissionAccessEntries</paramref> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogPermission"></see> class with the specified permission state.</summary>
      <param name="state">One of the enumeration values that specifies the permission state (full access or no access to resources).</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid value of <see cref="T:System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor(System.Diagnostics.EventLogPermissionAccess,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogPermission"></see> class with the specified access levels and the name of the computer to use.</summary>
      <param name="permissionAccess">One of the enumeration values that specifies an access level.</param>
      <param name="machineName">The name of the computer on which to read or write events.</param>
    </member>
    <member name="P:System.Diagnostics.EventLogPermission.PermissionEntries">
      <summary>Gets the collection of permission entries for this permissions request.</summary>
      <returns>A collection that contains the permission entries for this permissions request.</returns>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionAccess">
      <summary>Defines access levels used by <see cref="T:System.Diagnostics.EventLog"></see> permission classes.</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Administer">
      <summary>The <see cref="T:System.Diagnostics.EventLog"></see> can create an event source, read existing logs, delete event sources or logs, respond to entries, clear an event log, listen to events, and access a collection of all event logs.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Audit">
      <summary>The <see cref="T:System.Diagnostics.EventLog"></see> can read existing logs, delete event sources or logs, respond to entries, clear an event log, listen to events, and access a collection of all event logs. Note This member is now obsolete, use <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer"></see> instead.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Browse">
      <summary>The <see cref="T:System.Diagnostics.EventLog"></see> can read existing logs. Note This member is now obsolete, use <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer"></see> instead.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Instrument">
      <summary>The <see cref="T:System.Diagnostics.EventLog"></see> can read or write to existing logs, and create event sources and logs. Note This member is now obsolete, use <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write"></see> instead.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.None">
      <summary>The <see cref="T:System.Diagnostics.EventLog"></see> has no permissions.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Write">
      <summary>The <see cref="T:System.Diagnostics.EventLog"></see> can write to existing logs, and create event sources and logs.</summary>
      <returns></returns>
    </member>
    <member name="T:System.FileStyleUriParser">
      <summary>A customizable parser based on the File scheme.</summary>
    </member>
    <member name="M:System.FileStyleUriParser.#ctor">
      <summary>Creates a customizable parser based on the File scheme.</summary>
    </member>
    <member name="T:System.FtpStyleUriParser">
      <summary>A customizable parser based on the File Transfer Protocol (FTP) scheme.</summary>
    </member>
    <member name="M:System.FtpStyleUriParser.#ctor">
      <summary>Creates a customizable parser based on the File Transfer Protocol (FTP) scheme.</summary>
    </member>
    <member name="T:System.IO.FileSystemEventArgs">
      <summary>Provides data for the directory events: <see cref="E:System.IO.FileSystemWatcher.Changed"></see>, <see cref="E:System.IO.FileSystemWatcher.Created"></see>, <see cref="E:System.IO.FileSystemWatcher.Deleted"></see>.</summary>
    </member>
    <member name="M:System.IO.FileSystemEventArgs.#ctor(System.IO.WatcherChangeTypes,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileSystemEventArgs"></see> class.</summary>
      <param name="changeType">One of the <see cref="T:System.IO.WatcherChangeTypes"></see> values, which represents the kind of change detected in the file system.</param>
      <param name="directory">The root directory of the affected file or directory.</param>
      <param name="name">The name of the affected file or directory.</param>
    </member>
    <member name="P:System.IO.FileSystemEventArgs.ChangeType">
      <summary>Gets the type of directory event that occurred.</summary>
      <returns>One of the <see cref="T:System.IO.WatcherChangeTypes"></see> values that represents the kind of change detected in the file system.</returns>
    </member>
    <member name="P:System.IO.FileSystemEventArgs.FullPath">
      <summary>Gets the fully qualifed path of the affected file or directory.</summary>
      <returns>The path of the affected file or directory.</returns>
    </member>
    <member name="P:System.IO.FileSystemEventArgs.Name">
      <summary>Gets the name of the affected file or directory.</summary>
      <returns>The name of the affected file or directory.</returns>
    </member>
    <member name="T:System.IO.FileSystemEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.IO.FileSystemWatcher.Changed"></see>, <see cref="E:System.IO.FileSystemWatcher.Created"></see>, or <see cref="E:System.IO.FileSystemWatcher.Deleted"></see> event of a <see cref="T:System.IO.FileSystemWatcher"></see> class.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:System.IO.FileSystemEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.IO.FileSystemWatcher">
      <summary>Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.</summary>
    </member>
    <member name="M:System.IO.FileSystemWatcher.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher"></see> class.</summary>
    </member>
    <member name="M:System.IO.FileSystemWatcher.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher"></see> class, given the specified directory to monitor.</summary>
      <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path">path</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path">path</paramref> parameter is an empty string (&quot;&quot;).   -or-   The path specified through the <paramref name="path">path</paramref> parameter does not exist.</exception>
      <exception cref="T:System.IO.PathTooLongException"><paramref name="path">path</paramref> is too long.</exception>
    </member>
    <member name="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher"></see> class, given the specified directory and type of files to monitor.</summary>
      <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
      <param name="filter">The type of files to watch. For example, &quot;*.txt&quot; watches for changes to all text files.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path">path</paramref> parameter is null.   -or-   The <paramref name="filter">filter</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="path">path</paramref> parameter is an empty string (&quot;&quot;).   -or-   The path specified through the <paramref name="path">path</paramref> parameter does not exist.</exception>
      <exception cref="T:System.IO.PathTooLongException"><paramref name="path">path</paramref> is too long.</exception>
    </member>
    <member name="M:System.IO.FileSystemWatcher.BeginInit">
      <summary>Begins the initialization of a <see cref="T:System.IO.FileSystemWatcher"></see> used on a form or used by another component. The initialization occurs at run time.</summary>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Changed">
      <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"></see> is changed.</summary>
      <returns></returns>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Created">
      <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"></see> is created.</summary>
      <returns></returns>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Deleted">
      <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"></see> is deleted.</summary>
      <returns></returns>
    </member>
    <member name="M:System.IO.FileSystemWatcher.Dispose">
      
    </member>
    <member name="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.FileSystemWatcher"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
      <summary>Gets or sets a value indicating whether the component is enabled.</summary>
      <returns>true if the component is enabled; otherwise, false. The default is false. If you are using the component on a designer in Visual Studio 2005, the default is true.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.FileSystemWatcher"></see> object has been disposed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The directory specified in <see cref="P:System.IO.FileSystemWatcher.Path"></see> could not be found.</exception>
      <exception cref="T:System.ArgumentException"><see cref="P:System.IO.FileSystemWatcher.Path"></see> has not been set or is invalid.</exception>
    </member>
    <member name="M:System.IO.FileSystemWatcher.EndInit">
      <summary>Ends the initialization of a <see cref="T:System.IO.FileSystemWatcher"></see> used on a form or used by another component. The initialization occurs at run time.</summary>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Error">
      <summary>Occurs when the instance of <see cref="T:System.IO.FileSystemWatcher"></see> is unable to continue monitoring changes or when the internal buffer overflows.</summary>
      <returns></returns>
    </member>
    <member name="P:System.IO.FileSystemWatcher.Filter">
      <summary>Gets or sets the filter string used to determine what files are monitored in a directory.</summary>
      <returns>The filter string. The default is &quot;.\&quot; (Watches all files.)</returns>
    </member>
    <member name="M:System.IO.FileSystemWatcher.Finalize">
      
    </member>
    <member name="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
      <summary>Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</summary>
      <returns>true if you want to monitor subdirectories; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.IO.FileSystemWatcher.InternalBufferSize">
      <summary>Gets or sets the size (in bytes) of the internal buffer.</summary>
      <returns>The internal buffer size in bytes. The default is 8192 (8 KB).</returns>
    </member>
    <member name="P:System.IO.FileSystemWatcher.NotifyFilter">
      <summary>Gets or sets the type of changes to watch for.</summary>
      <returns>One of the <see cref="T:System.IO.NotifyFilters"></see> values. The default is the bitwise OR combination of LastWrite, FileName, and DirectoryName.</returns>
      <exception cref="T:System.ArgumentException">The value is not a valid bitwise OR combination of the <see cref="T:System.IO.NotifyFilters"></see> values.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value that is being set is not valid.</exception>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
      <summary>Raises the <see cref="E:System.IO.FileSystemWatcher.Changed"></see> event.</summary>
      <param name="e">A <see cref="T:System.IO.FileSystemEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
      <summary>Raises the <see cref="E:System.IO.FileSystemWatcher.Created"></see> event.</summary>
      <param name="e">A <see cref="T:System.IO.FileSystemEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
      <summary>Raises the <see cref="E:System.IO.FileSystemWatcher.Deleted"></see> event.</summary>
      <param name="e">A <see cref="T:System.IO.FileSystemEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
      <summary>Raises the <see cref="E:System.IO.FileSystemWatcher.Error"></see> event.</summary>
      <param name="e">An <see cref="T:System.IO.ErrorEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
      <summary>Raises the <see cref="E:System.IO.FileSystemWatcher.Renamed"></see> event.</summary>
      <param name="e">A <see cref="T:System.IO.RenamedEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="P:System.IO.FileSystemWatcher.Path">
      <summary>Gets or sets the path of the directory to watch.</summary>
      <returns>The path to monitor. The default is an empty string (&quot;&quot;).</returns>
      <exception cref="T:System.ArgumentException">The specified path does not exist or could not be found.   -or-   The specified path contains wildcard characters.   -or-   The specified path contains invalid path characters.</exception>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Renamed">
      <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"></see> is renamed.</summary>
      <returns></returns>
    </member>
    <member name="P:System.IO.FileSystemWatcher.Site">
      <summary>Gets or sets an <see cref="T:System.ComponentModel.ISite"></see> for the <see cref="T:System.IO.FileSystemWatcher"></see>.</summary>
      <returns>An <see cref="T:System.ComponentModel.ISite"></see> for the <see cref="T:System.IO.FileSystemWatcher"></see>.</returns>
    </member>
    <member name="P:System.IO.FileSystemWatcher.SynchronizingObject">
      <summary>Gets or sets the object used to marshal the event handler calls issued as a result of a directory change.</summary>
      <returns>The <see cref="T:System.ComponentModel.ISynchronizeInvoke"></see> that represents the object used to marshal the event handler calls issued as a result of a directory change. The default is null.</returns>
    </member>
    <member name="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
      <summary>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.</summary>
      <param name="changeType">The <see cref="T:System.IO.WatcherChangeTypes"></see> to watch for.</param>
      <returns>A <see cref="T:System.IO.WaitForChangedResult"></see> that contains specific information on the change that occurred.</returns>
    </member>
    <member name="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
      <summary>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</summary>
      <param name="changeType">The <see cref="T:System.IO.WatcherChangeTypes"></see> to watch for.</param>
      <param name="timeout">The time (in milliseconds) to wait before timing out.</param>
      <returns>A <see cref="T:System.IO.WaitForChangedResult"></see> that contains specific information on the change that occurred.</returns>
    </member>
    <member name="T:System.IO.InternalBufferOverflowException">
      <summary>The exception thrown when the internal buffer overflows.</summary>
    </member>
    <member name="M:System.IO.InternalBufferOverflowException.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:System.IO.InternalBufferOverflowException"></see> class.</summary>
    </member>
    <member name="M:System.IO.InternalBufferOverflowException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.InternalBufferOverflowException"></see> class with the error message to be displayed specified.</summary>
      <param name="message">The message to be given for the exception.</param>
    </member>
    <member name="M:System.IO.InternalBufferOverflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new, empty instance of the <see cref="T:System.IO.InternalBufferOverflowException"></see> class that is serializable using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> objects.</summary>
      <param name="info">The information required to serialize the T:System.IO.InternalBufferOverflowException object.</param>
      <param name="context">The source and destination of the serialized stream associated with the T:System.IO.InternalBufferOverflowException object.</param>
    </member>
    <member name="M:System.IO.InternalBufferOverflowException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.InternalBufferOverflowException"></see> class with the message to be displayed and the generated inner exception specified.</summary>
      <param name="message">The message to be given for the exception.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="T:System.IO.InvalidDataException">
      <summary>The exception that is thrown when a data stream is in an invalid format.</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.InvalidDataException"></see> class.</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.InvalidDataException"></see> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.InvalidDataException"></see> class with a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.IO.NotifyFilters">
      <summary>Specifies changes to watch for in a file or folder.</summary>
    </member>
    <member name="F:System.IO.NotifyFilters.Attributes">
      <summary>The attributes of the file or folder.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.NotifyFilters.CreationTime">
      <summary>The time the file or folder was created.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.NotifyFilters.DirectoryName">
      <summary>The name of the directory.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.NotifyFilters.FileName">
      <summary>The name of the file.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.NotifyFilters.LastAccess">
      <summary>The date the file or folder was last opened.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.NotifyFilters.LastWrite">
      <summary>The date the file or folder last had anything written to it.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.NotifyFilters.Security">
      <summary>The security settings of the file or folder.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.NotifyFilters.Size">
      <summary>The size of the file or folder.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.HttpListenerPrefixCollection">
      <summary>Represents the collection used to store Uniform Resource Identifier (URI) prefixes for <see cref="T:System.Net.HttpListener"></see> objects.</summary>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.Add(System.String)">
      <summary>Adds a Uniform Resource Identifier (URI) prefix to the collection.</summary>
      <param name="uriPrefix">A <see cref="T:System.String"></see> that identifies the URI information that is compared in incoming requests. The prefix must be terminated with a forward slash (&quot;/&quot;).</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="uriPrefix">uriPrefix</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="uriPrefix">uriPrefix</paramref> does not use the http:// or https:// scheme. These are the only schemes supported for <see cref="T:System.Net.HttpListener"></see> objects.   -or-  <paramref name="uriPrefix">uriPrefix</paramref> is not a correctly formatted URI prefix. Make sure the string is terminated with a &quot;/&quot;.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.HttpListener"></see> associated with this collection is closed.</exception>
      <exception cref="T:System.Net.HttpListenerException">A Windows function call failed. Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode"></see> property to determine the cause of the exception. This exception is thrown if another <see cref="T:System.Net.HttpListener"></see> has already added the prefix <paramref name="uriPrefix">uriPrefix</paramref>.</exception>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.Clear">
      <summary>Removes all the Uniform Resource Identifier (URI) prefixes from the collection.</summary>
      <exception cref="T:System.Net.HttpListenerException">A Windows function call failed. Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode"></see> property to determine the cause of the exception.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.HttpListener"></see> associated with this collection is closed.</exception>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.Contains(System.String)">
      <summary>Returns a <see cref="T:System.Boolean"></see> value that indicates whether the specified prefix is contained in the collection.</summary>
      <param name="uriPrefix">A <see cref="T:System.String"></see> that contains the Uniform Resource Identifier (URI) prefix to test.</param>
      <returns>true if this collection contains the prefix specified by <paramref name="uriPrefix">uriPrefix</paramref>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="uriPrefix">uriPrefix</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies the contents of an <see cref="T:System.Net.HttpListenerPrefixCollection"></see> to the specified array.</summary>
      <param name="array">The one dimensional <see cref="T:System.Array"></see> that receives the Uniform Resource Identifier (URI) prefix strings in this collection.</param>
      <param name="offset">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> has more than one dimension.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">This collection contains more elements than can be stored in <paramref name="array">array</paramref> starting at <paramref name="offset">offset</paramref>.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.HttpListener"></see> associated with this collection is closed.</exception>
      <exception cref="T:System.InvalidCastException"><paramref name="array">array</paramref> cannot store string values.</exception>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.CopyTo(System.String[],System.Int32)">
      <summary>Copies the contents of an <see cref="T:System.Net.HttpListenerPrefixCollection"></see> to the specified string array.</summary>
      <param name="array">The one dimensional string array that receives the Uniform Resource Identifier (URI) prefix strings in this collection.</param>
      <param name="offset">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> has more than one dimension.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">This collection contains more elements than can be stored in <paramref name="array">array</paramref> starting at <paramref name="offset">offset</paramref>.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.HttpListener"></see> associated with this collection is closed.</exception>
    </member>
    <member name="P:System.Net.HttpListenerPrefixCollection.Count">
      <summary>Gets the number of prefixes contained in the collection.</summary>
      <returns>An <see cref="T:System.Int32"></see> that contains the number of prefixes in this collection.</returns>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.GetEnumerator">
      <summary>Returns an object that can be used to iterate through the collection.</summary>
      <returns>An object that implements the <see cref="T:System.Collections.IEnumerator"></see> interface and provides access to the strings in this collection.</returns>
    </member>
    <member name="P:System.Net.HttpListenerPrefixCollection.IsReadOnly">
      <summary>Gets a value that indicates whether access to the collection is read-only.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="P:System.Net.HttpListenerPrefixCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized (thread-safe).</summary>
      <returns>This property always returns false.</returns>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.Remove(System.String)">
      <summary>Removes the specified Uniform Resource Identifier (URI) from the list of prefixes handled by the <see cref="T:System.Net.HttpListener"></see> object.</summary>
      <param name="uriPrefix">A <see cref="T:System.String"></see> that contains the URI prefix to remove.</param>
      <returns>true if the <paramref name="uriPrefix">uriPrefix</paramref> was found in the <see cref="T:System.Net.HttpListenerPrefixCollection"></see> and removed; otherwise false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="uriPrefix">uriPrefix</paramref> is null.</exception>
      <exception cref="T:System.Net.HttpListenerException">A Windows function call failed. To determine the cause of the exception, check the exception's error code.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.HttpListener"></see> associated with this collection is closed.</exception>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an object that can be used to iterate through the collection.</summary>
      <returns>An object that implements the <see cref="T:System.Collections.IEnumerator"></see> interface and provides access to the strings in this collection.</returns>
    </member>
    <member name="T:System.Net.HttpListenerRequest">
      <summary>Describes an incoming HTTP request to an <see cref="T:System.Net.HttpListener"></see> object. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Net.HttpListenerRequest.AcceptTypes">
      <summary>Gets the MIME types accepted by the client.</summary>
      <returns>A <see cref="T:System.String"></see> array that contains the type names specified in the request's Accept header or null if the client request did not include an Accept header.</returns>
    </member>
    <member name="M:System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request for the client's X.509 v.3 certificate.</summary>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the operation. This object is passed to the callback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that indicates the status of the operation.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ClientCertificateError">
      <summary>Gets an error code that identifies a problem with the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> provided by the client.</summary>
      <returns>An <see cref="T:System.Int32"></see> value that contains a Windows error code.</returns>
      <exception cref="T:System.InvalidOperationException">The client certificate has not been initialized yet by a call to the <see cref="M:System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)"></see> or <see cref="M:System.Net.HttpListenerRequest.GetClientCertificate"></see> methods   -or -   The operation is still in progress.</exception>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ContentEncoding">
      <summary>Gets the content encoding that can be used with data sent with the request</summary>
      <returns>An <see cref="T:System.Text.Encoding"></see> object suitable for use with the data in the <see cref="P:System.Net.HttpListenerRequest.InputStream"></see> property.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ContentLength64">
      <summary>Gets the length of the body data included in the request.</summary>
      <returns>The value from the request's Content-Length header. This value is -1 if the content length is not known.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ContentType">
      <summary>Gets the MIME type of the body data included in the request.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the text of the request's Content-Type header.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.Cookies">
      <summary>Gets the cookies sent with the request.</summary>
      <returns>A <see cref="T:System.Net.CookieCollection"></see> that contains cookies that accompany the request. This property returns an empty collection if the request does not contain cookies.</returns>
    </member>
    <member name="M:System.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)">
      <summary>Ends an asynchronous request for the client's X.509 v.3 certificate.</summary>
      <param name="asyncResult">The pending request for the certificate.</param>
      <returns>The <see cref="T:System.IAsyncResult"></see> object that is returned when the operation started.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not obtained by calling <see cref="M:System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)"></see><paramref name="e.">e.</paramref></exception>
      <exception cref="T:System.InvalidOperationException">This method was already called for the operation identified by <paramref name="asyncResult">asyncResult</paramref>.</exception>
    </member>
    <member name="M:System.Net.HttpListenerRequest.GetClientCertificate">
      <summary>Retrieves the client's X.509 v.3 certificate.</summary>
      <returns>A <see cref="System.Security.Cryptography.X509Certificates"></see> object that contains the client's X.509 v.3 certificate.</returns>
      <exception cref="T:System.InvalidOperationException">A call to this method to retrieve the client's X.509 v.3 certificate is in progress and therefore another call to this method cannot be made.</exception>
    </member>
    <member name="M:System.Net.HttpListenerRequest.GetClientCertificateAsync">
      <summary>Retrieves the client's X.509 v.3 certificate as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="System.Security.Cryptography.X509Certificates"></see> object that contains the client's X.509 v.3 certificate.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.HasEntityBody">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the request has associated body data.</summary>
      <returns>true if the request has associated body data; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.Headers">
      <summary>Gets the collection of header name/value pairs sent in the request.</summary>
      <returns>A <see cref="T:System.Net.WebHeaderCollection"></see> that contains the HTTP headers included in the request.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.HttpMethod">
      <summary>Gets the HTTP method specified by the client.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the method used in the request.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.InputStream">
      <summary>Gets a stream that contains the body data sent by the client.</summary>
      <returns>A readable <see cref="T:System.IO.Stream"></see> object that contains the bytes sent by the client in the body of the request. This property returns <see cref="F:System.IO.Stream.Null"></see> if no data is sent with the request.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.IsAuthenticated">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the client sending this request is authenticated.</summary>
      <returns>true if the client was authenticated; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.IsLocal">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the request is sent from the local computer.</summary>
      <returns>true if the request originated on the same computer as the <see cref="T:System.Net.HttpListener"></see> object that provided the request; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.IsSecureConnection">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the TCP connection used to send the request is using the Secure Sockets Layer (SSL) protocol.</summary>
      <returns>true if the TCP connection is using SSL; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.IsWebSocketRequest">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the TCP connection was  a WebSocket request.</summary>
      <returns>Returns <see cref="T:System.Boolean"></see>.  true if the TCP connection is a WebSocket request; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.KeepAlive">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the client requests a persistent connection.</summary>
      <returns>true if the connection should be kept open; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.LocalEndPoint">
      <summary>Get the server IP address and port number to which the request is directed.</summary>
      <returns>An <see cref="T:System.Net.IPEndPoint"></see> that represents the IP address that the request is sent to.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ProtocolVersion">
      <summary>Gets the HTTP version used by the requesting client.</summary>
      <returns>A <see cref="T:System.Version"></see> that identifies the client's version of HTTP.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.QueryString">
      <summary>Gets the query string included in the request.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection"></see> object that contains the query data included in the request <see cref="P:System.Net.HttpListenerRequest.Url"></see>.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.RawUrl">
      <summary>Gets the URL information (without the host and port) requested by the client.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the raw URL for this request.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.RemoteEndPoint">
      <summary>Gets the client IP address and port number from which the request originated.</summary>
      <returns>An <see cref="T:System.Net.IPEndPoint"></see> that represents the IP address and port number from which the request originated.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.RequestTraceIdentifier">
      <summary>Gets the request identifier of the incoming HTTP request.</summary>
      <returns>A <see cref="T:System.Guid"></see> object that contains the identifier of the HTTP request.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ServiceName">
      <summary>Gets the Service Provider Name (SPN) that the client sent on the request.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the SPN the client sent on the request.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.TransportContext">
      <summary>Gets the <see cref="T:System.Net.TransportContext"></see> for the client request.</summary>
      <returns>A <see cref="T:System.Net.TransportContext"></see> object for the client request.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.Url">
      <summary>Gets the <see cref="T:System.Uri"></see> object requested by the client.</summary>
      <returns>A <see cref="T:System.Uri"></see> object that identifies the resource requested by the client.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UrlReferrer">
      <summary>Gets the Uniform Resource Identifier (URI) of the resource that referred the client to the server.</summary>
      <returns>A <see cref="T:System.Uri"></see> object that contains the text of the request's <see cref="F:System.Net.HttpRequestHeader.Referer"></see> header, or null if the header was not included in the request.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UserAgent">
      <summary>Gets the user agent presented by the client.</summary>
      <returns>A <see cref="T:System.String"></see> object that contains the text of the request's User-Agent header.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UserHostAddress">
      <summary>Gets the server IP address and port number to which the request is directed.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the host address information.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UserHostName">
      <summary>Gets the DNS name and, if provided, the port number specified by the client.</summary>
      <returns>A <see cref="T:System.String"></see> value that contains the text of the request's Host header.</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UserLanguages">
      <summary>Gets the natural languages that are preferred for the response.</summary>
      <returns>A <see cref="T:System.String"></see> array that contains the languages specified in the request's <see cref="F:System.Net.HttpRequestHeader.AcceptLanguage"></see> header or null if the client request did not include an <see cref="F:System.Net.HttpRequestHeader.AcceptLanguage"></see> header.</returns>
    </member>
    <member name="T:System.Net.HttpListenerResponse">
      <summary>Represents a response to a request being handled by an <see cref="T:System.Net.HttpListener"></see> object.</summary>
    </member>
    <member name="M:System.Net.HttpListenerResponse.Abort">
      <summary>Closes the connection to the client without sending a response.</summary>
    </member>
    <member name="M:System.Net.HttpListenerResponse.AddHeader(System.String,System.String)">
      <summary>Adds the specified header and value to the HTTP headers for this response.</summary>
      <param name="name">The name of the HTTP header to set.</param>
      <param name="value">The value for the name header.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null or an empty string (&quot;&quot;).</exception>
      <exception cref="T:System.ArgumentException">You are not allowed to specify a value for the specified header.   -or-  <paramref name="name">name</paramref> or <paramref name="value">value</paramref> contains invalid characters.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="value">value</paramref> is greater than 65,535 characters.</exception>
    </member>
    <member name="M:System.Net.HttpListenerResponse.AppendCookie(System.Net.Cookie)">
      <summary>Adds the specified <see cref="T:System.Net.Cookie"></see> to the collection of cookies for this response.</summary>
      <param name="cookie">The <see cref="T:System.Net.Cookie"></see> to add to the collection to be sent with this response.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="cookie">cookie</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.HttpListenerResponse.AppendHeader(System.String,System.String)">
      <summary>Appends a value to the specified HTTP header to be sent with this response.</summary>
      <param name="name">The name of the HTTP header to append value to.</param>
      <param name="value">The value to append to the name header.</param>
      <exception cref="T:System.ArgumentException"><paramref name="name">name</paramref> is null or an empty string (&quot;&quot;).   -or-   You are not allowed to specify a value for the specified header.   -or-  <paramref name="name">name</paramref> or <paramref name="value">value</paramref> contains invalid characters.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="value">value</paramref> is greater than 65,535 characters.</exception>
    </member>
    <member name="M:System.Net.HttpListenerResponse.Close">
      <summary>Sends the response to the client and releases the resources held by this <see cref="T:System.Net.HttpListenerResponse"></see> instance.</summary>
    </member>
    <member name="M:System.Net.HttpListenerResponse.Close(System.Byte[],System.Boolean)">
      <summary>Returns the specified byte array to the client and releases the resources held by this <see cref="T:System.Net.HttpListenerResponse"></see> instance.</summary>
      <param name="responseEntity">A <see cref="T:System.Byte"></see> array that contains the response to send to the client.</param>
      <param name="willBlock">true to block execution while flushing the stream to the client; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="responseEntity">responseEntity</paramref> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.ContentEncoding">
      <summary>Gets or sets the <see cref="T:System.Text.Encoding"></see> for this response's <see cref="P:System.Net.HttpListenerResponse.OutputStream"></see>.</summary>
      <returns>An <see cref="T:System.Text.Encoding"></see> object suitable for use with the data in the <see cref="P:System.Net.HttpListenerResponse.OutputStream"></see> property, or null if no encoding is specified.</returns>
    </member>
    <member name="P:System.Net.HttpListenerResponse.ContentLength64">
      <summary>Gets or sets the number of bytes in the body data included in the response.</summary>
      <returns>The value of the response's Content-Length header.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">The response is already being sent.</exception>
      <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.ContentType">
      <summary>Gets or sets the MIME type of the content returned.</summary>
      <returns>A <see cref="T:System.String"></see> instance that contains the text of the response's Content-Type header.</returns>
      <exception cref="T:System.ArgumentNullException">The value specified for a set operation is null.</exception>
      <exception cref="T:System.ArgumentException">The value specified for a set operation is an empty string (&quot;&quot;).</exception>
      <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.Cookies">
      <summary>Gets or sets the collection of cookies returned with the response.</summary>
      <returns>A <see cref="T:System.Net.CookieCollection"></see> that contains cookies to accompany the response. The collection is empty if no cookies have been added to the response.</returns>
    </member>
    <member name="M:System.Net.HttpListenerResponse.CopyFrom(System.Net.HttpListenerResponse)">
      <summary>Copies properties from the specified <see cref="T:System.Net.HttpListenerResponse"></see> to this response.</summary>
      <param name="templateResponse">The <see cref="T:System.Net.HttpListenerResponse"></see> instance to copy.</param>
    </member>
    <member name="P:System.Net.HttpListenerResponse.Headers">
      <summary>Gets or sets the collection of header name/value pairs returned by the server.</summary>
      <returns>A <see cref="T:System.Net.WebHeaderCollection"></see> instance that contains all the explicitly set HTTP headers to be included in the response.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.WebHeaderCollection"></see> instance specified for a set operation is not valid for a response.</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.KeepAlive">
      <summary>Gets or sets a value indicating whether the server requests a persistent connection.</summary>
      <returns>true if the server requests a persistent connection; otherwise, false. The default is true.</returns>
      <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.OutputStream">
      <summary>Gets a <see cref="T:System.IO.Stream"></see> object to which a response can be written.</summary>
      <returns>A <see cref="T:System.IO.Stream"></see> object to which a response can be written.</returns>
      <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.ProtocolVersion">
      <summary>Gets or sets the HTTP version used for the response.</summary>
      <returns>A <see cref="T:System.Version"></see> object indicating the version of HTTP used when responding to the client. Note that this property is now obsolete.</returns>
      <exception cref="T:System.ArgumentNullException">The value specified for a set operation is null.</exception>
      <exception cref="T:System.ArgumentException">The value specified for a set operation does not have its <see cref="P:System.Version.Major"></see> property set to 1 or does not have its <see cref="P:System.Version.Minor"></see> property set to either 0 or 1.</exception>
      <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
    </member>
    <member name="M:System.Net.HttpListenerResponse.Redirect(System.String)">
      <summary>Configures the response to redirect the client to the specified URL.</summary>
      <param name="url">The URL that the client should use to locate the requested resource.</param>
    </member>
    <member name="P:System.Net.HttpListenerResponse.RedirectLocation">
      <summary>Gets or sets the value of the HTTP Location header in this response.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the absolute URL to be sent to the client in the Location header.</returns>
      <exception cref="T:System.ArgumentException">The value specified for a set operation is an empty string (&quot;&quot;).</exception>
      <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.SendChunked">
      <summary>Gets or sets whether the response uses chunked transfer encoding.</summary>
      <returns>true if the response is set to use chunked transfer encoding; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Net.HttpListenerResponse.SetCookie(System.Net.Cookie)">
      <summary>Adds or updates a <see cref="T:System.Net.Cookie"></see> in the collection of cookies sent with this response.</summary>
      <param name="cookie">A <see cref="T:System.Net.Cookie"></see> for this response.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="cookie">cookie</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The cookie already exists in the collection and could not be replaced.</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.StatusCode">
      <summary>Gets or sets the HTTP status code to be returned to the client.</summary>
      <returns>An <see cref="T:System.Int32"></see> value that specifies the HTTP status code for the requested resource. The default is <see cref="F:System.Net.HttpStatusCode.OK"></see>, indicating that the server successfully processed the client's request and included the requested resource in the response body.</returns>
      <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">The value specified for a set operation is not valid. Valid values are between 100 and 999 inclusive.</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.StatusDescription">
      <summary>Gets or sets a text description of the HTTP status code returned to the client.</summary>
      <returns>The text description of the HTTP status code returned to the client. The default is the RFC 2616 description for the <see cref="P:System.Net.HttpListenerResponse.StatusCode"></see> property value, or an empty string (&quot;&quot;) if an RFC 2616 description does not exist.</returns>
      <exception cref="T:System.ArgumentNullException">The value specified for a set operation is null.</exception>
      <exception cref="T:System.ArgumentException">The value specified for a set operation contains non-printable characters.</exception>
    </member>
    <member name="M:System.Net.HttpListenerResponse.System#IDisposable#Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Net.HttpListenerResponse"></see>.</summary>
    </member>
    <member name="T:System.Net.HttpListenerTimeoutManager">
      <summary>The timeout manager to use for an <see cref="T:System.Net.HttpListener"></see> object.</summary>
    </member>
    <member name="M:System.Net.HttpListenerTimeoutManager.#ctor">
      
    </member>
    <member name="P:System.Net.HttpListenerTimeoutManager.DrainEntityBody">
      <summary>Gets or sets the time, in seconds, allowed for the <see cref="T:System.Net.HttpListener"></see> to drain the entity body on a Keep-Alive connection.</summary>
      <returns>Returns <see cref="T:System.TimeSpan"></see>.   The time, in seconds, allowed for the <see cref="T:System.Net.HttpListener"></see> to drain the entity body on a Keep-Alive connection.</returns>
    </member>
    <member name="P:System.Net.HttpListenerTimeoutManager.EntityBody">
      <summary>Gets or sets the time, in seconds, allowed for the request entity body to arrive.</summary>
      <returns>Returns <see cref="T:System.TimeSpan"></see>.   The time, in seconds, allowed for the request entity body to arrive.</returns>
    </member>
    <member name="P:System.Net.HttpListenerTimeoutManager.HeaderWait">
      <summary>Gets or sets the time, in seconds, allowed for the <see cref="T:System.Net.HttpListener"></see> to parse the request header.</summary>
      <returns>Returns <see cref="T:System.TimeSpan"></see>.   The time, in seconds, allowed for the <see cref="T:System.Net.HttpListener"></see> to parse the request header.</returns>
    </member>
    <member name="P:System.Net.HttpListenerTimeoutManager.IdleConnection">
      <summary>Gets or sets the time, in seconds, allowed for an idle connection.</summary>
      <returns>Returns <see cref="T:System.TimeSpan"></see>.   The time, in seconds, allowed for an idle connection.</returns>
    </member>
    <member name="P:System.Net.HttpListenerTimeoutManager.MinSendBytesPerSecond">
      <summary>Gets or sets the minimum send rate, in bytes-per-second, for the response.</summary>
      <returns>Returns <see cref="T:System.Int64"></see>.   The minimum send rate, in bytes-per-second, for the response.</returns>
    </member>
    <member name="P:System.Net.HttpListenerTimeoutManager.RequestQueue">
      <summary>Gets or sets the time, in seconds, allowed for the request to remain in the request queue before the <see cref="T:System.Net.HttpListener"></see> picks it up.</summary>
      <returns>Returns <see cref="T:System.TimeSpan"></see>.   The time, in seconds, allowed for the request to remain in the request queue before the <see cref="T:System.Net.HttpListener"></see> picks it up.</returns>
    </member>
    <member name="T:System.Net.HttpRequestHeader">
      <summary>The HTTP headers that may be specified in a client request.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Accept">
      <summary>The Accept header, which specifies the MIME types that are acceptable for the response.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.AcceptCharset">
      <summary>The Accept-Charset header, which specifies the character sets that are acceptable for the response.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.AcceptEncoding">
      <summary>The Accept-Encoding header, which specifies the content encodings that are acceptable for the response.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.AcceptLanguage">
      <summary>The Accept-Langauge header, which specifies that natural languages that are preferred for the response.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Allow">
      <summary>The Allow header, which specifies the set of HTTP methods supported.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Authorization">
      <summary>The Authorization header, which specifies the credentials that the client presents in order to authenticate itself to the server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.CacheControl">
      <summary>The Cache-Control header, which specifies directives that must be obeyed by all cache control mechanisms along the request/response chain.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Connection">
      <summary>The Connection header, which specifies options that are desired for a particular connection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentEncoding">
      <summary>The Content-Encoding header, which specifies the encodings that have been applied to the accompanying body data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentLanguage">
      <summary>The Content-Langauge header, which specifies the natural language(s) of the accompanying body data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentLength">
      <summary>The Content-Length header, which specifies the length, in bytes, of the accompanying body data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentLocation">
      <summary>The Content-Location header, which specifies a URI from which the accompanying body may be obtained.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentMd5">
      <summary>The Content-MD5 header, which specifies the MD5 digest of the accompanying body data, for the purpose of providing an end-to-end message integrity check.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentRange">
      <summary>The Content-Range header, which specifies where in the full body the accompanying partial body data should be applied.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentType">
      <summary>The Content-Type header, which specifies the MIME type of the accompanying body data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Cookie">
      <summary>The Cookie header, which specifies cookie data presented to the server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Date">
      <summary>The Date header, which specifies the date and time at which the request originated.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Expect">
      <summary>The Expect header, which specifies particular server behaviors that are required by the client.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Expires">
      <summary>The Expires header, which specifies the date and time after which the accompanying body data should be considered stale.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.From">
      <summary>The From header, which specifies an Internet E-mail address for the human user who controls the requesting user agent.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Host">
      <summary>The Host header, which specifies the host name and port number of the resource being requested.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfMatch">
      <summary>The If-Match header, which specifies that the requested operation should be performed only if the client's cached copy of the indicated resource is current.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfModifiedSince">
      <summary>The If-Modified-Since header, which specifies that the requested operation should be performed only if the requested resource has been modified since the indicated data and time.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfNoneMatch">
      <summary>The If-None-Match header, which specifies that the requested operation should be performed only if none of client's cached copies of the indicated resources are current.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfRange">
      <summary>The If-Range header, which specifies that only the specified range of the requested resource should be sent, if the client's cached copy is current.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfUnmodifiedSince">
      <summary>The If-Unmodified-Since header, which specifies that the requested operation should be performed only if the requested resource has not been modified since the indicated date and time.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.KeepAlive">
      <summary>The Keep-Alive header, which specifies a parameter used into order to maintain a persistent connection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.LastModified">
      <summary>The Last-Modified header, which specifies the date and time at which the accompanying body data was last modified.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.MaxForwards">
      <summary>The Max-Forwards header, which specifies an integer indicating the remaining number of times that this request may be forwarded.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Pragma">
      <summary>The Pragma header, which specifies implementation-specific directives that might apply to any agent along the request/response chain.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ProxyAuthorization">
      <summary>The Proxy-Authorization header, which specifies the credentials that the client presents in order to authenticate itself to a proxy.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Range">
      <summary>The Range header, which specifies the the sub-range(s) of the response that the client requests be returned in lieu of the entire response.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Referer">
      <summary>The Referer header, which specifies the URI of the resource from which the request URI was obtained.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Te">
      <summary>The TE header, which specifies the transfer encodings that are acceptable for the response.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Trailer">
      <summary>The Trailer header, which specifies the header fields present in the trailer of a message encoded with chunked transfer-coding.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.TransferEncoding">
      <summary>The Transfer-Encoding header, which specifies what (if any) type of transformation that has been applied to the message body.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Translate">
      <summary>The Translate header, a Microsoft extension to the HTTP specification used in conjunction with WebDAV functionality.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Upgrade">
      <summary>The Upgrade header, which specifies additional communications protocols that the client supports.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.UserAgent">
      <summary>The User-Agent header, which specifies information about the client agent.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Via">
      <summary>The Via header, which specifies intermediate protocols to be used by gateway and proxy agents.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Warning">
      <summary>The Warning header, which specifies additional information about that status or transformation of a message that might not be reflected in the message.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.HttpResponseHeader">
      <summary>The HTTP headers that can be specified in a server response.</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.AcceptRanges">
      <summary>The Accept-Ranges header, which specifies the range that is accepted by the server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Age">
      <summary>The Age header, which specifies the time, in seconds, since the response was generated by the originating server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Allow">
      <summary>The Allow header, which specifies the set of HTTP methods that are supported.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.CacheControl">
      <summary>The Cache-Control header, which specifies caching directives that must be obeyed by all caching mechanisms along the request/response chain.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Connection">
      <summary>The Connection header, which specifies options that are desired for a particular connection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentEncoding">
      <summary>The Content-Encoding header, which specifies the encodings that have been applied to the accompanying body data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentLanguage">
      <summary>The Content-Langauge header, which specifies the natural language or languages of the accompanying body data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentLength">
      <summary>The Content-Length header, which specifies the length, in bytes, of the accompanying body data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentLocation">
      <summary>The Content-Location header, which specifies a URI from which the accompanying body can be obtained.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentMd5">
      <summary>The Content-MD5 header, which specifies the MD5 digest of the accompanying body data, for the purpose of providing an end-to-end message integrity check.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentRange">
      <summary>The Range header, which specifies the subrange or subranges of the response that the client requests be returned in lieu of the entire response.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentType">
      <summary>The Content-Type header, which specifies the MIME type of the accompanying body data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Date">
      <summary>The Date header, which specifies the date and time at which the response originated.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ETag">
      <summary>The Etag header, which specifies the current value for the requested variant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Expires">
      <summary>The Expires header, which specifies the date and time after which the accompanying body data should be considered stale.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.KeepAlive">
      <summary>The Keep-Alive header, which specifies a parameter to be used to maintain a persistent connection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.LastModified">
      <summary>The Last-Modified header, which specifies the date and time at which the accompanying body data was last modified.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Location">
      <summary>The Location header, which specifies a URI to which the client is redirected to obtain the requested resource.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Pragma">
      <summary>The Pragma header, which specifies implementation-specific directives that might apply to any agent along the request/response chain.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ProxyAuthenticate">
      <summary>The Proxy-Authenticate header, which specifies that the client must authenticate itself to a proxy.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.RetryAfter">
      <summary>The Retry-After header, which specifies a time (in seconds), or a date and time, after which the client can retry its request.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Server">
      <summary>The Server header, which specifies information about the originating server agent.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.SetCookie">
      <summary>The Set-Cookie header, which specifies cookie data that is presented to the client.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Trailer">
      <summary>The Trailer header, which specifies that the indicated header fields are present in the trailer of a message that is encoded with chunked transfer-coding.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.TransferEncoding">
      <summary>The Transfer-Encoding header, which specifies what (if any) type of transformation has been applied to the message body.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Upgrade">
      <summary>The Upgrade header, which specifies additional communications protocols that the client supports.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Vary">
      <summary>The Vary header, which specifies the request headers that are used to determine whether a cached response is fresh.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Via">
      <summary>The Via header, which specifies intermediate protocols to be used by gateway and proxy agents.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Warning">
      <summary>The Warning header, which specifies additional information about that status or transformation of a message that might not be reflected in the message.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpResponseHeader.WwwAuthenticate">
      <summary>The WWW-Authenticate header, which specifies that the client must authenticate itself to the server.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.HttpStatusCode">
      <summary>Contains the values of status codes defined for HTTP.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Accepted">
      <summary>Equivalent to HTTP status 202. <see cref="F:System.Net.HttpStatusCode.Accepted"></see> indicates that the request has been accepted for further processing.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.Ambiguous">
      <summary>Equivalent to HTTP status 300. <see cref="F:System.Net.HttpStatusCode.Ambiguous"></see> indicates that the requested information has multiple representations. The default action is to treat this status as a redirect and follow the contents of the Location header associated with this response.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.BadGateway">
      <summary>Equivalent to HTTP status 502. <see cref="F:System.Net.HttpStatusCode.BadGateway"></see> indicates that an intermediate proxy server received a bad response from another proxy or the origin server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.BadRequest">
      <summary>Equivalent to HTTP status 400. <see cref="F:System.Net.HttpStatusCode.BadRequest"></see> indicates that the request could not be understood by the server. <see cref="F:System.Net.HttpStatusCode.BadRequest"></see> is sent when no other error is applicable, or if the exact error is unknown or does not have its own error code.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.Conflict">
      <summary>Equivalent to HTTP status 409. <see cref="F:System.Net.HttpStatusCode.Conflict"></see> indicates that the request could not be carried out because of a conflict on the server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.Continue">
      <summary>Equivalent to HTTP status 100. <see cref="F:System.Net.HttpStatusCode.Continue"></see> indicates that the client can continue with its request.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.Created">
      <summary>Equivalent to HTTP status 201. <see cref="F:System.Net.HttpStatusCode.Created"></see> indicates that the request resulted in a new resource created before the response was sent.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.ExpectationFailed">
      <summary>Equivalent to HTTP status 417. <see cref="F:System.Net.HttpStatusCode.ExpectationFailed"></see> indicates that an expectation given in an Expect header could not be met by the server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.Forbidden">
      <summary>Equivalent to HTTP status 403. <see cref="F:System.Net.HttpStatusCode.Forbidden"></see> indicates that the server refuses to fulfill the request.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.Found">
      <summary>Equivalent to HTTP status 302. <see cref="F:System.Net.HttpStatusCode.Found"></see> indicates that the requested information is located at the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will use the GET method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.GatewayTimeout">
      <summary>Equivalent to HTTP status 504. <see cref="F:System.Net.HttpStatusCode.GatewayTimeout"></see> indicates that an intermediate proxy server timed out while waiting for a response from another proxy or the origin server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.Gone">
      <summary>Equivalent to HTTP status 410. <see cref="F:System.Net.HttpStatusCode.Gone"></see> indicates that the requested resource is no longer available.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.HttpVersionNotSupported">
      <summary>Equivalent to HTTP status 505. <see cref="F:System.Net.HttpStatusCode.HttpVersionNotSupported"></see> indicates that the requested HTTP version is not supported by the server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.InternalServerError">
      <summary>Equivalent to HTTP status 500. <see cref="F:System.Net.HttpStatusCode.InternalServerError"></see> indicates that a generic error has occurred on the server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.LengthRequired">
      <summary>Equivalent to HTTP status 411. <see cref="F:System.Net.HttpStatusCode.LengthRequired"></see> indicates that the required Content-length header is missing.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.MethodNotAllowed">
      <summary>Equivalent to HTTP status 405. <see cref="F:System.Net.HttpStatusCode.MethodNotAllowed"></see> indicates that the request method (POST or GET) is not allowed on the requested resource.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.Moved">
      <summary>Equivalent to HTTP status 301. <see cref="F:System.Net.HttpStatusCode.Moved"></see> indicates that the requested information has been moved to the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will use the GET method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.MovedPermanently">
      <summary>Equivalent to HTTP status 301. <see cref="F:System.Net.HttpStatusCode.MovedPermanently"></see> indicates that the requested information has been moved to the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.MultipleChoices">
      <summary>Equivalent to HTTP status 300. <see cref="F:System.Net.HttpStatusCode.MultipleChoices"></see> indicates that the requested information has multiple representations. The default action is to treat this status as a redirect and follow the contents of the Location header associated with this response.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.NoContent">
      <summary>Equivalent to HTTP status 204. <see cref="F:System.Net.HttpStatusCode.NoContent"></see> indicates that the request has been successfully processed and that the response is intentionally blank.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.NonAuthoritativeInformation">
      <summary>Equivalent to HTTP status 203. <see cref="F:System.Net.HttpStatusCode.NonAuthoritativeInformation"></see> indicates that the returned metainformation is from a cached copy instead of the origin server and therefore may be incorrect.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotAcceptable">
      <summary>Equivalent to HTTP status 406. <see cref="F:System.Net.HttpStatusCode.NotAcceptable"></see> indicates that the client has indicated with Accept headers that it will not accept any of the available representations of the resource.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotFound">
      <summary>Equivalent to HTTP status 404. <see cref="F:System.Net.HttpStatusCode.NotFound"></see> indicates that the requested resource does not exist on the server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotImplemented">
      <summary>Equivalent to HTTP status 501. <see cref="F:System.Net.HttpStatusCode.NotImplemented"></see> indicates that the server does not support the requested function.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotModified">
      <summary>Equivalent to HTTP status 304. <see cref="F:System.Net.HttpStatusCode.NotModified"></see> indicates that the client's cached copy is up to date. The contents of the resource are not transferred.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.OK">
      <summary>Equivalent to HTTP status 200. <see cref="F:System.Net.HttpStatusCode.OK"></see> indicates that the request succeeded and that the requested information is in the response. This is the most common status code to receive.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.PartialContent">
      <summary>Equivalent to HTTP status 206. <see cref="F:System.Net.HttpStatusCode.PartialContent"></see> indicates that the response is a partial response as requested by a GET request that includes a byte range.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.PaymentRequired">
      <summary>Equivalent to HTTP status 402. <see cref="F:System.Net.HttpStatusCode.PaymentRequired"></see> is reserved for future use.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.PreconditionFailed">
      <summary>Equivalent to HTTP status 412. <see cref="F:System.Net.HttpStatusCode.PreconditionFailed"></see> indicates that a condition set for this request failed, and the request cannot be carried out. Conditions are set with conditional request headers like If-Match, If-None-Match, or If-Unmodified-Since.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.ProxyAuthenticationRequired">
      <summary>Equivalent to HTTP status 407. <see cref="F:System.Net.HttpStatusCode.ProxyAuthenticationRequired"></see> indicates that the requested proxy requires authentication. The Proxy-authenticate header contains the details of how to perform the authentication.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.Redirect">
      <summary>Equivalent to HTTP status 302. <see cref="F:System.Net.HttpStatusCode.Redirect"></see> indicates that the requested information is located at the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will use the GET method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.RedirectKeepVerb">
      <summary>Equivalent to HTTP status 307. <see cref="F:System.Net.HttpStatusCode.RedirectKeepVerb"></see> indicates that the request information is located at the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will also use the POST method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.RedirectMethod">
      <summary>Equivalent to HTTP status 303. <see cref="F:System.Net.HttpStatusCode.RedirectMethod"></see> automatically redirects the client to the URI specified in the Location header as the result of a POST. The request to the resource specified by the Location header will be made with a GET.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestedRangeNotSatisfiable">
      <summary>Equivalent to HTTP status 416. <see cref="F:System.Net.HttpStatusCode.RequestedRangeNotSatisfiable"></see> indicates that the range of data requested from the resource cannot be returned, either because the beginning of the range is before the beginning of the resource, or the end of the range is after the end of the resource.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestEntityTooLarge">
      <summary>Equivalent to HTTP status 413. <see cref="F:System.Net.HttpStatusCode.RequestEntityTooLarge"></see> indicates that the request is too large for the server to process.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestTimeout">
      <summary>Equivalent to HTTP status 408. <see cref="F:System.Net.HttpStatusCode.RequestTimeout"></see> indicates that the client did not send a request within the time the server was expecting the request.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestUriTooLong">
      <summary>Equivalent to HTTP status 414. <see cref="F:System.Net.HttpStatusCode.RequestUriTooLong"></see> indicates that the URI is too long.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.ResetContent">
      <summary>Equivalent to HTTP status 205. <see cref="F:System.Net.HttpStatusCode.ResetContent"></see> indicates that the client should reset (not reload) the current resource.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.SeeOther">
      <summary>Equivalent to HTTP status 303. <see cref="F:System.Net.HttpStatusCode.SeeOther"></see> automatically redirects the client to the URI specified in the Location header as the result of a POST. The request to the resource specified by the Location header will be made with a GET.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.ServiceUnavailable">
      <summary>Equivalent to HTTP status 503. <see cref="F:System.Net.HttpStatusCode.ServiceUnavailable"></see> indicates that the server is temporarily unavailable, usually due to high load or maintenance.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.SwitchingProtocols">
      <summary>Equivalent to HTTP status 101. <see cref="F:System.Net.HttpStatusCode.SwitchingProtocols"></see> indicates that the protocol version or protocol is being changed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.TemporaryRedirect">
      <summary>Equivalent to HTTP status 307. <see cref="F:System.Net.HttpStatusCode.TemporaryRedirect"></see> indicates that the request information is located at the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will also use the POST method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.Unauthorized">
      <summary>Equivalent to HTTP status 401. <see cref="F:System.Net.HttpStatusCode.Unauthorized"></see> indicates that the requested resource requires authentication. The WWW-Authenticate header contains the details of how to perform the authentication.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.UnsupportedMediaType">
      <summary>Equivalent to HTTP status 415. <see cref="F:System.Net.HttpStatusCode.UnsupportedMediaType"></see> indicates that the request is an unsupported type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.Unused">
      <summary>Equivalent to HTTP status 306. <see cref="F:System.Net.HttpStatusCode.Unused"></see> is a proposed extension to the HTTP/1.1 specification that is not fully specified.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.UpgradeRequired">
      <summary>Equivalent to HTTP status 426. <see cref="F:System.Net.HttpStatusCode.UpgradeRequired"></see> indicates that the client should switch to a different protocol such as TLS/1.0.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpStatusCode.UseProxy">
      <summary>Equivalent to HTTP status 305. <see cref="F:System.Net.HttpStatusCode.UseProxy"></see> indicates that the request should use the proxy server at the URI specified in the Location header.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.HttpVersion">
      <summary>Defines the HTTP version numbers that are supported by the <see cref="T:System.Net.HttpWebRequest"></see> and <see cref="T:System.Net.HttpWebResponse"></see> classes.</summary>
    </member>
    <member name="M:System.Net.HttpVersion.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.HttpVersion"></see> class.</summary>
    </member>
    <member name="F:System.Net.HttpVersion.Version10">
      <summary>Defines a <see cref="T:System.Version"></see> instance for HTTP 1.0.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.HttpVersion.Version11">
      <summary>Defines a <see cref="T:System.Version"></see> instance for HTTP 1.1.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.HttpWebRequest">
      
    </member>
    <member name="M:System.Net.HttpWebRequest.#ctor">
      
    </member>
    <member name="M:System.Net.HttpWebRequest.#ctor(System.Uri)">
      <param name="uri"></param>
    </member>
    <member name="M:System.Net.HttpWebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="serializationInfo"></param>
      <param name="streamingContext"></param>
    </member>
    <member name="M:System.Net.HttpWebRequest.Abort">
      
    </member>
    <member name="P:System.Net.HttpWebRequest.Accept">
      <returns></returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.Int32)">
      <param name="range"></param>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.Int64)">
      <param name="range"></param>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.Int32,System.Int32)">
      <param name="from"></param>
      <param name="to"></param>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.Int64,System.Int64)">
      <param name="from"></param>
      <param name="to"></param>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int32)">
      <param name="rangeSpecifier"></param>
      <param name="range"></param>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int64)">
      <param name="rangeSpecifier"></param>
      <param name="range"></param>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int32,System.Int32)">
      <param name="rangeSpecifier"></param>
      <param name="from"></param>
      <param name="to"></param>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int64,System.Int64)">
      <param name="rangeSpecifier"></param>
      <param name="from"></param>
      <param name="to"></param>
    </member>
    <member name="P:System.Net.HttpWebRequest.Address">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.AllowAutoRedirect">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.AllowReadStreamBuffering">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.AutomaticDecompression">
      <returns></returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <param name="callback"></param>
      <param name="state"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <param name="callback"></param>
      <param name="state"></param>
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ClientCertificates">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Connection">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ConnectionGroupName">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContentLength">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContentType">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContinueDelegate">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContinueTimeout">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.CookieContainer">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Credentials">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Date">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.DefaultCachePolicy">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.DefaultMaximumErrorResponseLength">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength">
      <returns></returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult,System.Net.TransportContext@)">
      <param name="asyncResult"></param>
      <param name="context"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)">
      <param name="asyncResult"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)">
      <param name="asyncResult"></param>
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Expect">
      <returns></returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="serializationInfo"></param>
      <param name="streamingContext"></param>
    </member>
    <member name="M:System.Net.HttpWebRequest.GetRequestStream">
      <returns></returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.GetRequestStream(System.Net.TransportContext@)">
      <param name="context"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.GetResponse">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.HaveResponse">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Headers">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Host">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.IfModifiedSince">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.KeepAlive">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.MaximumAutomaticRedirections">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.MaximumResponseHeadersLength">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.MediaType">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Method">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Pipelined">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.PreAuthenticate">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ProtocolVersion">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Proxy">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ReadWriteTimeout">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Referer">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.RequestUri">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.SendChunked">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ServerCertificateValidationCallback">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ServicePoint">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.SupportsCookieContainer">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Timeout">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.TransferEncoding">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.UseDefaultCredentials">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.UserAgent">
      <returns></returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="serializationInfo"></param>
      <param name="streamingContext"></param>
    </member>
    <member name="T:System.Net.HttpWebResponse">
      
    </member>
    <member name="M:System.Net.HttpWebResponse.#ctor">
      
    </member>
    <member name="M:System.Net.HttpWebResponse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="serializationInfo"></param>
      <param name="streamingContext"></param>
    </member>
    <member name="P:System.Net.HttpWebResponse.CharacterSet">
      <returns></returns>
    </member>
    <member name="M:System.Net.HttpWebResponse.Close">
      
    </member>
    <member name="P:System.Net.HttpWebResponse.ContentEncoding">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.ContentLength">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.ContentType">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.Cookies">
      <returns></returns>
    </member>
    <member name="M:System.Net.HttpWebResponse.Dispose(System.Boolean)">
      <param name="disposing"></param>
    </member>
    <member name="M:System.Net.HttpWebResponse.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="serializationInfo"></param>
      <param name="streamingContext"></param>
    </member>
    <member name="M:System.Net.HttpWebResponse.GetResponseHeader(System.String)">
      <param name="headerName"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.HttpWebResponse.GetResponseStream">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.Headers">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.IsMutuallyAuthenticated">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.LastModified">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.Method">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.ProtocolVersion">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.ResponseUri">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.Server">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.StatusCode">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.StatusDescription">
      <returns></returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.SupportsHeaders">
      <returns></returns>
    </member>
    <member name="M:System.Net.HttpWebResponse.System#IDisposable#Dispose">
      
    </member>
    <member name="M:System.Net.HttpWebResponse.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="serializationInfo"></param>
      <param name="streamingContext"></param>
    </member>
    <member name="T:System.Net.IAuthenticationModule">
      <summary>Provides the base authentication interface for Web client authentication modules.</summary>
    </member>
    <member name="M:System.Net.IAuthenticationModule.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)">
      <summary>Returns an instance of the <see cref="T:System.Net.Authorization"></see> class in respose to an authentication challenge from a server.</summary>
      <param name="challenge">The authentication challenge sent by the server.</param>
      <param name="request">The <see cref="T:System.Net.WebRequest"></see> instance associated with the challenge.</param>
      <param name="credentials">The credentials associated with the challenge.</param>
      <returns>An <see cref="T:System.Net.Authorization"></see> instance containing the authorization message for the request, or null if the challenge cannot be handled.</returns>
    </member>
    <member name="P:System.Net.IAuthenticationModule.AuthenticationType">
      <summary>Gets the authentication type provided by this authentication module.</summary>
      <returns>A string indicating the authentication type provided by this authentication module.</returns>
    </member>
    <member name="P:System.Net.IAuthenticationModule.CanPreAuthenticate">
      <summary>Gets a value indicating whether the authentication module supports preauthentication.</summary>
      <returns>true if the authorization module supports preauthentication; otherwise false.</returns>
    </member>
    <member name="M:System.Net.IAuthenticationModule.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)">
      <summary>Returns an instance of the <see cref="T:System.Net.Authorization"></see> class for an authentication request to a server.</summary>
      <param name="request">The <see cref="T:System.Net.WebRequest"></see> instance associated with the authentication request.</param>
      <param name="credentials">The credentials associated with the authentication request.</param>
      <returns>An <see cref="T:System.Net.Authorization"></see> instance containing the authorization message for the request.</returns>
    </member>
    <member name="T:System.Net.ICredentialPolicy">
      <summary>Defines the credential policy to be used for resource requests that are made using <see cref="T:System.Net.WebRequest"></see> and its derived classes.</summary>
    </member>
    <member name="M:System.Net.ICredentialPolicy.ShouldSendCredential(System.Uri,System.Net.WebRequest,System.Net.NetworkCredential,System.Net.IAuthenticationModule)">
      <summary>Returns a <see cref="T:System.Boolean"></see> that indicates whether the client's credentials are sent with a resource request made using an instance of the <see cref="T:System.Net.WebRequest"></see> class.</summary>
      <param name="challengeUri">The <see cref="T:System.Uri"></see> that will receive the request.</param>
      <param name="request">The <see cref="T:System.Net.WebRequest"></see> that represents the resource being requested.</param>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> that will be sent with the request if this method returns true.</param>
      <param name="authenticationModule">The <see cref="T:System.Net.IAuthenticationModule"></see> that will conduct the authentication, if authentication is required.</param>
      <returns>true if the credentials are sent with the request; otherwise, false.</returns>
    </member>
    <member name="T:System.Net.ICredentials">
      <summary>Provides the base authentication interface for retrieving credentials for Web client authentication.</summary>
    </member>
    <member name="M:System.Net.ICredentials.GetCredential(System.Uri,System.String)">
      <summary>Returns a <see cref="T:System.Net.NetworkCredential"></see> object that is associated with the specified URI, and authentication type.</summary>
      <param name="uri">The <see cref="T:System.Uri"></see> that the client is providing authentication for.</param>
      <param name="authType">The type of authentication, as defined in the <see cref="P:System.Net.IAuthenticationModule.AuthenticationType"></see> property.</param>
      <returns>The <see cref="T:System.Net.NetworkCredential"></see> that is associated with the specified URI and authentication type, or, if no credentials are available, null.</returns>
    </member>
    <member name="T:System.Net.ICredentialsByHost">
      <summary>Provides the interface for retrieving credentials for a host, port, and authentication type.</summary>
    </member>
    <member name="M:System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)">
      <summary>Returns the credential for the specified host, port, and authentication protocol.</summary>
      <param name="host">The host computer that is authenticating the client.</param>
      <param name="port">The port on host that the client will communicate with.</param>
      <param name="authenticationType">The authentication protocol.</param>
      <returns>A <see cref="T:System.Net.NetworkCredential"></see> for the specified host, port, and authentication protocol, or null if there are no credentials available for the specified host, port, and authentication protocol.</returns>
    </member>
    <member name="T:System.Net.IPAddress">
      <summary>Provides an Internet Protocol (IP) address.</summary>
    </member>
    <member name="M:System.Net.IPAddress.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Net.IPAddress"></see> class with the address specified as a <see cref="T:System.Byte"></see> array.</summary>
      <param name="address">The byte array value of the IP address.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="address">address</paramref> contains a bad IP address.</exception>
    </member>
    <member name="M:System.Net.IPAddress.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.IPAddress"></see> class with the address specified as an <see cref="T:System.Int64"></see>.</summary>
      <param name="newAddress">The long value of the IP address. For example, the value 0x2414188f in big-endian format would be the IP address &quot;143.24.20.36&quot;.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="newAddress">newAddress</paramref> &lt; 0 or  <paramref name="newAddress">newAddress</paramref> &gt; 0x00000000FFFFFFFF</exception>
    </member>
    <member name="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.IPAddress"></see> class with the address specified as a <see cref="T:System.Byte"></see> array and the specified scope identifier.</summary>
      <param name="address">The byte array value of the IP address.</param>
      <param name="scopeid">The long value of the scope identifier.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="address">address</paramref> contains a bad IP address.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scopeid">scopeid</paramref> &lt; 0 or  <paramref name="scopeid">scopeid</paramref> &gt; 0x00000000FFFFFFFF</exception>
    </member>
    <member name="P:System.Net.IPAddress.Address">
      <summary>An Internet Protocol (IP) address.</summary>
      <returns>The long value of the IP address.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">The address family is <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"></see>.</exception>
    </member>
    <member name="P:System.Net.IPAddress.AddressFamily">
      <summary>Gets the address family of the IP address.</summary>
      <returns>Returns <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"></see> for IPv4 or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"></see> for IPv6.</returns>
    </member>
    <member name="F:System.Net.IPAddress.Any">
      <summary>Provides an IP address that indicates that the server must listen for client activity on all network interfaces. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.IPAddress.Broadcast">
      <summary>Provides the IP broadcast address. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Net.IPAddress.Equals(System.Object)">
      <summary>Compares two IP addresses.</summary>
      <param name="comparand">An <see cref="T:System.Net.IPAddress"></see> instance to compare to the current instance.</param>
      <returns>true if the two addresses are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.IPAddress.GetAddressBytes">
      <summary>Provides a copy of the <see cref="T:System.Net.IPAddress"></see> as an array of bytes.</summary>
      <returns>A <see cref="T:System.Byte"></see> array.</returns>
    </member>
    <member name="M:System.Net.IPAddress.GetHashCode">
      <summary>Returns a hash value for an IP address.</summary>
      <returns>An integer hash value.</returns>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
      <summary>Converts a short value from host byte order to network byte order.</summary>
      <param name="host">The number to convert, expressed in host byte order.</param>
      <returns>A short value, expressed in network byte order.</returns>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
      <summary>Converts an integer value from host byte order to network byte order.</summary>
      <param name="host">The number to convert, expressed in host byte order.</param>
      <returns>An integer value, expressed in network byte order.</returns>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
      <summary>Converts a long value from host byte order to network byte order.</summary>
      <param name="host">The number to convert, expressed in host byte order.</param>
      <returns>A long value, expressed in network byte order.</returns>
    </member>
    <member name="F:System.Net.IPAddress.IPv6Any">
      <summary>The <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)"></see> method uses the <see cref="F:System.Net.IPAddress.IPv6Any"></see> field to indicate that a <see cref="T:System.Net.Sockets.Socket"></see> must listen for client activity on all network interfaces.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.IPAddress.IPv6Loopback">
      <summary>Provides the IP loopback address. This property is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.IPAddress.IPv6None">
      <summary>Provides an IP address that indicates that no network interface should be used. This property is read-only.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
      <summary>Gets whether the IP address is an IPv4-mapped IPv6 address.</summary>
      <returns>Returns <see cref="T:System.Boolean"></see>.  true if the IP address is an IPv4-mapped IPv6 address; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6LinkLocal">
      <summary>Gets whether the address is an IPv6 link local address.</summary>
      <returns>true if the IP address is an IPv6 link local address; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6Multicast">
      <summary>Gets whether the address is an IPv6 multicast global address.</summary>
      <returns>true if the IP address is an IPv6 multicast global address; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6SiteLocal">
      <summary>Gets whether the address is an IPv6 site local address.</summary>
      <returns>true if the IP address is an IPv6 site local address; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6Teredo">
      <summary>Gets whether the address is an IPv6 Teredo address.</summary>
      <returns>true if the IP address is an IPv6 Teredo address; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
      <summary>Indicates whether the specified IP address is the loopback address.</summary>
      <param name="address">An IP address.</param>
      <returns>true if <paramref name="address">address</paramref> is the loopback address; otherwise, false.</returns>
    </member>
    <member name="F:System.Net.IPAddress.Loopback">
      <summary>Provides the IP loopback address. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Net.IPAddress.MapToIPv4">
      <summary>Maps the <see cref="T:System.Net.IPAddress"></see> object to an IPv4 address.</summary>
      <returns>Returns <see cref="T:System.Net.IPAddress"></see>.   An IPv4 address.</returns>
    </member>
    <member name="M:System.Net.IPAddress.MapToIPv6">
      <summary>Maps the <see cref="T:System.Net.IPAddress"></see> object to an IPv6 address.</summary>
      <returns>Returns <see cref="T:System.Net.IPAddress"></see>.   An IPv6 address.</returns>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
      <summary>Converts a short value from network byte order to host byte order.</summary>
      <param name="network">The number to convert, expressed in network byte order.</param>
      <returns>A short value, expressed in host byte order.</returns>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
      <summary>Converts an integer value from network byte order to host byte order.</summary>
      <param name="network">The number to convert, expressed in network byte order.</param>
      <returns>An integer value, expressed in host byte order.</returns>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
      <summary>Converts a long value from network byte order to host byte order.</summary>
      <param name="network">The number to convert, expressed in network byte order.</param>
      <returns>A long value, expressed in host byte order.</returns>
    </member>
    <member name="F:System.Net.IPAddress.None">
      <summary>Provides an IP address that indicates that no network interface should be used. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Net.IPAddress.Parse(System.String)">
      <summary>Converts an IP address string to an <see cref="T:System.Net.IPAddress"></see> instance.</summary>
      <param name="ipString">A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.</param>
      <returns>An <see cref="T:System.Net.IPAddress"></see> instance.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="ipString">ipString</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="ipString">ipString</paramref> is not a valid IP address.</exception>
    </member>
    <member name="P:System.Net.IPAddress.ScopeId">
      <summary>Gets or sets the IPv6 address scope identifier.</summary>
      <returns>A long integer that specifies the scope of the address.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">AddressFamily = InterNetwork.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scopeId">scopeId</paramref> &lt; 0   - or -  <paramref name="scopeId">scopeId</paramref> &gt; 0x00000000FFFFFFFF</exception>
    </member>
    <member name="M:System.Net.IPAddress.ToString">
      <summary>Converts an Internet address to its standard notation.</summary>
      <returns>A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">The address family is <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"></see> and the address is bad.</exception>
    </member>
    <member name="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
      <summary>Determines whether a string is a valid IP address.</summary>
      <param name="ipString">The string to validate.</param>
      <param name="address">The <see cref="T:System.Net.IPAddress"></see> version of the string.</param>
      <returns>true if <paramref name="ipString">ipString</paramref> was able to be parsed as an IP address; otherwise, false.</returns>
    </member>
    <member name="T:System.Net.IPEndPoint">
      <summary>Represents a network endpoint as an IP address and a port number.</summary>
    </member>
    <member name="M:System.Net.IPEndPoint.#ctor(System.Int64,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.IPEndPoint"></see> class with the specified address and port number.</summary>
      <param name="address">The IP address of the Internet host.</param>
      <param name="port">The port number associated with the address, or 0 to specify any available port. port is in host order.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port">port</paramref> is less than <see cref="F:System.Net.IPEndPoint.MinPort"></see>.   -or-  <paramref name="port">port</paramref> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort"></see>.   -or-  <paramref name="address">address</paramref> is less than 0 or greater than 0x00000000FFFFFFFF.</exception>
    </member>
    <member name="M:System.Net.IPEndPoint.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.IPEndPoint"></see> class with the specified address and port number.</summary>
      <param name="address">An <see cref="T:System.Net.IPAddress"></see>.</param>
      <param name="port">The port number associated with the address, or 0 to specify any available port. port is in host order.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port">port</paramref> is less than <see cref="F:System.Net.IPEndPoint.MinPort"></see>.   -or-  <paramref name="port">port</paramref> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort"></see>.   -or-  <paramref name="address">address</paramref> is less than 0 or greater than 0x00000000FFFFFFFF.</exception>
    </member>
    <member name="P:System.Net.IPEndPoint.Address">
      <summary>Gets or sets the IP address of the endpoint.</summary>
      <returns>An <see cref="T:System.Net.IPAddress"></see> instance containing the IP address of the endpoint.</returns>
    </member>
    <member name="P:System.Net.IPEndPoint.AddressFamily">
      <summary>Gets the Internet Protocol (IP) address family.</summary>
      <returns>Returns <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"></see>.</returns>
    </member>
    <member name="M:System.Net.IPEndPoint.Create(System.Net.SocketAddress)">
      <summary>Creates an endpoint from a socket address.</summary>
      <param name="socketAddress">The <see cref="T:System.Net.SocketAddress"></see> to use for the endpoint.</param>
      <returns>An <see cref="T:System.Net.EndPoint"></see> instance using the specified socket address.</returns>
      <exception cref="T:System.ArgumentException">The AddressFamily of <paramref name="socketAddress">socketAddress</paramref> is not equal to the AddressFamily of the current instance.   -or-  <paramref name="socketAddress">socketAddress</paramref>.Size &lt; 8.</exception>
    </member>
    <member name="M:System.Net.IPEndPoint.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.</summary>
      <param name="comparand">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
      <returns>true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.IPEndPoint.GetHashCode">
      <summary>Returns a hash value for a <see cref="T:System.Net.IPEndPoint"></see> instance.</summary>
      <returns>An integer hash value.</returns>
    </member>
    <member name="F:System.Net.IPEndPoint.MaxPort">
      <summary>Specifies the maximum value that can be assigned to the <see cref="P:System.Net.IPEndPoint.Port"></see> property. The MaxPort value is set to 0x0000FFFF. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.IPEndPoint.MinPort">
      <summary>Specifies the minimum value that can be assigned to the <see cref="P:System.Net.IPEndPoint.Port"></see> property. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Net.IPEndPoint.Port">
      <summary>Gets or sets the port number of the endpoint.</summary>
      <returns>An integer value in the range <see cref="F:System.Net.IPEndPoint.MinPort"></see> to <see cref="F:System.Net.IPEndPoint.MaxPort"></see> indicating the port number of the endpoint.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value that was specified for a set operation is less than <see cref="F:System.Net.IPEndPoint.MinPort"></see> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort"></see>.</exception>
    </member>
    <member name="M:System.Net.IPEndPoint.Serialize">
      <summary>Serializes endpoint information into a <see cref="T:System.Net.SocketAddress"></see> instance.</summary>
      <returns>A <see cref="T:System.Net.SocketAddress"></see> instance containing the socket address for the endpoint.</returns>
    </member>
    <member name="M:System.Net.IPEndPoint.ToString">
      <summary>Returns the IP address and port number of the specified endpoint.</summary>
      <returns>A string containing the IP address and the port number of the specified endpoint (for example, 192.168.1.2:80).</returns>
    </member>
    <member name="T:System.Net.IPHostEntry">
      <summary>Provides a container class for Internet host address information.</summary>
    </member>
    <member name="M:System.Net.IPHostEntry.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.IPHostEntry"></see> class.</summary>
    </member>
    <member name="P:System.Net.IPHostEntry.AddressList">
      <summary>Gets or sets a list of IP addresses that are associated with a host.</summary>
      <returns>An array of type <see cref="T:System.Net.IPAddress"></see> that contains IP addresses that resolve to the host names that are contained in the <see cref="P:System.Net.IPHostEntry.Aliases"></see> property.</returns>
    </member>
    <member name="P:System.Net.IPHostEntry.Aliases">
      <summary>Gets or sets a list of aliases that are associated with a host.</summary>
      <returns>An array of strings that contain DNS names that resolve to the IP addresses in the <see cref="P:System.Net.IPHostEntry.AddressList"></see> property.</returns>
    </member>
    <member name="P:System.Net.IPHostEntry.HostName">
      <summary>Gets or sets the DNS name of the host.</summary>
      <returns>A string that contains the primary host name for the server.</returns>
    </member>
    <member name="T:System.Net.IWebProxy">
      <summary>Provides the base interface for implementation of proxy access for the <see cref="T:System.Net.WebRequest"></see> class.</summary>
    </member>
    <member name="P:System.Net.IWebProxy.Credentials">
      <summary>The credentials to submit to the proxy server for authentication.</summary>
      <returns>An <see cref="T:System.Net.ICredentials"></see> instance that contains the credentials that are needed to authenticate a request to the proxy server.</returns>
    </member>
    <member name="M:System.Net.IWebProxy.GetProxy(System.Uri)">
      <summary>Returns the URI of a proxy.</summary>
      <param name="destination">A <see cref="T:System.Uri"></see> that specifies the requested Internet resource.</param>
      <returns>A <see cref="T:System.Uri"></see> instance that contains the URI of the proxy used to contact <paramref name="destination">destination</paramref>.</returns>
    </member>
    <member name="M:System.Net.IWebProxy.IsBypassed(System.Uri)">
      <summary>Indicates that the proxy should not be used for the specified host.</summary>
      <param name="host">The <see cref="T:System.Uri"></see> of the host to check for proxy use.</param>
      <returns>true if the proxy server should not be used for <paramref name="host">host</paramref>; otherwise, false.</returns>
    </member>
    <member name="T:System.Net.IWebProxyScript">
      <summary>Provides the base interface to load and execute scripts for automatic proxy detection.</summary>
    </member>
    <member name="M:System.Net.IWebProxyScript.Close">
      <summary>Closes a script.</summary>
    </member>
    <member name="M:System.Net.IWebProxyScript.Load(System.Uri,System.String,System.Type)">
      <summary>Loads a script.</summary>
      <param name="scriptLocation">Internal only.</param>
      <param name="script">Internal only.</param>
      <param name="helperType">Internal only.</param>
      <returns>A <see cref="T:System.Boolean"></see> indicating whether the script was successfully loaded.</returns>
    </member>
    <member name="M:System.Net.IWebProxyScript.Run(System.String,System.String)">
      <summary>Runs a script.</summary>
      <param name="url">Internal only.</param>
      <param name="host">Internal only.</param>
      <returns>A <see cref="T:System.String"></see>.   An internal-only value returned.</returns>
    </member>
    <member name="T:System.Net.IWebRequestCreate">
      <summary>Provides the base interface for creating <see cref="T:System.Net.WebRequest"></see> instances.</summary>
    </member>
    <member name="M:System.Net.IWebRequestCreate.Create(System.Uri)">
      <summary>Creates a <see cref="T:System.Net.WebRequest"></see> instance.</summary>
      <param name="uri">The uniform resource identifier (URI) of the Web resource.</param>
      <returns>A <see cref="T:System.Net.WebRequest"></see> instance.</returns>
      <exception cref="T:System.NotSupportedException">The request scheme specified in <paramref name="uri">uri</paramref> is not supported by this <see cref="T:System.Net.IWebRequestCreate"></see> instance.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="uri">uri</paramref> is null.</exception>
      <exception cref="T:System.UriFormatException">  
 In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.FormatException"></see>, instead.  

 The URI specified in <paramref name="uri">uri</paramref> is not a valid URI.</exception>
    </member>
    <member name="T:System.Net.Mail.AlternateView">
      <summary>Represents the format to view an email message.</summary>
    </member>
    <member name="M:System.Net.Mail.AlternateView.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of <see cref="T:System.Net.Mail.AlternateView"></see> with the specified <see cref="T:System.IO.Stream"></see>.</summary>
      <param name="contentStream">A stream that contains the content for this view.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="contentStream">contentStream</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Net.Mail.AlternateView"></see> with the specified file name.</summary>
      <param name="fileName">The name of the file that contains the content for this alternate view.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="fileName">fileName</paramref> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred, such as a disk error.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The access requested is not permitted by the operating system for the specified file handle, such as when access is Write or ReadWrite and the file handle is set for read-only access.</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.#ctor(System.IO.Stream,System.Net.Mime.ContentType)">
      <summary>Initializes a new instance of <see cref="T:System.Net.Mail.AlternateView"></see> with the specified <see cref="T:System.IO.Stream"></see> and <see cref="T:System.Net.Mime.ContentType"></see>.</summary>
      <param name="contentStream">A stream that contains the content for this attachment.</param>
      <param name="contentType">The type of the content.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="contentStream">contentStream</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="contentType">contentType</paramref> is not a valid value.</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.#ctor(System.IO.Stream,System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Net.Mail.AlternateView"></see> with the specified <see cref="T:System.IO.Stream"></see> and media type.</summary>
      <param name="contentStream">A stream that contains the content for this attachment.</param>
      <param name="mediaType">The MIME media type of the content.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="contentStream">contentStream</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="mediaType">mediaType</paramref> is not a valid value.</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.#ctor(System.String,System.Net.Mime.ContentType)">
      <summary>Initializes a new instance of <see cref="T:System.Net.Mail.AlternateView"></see> with the specified file name and content type.</summary>
      <param name="fileName">The name of the file that contains the content for this alternate view.</param>
      <param name="contentType">The type of the content.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="fileName">fileName</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="contentType">contentType</paramref> is not a valid value.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred, such as a disk error.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The access requested is not permitted by the operating system for the specified file handle, such as when access is Write or ReadWrite and the file handle is set for read-only access.</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Net.Mail.AlternateView"></see> with the specified file name and media type.</summary>
      <param name="fileName">The name of the file that contains the content for this alternate view.</param>
      <param name="mediaType">The MIME media type of the content.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="fileName">fileName</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="mediaType">mediaType</paramref> is not a valid value.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred, such as a disk error.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The access requested is not permitted by the operating system for the specified file handle, such as when access is Write or ReadWrite and the file handle is set for read-only access.</exception>
    </member>
    <member name="P:System.Net.Mail.AlternateView.BaseUri">
      <summary>Gets or sets the base URI to use for resolving relative URIs in the <see cref="T:System.Net.Mail.AlternateView"></see>.</summary>
      <returns>A <see cref="T:System.Uri"></see>.   The base <see cref="T:System.Uri"></see>.</returns>
    </member>
    <member name="M:System.Net.Mail.AlternateView.CreateAlternateViewFromString(System.String)">
      <summary>Creates a <see cref="T:System.Net.Mail.AlternateView"></see> of an email message using the content specified in a <see cref="T:System.String"></see>.</summary>
      <param name="content">The <see cref="T:System.String"></see> that contains the content of the email message.</param>
      <returns>An <see cref="T:System.Net.Mail.AlternateView"></see> object that represents an alternate view of an email message.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="content">content</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.CreateAlternateViewFromString(System.String,System.Net.Mime.ContentType)">
      <summary>Creates an <see cref="T:System.Net.Mail.AlternateView"></see> of an email message using the content specified in a <see cref="T:System.String"></see> and the specified MIME media type of the content.</summary>
      <param name="content">A <see cref="T:System.String"></see> that contains the content for this attachment.</param>
      <param name="contentType">A <see cref="T:System.Net.Mime.ContentType"></see> that describes the data in string.</param>
      <returns>An <see cref="T:System.Net.Mail.AlternateView"></see> object that represents an alternate view of an email message.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="content">content</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.CreateAlternateViewFromString(System.String,System.Text.Encoding,System.String)">
      <summary>Creates an <see cref="T:System.Net.Mail.AlternateView"></see> of an email message using the content specified in a <see cref="T:System.String"></see>, the specified text encoding, and MIME media type of the content.</summary>
      <param name="content">A <see cref="T:System.String"></see> that contains the content for this attachment.</param>
      <param name="contentEncoding"></param>
      <param name="mediaType">The MIME media type of the content.</param>
      <returns>An <see cref="T:System.Net.Mail.AlternateView"></see> object that represents an alternate view of an email message.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="content">content</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Mail.AlternateView"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Net.Mail.AlternateView.LinkedResources">
      <summary>Gets the set of embedded resources referred to by this attachment.</summary>
      <returns>A <see cref="T:System.Net.Mail.LinkedResourceCollection"></see> object that stores the collection of linked resources to be sent as part of an e-mail message.</returns>
    </member>
    <member name="T:System.Net.Mail.AlternateViewCollection">
      <summary>Represents a collection of <see cref="T:System.Net.Mail.AlternateView"></see> objects.</summary>
    </member>
    <member name="M:System.Net.Mail.AlternateViewCollection.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Net.Mail.AlternateViewCollection"></see>.</summary>
    </member>
    <member name="T:System.Net.Mail.Attachment">
      <summary>Represents an attachment to an e-mail.</summary>
    </member>
    <member name="M:System.Net.Mail.Attachment.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.Attachment"></see> class with the specified content string.</summary>
      <param name="fileName">A <see cref="T:System.String"></see> that contains a file path to use to create this attachment.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="fileName">fileName</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="fileName">fileName</paramref> is empty.</exception>
    </member>
    <member name="M:System.Net.Mail.Attachment.#ctor(System.IO.Stream,System.Net.Mime.ContentType)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.Attachment"></see> class with the specified stream and content type.</summary>
      <param name="contentStream">A readable <see cref="T:System.IO.Stream"></see> that contains the content for this attachment.</param>
      <param name="contentType">A <see cref="T:System.Net.Mime.ContentType"></see> that describes the data in stream.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="contentType">contentType</paramref> is null.   -or-  <paramref name="contentStream">contentStream</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Mail.Attachment.#ctor(System.IO.Stream,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.Attachment"></see> class with the specified stream and name.</summary>
      <param name="contentStream">A readable <see cref="T:System.IO.Stream"></see> that contains the content for this attachment.</param>
      <param name="name">A <see cref="T:System.String"></see> that contains the value for the <see cref="P:System.Net.Mime.ContentType.Name"></see> property of the <see cref="T:System.Net.Mime.ContentType"></see> associated with this attachment. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="contentStream">contentStream</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Mail.Attachment.#ctor(System.String,System.Net.Mime.ContentType)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.Attachment"></see> class with the specified content string and <see cref="T:System.Net.Mime.ContentType"></see>.</summary>
      <param name="fileName">A <see cref="T:System.String"></see> that contains a file path to use to create this attachment.</param>
      <param name="contentType">A <see cref="T:System.Net.Mime.ContentType"></see> that describes the data in string.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="fileName">fileName</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="mediaType">mediaType</paramref> is not in the correct format.</exception>
    </member>
    <member name="M:System.Net.Mail.Attachment.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.Attachment"></see> class with the specified content string and MIME type information.</summary>
      <param name="fileName">A <see cref="T:System.String"></see> that contains the content for this attachment.</param>
      <param name="mediaType">A <see cref="T:System.String"></see> that contains the MIME Content-Header information for this attachment. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="fileName">fileName</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="mediaType">mediaType</paramref> is not in the correct format.</exception>
    </member>
    <member name="M:System.Net.Mail.Attachment.#ctor(System.IO.Stream,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.Attachment"></see> class with the specified stream, name, and MIME type information.</summary>
      <param name="contentStream">A readable <see cref="T:System.IO.Stream"></see> that contains the content for this attachment.</param>
      <param name="name">A <see cref="T:System.String"></see> that contains the value for the <see cref="P:System.Net.Mime.ContentType.Name"></see> property of the <see cref="T:System.Net.Mime.ContentType"></see> associated with this attachment. This value can be null.</param>
      <param name="mediaType">A <see cref="T:System.String"></see> that contains the MIME Content-Header information for this attachment. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="mediaType">mediaType</paramref> is not in the correct format.</exception>
    </member>
    <member name="P:System.Net.Mail.Attachment.ContentDisposition">
      <summary>Gets the MIME content disposition for this attachment.</summary>
      <returns>A <see cref="T:System.Net.Mime.ContentDisposition"></see> that provides the presentation information for this attachment.</returns>
    </member>
    <member name="M:System.Net.Mail.Attachment.CreateAttachmentFromString(System.String,System.Net.Mime.ContentType)">
      <summary>Creates a mail attachment using the content from the specified string, and the specified <see cref="T:System.Net.Mime.ContentType"></see>.</summary>
      <param name="content">A <see cref="T:System.String"></see> that contains the content for this attachment.</param>
      <param name="contentType">A <see cref="T:System.Net.Mime.ContentType"></see> object that represents the Multipurpose Internet Mail Exchange (MIME) protocol Content-Type header to be used.</param>
      <returns>An object of type <see cref="T:System.Net.Mail.Attachment"></see>.</returns>
    </member>
    <member name="M:System.Net.Mail.Attachment.CreateAttachmentFromString(System.String,System.String)">
      <summary>Creates a mail attachment using the content from the specified string, and the specified MIME content type name.</summary>
      <param name="content">A <see cref="T:System.String"></see> that contains the content for this attachment.</param>
      <param name="name">The MIME content type name value in the content type associated with this attachment.</param>
      <returns>An object of type <see cref="T:System.Net.Mail.Attachment"></see>.</returns>
    </member>
    <member name="M:System.Net.Mail.Attachment.CreateAttachmentFromString(System.String,System.String,System.Text.Encoding,System.String)">
      <summary>Creates a mail attachment using the content from the specified string, the specified MIME content type name, character encoding, and MIME header information for the attachment.</summary>
      <param name="content">A <see cref="T:System.String"></see> that contains the content for this attachment.</param>
      <param name="name">The MIME content type name value in the content type associated with this attachment.</param>
      <param name="contentEncoding">An <see cref="T:System.Text.Encoding"></see>. This value can be null.</param>
      <param name="mediaType">A <see cref="T:System.String"></see> that contains the MIME Content-Header information for this attachment. This value can be null.</param>
      <returns>An object of type <see cref="T:System.Net.Mail.Attachment"></see>.</returns>
    </member>
    <member name="P:System.Net.Mail.Attachment.Name">
      <summary>Gets or sets the MIME content type name value in the content type associated with this attachment.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the value for the content type <paramref name="name">name</paramref> represented by the <see cref="P:System.Net.Mime.ContentType.Name"></see> property.</returns>
      <exception cref="T:System.ArgumentNullException">The value specified for a set operation is null.</exception>
      <exception cref="T:System.ArgumentException">The value specified for a set operation is <see cref="F:System.String.Empty"></see> (&quot;&quot;).</exception>
    </member>
    <member name="P:System.Net.Mail.Attachment.NameEncoding">
      <summary>Specifies the encoding for the <see cref="T:System.Net.Mail.Attachment"></see><see cref="P:System.Net.Mail.Attachment.Name"></see>.</summary>
      <returns>An <see cref="T:System.Text.Encoding"></see> value that specifies the type of name encoding. The default value is determined from the name of the attachment.</returns>
    </member>
    <member name="T:System.Net.Mail.AttachmentBase">
      <summary>Base class that represents an email attachment. Classes <see cref="T:System.Net.Mail.Attachment"></see>, <see cref="T:System.Net.Mail.AlternateView"></see>, and <see cref="T:System.Net.Mail.LinkedResource"></see> derive from this class.</summary>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.#ctor(System.IO.Stream)">
      <summary>Instantiates an <see cref="T:System.Net.Mail.AttachmentBase"></see> with the specified <see cref="T:System.IO.Stream"></see>.</summary>
      <param name="contentStream">A stream containing the content for this attachment.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="contentStream">contentStream</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.#ctor(System.String)">
      <summary>Instantiates an <see cref="T:System.Net.Mail.AttachmentBase"></see> with the specified file name.</summary>
      <param name="fileName">The file name holding the content for this attachment.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="fileName">fileName</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.#ctor(System.IO.Stream,System.Net.Mime.ContentType)">
      <summary>Instantiates an <see cref="T:System.Net.Mail.AttachmentBase"></see> with the specified <see cref="T:System.IO.Stream"></see> and <see cref="T:System.Net.Mime.ContentType"></see>.</summary>
      <param name="contentStream">A stream containing the content for this attachment.</param>
      <param name="contentType">The type of the content.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="contentStream">contentStream</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="contentType">contentType</paramref> is not a valid value.</exception>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.#ctor(System.IO.Stream,System.String)">
      <summary>Instantiates an <see cref="T:System.Net.Mail.AttachmentBase"></see> with the specified <see cref="T:System.IO.Stream"></see> and media type.</summary>
      <param name="contentStream">A stream containing the content for this attachment.</param>
      <param name="mediaType">The MIME media type of the content.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="contentStream">contentStream</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="mediaType">mediaType</paramref> is not a valid value.</exception>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.#ctor(System.String,System.Net.Mime.ContentType)">
      <summary>Instantiates an <see cref="T:System.Net.Mail.AttachmentBase"></see> with the specified file name and content type.</summary>
      <param name="fileName">The file name holding the content for this attachment.</param>
      <param name="contentType">The type of the content.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="fileName">fileName</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="contentType">contentType</paramref> is not a valid value.</exception>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.#ctor(System.String,System.String)">
      <summary>Instantiates an <see cref="T:System.Net.Mail.AttachmentBase"></see> with the specified file name and media type.</summary>
      <param name="fileName">The file name holding the content for this attachment.</param>
      <param name="mediaType">The MIME media type of the content.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="fileName">fileName</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="mediaType">mediaType</paramref> is not a valid value.</exception>
    </member>
    <member name="P:System.Net.Mail.AttachmentBase.ContentId">
      <summary>Gets or sets the MIME content ID for this attachment.</summary>
      <returns>A <see cref="T:System.String"></see> holding the content ID.</returns>
      <exception cref="T:System.ArgumentNullException">Attempted to set <see cref="P:System.Net.Mail.AttachmentBase.ContentId"></see> to null.</exception>
    </member>
    <member name="P:System.Net.Mail.AttachmentBase.ContentStream">
      <summary>Gets the content stream of this attachment.</summary>
      <returns>A <see cref="T:System.IO.Stream"></see>.   The content stream of this attachment.</returns>
    </member>
    <member name="P:System.Net.Mail.AttachmentBase.ContentType">
      <summary>Gets the content type of this attachment.</summary>
      <returns>A <see cref="T:System.Net.Mime.ContentType"></see>.   The content type for this attachment.</returns>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.Dispose">
      <summary>Releases the resources used by the <see cref="T:System.Net.Mail.AttachmentBase"></see>.</summary>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Mail.AttachmentBase"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Net.Mail.AttachmentBase.TransferEncoding">
      <summary>Gets or sets the encoding of this attachment.</summary>
      <returns>A <see cref="T:System.Net.Mime.TransferEncoding"></see>.   The encoding for this attachment.</returns>
    </member>
    <member name="T:System.Net.Mail.AttachmentCollection">
      <summary>Stores attachments to be sent as part of an e-mail message.</summary>
    </member>
    <member name="M:System.Net.Mail.AttachmentCollection.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Net.Mail.AttachmentCollection"></see>.</summary>
    </member>
    <member name="T:System.Net.Mail.DeliveryNotificationOptions">
      <summary>Describes the delivery notification options for e-mail.</summary>
    </member>
    <member name="F:System.Net.Mail.DeliveryNotificationOptions.Delay">
      <summary>Notify if the delivery is delayed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.DeliveryNotificationOptions.Never">
      <summary>A notification should not be generated under any circumstances.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.DeliveryNotificationOptions.None">
      <summary>No notification information will be sent. The mail server will utilize its configured behavior to determine whether it should generate a delivery notification.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.DeliveryNotificationOptions.OnFailure">
      <summary>Notify if the delivery is unsuccessful.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.DeliveryNotificationOptions.OnSuccess">
      <summary>Notify if the delivery is successful.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Mail.LinkedResource">
      <summary>Represents an embedded external resource in an email attachment, such as an image in an HTML attachment.</summary>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of <see cref="T:System.Net.Mail.LinkedResource"></see> using the supplied <see cref="T:System.IO.Stream"></see>.</summary>
      <param name="contentStream">A stream that contains the content for this embedded resource.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="contentStream">contentStream</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Net.Mail.LinkedResource"></see> using the specified file name.</summary>
      <param name="fileName">The file name holding the content for this embedded resource.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="fileName">fileName</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.#ctor(System.IO.Stream,System.Net.Mime.ContentType)">
      <summary>Initializes a new instance of <see cref="T:System.Net.Mail.LinkedResource"></see> with the values supplied by <see cref="T:System.IO.Stream"></see> and <see cref="T:System.Net.Mime.ContentType"></see>.</summary>
      <param name="contentStream">A stream that contains the content for this embedded resource.</param>
      <param name="contentType">The type of the content.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="contentStream">contentStream</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="contentType">contentType</paramref> is not a valid value.</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.#ctor(System.IO.Stream,System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Net.Mail.LinkedResource"></see> with the specified <see cref="T:System.IO.Stream"></see> and media type.</summary>
      <param name="contentStream">A stream that contains the content for this embedded resource.</param>
      <param name="mediaType">The MIME media type of the content.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="contentStream">contentStream</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="mediaType">mediaType</paramref> is not a valid value.</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.#ctor(System.String,System.Net.Mime.ContentType)">
      <summary>Initializes a new instance of <see cref="T:System.Net.Mail.LinkedResource"></see> with the specified file name and content type.</summary>
      <param name="fileName">The file name that holds the content for this embedded resource.</param>
      <param name="contentType">The type of the content.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="fileName">fileName</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="contentType">contentType</paramref> is not a valid value.</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Net.Mail.LinkedResource"></see> with the specified file name and media type.</summary>
      <param name="fileName">The file name that holds the content for this embedded resource.</param>
      <param name="mediaType">The MIME media type of the content.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="fileName">fileName</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="mediaType">mediaType</paramref> is not a valid value.</exception>
    </member>
    <member name="P:System.Net.Mail.LinkedResource.ContentLink">
      <summary>Gets or sets a URI that the resource must match.</summary>
      <returns>If <see cref="P:System.Net.Mail.LinkedResource.ContentLink"></see> is a relative URI, the recipient of the message must resolve it.</returns>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.CreateLinkedResourceFromString(System.String)">
      <summary>Creates a <see cref="T:System.Net.Mail.LinkedResource"></see> object from a string to be included in an email attachment as an embedded resource. The default media type is plain text, and the default content type is ASCII.</summary>
      <param name="content">A string that contains the embedded resource to be included in the email attachment.</param>
      <returns>A <see cref="T:System.Net.Mail.LinkedResource"></see> object that contains the embedded resource to be included in the email attachment.</returns>
      <exception cref="T:System.ArgumentNullException">The specified content string is null.</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.CreateLinkedResourceFromString(System.String,System.Net.Mime.ContentType)">
      <summary>Creates a <see cref="T:System.Net.Mail.LinkedResource"></see> object from a string to be included in an email attachment as an embedded resource, with the specified content type, and media type as plain text.</summary>
      <param name="content">A string that contains the embedded resource to be included in the email attachment.</param>
      <param name="contentType">The type of the content.</param>
      <returns>A <see cref="T:System.Net.Mail.LinkedResource"></see> object that contains the embedded resource to be included in the email attachment.</returns>
      <exception cref="T:System.ArgumentNullException">The specified content string is null.</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.CreateLinkedResourceFromString(System.String,System.Text.Encoding,System.String)">
      <summary>Creates a <see cref="T:System.Net.Mail.LinkedResource"></see> object from a string to be included in an email attachment as an embedded resource, with the specified content type, and media type.</summary>
      <param name="content">A string that contains the embedded resource to be included in the email attachment.</param>
      <param name="contentEncoding">The type of the content.</param>
      <param name="mediaType">The MIME media type of the content.</param>
      <returns>A <see cref="T:System.Net.Mail.LinkedResource"></see> object that contains the embedded resource to be included in the email attachment.</returns>
      <exception cref="T:System.ArgumentNullException">The specified content string is null.</exception>
    </member>
    <member name="T:System.Net.Mail.LinkedResourceCollection">
      <summary>Stores linked resources to be sent as part of an e-mail message.</summary>
    </member>
    <member name="M:System.Net.Mail.LinkedResourceCollection.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Net.Mail.LinkedResourceCollection"></see>.</summary>
    </member>
    <member name="T:System.Net.Mail.MailAddress">
      <summary>Represents the address of an electronic mail sender or recipient.</summary>
    </member>
    <member name="M:System.Net.Mail.MailAddress.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.MailAddress"></see> class using the specified address.</summary>
      <param name="address">A <see cref="T:System.String"></see> that contains an e-mail address.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="address">address</paramref> is <see cref="F:System.String.Empty"></see> (&quot;&quot;).</exception>
      <exception cref="T:System.FormatException"><paramref name="address">address</paramref> is not in a recognized format.</exception>
    </member>
    <member name="M:System.Net.Mail.MailAddress.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.MailAddress"></see> class using the specified address and display name.</summary>
      <param name="address">A <see cref="T:System.String"></see> that contains an e-mail address.</param>
      <param name="displayName">A <see cref="T:System.String"></see> that contains the display name associated with address. This parameter can be null.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="address">address</paramref> is <see cref="F:System.String.Empty"></see> (&quot;&quot;).</exception>
      <exception cref="T:System.FormatException"><paramref name="address">address</paramref> is not in a recognized format.   -or-  <paramref name="address">address</paramref> contains non-ASCII characters.</exception>
    </member>
    <member name="M:System.Net.Mail.MailAddress.#ctor(System.String,System.String,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.MailAddress"></see> class using the specified address, display name, and encoding.</summary>
      <param name="address">A <see cref="T:System.String"></see> that contains an e-mail address.</param>
      <param name="displayName">A <see cref="T:System.String"></see> that contains the display name associated with address.</param>
      <param name="displayNameEncoding">The <see cref="T:System.Text.Encoding"></see> that defines the character set used for displayName.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.   -or-  <paramref name="displayName">displayName</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="address">address</paramref> is <see cref="F:System.String.Empty"></see> (&quot;&quot;).   -or-  <paramref name="displayName">displayName</paramref> is <see cref="F:System.String.Empty"></see> (&quot;&quot;).</exception>
      <exception cref="T:System.FormatException"><paramref name="address">address</paramref> is not in a recognized format.   -or-  <paramref name="address">address</paramref> contains non-ASCII characters.</exception>
    </member>
    <member name="P:System.Net.Mail.MailAddress.Address">
      <summary>Gets the e-mail address specified when this instance was created.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the e-mail address.</returns>
    </member>
    <member name="P:System.Net.Mail.MailAddress.DisplayName">
      <summary>Gets the display name composed from the display name and address information specified when this instance was created.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the display name; otherwise, <see cref="F:System.String.Empty"></see> (&quot;&quot;) if no display name information was specified when this instance was created.</returns>
    </member>
    <member name="M:System.Net.Mail.MailAddress.Equals(System.Object)">
      <summary>Compares two mail addresses.</summary>
      <param name="value"></param>
      <returns>true if the two mail addresses are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Mail.MailAddress.GetHashCode">
      <summary>Returns a hash value for a mail address.</summary>
      <returns>An integer hash value.</returns>
    </member>
    <member name="P:System.Net.Mail.MailAddress.Host">
      <summary>Gets the host portion of the address specified when this instance was created.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the name of the host computer that accepts e-mail for the <see cref="P:System.Net.Mail.MailAddress.User"></see> property.</returns>
    </member>
    <member name="M:System.Net.Mail.MailAddress.ToString">
      <summary>Returns a string representation of this instance.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the contents of this <see cref="T:System.Net.Mail.MailAddress"></see>.</returns>
    </member>
    <member name="P:System.Net.Mail.MailAddress.User">
      <summary>Gets the user information from the address specified when this instance was created.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the user name portion of the <see cref="P:System.Net.Mail.MailAddress.Address"></see>.</returns>
    </member>
    <member name="T:System.Net.Mail.MailAddressCollection">
      <summary>Store e-mail addresses that are associated with an e-mail message.</summary>
    </member>
    <member name="M:System.Net.Mail.MailAddressCollection.#ctor">
      <summary>Initializes an empty instance of the <see cref="T:System.Net.Mail.MailAddressCollection"></see> class.</summary>
    </member>
    <member name="M:System.Net.Mail.MailAddressCollection.Add(System.String)">
      <summary>Add a list of e-mail addresses to the collection.</summary>
      <param name="addresses">The e-mail addresses to add to the <see cref="T:System.Net.Mail.MailAddressCollection"></see>. Multiple e-mail addresses must be separated with a comma character (&quot;,&quot;).</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="addresses">addresses</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="addresses">addresses</paramref> parameter is an empty string.</exception>
      <exception cref="T:System.FormatException">The <paramref name="addresses">addresses</paramref> parameter contains an e-mail address that is invalid or not supported.</exception>
    </member>
    <member name="M:System.Net.Mail.MailAddressCollection.InsertItem(System.Int32,System.Net.Mail.MailAddress)">
      <summary>Inserts an e-mail address into the <see cref="T:System.Net.Mail.MailAddressCollection"></see>, at the specified location.</summary>
      <param name="index">The location at which to insert the e-mail address that is specified by item.</param>
      <param name="item">The e-mail address to be inserted into the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item">item</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Net.Mail.MailAddressCollection.SetItem(System.Int32,System.Net.Mail.MailAddress)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The index of the e-mail address element to be replaced.</param>
      <param name="item">An e-mail address that will replace the element in the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item">item</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Net.Mail.MailAddressCollection.ToString">
      <summary>Returns a string representation of the e-mail addresses in this <see cref="T:System.Net.Mail.MailAddressCollection"></see> object.</summary>
      <returns>A <see cref="T:System.String"></see> containing the e-mail addresses in this collection.</returns>
    </member>
    <member name="T:System.Net.Mail.MailMessage">
      <summary>Represents an e-mail message that can be sent using the <see cref="T:System.Net.Mail.SmtpClient"></see> class.</summary>
    </member>
    <member name="M:System.Net.Mail.MailMessage.#ctor">
      <summary>Initializes an empty instance of the <see cref="T:System.Net.Mail.MailMessage"></see> class.</summary>
    </member>
    <member name="M:System.Net.Mail.MailMessage.#ctor(System.Net.Mail.MailAddress,System.Net.Mail.MailAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.MailMessage"></see> class by using the specified <see cref="T:System.Net.Mail.MailAddress"></see> class objects.</summary>
      <param name="from">A <see cref="T:System.Net.Mail.MailAddress"></see> that contains the address of the sender of the e-mail message.</param>
      <param name="to">A <see cref="T:System.Net.Mail.MailAddress"></see> that contains the address of the recipient of the e-mail message.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="from">from</paramref> is null.   -or-  <paramref name="to">to</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="from">from</paramref> or <paramref name="to">to</paramref> is malformed.</exception>
    </member>
    <member name="M:System.Net.Mail.MailMessage.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.MailMessage"></see> class by using the specified <see cref="T:System.String"></see> class objects.</summary>
      <param name="from">A <see cref="T:System.String"></see> that contains the address of the sender of the e-mail message.</param>
      <param name="to">A <see cref="T:System.String"></see> that contains the addresses of the recipients of the e-mail message.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="from">from</paramref> is null.   -or-  <paramref name="to">to</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="from">from</paramref> is <see cref="F:System.String.Empty"></see> (&quot;&quot;).   -or-  <paramref name="to">to</paramref> is <see cref="F:System.String.Empty"></see> (&quot;&quot;).</exception>
      <exception cref="T:System.FormatException"><paramref name="from">from</paramref> or <paramref name="to">to</paramref> is malformed.</exception>
    </member>
    <member name="M:System.Net.Mail.MailMessage.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.MailMessage"></see> class.</summary>
      <param name="from">A <see cref="T:System.String"></see> that contains the address of the sender of the e-mail message.</param>
      <param name="to">A <see cref="T:System.String"></see> that contains the address of the recipient of the e-mail message.</param>
      <param name="subject">A <see cref="T:System.String"></see> that contains the subject text.</param>
      <param name="body">A <see cref="T:System.String"></see> that contains the message body.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="from">from</paramref> is null.   -or-  <paramref name="to">to</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="from">from</paramref> is <see cref="F:System.String.Empty"></see> (&quot;&quot;).   -or-  <paramref name="to">to</paramref> is <see cref="F:System.String.Empty"></see> (&quot;&quot;).</exception>
      <exception cref="T:System.FormatException"><paramref name="from">from</paramref> or <paramref name="to">to</paramref> is malformed.</exception>
    </member>
    <member name="P:System.Net.Mail.MailMessage.AlternateViews">
      <summary>Gets the attachment collection used to store alternate forms of the message body.</summary>
      <returns>A writable <see cref="T:System.Net.Mail.AlternateViewCollection"></see>.</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Attachments">
      <summary>Gets the attachment collection used to store data attached to this e-mail message.</summary>
      <returns>A writable <see cref="T:System.Net.Mail.AttachmentCollection"></see>.</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Bcc">
      <summary>Gets the address collection that contains the blind carbon copy (BCC) recipients for this e-mail message.</summary>
      <returns>A writable <see cref="T:System.Net.Mail.MailAddressCollection"></see> object.</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Body">
      <summary>Gets or sets the message body.</summary>
      <returns>A <see cref="T:System.String"></see> value that contains the body text.</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.BodyEncoding">
      <summary>Gets or sets the encoding used to encode the message body.</summary>
      <returns>An <see cref="T:System.Text.Encoding"></see> applied to the contents of the <see cref="P:System.Net.Mail.MailMessage.Body"></see>.</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.BodyTransferEncoding">
      <summary>Gets or sets the transfer encoding used to encode the message body.</summary>
      <returns>Returns <see cref="T:System.Net.Mime.TransferEncoding"></see>.   A <see cref="T:System.Net.Mime.TransferEncoding"></see> applied to the contents of the <see cref="P:System.Net.Mail.MailMessage.Body"></see>.</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.CC">
      <summary>Gets the address collection that contains the carbon copy (CC) recipients for this e-mail message.</summary>
      <returns>A writable <see cref="T:System.Net.Mail.MailAddressCollection"></see> object.</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.DeliveryNotificationOptions">
      <summary>Gets or sets the delivery notifications for this e-mail message.</summary>
      <returns>A <see cref="T:System.Net.Mail.DeliveryNotificationOptions"></see> value that contains the delivery notifications for this message.</returns>
    </member>
    <member name="M:System.Net.Mail.MailMessage.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Mail.MailMessage"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.Mail.MailMessage.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Net.Mail.MailMessage"></see>.</summary>
    </member>
    <member name="P:System.Net.Mail.MailMessage.From">
      <summary>Gets or sets the from address for this e-mail message.</summary>
      <returns>A <see cref="T:System.Net.Mail.MailAddress"></see> that contains the from address information.</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Headers">
      <summary>Gets the e-mail headers that are transmitted with this e-mail message.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection"></see> that contains the e-mail headers.</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.HeadersEncoding">
      <summary>Gets or sets the encoding used for the user-defined custom headers for this e-mail message.</summary>
      <returns>The encoding used for user-defined custom headers for this e-mail message.</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.IsBodyHtml">
      <summary>Gets or sets a value indicating whether the mail message body is in Html.</summary>
      <returns>true if the message body is in Html; else false. The default is false.</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Priority">
      <summary>Gets or sets the priority of this e-mail message.</summary>
      <returns>A <see cref="T:System.Net.Mail.MailPriority"></see> that contains the priority of this message.</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.ReplyTo">
      <summary>Gets or sets the ReplyTo address for the mail message.</summary>
      <returns>A MailAddress that indicates the value of the <see cref="P:System.Net.Mail.MailMessage.ReplyTo"></see> field.</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.ReplyToList">
      <summary>Gets or sets the list of addresses to reply to for the mail message.</summary>
      <returns>The list of the addresses to reply to for the mail message.</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Sender">
      <summary>Gets or sets the sender's address for this e-mail message.</summary>
      <returns>A <see cref="T:System.Net.Mail.MailAddress"></see> that contains the sender's address information.</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Subject">
      <summary>Gets or sets the subject line for this e-mail message.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the subject content.</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.SubjectEncoding">
      <summary>Gets or sets the encoding used for the subject content for this e-mail message.</summary>
      <returns>An <see cref="T:System.Text.Encoding"></see> that was used to encode the <see cref="P:System.Net.Mail.MailMessage.Subject"></see> property.</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.To">
      <summary>Gets the address collection that contains the recipients of this e-mail message.</summary>
      <returns>A writable <see cref="T:System.Net.Mail.MailAddressCollection"></see> object.</returns>
    </member>
    <member name="T:System.Net.Mail.MailPriority">
      <summary>Specifies the priority of a <see cref="T:System.Net.Mail.MailMessage"></see>.</summary>
    </member>
    <member name="F:System.Net.Mail.MailPriority.High">
      <summary>The email has high priority.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.MailPriority.Low">
      <summary>The email has low priority.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.MailPriority.Normal">
      <summary>The email has normal priority.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Mail.SendCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Net.Mail.SmtpClient.SendCompleted"></see> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"></see> containing event data.</param>
    </member>
    <member name="T:System.Net.Mail.SmtpAccess">
      <summary>Specifies the level of access allowed to a Simple Mail Transport Protocol (SMTP) server.</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpAccess.Connect">
      <summary>Connection to an SMTP host on the default port (port 25).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpAccess.ConnectToUnrestrictedPort">
      <summary>Connection to an SMTP host on any port.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpAccess.None">
      <summary>No access to an SMTP host.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Mail.SmtpClient">
      <summary>Allows applications to send e-mail by using the Simple Mail Transfer Protocol (SMTP).</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpClient"></see> class by using configuration file settings.</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpClient"></see> class that sends e-mail by using the specified SMTP server.</summary>
      <param name="host">A <see cref="T:System.String"></see> that contains the name or IP address of the host computer used for SMTP transactions.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpClient"></see> class that sends e-mail by using the specified SMTP server and port.</summary>
      <param name="host">A <see cref="T:System.String"></see> that contains the name or IP address of the host used for SMTP transactions.</param>
      <param name="port">An <see cref="T:System.Int32"></see> greater than zero that contains the port to be used on host.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port">port</paramref> cannot be less than zero.</exception>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.ClientCertificates">
      <summary>Specify which certificates should be used to establish the Secure Sockets Layer (SSL) connection.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>, holding one or more client certificates. The default value is derived from the mail configuration attributes in a configuration file.</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.Credentials">
      <summary>Gets or sets the credentials used to authenticate the sender.</summary>
      <returns>An <see cref="T:System.Net.ICredentialsByHost"></see> that represents the credentials to use for authentication; or null if no credentials have been specified.</returns>
      <exception cref="T:System.InvalidOperationException">You cannot change the value of this property when an email is being sent.</exception>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.DeliveryFormat">
      <summary>Gets or sets the delivery format used by <see cref="T:System.Net.Mail.SmtpClient"></see> to send e-mail.</summary>
      <returns>Returns <see cref="T:System.Net.Mail.SmtpDeliveryFormat"></see>.   The delivery format used by <see cref="T:System.Net.Mail.SmtpClient"></see>.</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.DeliveryMethod">
      <summary>Specifies how outgoing email messages will be handled.</summary>
      <returns>An <see cref="T:System.Net.Mail.SmtpDeliveryMethod"></see> that indicates how email messages are delivered.</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.Dispose">
      <summary>Sends a QUIT message to the SMTP server, gracefully ends the TCP connection, and releases all resources used by the current instance of the <see cref="T:System.Net.Mail.SmtpClient"></see> class.</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.Dispose(System.Boolean)">
      <summary>Sends a QUIT message to the SMTP server, gracefully ends the TCP connection, releases all resources used by the current instance of the <see cref="T:System.Net.Mail.SmtpClient"></see> class, and optionally disposes of the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.EnableSsl">
      <summary>Specify whether the <see cref="T:System.Net.Mail.SmtpClient"></see> uses Secure Sockets Layer (SSL) to encrypt the connection.</summary>
      <returns>true if the <see cref="T:System.Net.Mail.SmtpClient"></see> uses SSL; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.Host">
      <summary>Gets or sets the name or IP address of the host used for SMTP transactions.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the name or IP address of the computer to use for SMTP transactions.</returns>
      <exception cref="T:System.ArgumentNullException">The value specified for a set operation is null.</exception>
      <exception cref="T:System.ArgumentException">The value specified for a set operation is equal to <see cref="F:System.String.Empty"></see> (&quot;&quot;).</exception>
      <exception cref="T:System.InvalidOperationException">You cannot change the value of this property when an email is being sent.</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.Mail.SmtpClient.SendCompleted"></see> event.</summary>
      <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"></see> that contains event data.</param>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.PickupDirectoryLocation">
      <summary>Gets or sets the folder where applications save mail messages to be processed by the local SMTP server.</summary>
      <returns>A <see cref="T:System.String"></see> that specifies the pickup directory for mail messages.</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.Port">
      <summary>Gets or sets the port used for SMTP transactions.</summary>
      <returns>An <see cref="T:System.Int32"></see> that contains the port number on the SMTP host. The default value is 25.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than or equal to zero.</exception>
      <exception cref="T:System.InvalidOperationException">You cannot change the value of this property when an email is being sent.</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.Send(System.Net.Mail.MailMessage)">
      <summary>Sends the specified message to an SMTP server for delivery.</summary>
      <param name="message">A <see cref="T:System.Net.Mail.MailMessage"></see> that contains the message to send.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="message">message</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Net.Mail.SmtpClient"></see> has a <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync"></see> call in progress.   -or-  <see cref="P:System.Net.Mail.MailMessage.From"></see> is null.   -or-   There are no recipients specified in <see cref="P:System.Net.Mail.MailMessage.To"></see>, <see cref="P:System.Net.Mail.MailMessage.CC"></see>, and <see cref="P:System.Net.Mail.MailMessage.Bcc"></see> properties.   -or-  <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod"></see> property is set to <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network"></see> and <see cref="P:System.Net.Mail.SmtpClient.Host"></see> is null.   -or-  <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod"></see> property is set to <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network"></see> and <see cref="P:System.Net.Mail.SmtpClient.Host"></see> is equal to the empty string (&quot;&quot;).   -or-  <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod"></see> property is set to <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network"></see> and <see cref="P:System.Net.Mail.SmtpClient.Port"></see> is zero, a negative number, or greater than 65,535.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
      <exception cref="T:System.Net.Mail.SmtpException">The connection to the SMTP server failed.   -or-   Authentication failed.   -or-   The operation timed out.   -or-  <see cref="P:System.Net.Mail.SmtpClient.EnableSsl"></see> is set to true but the <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod"></see> property is set to <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory"></see> or <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis"></see>.   -or-  <see cref="P:System.Net.Mail.SmtpClient.EnableSsl"></see> is set to true, but the SMTP mail server did not advertise STARTTLS in the response to the EHLO command.</exception>
      <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">The <paramref name="message">message</paramref> could not be delivered to one or more of the recipients in <see cref="P:System.Net.Mail.MailMessage.To"></see>, <see cref="P:System.Net.Mail.MailMessage.CC"></see>, or <see cref="P:System.Net.Mail.MailMessage.Bcc"></see>.</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.Send(System.String,System.String,System.String,System.String)">
      <summary>Sends the specified e-mail message to an SMTP server for delivery. The message sender, recipients, subject, and message body are specified using <see cref="T:System.String"></see> objects.</summary>
      <param name="from">A <see cref="T:System.String"></see> that contains the address information of the message sender.</param>
      <param name="recipients"></param>
      <param name="subject">A <see cref="T:System.String"></see> that contains the subject line for the message.</param>
      <param name="body">A <see cref="T:System.String"></see> that contains the message body.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="from">from</paramref> is null.   -or-  <paramref name="recipients">recipients</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="from">from</paramref> is <see cref="F:System.String.Empty"></see>.   -or-  <paramref name="recipients">recipients</paramref> is <see cref="F:System.String.Empty"></see>.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Net.Mail.SmtpClient"></see> has a <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync"></see> call in progress.   -or-  <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod"></see> property is set to <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network"></see> and <see cref="P:System.Net.Mail.SmtpClient.Host"></see> is null.   -or-  <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod"></see> property is set to <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network"></see> and <see cref="P:System.Net.Mail.SmtpClient.Host"></see> is equal to the empty string (&quot;&quot;).   -or-  <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod"></see> property is set to <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network"></see> and <see cref="P:System.Net.Mail.SmtpClient.Port"></see> is zero, a negative number, or greater than 65,535.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
      <exception cref="T:System.Net.Mail.SmtpException">The connection to the SMTP server failed.   -or-   Authentication failed.   -or-   The operation timed out.   -or-  <see cref="P:System.Net.Mail.SmtpClient.EnableSsl"></see> is set to true but the <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod"></see> property is set to <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory"></see> or <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis"></see>.   -or-  <see cref="P:System.Net.Mail.SmtpClient.EnableSsl"></see> is set to true, but the SMTP mail server did not advertise STARTTLS in the response to the EHLO command.</exception>
      <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">The message could not be delivered to one or more of the recipients in <paramref name="recipients">recipients</paramref>.</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.SendAsync(System.Net.Mail.MailMessage,System.Object)">
      <summary>Sends the specified e-mail message to an SMTP server for delivery. This method does not block the calling thread and allows the caller to pass an object to the method that is invoked when the operation completes.</summary>
      <param name="message">A <see cref="T:System.Net.Mail.MailMessage"></see> that contains the message to send.</param>
      <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="message">message</paramref> is null.   -or-  <see cref="P:System.Net.Mail.MailMessage.From"></see> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Net.Mail.SmtpClient"></see> has a <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync"></see> call in progress.   -or-   There are no recipients specified in <see cref="P:System.Net.Mail.MailMessage.To"></see>, <see cref="P:System.Net.Mail.MailMessage.CC"></see>, and <see cref="P:System.Net.Mail.MailMessage.Bcc"></see> properties.   -or-  <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod"></see> property is set to <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network"></see> and <see cref="P:System.Net.Mail.SmtpClient.Host"></see> is null.   -or-  <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod"></see> property is set to <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network"></see> and <see cref="P:System.Net.Mail.SmtpClient.Host"></see> is equal to the empty string (&quot;&quot;).   -or-  <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod"></see> property is set to <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network"></see> and <see cref="P:System.Net.Mail.SmtpClient.Port"></see> is zero, a negative number, or greater than 65,535.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
      <exception cref="T:System.Net.Mail.SmtpException">The connection to the SMTP server failed.   -or-   Authentication failed.   -or-   The operation timed out.   -or-  <see cref="P:System.Net.Mail.SmtpClient.EnableSsl"></see> is set to true but the <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod"></see> property is set to <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory"></see> or <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis"></see>.   -or-  <see cref="P:System.Net.Mail.SmtpClient.EnableSsl"></see> is set to true, but the SMTP mail server did not advertise STARTTLS in the response to the EHLO command.   -or-   The <paramref name="message">message</paramref> could not be delivered to one or more of the recipients in <see cref="P:System.Net.Mail.MailMessage.To"></see>, <see cref="P:System.Net.Mail.MailMessage.CC"></see>, or <see cref="P:System.Net.Mail.MailMessage.Bcc"></see>.</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.SendAsync(System.String,System.String,System.String,System.String,System.Object)">
      <summary>Sends an e-mail message to an SMTP server for delivery. The message sender, recipients, subject, and message body are specified using <see cref="T:System.String"></see> objects. This method does not block the calling thread and allows the caller to pass an object to the method that is invoked when the operation completes.</summary>
      <param name="from">A <see cref="T:System.String"></see> that contains the address information of the message sender.</param>
      <param name="recipients"></param>
      <param name="subject">A <see cref="T:System.String"></see> that contains the subject line for the message.</param>
      <param name="body">A <see cref="T:System.String"></see> that contains the message body.</param>
      <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="from">from</paramref> is null.   -or-  <paramref name="recipient">recipient</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="from">from</paramref> is <see cref="F:System.String.Empty"></see>.   -or-  <paramref name="recipient">recipient</paramref> is <see cref="F:System.String.Empty"></see>.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Net.Mail.SmtpClient"></see> has a <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync"></see> call in progress.   -or-  <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod"></see> property is set to <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network"></see> and <see cref="P:System.Net.Mail.SmtpClient.Host"></see> is null.   -or-  <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod"></see> property is set to <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network"></see> and <see cref="P:System.Net.Mail.SmtpClient.Host"></see> is equal to the empty string (&quot;&quot;).   -or-  <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod"></see> property is set to <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network"></see> and <see cref="P:System.Net.Mail.SmtpClient.Port"></see> is zero, a negative number, or greater than 65,535.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
      <exception cref="T:System.Net.Mail.SmtpException">The connection to the SMTP server failed.   -or-   Authentication failed.   -or-   The operation timed out.   -or-  <see cref="P:System.Net.Mail.SmtpClient.EnableSsl"></see> is set to true but the <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod"></see> property is set to <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory"></see> or <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis"></see>.   -or-  <see cref="P:System.Net.Mail.SmtpClient.EnableSsl"></see> is set to true, but the SMTP mail server did not advertise STARTTLS in the response to the EHLO command.   -or-   The message could not be delivered to one or more of the recipients in <paramref name="recipients">recipients</paramref>.</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.SendAsyncCancel">
      <summary>Cancels an asynchronous operation to send an e-mail message.</summary>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="E:System.Net.Mail.SmtpClient.SendCompleted">
      <summary>Occurs when an asynchronous e-mail send operation completes.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.SendMailAsync(System.Net.Mail.MailMessage)">
      <summary>Sends the specified message to an SMTP server for delivery as an asynchronous operation.</summary>
      <param name="message">A <see cref="T:System.Net.Mail.MailMessage"></see> that contains the message to send.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see>.   The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="message">message</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.SendMailAsync(System.String,System.String,System.String,System.String)">
      <summary>Sends the specified message to an SMTP server for delivery as an asynchronous operation. . The message sender, recipients, subject, and message body are specified using <see cref="T:System.String"></see> objects.</summary>
      <param name="from">A <see cref="T:System.String"></see> that contains the address information of the message sender.</param>
      <param name="recipients">A <see cref="T:System.String"></see> that contains the addresses that the message is sent to.</param>
      <param name="subject">A <see cref="T:System.String"></see> that contains the subject line for the message.</param>
      <param name="body">A <see cref="T:System.String"></see> that contains the message body.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see>.   The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="from">from</paramref> is null.   -or-  <paramref name="recipients">recipients</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="from">from</paramref> is <see cref="F:System.String.Empty"></see>.   -or-  <paramref name="recipients">recipients</paramref> is <see cref="F:System.String.Empty"></see>.</exception>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.ServicePoint">
      <summary>Gets the network connection used to transmit the e-mail message.</summary>
      <returns>A <see cref="T:System.Net.ServicePoint"></see> that connects to the <see cref="P:System.Net.Mail.SmtpClient.Host"></see> property used for SMTP.</returns>
      <exception cref="T:System.InvalidOperationException"><see cref="P:System.Net.Mail.SmtpClient.Host"></see> is null or the empty string (&quot;&quot;).   -or-  <see cref="P:System.Net.Mail.SmtpClient.Port"></see> is zero.</exception>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.TargetName">
      <summary>Gets or sets the Service Provider Name (SPN) to use for authentication when using extended protection.</summary>
      <returns><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="2"><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="1">A <xref href="System.String"></xref> that specifies the SPN to use for extended protection. The default value for this SPN is of the form &quot;SMTPSVC/<host>&quot; where <host> is the hostname of the SMTP mail server.<p>
</host></host></p>
</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.Timeout">
      <summary>Gets or sets a value that specifies the amount of time after which a synchronous <see cref="Overload:System.Net.Mail.SmtpClient.Send"></see> call times out.</summary>
      <returns>An <see cref="T:System.Int32"></see> that specifies the time-out value in milliseconds. The default value is 100,000 (100 seconds).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation was less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">You cannot change the value of this property when an email is being sent.</exception>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.UseDefaultCredentials">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that controls whether the <see cref="P:System.Net.CredentialCache.DefaultCredentials"></see> are sent with requests.</summary>
      <returns>true if the default credentials are used; otherwise false. The default value is false.</returns>
      <exception cref="T:System.InvalidOperationException">You cannot change the value of this property when an e-mail is being sent.</exception>
    </member>
    <member name="T:System.Net.Mail.SmtpDeliveryFormat">
      <summary>The delivery format to use for sending outgoing e-mail using the Simple Mail Transport Protocol (SMTP).</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpDeliveryFormat.International">
      <summary>A delivery format where non-ASCII characters in the envelope and header fields used in the Simple Mail Transport Protocol (SMTP) for mail messages are encoded with UTF-8 characters.   The extensions to support international e-mail are defined in IETF RFC 6530, 6531, and 6532.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpDeliveryFormat.SevenBit">
      <summary>A delivery format using 7-bit ASCII.   The traditional delivery format used in the Simple Mail Transport Protocol (SMTP) for mail messages.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Mail.SmtpDeliveryMethod">
      <summary>Specifies how email messages are delivered.</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpDeliveryMethod.Network">
      <summary>Email is sent through the network to an SMTP server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis">
      <summary>Email is copied to the pickup directory used by a local Internet Information Services (IIS) for delivery.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory">
      <summary>Email is copied to the directory specified by the <see cref="P:System.Net.Mail.SmtpClient.PickupDirectoryLocation"></see> property for delivery by an external application.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Mail.SmtpException">
      <summary>Represents the exception that is thrown when the <see cref="T:System.Net.Mail.SmtpClient"></see> is not able to complete a <see cref="Overload:System.Net.Mail.SmtpClient.Send"></see> or <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync"></see> operation.</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpException"></see> class.</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpException.#ctor(System.Net.Mail.SmtpStatusCode)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpException"></see> class with the specified status code.</summary>
      <param name="statusCode">An <see cref="T:System.Net.Mail.SmtpStatusCode"></see> value.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpException"></see> class with the specified error message.</summary>
      <param name="message">A <see cref="T:System.String"></see> that describes the error that occurred.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpException.#ctor(System.Net.Mail.SmtpStatusCode,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpException"></see> class with the specified status code and error message.</summary>
      <param name="statusCode">An <see cref="T:System.Net.Mail.SmtpStatusCode"></see> value.</param>
      <param name="message">A <see cref="T:System.String"></see> that describes the error that occurred.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpException"></see> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> classes.</summary>
      <param name="serializationInfo"></param>
      <param name="streamingContext"></param>
    </member>
    <member name="M:System.Net.Mail.SmtpException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpException"></see> class with the specified error message and inner exception.</summary>
      <param name="message">A <see cref="T:System.String"></see> that describes the error that occurred.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance with the data needed to serialize the <see cref="T:System.Net.Mail.SmtpException"></see>.</summary>
      <param name="serializationInfo"></param>
      <param name="streamingContext"></param>
    </member>
    <member name="P:System.Net.Mail.SmtpException.StatusCode">
      <summary>Gets the status code returned by an SMTP server when an e-mail message is transmitted.</summary>
      <returns>An <see cref="T:System.Net.Mail.SmtpStatusCode"></see> value that indicates the error that occurred.</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance with the data needed to serialize the <see cref="T:System.Net.Mail.SmtpException"></see>.</summary>
      <param name="serializationInfo"></param>
      <param name="streamingContext"></param>
    </member>
    <member name="T:System.Net.Mail.SmtpFailedRecipientException">
      <summary>Represents the exception that is thrown when the <see cref="T:System.Net.Mail.SmtpClient"></see> is not able to complete a <see cref="Overload:System.Net.Mail.SmtpClient.Send"></see> or <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync"></see> operation to a particular recipient.</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor">
      <summary>Initializes an empty instance of the <see cref="T:System.Net.Mail.SmtpFailedRecipientException"></see> class.</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpFailedRecipientException"></see> class with the specified error message.</summary>
      <param name="message">A <see cref="T:System.String"></see> that contains the error message.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.Net.Mail.SmtpStatusCode,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpFailedRecipientException"></see> class with the specified status code and e-mail address.</summary>
      <param name="statusCode">An <see cref="T:System.Net.Mail.SmtpStatusCode"></see> value.</param>
      <param name="failedRecipient">A <see cref="T:System.String"></see> that contains the e-mail address.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpFailedRecipientException"></see> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> classes.</summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpException"></see> class with the specified error message and inner exception.</summary>
      <param name="message">A <see cref="T:System.String"></see> that describes the error that occurred.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.Net.Mail.SmtpStatusCode,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpFailedRecipientException"></see> class with the specified status code, e-mail address, and server response.</summary>
      <param name="statusCode">An <see cref="T:System.Net.Mail.SmtpStatusCode"></see> value.</param>
      <param name="failedRecipient">A <see cref="T:System.String"></see> that contains the e-mail address.</param>
      <param name="serverResponse">A <see cref="T:System.String"></see> that contains the server response.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.String,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpException"></see> class with the specified error message, e-mail address, and inner exception.</summary>
      <param name="message">A <see cref="T:System.String"></see> that describes the error that occurred.</param>
      <param name="failedRecipient">A <see cref="T:System.String"></see> that contains the e-mail address.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="P:System.Net.Mail.SmtpFailedRecipientException.FailedRecipient">
      <summary>Indicates the e-mail address with delivery difficulties.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the e-mail address.</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance with the data that is needed to serialize the <see cref="T:System.Net.Mail.SmtpFailedRecipientException"></see>.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that specifies the destination for this serialization.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance with the data that is needed to serialize the <see cref="T:System.Net.Mail.SmtpFailedRecipientException"></see>.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance, which holds the serialized data for the <see cref="T:System.Net.Mail.SmtpFailedRecipientException"></see>.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> instance that contains the destination of the serialized stream that is associated with the new <see cref="T:System.Net.Mail.SmtpFailedRecipientException"></see>.</param>
    </member>
    <member name="T:System.Net.Mail.SmtpFailedRecipientsException">
      <summary>The exception that is thrown when e-mail is sent using an <see cref="T:System.Net.Mail.SmtpClient"></see> and cannot be delivered to all recipients.</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.#ctor">
      <summary>Initializes an empty instance of the <see cref="T:System.Net.Mail.SmtpFailedRecipientsException"></see> class.</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpFailedRecipientsException"></see> class with the specified <see cref="T:System.String"></see>.</summary>
      <param name="message">The exception message.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpFailedRecipientsException"></see> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> classes.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance that contains the information required to serialize the new <see cref="T:System.Net.Mail.SmtpFailedRecipientsException"></see> instance.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains the source of the serialized stream that is associated with the new <see cref="T:System.Net.Mail.SmtpFailedRecipientsException"></see> instance.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpFailedRecipientsException"></see> class with the specified <see cref="T:System.String"></see> and inner <see cref="T:System.Exception"></see>.</summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.#ctor(System.String,System.Net.Mail.SmtpFailedRecipientException[])">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpFailedRecipientsException"></see> class with the specified <see cref="T:System.String"></see> and array of type <see cref="T:System.Net.Mail.SmtpFailedRecipientException"></see>.</summary>
      <param name="message">The exception message.</param>
      <param name="innerExceptions">The array of recipients with delivery errors.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance with the data that is needed to serialize the <see cref="T:System.Net.Mail.SmtpFailedRecipientsException"></see>.</summary>
      <param name="serializationInfo"></param>
      <param name="streamingContext"></param>
    </member>
    <member name="P:System.Net.Mail.SmtpFailedRecipientsException.InnerExceptions">
      <summary>Gets one or more <see cref="T:System.Net.Mail.SmtpFailedRecipientException"></see>s that indicate the e-mail recipients with SMTP delivery errors.</summary>
      <returns>An array of type <see cref="T:System.Net.Mail.SmtpFailedRecipientException"></see> that lists the recipients with delivery errors.</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpFailedRecipientsException"></see> class from the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> instances.</summary>
      <param name="serializationInfo"></param>
      <param name="streamingContext"></param>
    </member>
    <member name="T:System.Net.Mail.SmtpPermission">
      <summary>Controls access to Simple Mail Transport Protocol (SMTP) servers.</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpPermission"></see> class with the specified state.</summary>
      <param name="unrestricted">true if the new permission is unrestricted; otherwise, false.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.#ctor(System.Net.Mail.SmtpAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpPermission"></see> class using the specified access level.</summary>
      <param name="access">One of the <see cref="T:System.Net.Mail.SmtpAccess"></see> values.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpPermission"></see> class using the specified permission state value.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
    </member>
    <member name="P:System.Net.Mail.SmtpPermission.Access">
      <summary>Gets the level of access to SMTP servers controlled by the permission.</summary>
      <returns>One of the <see cref="T:System.Net.Mail.SmtpAccess"></see> values.</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.AddPermission(System.Net.Mail.SmtpAccess)">
      <summary>Adds the specified access level value to the permission.</summary>
      <param name="access">One of the <see cref="T:System.Net.Mail.SmtpAccess"></see> values.</param>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>An <see cref="T:System.Net.Mail.SmtpPermission"></see> that is identical to the current permission.</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.FromXml(System.Security.SecurityElement)">
      <summary>Sets the state of the permission using the specified XML encoding.</summary>
      <param name="securityElement">The XML encoding to use to set the state of the current permission.</param>
      <exception cref="T:System.ArgumentException"><paramref name="securityElement">securityElement</paramref> does not describe an <see cref="T:System.Net.Mail.SmtpPermission"></see> object.   -or-  <paramref name="securityElement">securityElement</paramref> does not contain the required state information to reconstruct the permission.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="securityElement">securityElement</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">An <see cref="T:System.Security.IPermission"></see> to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>An <see cref="T:System.Net.Mail.SmtpPermission"></see> that represents the intersection of the current permission and the specified permission. Returns null if the intersection is empty or <paramref name="target">target</paramref> is null.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not an <see cref="T:System.Net.Mail.SmtpPermission"></see>.</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Returns a value indicating whether the current permission is a subset of the specified permission.</summary>
      <param name="target">An <see cref="T:System.Security.IPermission"></see> that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not an <see cref="T:System.Net.Mail.SmtpPermission"></see>.</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>true if the current permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.ToXml">
      <summary>Creates an XML encoding of the state of the permission.</summary>
      <returns>A <see cref="T:System.Security.SecurityElement"></see> that contains an XML encoding of the current permission.</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">An <see cref="T:System.Security.IPermission"></see> to combine with the current permission.</param>
      <returns>A new <see cref="T:System.Net.Mail.SmtpPermission"></see> permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not an <see cref="T:System.Net.Mail.SmtpPermission"></see>.</exception>
    </member>
    <member name="T:System.Net.Mail.SmtpPermissionAttribute">
      <summary>Controls access to Simple Mail Transport Protocol (SMTP) servers.</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.SmtpPermissionAttribute"></see> class.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values that specifies the permission behavior.</param>
      <exception cref="T:System.ArgumentException"><paramref name="action">action</paramref> is not a valid <see cref="T:System.Security.Permissions.SecurityAction"></see>.</exception>
    </member>
    <member name="P:System.Net.Mail.SmtpPermissionAttribute.Access">
      <summary>Gets or sets the level of access to SMTP servers controlled by the attribute.</summary>
      <returns>A <see cref="T:System.String"></see> value. Valid values are &quot;Connect&quot; and &quot;None&quot;.</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermissionAttribute.CreatePermission">
      <summary>Creates a permission object that can be stored with the <see cref="T:System.Security.Permissions.SecurityAction"></see> in an assembly's metadata.</summary>
      <returns>An <see cref="T:System.Net.Mail.SmtpPermission"></see> instance.</returns>
    </member>
    <member name="T:System.Net.Mail.SmtpStatusCode">
      <summary>Specifies the outcome of sending e-mail by using the <see cref="T:System.Net.Mail.SmtpClient"></see> class.</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.BadCommandSequence">
      <summary>The commands were sent in the incorrect sequence.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.CannotVerifyUserWillAttemptDelivery">
      <summary>The specified user is not local, but the receiving SMTP service accepted the message and attempted to deliver it. This status code is defined in RFC 1123, which is available at <see cref="http://www.ietf.org/">http://www.ietf.org</see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.ClientNotPermitted">
      <summary>The client was not authenticated or is not allowed to send mail using the specified SMTP host.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.CommandNotImplemented">
      <summary>The SMTP service does not implement the specified command.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.CommandParameterNotImplemented">
      <summary>The SMTP service does not implement the specified command parameter.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.CommandUnrecognized">
      <summary>The SMTP service does not recognize the specified command.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.ExceededStorageAllocation">
      <summary>The message is too large to be stored in the destination mailbox.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.GeneralFailure">
      <summary>The transaction could not occur. You receive this error when the specified SMTP host cannot be found.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.HelpMessage">
      <summary>A Help message was returned by the service.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.InsufficientStorage">
      <summary>The SMTP service does not have sufficient storage to complete the request.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.LocalErrorInProcessing">
      <summary>The SMTP service cannot complete the request. This error can occur if the client's IP address cannot be resolved (that is, a reverse lookup failed). You can also receive this error if the client domain has been identified as an open relay or source for unsolicited e-mail (spam). For details, see RFC 2505, which is available at <see cref="http://www.ietf.org/">http://www.ietf.org</see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.MailboxBusy">
      <summary>The destination mailbox is in use.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.MailboxNameNotAllowed">
      <summary>The syntax used to specify the destination mailbox is incorrect.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.MailboxUnavailable">
      <summary>The destination mailbox was not found or could not be accessed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.MustIssueStartTlsFirst">
      <summary>The SMTP server is configured to accept only TLS connections, and the SMTP client is attempting to connect by using a non-TLS connection. The solution is for the user to set EnableSsl=true on the SMTP Client.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.Ok">
      <summary>The email was successfully sent to the SMTP service.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.ServiceClosingTransmissionChannel">
      <summary>The SMTP service is closing the transmission channel.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.ServiceNotAvailable">
      <summary>The SMTP service is not available; the server is closing the transmission channel.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.ServiceReady">
      <summary>The SMTP service is ready.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.StartMailInput">
      <summary>The SMTP service is ready to receive the e-mail content.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.SyntaxError">
      <summary>The syntax used to specify a command or parameter is incorrect.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.SystemStatus">
      <summary>A system status or system Help reply.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.TransactionFailed">
      <summary>The transaction failed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.UserNotLocalTryAlternatePath">
      <summary>The user mailbox is not located on the receiving server. You should resend using the supplied address information.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.UserNotLocalWillForward">
      <summary>The user mailbox is not located on the receiving server; the server forwards the e-mail.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Mime.ContentDisposition">
      <summary>Represents a MIME protocol Content-Disposition header.</summary>
    </member>
    <member name="M:System.Net.Mime.ContentDisposition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mime.ContentDisposition"></see> class with a <see cref="P:System.Net.Mime.ContentDisposition.DispositionType"></see> of <see cref="F:System.Net.Mime.DispositionTypeNames.Attachment"></see>.</summary>
    </member>
    <member name="M:System.Net.Mime.ContentDisposition.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mime.ContentDisposition"></see> class with the specified disposition information.</summary>
      <param name="disposition">A <see cref="T:System.Net.Mime.DispositionTypeNames"></see> value that contains the disposition.</param>
      <exception cref="T:System.FormatException"><paramref name="disposition">disposition</paramref> is null or equal to <see cref="F:System.String.Empty"></see> (&quot;&quot;).</exception>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.CreationDate">
      <summary>Gets or sets the creation date for a file attachment.</summary>
      <returns>A <see cref="T:System.DateTime"></see> value that indicates the file creation date; otherwise, <see cref="F:System.DateTime.MinValue"></see> if no date was specified.</returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.DispositionType">
      <summary>Gets or sets the disposition type for an e-mail attachment.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the disposition type. The value is not restricted but is typically one of the <see cref="P:System.Net.Mime.ContentDisposition.DispositionType"></see> values.</returns>
      <exception cref="T:System.ArgumentNullException">The value specified for a set operation is null.</exception>
      <exception cref="T:System.ArgumentException">The value specified for a set operation is equal to <see cref="F:System.String.Empty"></see> (&quot;&quot;).</exception>
    </member>
    <member name="M:System.Net.Mime.ContentDisposition.Equals(System.Object)">
      <summary>Determines whether the content-disposition header of the specified <see cref="T:System.Net.Mime.ContentDisposition"></see> object is equal to the content-disposition header of this object.</summary>
      <param name="rparam">The <see cref="T:System.Net.Mime.ContentDisposition"></see> object to compare with this object.</param>
      <returns>true if the content-disposition headers are the same; otherwise false.</returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.FileName">
      <summary>Gets or sets the suggested file name for an e-mail attachment.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the file name.</returns>
    </member>
    <member name="M:System.Net.Mime.ContentDisposition.GetHashCode">
      <summary>Determines the hash code of the specified <see cref="T:System.Net.Mime.ContentDisposition"></see> object</summary>
      <returns>An integer hash value.</returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.Inline">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that determines the disposition type (Inline or Attachment) for an e-mail attachment.</summary>
      <returns>true if content in the attachment is presented inline as part of the e-mail body; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.ModificationDate">
      <summary>Gets or sets the modification date for a file attachment.</summary>
      <returns>A <see cref="T:System.DateTime"></see> value that indicates the file modification date; otherwise, <see cref="F:System.DateTime.MinValue"></see> if no date was specified.</returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.Parameters">
      <summary>Gets the parameters included in the Content-Disposition header represented by this instance.</summary>
      <returns>A writable <see cref="T:System.Collections.Specialized.StringDictionary"></see> that contains parameter name/value pairs.</returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.ReadDate">
      <summary>Gets or sets the read date for a file attachment.</summary>
      <returns>A <see cref="T:System.DateTime"></see> value that indicates the file read date; otherwise, <see cref="F:System.DateTime.MinValue"></see> if no date was specified.</returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.Size">
      <summary>Gets or sets the size of a file attachment.</summary>
      <returns>A <see cref="T:System.Int32"></see> that specifies the number of bytes in the file attachment. The default value is -1, which indicates that the file size is unknown.</returns>
    </member>
    <member name="M:System.Net.Mime.ContentDisposition.ToString">
      <summary>Returns a <see cref="T:System.String"></see> representation of this instance.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the property values for this instance.</returns>
    </member>
    <member name="T:System.Net.Mime.ContentType">
      <summary>Represents a MIME protocol Content-Type header.</summary>
    </member>
    <member name="M:System.Net.Mime.ContentType.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:System.Net.Mime.ContentType"></see> class.</summary>
    </member>
    <member name="M:System.Net.Mime.ContentType.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Mime.ContentType"></see> class using the specified string.</summary>
      <param name="contentType">A <see cref="T:System.String"></see>, for example, &quot;text/plain; charset=us-ascii&quot;, that contains the MIME media type, subtype, and optional parameters.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="contentType">contentType</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="contentType">contentType</paramref> is <see cref="F:System.String.Empty"></see> (&quot;&quot;).</exception>
      <exception cref="T:System.FormatException"><paramref name="contentType">contentType</paramref> is in a form that cannot be parsed.</exception>
    </member>
    <member name="P:System.Net.Mime.ContentType.Boundary">
      <summary>Gets or sets the value of the boundary parameter included in the Content-Type header represented by this instance.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the value associated with the boundary parameter.</returns>
    </member>
    <member name="P:System.Net.Mime.ContentType.CharSet">
      <summary>Gets or sets the value of the charset parameter included in the Content-Type header represented by this instance.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the value associated with the charset parameter.</returns>
    </member>
    <member name="M:System.Net.Mime.ContentType.Equals(System.Object)">
      <summary>Determines whether the content-type header of the specified <see cref="T:System.Net.Mime.ContentType"></see> object is equal to the content-type header of this object.</summary>
      <param name="rparam">The <see cref="T:System.Net.Mime.ContentType"></see> object to compare with this object.</param>
      <returns>true if the content-type headers are the same; otherwise false.</returns>
    </member>
    <member name="M:System.Net.Mime.ContentType.GetHashCode">
      <summary>Determines the hash code of the specified <see cref="T:System.Net.Mime.ContentType"></see> object</summary>
      <returns>An integer hash value.</returns>
    </member>
    <member name="P:System.Net.Mime.ContentType.MediaType">
      <summary>Gets or sets the media type value included in the Content-Type header represented by this instance.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the media type and subtype value. This value does not include the semicolon (;) separator that follows the subtype.</returns>
      <exception cref="T:System.ArgumentNullException">The value specified for a set operation is null.</exception>
      <exception cref="T:System.ArgumentException">The value specified for a set operation is <see cref="F:System.String.Empty"></see> (&quot;&quot;).</exception>
      <exception cref="T:System.FormatException">The value specified for a set operation is in a form that cannot be parsed.</exception>
    </member>
    <member name="P:System.Net.Mime.ContentType.Name">
      <summary>Gets or sets the value of the name parameter included in the Content-Type header represented by this instance.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the value associated with the name parameter.</returns>
    </member>
    <member name="P:System.Net.Mime.ContentType.Parameters">
      <summary>Gets the dictionary that contains the parameters included in the Content-Type header represented by this instance.</summary>
      <returns>A writable <see cref="T:System.Collections.Specialized.StringDictionary"></see> that contains name and value pairs.</returns>
    </member>
    <member name="M:System.Net.Mime.ContentType.ToString">
      <summary>Returns a string representation of this <see cref="T:System.Net.Mime.ContentType"></see> object.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the current settings for this <see cref="T:System.Net.Mime.ContentType"></see>.</returns>
    </member>
    <member name="T:System.Net.Mime.DispositionTypeNames">
      <summary>Supplies the strings used to specify the disposition type for an e-mail attachment.</summary>
    </member>
    <member name="F:System.Net.Mime.DispositionTypeNames.Attachment">
      <summary>Specifies that the attachment is to be displayed as a file attached to the e-mail message.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mime.DispositionTypeNames.Inline">
      <summary>Specifies that the attachment is to be displayed as part of the e-mail message body.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Mime.MediaTypeNames.Application">
      <summary>Specifies the kind of application data in an e-mail message attachment.</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Application.Octet">
      <summary>Specifies that the <see cref="T:System.Net.Mime.MediaTypeNames.Application"></see> data is not interpreted.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Application.Pdf">
      <summary>Specifies that the <see cref="T:System.Net.Mime.MediaTypeNames.Application"></see> data is in Portable Document Format (PDF).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Application.Rtf">
      <summary>Specifies that the <see cref="T:System.Net.Mime.MediaTypeNames.Application"></see> data is in Rich Text Format (RTF).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Application.Soap">
      <summary>Specifies that the <see cref="T:System.Net.Mime.MediaTypeNames.Application"></see> data is a SOAP document.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Application.Zip">
      <summary>Specifies that the <see cref="T:System.Net.Mime.MediaTypeNames.Application"></see> data is compressed.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Mime.MediaTypeNames.Image">
      <summary>Specifies the type of image data in an e-mail message attachment.</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Image.Gif">
      <summary>Specifies that the <see cref="T:System.Net.Mime.MediaTypeNames.Image"></see> data is in Graphics Interchange Format (GIF).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Image.Jpeg">
      <summary>Specifies that the <see cref="T:System.Net.Mime.MediaTypeNames.Image"></see> data is in Joint Photographic Experts Group (JPEG) format.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Image.Tiff">
      <summary>Specifies that the <see cref="T:System.Net.Mime.MediaTypeNames.Image"></see> data is in Tagged Image File Format (TIFF).</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Mime.MediaTypeNames.Text">
      <summary>Specifies the type of text data in an e-mail message attachment.</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Text.Html">
      <summary>Specifies that the <see cref="T:System.Net.Mime.MediaTypeNames.Text"></see> data is in HTML format.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Text.Plain">
      <summary>Specifies that the <see cref="T:System.Net.Mime.MediaTypeNames.Text"></see> data is in plain text format.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Text.RichText">
      <summary>Specifies that the <see cref="T:System.Net.Mime.MediaTypeNames.Text"></see> data is in Rich Text Format (RTF).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Text.Xml">
      <summary>Specifies that the <see cref="T:System.Net.Mime.MediaTypeNames.Text"></see> data is in XML format.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Mime.MediaTypeNames">
      <summary>Specifies the media type information for an e-mail message attachment.</summary>
    </member>
    <member name="T:System.Net.Mime.TransferEncoding">
      <summary>Specifies the Content-Transfer-Encoding header information for an e-mail message attachment.</summary>
    </member>
    <member name="F:System.Net.Mime.TransferEncoding.Base64">
      <summary>Encodes stream-based data. See RFC 2406 Section 6.8.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mime.TransferEncoding.EightBit">
      <summary>The data is in 8-bit characters that may represent international characters with a total line length of no longer than 1000 8-bit characters. For more information about this 8-bit MIME transport extension, see IETF RFC 6152.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mime.TransferEncoding.QuotedPrintable">
      <summary>Encodes data that consists of printable characters in the US-ASCII character set. See RFC 2406 Section 6.7.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mime.TransferEncoding.SevenBit">
      <summary>Used for data that is not encoded. The data is in 7-bit US-ASCII characters with a total line length of no longer than 1000 characters. See RFC2406 Section 2.7.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Mime.TransferEncoding.Unknown">
      <summary>Indicates that the transfer encoding is unknown.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.NetworkAccess">
      <summary>Specifies network access permissions.</summary>
    </member>
    <member name="F:System.Net.NetworkAccess.Accept">
      <summary>Indicates that the application is allowed to accept connections from the Internet on a local resource. Notice that this is a protection for the local host that uses Accept to grant access to a local resource (address/port). At the time a socket tries to bind to this local resource a permission check is performed to see if an Accept exists on that resource.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkAccess.Connect">
      <summary>Indicates that the application is allowed to connect to specific Internet resources. Notice that, in the case of remote host resource, no check is performed to see that Connect permissions exist. This is because the port of a connecting remote host is unknown and not suitable permissions can be built in advance. It is the application responsibility to check the permissions of the remote host trying to connect to a listening socket.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.NetworkCredential">
      <summary>Provides credentials for password-based authentication schemes such as basic, digest, NTLM, and Kerberos authentication.</summary>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkCredential"></see> class.</summary>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.Security.SecureString)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkCredential"></see> class with the specified user name and password.</summary>
      <param name="userName">The user name associated with the credentials.</param>
      <param name="password">The password for the user name associated with the credentials.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Security.SecureString"></see> class is not supported on this platform.</exception>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkCredential"></see> class with the specified user name and password.</summary>
      <param name="userName">The user name associated with the credentials.</param>
      <param name="password">The password for the user name associated with the credentials.</param>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.Security.SecureString,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkCredential"></see> class with the specified user name, password, and domain.</summary>
      <param name="userName">The user name associated with the credentials.</param>
      <param name="password">The password for the user name associated with the credentials.</param>
      <param name="domain">The domain associated with these credentials.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Security.SecureString"></see> class is not supported on this platform.</exception>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkCredential"></see> class with the specified user name, password, and domain.</summary>
      <param name="userName">The user name associated with the credentials.</param>
      <param name="password">The password for the user name associated with the credentials.</param>
      <param name="domain">The domain associated with these credentials.</param>
    </member>
    <member name="P:System.Net.NetworkCredential.Domain">
      <summary>Gets or sets the domain or computer name that verifies the credentials.</summary>
      <returns>The name of the domain associated with the credentials.</returns>
    </member>
    <member name="M:System.Net.NetworkCredential.GetCredential(System.Uri,System.String)">
      <summary>Returns an instance of the <see cref="T:System.Net.NetworkCredential"></see> class for the specified Uniform Resource Identifier (URI) and authentication type.</summary>
      <param name="uri">The URI that the client provides authentication for.</param>
      <param name="authType">The type of authentication requested, as defined in the <see cref="P:System.Net.IAuthenticationModule.AuthenticationType"></see> property.</param>
      <returns>A <see cref="T:System.Net.NetworkCredential"></see> object.</returns>
    </member>
    <member name="M:System.Net.NetworkCredential.GetCredential(System.String,System.Int32,System.String)">
      <summary>Returns an instance of the <see cref="T:System.Net.NetworkCredential"></see> class for the specified host, port, and authentication type.</summary>
      <param name="host">The host computer that authenticates the client.</param>
      <param name="port">The port on the host that the client communicates with.</param>
      <param name="authenticationType">The type of authentication requested, as defined in the <see cref="P:System.Net.IAuthenticationModule.AuthenticationType"></see> property.</param>
      <returns>A <see cref="T:System.Net.NetworkCredential"></see> for the specified host, port, and authentication protocol, or null if there are no credentials available for the specified host, port, and authentication protocol.</returns>
    </member>
    <member name="P:System.Net.NetworkCredential.Password">
      <summary>Gets or sets the password for the user name associated with the credentials.</summary>
      <returns>The password associated with the credentials. If this <see cref="T:System.Net.NetworkCredential"></see> instance was initialized with the <paramref name="password">password</paramref> parameter set to null, then the <see cref="P:System.Net.NetworkCredential.Password"></see> property will return an empty string.</returns>
    </member>
    <member name="P:System.Net.NetworkCredential.SecurePassword">
      <summary>Gets or sets the password as a <see cref="T:System.Security.SecureString"></see> instance.</summary>
      <returns>The password for the user name associated with the credentials.</returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Security.SecureString"></see> class is not supported on this platform.</exception>
    </member>
    <member name="P:System.Net.NetworkCredential.UserName">
      <summary>Gets or sets the user name associated with the credentials.</summary>
      <returns>The user name associated with the credentials.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.DuplicateAddressDetectionState">
      <summary>Specifies the current state of an IP address.</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.DuplicateAddressDetectionState.Deprecated">
      <summary>The address is valid, but it is nearing its lease lifetime and should not be used by applications.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.DuplicateAddressDetectionState.Duplicate">
      <summary>The address is not unique. This address should not be assigned to the network interface.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.DuplicateAddressDetectionState.Invalid">
      <summary>The address is not valid. A nonvalid address is expired and no longer assigned to an interface; applications should not send data packets to it.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.DuplicateAddressDetectionState.Preferred">
      <summary>The address is valid and its use is unrestricted.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.DuplicateAddressDetectionState.Tentative">
      <summary>The duplicate address detection procedure's evaluation of the address has not completed successfully. Applications should not use the address because it is not yet valid and packets sent to it are discarded.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.NetworkInformation.GatewayIPAddressInformation">
      <summary>Represents the IP address of the network gateway. This class cannot be instantiated.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformation.#ctor">
      <summary>Initializes the members of this class.</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.GatewayIPAddressInformation.Address">
      <summary>Get the IP address of the gateway.</summary>
      <returns>An <see cref="T:System.Net.IPAddress"></see> object that contains the IP address of the gateway.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.GatewayIPAddressInformationCollection">
      <summary>Stores a set of <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation"></see> types.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformationCollection"></see> class.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Add(System.Net.NetworkInformation.GatewayIPAddressInformation)">
      <summary>Throws a <see cref="T:System.NotSupportedException"></see> because this operation is not supported for this collection.</summary>
      <param name="address">The object to be added to the collection.</param>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Clear">
      <summary>Throws a <see cref="T:System.NotSupportedException"></see> because this operation is not supported for this collection.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Contains(System.Net.NetworkInformation.GatewayIPAddressInformation)">
      <summary>Checks whether the collection contains the specified <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation"></see> object.</summary>
      <param name="address">The <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation"></see> object to be searched in the collection.</param>
      <returns>true if the <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation"></see> object exists in the collection; otherwise false.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.CopyTo(System.Net.NetworkInformation.GatewayIPAddressInformation[],System.Int32)">
      <summary>Copies the elements in this collection to a one-dimensional array of type <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation"></see>.</summary>
      <param name="array">A one-dimensional array that receives a copy of the collection.</param>
      <param name="offset">The zero-based index in array at which the copy begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-   The number of elements in this <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation"></see> is greater than the available space from <paramref name="count">count</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The elements in this <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Count">
      <summary>Gets the number of <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation"></see> types in this collection.</summary>
      <returns>An <see cref="T:System.Int32"></see> value that contains the number of <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation"></see> types in this collection.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.GetEnumerator">
      <summary>Returns an object that can be used to iterate through this collection.</summary>
      <returns>An object that implements the <see cref="T:System.Collections.IEnumerator"></see> interface and provides access to the <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation"></see> types in this collection.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.IsReadOnly">
      <summary>Gets a value that indicates whether access to this collection is read-only.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation"></see> at the specific index of the collection.</summary>
      <param name="index">The index of interest.</param>
      <returns>The <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation"></see> at the specific index in the collection.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Remove(System.Net.NetworkInformation.GatewayIPAddressInformation)">
      <summary>Throws a <see cref="T:System.NotSupportedException"></see> because this operation is not supported for this collection.</summary>
      <param name="address">The object to be removed.</param>
      <returns>Always throws a <see cref="T:System.NotSupportedException"></see>.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an object that can be used to iterate through this collection.</summary>
      <returns>An object that implements the <see cref="T:System.Collections.IEnumerator"></see> interface and provides access to the <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation"></see> types in this collection.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IcmpV4Statistics">
      <summary>Provides Internet Control Message Protocol for IPv4 (ICMPv4) statistical data for the local computer.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IcmpV4Statistics.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.IcmpV4Statistics"></see> class.</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.AddressMaskRepliesReceived">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Address Mask Reply messages that were received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Address Mask Reply messages that were received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.AddressMaskRepliesSent">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Address Mask Reply messages that were sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Address Mask Reply messages that were sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.AddressMaskRequestsReceived">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Address Mask Request messages that were received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Address Mask Request messages that were received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.AddressMaskRequestsSent">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Address Mask Request messages that were sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Address Mask Request messages that were sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.DestinationUnreachableMessagesReceived">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) messages that were received because of a packet having an unreachable address in its destination.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Destination Unreachable messages that were received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.DestinationUnreachableMessagesSent">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) messages that were sent because of a packet having an unreachable address in its destination.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Destination Unreachable messages sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.EchoRepliesReceived">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Echo Reply messages that were received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of number of ICMP Echo Reply messages that were received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.EchoRepliesSent">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Echo Reply messages that were sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of number of ICMP Echo Reply messages that were sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.EchoRequestsReceived">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Echo Request messages that were received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of number of ICMP Echo Request messages that were received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.EchoRequestsSent">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Echo Request messages that were sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of number of ICMP Echo Request messages that were sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.ErrorsReceived">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) error messages that were received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMP error messages that were received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.ErrorsSent">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) error messages that were sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of number of ICMP error messages that were sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.MessagesReceived">
      <summary>Gets the number of Internet Control Message Protocol messages that were received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMPv4 messages that were received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.MessagesSent">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) messages that were sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMPv4 messages that were sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.ParameterProblemsReceived">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Parameter Problem messages that were received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMP Parameter Problem messages that were received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.ParameterProblemsSent">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Parameter Problem messages that were sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMP Parameter Problem messages that were sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.RedirectsReceived">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Redirect messages that were received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMP Redirect messages that were received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.RedirectsSent">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Redirect messages that were sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMP Redirect messages that were sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.SourceQuenchesReceived">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Source Quench messages that were received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Source Quench messages that were received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.SourceQuenchesSent">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Source Quench messages that were sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Source Quench messages that were sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.TimeExceededMessagesReceived">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Time Exceeded messages that were received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMP Time Exceeded messages that were received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.TimeExceededMessagesSent">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Time Exceeded messages that were sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMP Time Exceeded messages that were sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.TimestampRepliesReceived">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Timestamp Reply messages that were received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Timestamp Reply messages that were received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.TimestampRepliesSent">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Timestamp Reply messages that were sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Timestamp Reply messages that were sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.TimestampRequestsReceived">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Timestamp Request messages that were received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Timestamp Request messages that were received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.TimestampRequestsSent">
      <summary>Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Timestamp Request messages that were sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Timestamp Request messages that were sent.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IcmpV6Statistics">
      <summary>Provides Internet Control Message Protocol for Internet Protocol version 6 (ICMPv6) statistical data for the local computer.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IcmpV6Statistics.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.IcmpV6Statistics"></see> class.</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.DestinationUnreachableMessagesReceived">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) messages received because of a packet having an unreachable address in its destination.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Destination Unreachable messages received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.DestinationUnreachableMessagesSent">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) messages sent because of a packet having an unreachable address in its destination.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Destination Unreachable messages sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.EchoRepliesReceived">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Echo Reply messages received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of number of ICMP Echo Reply messages received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.EchoRepliesSent">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Echo Reply messages sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of number of ICMP Echo Reply messages sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.EchoRequestsReceived">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Echo Request messages received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of number of ICMP Echo Request messages received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.EchoRequestsSent">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Echo Request messages sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of number of ICMP Echo Request messages sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.ErrorsReceived">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) error messages received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMP error messages received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.ErrorsSent">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) error messages sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMP error messages sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MembershipQueriesReceived">
      <summary>Gets the number of Internet Group management Protocol (IGMP) Group Membership Query messages received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Group Membership Query messages received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MembershipQueriesSent">
      <summary>Gets the number of Internet Group management Protocol (IGMP) Group Membership Query messages sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Group Membership Query messages sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MembershipReductionsReceived">
      <summary>Gets the number of Internet Group Management Protocol (IGMP) Group Membership Reduction messages received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Group Membership Reduction messages received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MembershipReductionsSent">
      <summary>Gets the number of Internet Group Management Protocol (IGMP) Group Membership Reduction messages sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Group Membership Reduction messages sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MembershipReportsReceived">
      <summary>Gets the number of Internet Group Management Protocol (IGMP) Group Membership Report messages received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Group Membership Report messages received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MembershipReportsSent">
      <summary>Gets the number of Internet Group Management Protocol (IGMP) Group Membership Report messages sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Group Membership Report messages sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MessagesReceived">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) messages received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMPv6 messages received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MessagesSent">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) messages sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMPv6 messages sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.NeighborAdvertisementsReceived">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Neighbor Advertisement messages received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMP Neighbor Advertisement messages received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.NeighborAdvertisementsSent">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Neighbor Advertisement messages sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Neighbor Advertisement messages sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.NeighborSolicitsReceived">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Neighbor Solicitation messages received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Neighbor Solicitation messages received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.NeighborSolicitsSent">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Neighbor Solicitation messages sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Neighbor Solicitation messages sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.PacketTooBigMessagesReceived">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Packet Too Big messages received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMP Packet Too Big messages received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.PacketTooBigMessagesSent">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Packet Too Big messages sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMP Packet Too Big messages sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.ParameterProblemsReceived">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Parameter Problem messages received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMP Parameter Problem messages received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.ParameterProblemsSent">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Parameter Problem messages sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMP Parameter Problem messages sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.RedirectsReceived">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Redirect messages received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMP Redirect messages received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.RedirectsSent">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Redirect messages sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMP Redirect messages sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.RouterAdvertisementsReceived">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Router Advertisement messages received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Router Advertisement messages received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.RouterAdvertisementsSent">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Router Advertisement messages sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Router Advertisement messages sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.RouterSolicitsReceived">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Router Solicitation messages received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Router Solicitation messages received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.RouterSolicitsSent">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Router Solicitation messages sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of Router Solicitation messages sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.TimeExceededMessagesReceived">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Time Exceeded messages received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMP Time Exceeded messages received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.TimeExceededMessagesSent">
      <summary>Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Time Exceeded messages sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of ICMP Time Exceeded messages sent.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.StoreLocation">
      <summary>Specifies the location of the X.509 certificate store.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser">
      <summary>The X.509 certificate store used by the current user.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine">
      <summary>The X.509 certificate store assigned to the local machine.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.StoreName">
      <summary>Specifies the name of the X.509 certificate store to open.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.AddressBook">
      <summary>The X.509 certificate store for other users.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.AuthRoot">
      <summary>The X.509 certificate store for third-party certificate authorities (CAs).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.CertificateAuthority">
      <summary>The X.509 certificate store for intermediate certificate authorities (CAs).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.Disallowed">
      <summary>The X.509 certificate store for revoked certificates.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.My">
      <summary>The X.509 certificate store for personal certificates.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.Root">
      <summary>The X.509 certificate store for trusted root certificate authorities (CAs).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.TrustedPeople">
      <summary>The X.509 certificate store for directly trusted people and resources.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.TrustedPublisher">
      <summary>The X.509 certificate store for directly trusted publishers.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName">
      <summary>Represents the distinguished name of an X509 certificate. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName"></see> class using information from the specified byte array.</summary>
      <param name="encodedDistinguishedName">A byte array that contains distinguished name information.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.#ctor(System.Security.Cryptography.AsnEncodedData)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName"></see> class using the specified <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object.</summary>
      <param name="encodedDistinguishedName">An <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object that represents the distinguished name.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.#ctor(System.Security.Cryptography.X509Certificates.X500DistinguishedName)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName"></see> class using the specified <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName"></see> object.</summary>
      <param name="distinguishedName">An <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName"></see> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName"></see> class using information from the specified string.</summary>
      <param name="distinguishedName">A string that represents the distinguished name.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.#ctor(System.String,System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName"></see> class using the specified string and <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags"></see> flag.</summary>
      <param name="distinguishedName">A string that represents the distinguished name.</param>
      <param name="flag">A bitwise combination of the enumeration values that specify the characteristics of the distinguished name.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.Decode(System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags)">
      <summary>Decodes a distinguished name using the characteristics specified by the <paramref name="flag">flag</paramref> parameter.</summary>
      <param name="flag">A bitwise combination of the enumeration values that specify the characteristics of the distinguished name.</param>
      <returns>The decoded distinguished name.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate has an invalid name.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.Format(System.Boolean)">
      <summary>Returns a formatted version of an X500 distinguished name for printing or for output to a text window or to a console.</summary>
      <param name="multiLine">true if the return string should contain carriage returns; otherwise, false.</param>
      <returns>A formatted string that represents the X500 distinguished name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X500DistinguishedName.Name">
      <summary>Gets the comma-delimited distinguished name from an X500 certificate.</summary>
      <returns>The comma-delimited distinguished name of the X509 certificate.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags">
      <summary>Specifies characteristics of the X.500 distinguished name.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.DoNotUsePlusSign">
      <summary>The distinguished name does not use the plus sign.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.DoNotUseQuotes">
      <summary>The distinguished name does not use quotation marks.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.ForceUTF8Encoding">
      <summary>Forces the distinguished name to encode specific X.500 keys as UTF-8 strings rather than printable Unicode strings. For more information and the list of X.500 keys affected, see the <see cref="http://msdn.microsoft.com/library/windows/desktop/aa379394.aspx">X500NameFlags enumeration</see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.None">
      <summary>The distinguished name has no special characteristics.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.Reversed">
      <summary>The distinguished name is reversed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.UseCommas">
      <summary>The distinguished name uses commas.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.UseNewLines">
      <summary>The distinguished name uses the new line character.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.UseSemicolons">
      <summary>The distinguished name uses semicolons.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.UseT61Encoding">
      <summary>The distinguished name uses T61 encoding.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.UseUTF8Encoding">
      <summary>The distinguished name uses UTF8 encoding instead of Unicode character encoding.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension">
      <summary>Defines the constraints set on a certificate. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension"></see> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension"></see> class using an <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object and a value that identifies whether the extension is critical.</summary>
      <param name="encodedBasicConstraints">The encoded data to use to create the extension.</param>
      <param name="critical">true if the extension is critical; otherwise, false.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.#ctor(System.Boolean,System.Boolean,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension"></see> class. Parameters specify a value that indicates whether a certificate is a certificate authority (CA) certificate, a value that indicates whether the certificate has a restriction on the number of path levels it allows, the number of levels allowed in a certificate's path, and a value that indicates whether the extension is critical.</summary>
      <param name="certificateAuthority">true if the certificate is a certificate authority (CA) certificate; otherwise, false.</param>
      <param name="hasPathLengthConstraint">true if the certificate has a restriction on the number of path levels it allows; otherwise, false.</param>
      <param name="pathLengthConstraint">The number of levels allowed in a certificate's path.</param>
      <param name="critical">true if the extension is critical; otherwise, false.</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.CertificateAuthority">
      <summary>Gets a value indicating whether a certificate is a certificate authority (CA) certificate.</summary>
      <returns>true if the certificate is a certificate authority (CA) certificate, otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension"></see> class using an <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object.</summary>
      <param name="asnEncodedData">The encoded data to use to create the extension.</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.HasPathLengthConstraint">
      <summary>Gets a value indicating whether a certificate has a restriction on the number of path levels it allows.</summary>
      <returns>true if the certificate has a restriction on the number of path levels it allows, otherwise, false.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The extension cannot be decoded.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.PathLengthConstraint">
      <summary>Gets the number of levels allowed in a certificate's path.</summary>
      <returns>An integer indicating the number of levels allowed in a certificate's path.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The extension cannot be decoded.</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Certificate2">
      <summary>Represents an X.509 certificate.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> class using a certificate file name, a password used to access the certificate, and a key storage flag.</summary>
      <param name="fileName">The name of a certificate file.</param>
      <param name="password">The password required to access the X.509 certificate data.</param>
      <param name="keyStorageFlags">A bitwise combination of the enumeration values that control where and how to import the certificate.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  The certificate file does not exist.  The certificate is invalid.  The certificate's password is incorrect.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> class using a certificate file name, a password, and a key storage flag.</summary>
      <param name="fileName">The name of a certificate file.</param>
      <param name="password">The password required to access the X.509 certificate data.</param>
      <param name="keyStorageFlags">A bitwise combination of the enumeration values that control where and how to import the certificate.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  The certificate file does not exist.  The certificate is invalid.  The certificate's password is incorrect.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> class using a byte array, a password, and a key storage flag.</summary>
      <param name="rawData">A byte array containing data from an X.509 certificate.</param>
      <param name="password">The password required to access the X.509 certificate data.</param>
      <param name="keyStorageFlags">A bitwise combination of the enumeration values that control where and how to import the certificate.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  The certificate file does not exist.  The certificate is invalid.  The certificate's password is incorrect.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> class using a certificate file name and a password used to access the certificate.</summary>
      <param name="fileName">The name of a certificate file.</param>
      <param name="password">The password required to access the X.509 certificate data.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  The certificate file does not exist.  The certificate is invalid.  The certificate's password is incorrect.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> class using a certificate file name and a password.</summary>
      <param name="fileName">The name of a certificate file.</param>
      <param name="password">The password required to access the X.509 certificate data.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  The certificate file does not exist.  The certificate is invalid.  The certificate's password is incorrect.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> class using the specified serialization and stream context information.</summary>
      <param name="info">The serialization information required to deserialize the new <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see>.</param>
      <param name="context">Contextual information about the source of the stream to be deserialized.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> class using a byte array, a password, and a key storage flag.</summary>
      <param name="rawData">A byte array that contains data from an X.509 certificate.</param>
      <param name="password">The password required to access the X.509 certificate data.</param>
      <param name="keyStorageFlags">A bitwise combination of the enumeration values that control where and how to import the certificate.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  The certificate file does not exist.  The certificate is invalid.  The certificate's password is incorrect.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> class using a byte array and a password.</summary>
      <param name="rawData">A byte array that contains data from an X.509 certificate.</param>
      <param name="password">The password required to access the X.509 certificate data.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  The certificate file does not exist.  The certificate is invalid.  The certificate's password is incorrect.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> class using a certificate file name.</summary>
      <param name="fileName">The name of a certificate file.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  The certificate file does not exist.  The certificate is invalid.  The certificate's password is incorrect.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> class using an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> object.</summary>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> object.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  The certificate file does not exist.  The certificate is invalid.  The certificate's password is incorrect.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> class using an unmanaged handle.</summary>
      <param name="handle">A pointer to a certificate context in unmanaged code. The C structure is called PCCERT_CONTEXT.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  The certificate file does not exist.  The certificate is invalid.  The certificate's password is incorrect.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> class using information from a byte array.</summary>
      <param name="rawData">A byte array containing data from an X.509 certificate.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  The certificate file does not exist.  The certificate is invalid.  The certificate's password is incorrect.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> class using a byte array and a password.</summary>
      <param name="rawData">A byte array containing data from an X.509 certificate.</param>
      <param name="password">The password required to access the X.509 certificate data.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  The certificate file does not exist.  The certificate is invalid.  The certificate's password is incorrect.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived">
      <summary>Gets or sets a value indicating that an X.509 certificate is archived.</summary>
      <returns>true if the certificate is archived, false if the certificate is not archived.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate is unreadable.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)">
      <param name="contentType"></param>
      <param name="password"></param>
      <returns></returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions">
      <summary>Gets a collection of <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension"></see> objects.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"></see> object.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate is unreadable.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName">
      <summary>Gets or sets the associated alias for a certificate.</summary>
      <returns>The certificate's friendly name.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate is unreadable.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)">
      <summary>Indicates the type of certificate contained in a file.</summary>
      <param name="fileName">The name of a certificate file.</param>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType"></see> object.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="fileName">fileName</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])">
      <summary>Indicates the type of certificate contained in a byte array.</summary>
      <param name="rawData">A byte array containing data from an X.509 certificate.</param>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType"></see> object.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="rawData">rawData</paramref> has a zero length or is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)">
      <summary>Gets the subject and issuer names from a certificate.</summary>
      <param name="nameType">The <see cref="T:System.Security.Cryptography.X509Certificates.X509NameType"></see> value for the subject.</param>
      <param name="forIssuer">true to include the issuer name; otherwise, false.</param>
      <returns>The name of the certificate.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey">
      <summary>Gets a value that indicates whether an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> object contains a private key.</summary>
      <returns>true if the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> object contains a private key; otherwise, false.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate context is invalid.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])">
      <summary>Populates an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> object with data from a byte array.</summary>
      <param name="rawData">A byte array containing data from an X.509 certificate.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)">
      <summary>Populates an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> object with information from a certificate file.</summary>
      <param name="fileName">The name of a certificate.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>Populates an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> object using data from a byte array, a password, and a key storage flag.</summary>
      <param name="rawData">A byte array that contains data from an X.509 certificate.</param>
      <param name="password">The password required to access the X.509 certificate data.</param>
      <param name="keyStorageFlags">A bitwise combination of the enumeration values that control where and how to import the certificate.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>Populates an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> object using data from a byte array, a password, and flags for determining how to import the private key.</summary>
      <param name="rawData">A byte array containing data from an X.509 certificate.</param>
      <param name="password">The password required to access the X.509 certificate data.</param>
      <param name="keyStorageFlags">A bitwise combination of the enumeration values that control where and how to import the certificate.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>Populates an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> object with information from a certificate file, a password, and a key storage flag.</summary>
      <param name="fileName">The name of a certificate file.</param>
      <param name="password">The password required to access the X.509 certificate data.</param>
      <param name="keyStorageFlags">A bitwise combination of the enumeration values that control where and how to import the certificate.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>Populates an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> object with information from a certificate file, a password, and a <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags"></see> value.</summary>
      <param name="fileName">The name of a certificate file.</param>
      <param name="password">The password required to access the X.509 certificate data.</param>
      <param name="keyStorageFlags">A bitwise combination of the enumeration values that control where and how to import the certificate.</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName">
      <summary>Gets the distinguished name of the certificate issuer.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName"></see> object that contains the name of the certificate issuer.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate context is invalid.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter">
      <summary>Gets the date in local time after which a certificate is no longer valid.</summary>
      <returns>A <see cref="T:System.DateTime"></see> object that represents the expiration date for the certificate.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate is unreadable.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore">
      <summary>Gets the date in local time on which a certificate becomes valid.</summary>
      <returns>A <see cref="T:System.DateTime"></see> object that represents the effective date of the certificate.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate is unreadable.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey">
      <summary>Gets or sets the <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm"></see> object that represents the private key associated with a certificate.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm"></see> object, which is either an RSA or DSA cryptographic service provider.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key value is not an RSA or DSA key, or the key is unreadable.</exception>
      <exception cref="T:System.ArgumentNullException">The value being set for this property is null.</exception>
      <exception cref="T:System.NotSupportedException">The key algorithm for this private key is not supported.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">The X.509 keys do not match.</exception>
      <exception cref="T:System.ArgumentException">The cryptographic service provider key is null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey">
      <summary>Gets a <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey"></see> object associated with a certificate.</summary>
      <returns>A <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey"></see> object.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key value is not an RSA or DSA key, or the key is unreadable.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.RawData">
      <summary>Gets the raw data of a certificate.</summary>
      <returns>The raw data of the certificate as a byte array.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Reset">
      <summary>Resets the state of an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> object.</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber">
      <summary>Gets the serial number of a certificate.</summary>
      <returns>The serial number of the certificate.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm">
      <summary>Gets the algorithm used to create the signature of a certificate.</summary>
      <returns>Returns the object identifier (<see cref="T:System.Security.Cryptography.Oid"></see>) of the signature algorithm.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate is unreadable.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName">
      <summary>Gets the subject distinguished name from a certificate.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName"></see> object that represents the name of the certificate subject.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate context is invalid.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint">
      <summary>Gets the thumbprint of a certificate.</summary>
      <returns>The thumbprint of the certificate.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString">
      <summary>Displays an X.509 certificate in text format.</summary>
      <returns>The certificate information.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)">
      <summary>Displays an X.509 certificate in text format.</summary>
      <param name="verbose">true to display the public key, private key, extensions, and so forth; false to display information that is similar to the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> class, including thumbprint, serial number, subject and issuer names, and so on.</param>
      <returns>The certificate information.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Verify">
      <summary>Performs a X.509 chain validation using basic validation policy.</summary>
      <returns>true if the validation succeeds; false if the validation fails.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate is unreadable.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.Version">
      <summary>Gets the X.509 format version of a certificate.</summary>
      <returns>The certificate format.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate is unreadable.</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection">
      <summary>Represents a collection of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> class without any <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> information.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> class using an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> object.</summary>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> object to start the collection from.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> class using an array of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> objects.</summary>
      <param name="certificates">An array of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> objects.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> class using the specified certificate collection.</summary>
      <param name="certificates">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Add(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Adds an object to the end of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see>.</summary>
      <param name="certificate">An X.509 certificate represented as an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> object.</param>
      <returns>The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> index at which the <paramref name="certificate">certificate</paramref> has been added.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="certificate">certificate</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate2[])">
      <summary>Adds multiple <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> objects in an array to the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</summary>
      <param name="certificates">An array of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> objects.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="certificates">certificates</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>Adds multiple <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> objects in an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object to another <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</summary>
      <param name="certificates">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="certificates">certificates</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Contains(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Determines whether the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object contains a specific certificate.</summary>
      <param name="certificate">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> object to locate in the collection.</param>
      <returns>true if the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> contains the specified <paramref name="certificate">certificate</paramref>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="certificate">certificate</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Export(System.Security.Cryptography.X509Certificates.X509ContentType)">
      <summary>Exports X.509 certificate information into a byte array.</summary>
      <param name="contentType">A supported <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType"></see> object.</param>
      <returns>X.509 certificate information in a byte array.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)">
      <summary>Exports X.509 certificate information into a byte array using a password.</summary>
      <param name="contentType">A supported <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType"></see> object.</param>
      <param name="password">A string used to protect the byte array.</param>
      <returns>X.509 certificate information in a byte array.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate is unreadable, the content is invalid or, in the case of a certificate requiring a password, the private key could not be exported because the password provided was incorrect.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)">
      <summary>Searches an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object using the search criteria specified by the <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType"></see> enumeration and the <paramref name="findValue">findValue</paramref> object.</summary>
      <param name="findType">One of the <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType"></see> values.</param>
      <param name="findValue">The search criteria as an object.</param>
      <param name="validOnly">true to allow only valid certificates to be returned from the search; otherwise, false.</param>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="findType">findType</paramref> is invalid.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator"></see> object that can iterate through the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import(System.Byte[])">
      <summary>Imports a certificate in the form of a byte array into a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</summary>
      <param name="rawData">A byte array containing data from an X.509 certificate.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import(System.String)">
      <summary>Imports a certificate file into a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</summary>
      <param name="fileName">The name of the file containing the certificate information.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>Imports a certificate, in the form of a byte array that requires a password to access the certificate, into a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</summary>
      <param name="rawData">A byte array containing data from an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> object.</param>
      <param name="password">The password required to access the certificate information.</param>
      <param name="keyStorageFlags">A bitwise combination of the enumeration values that control how and where the certificate is imported.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>Imports a certificate file that requires a password into a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</summary>
      <param name="fileName">The name of the file containing the certificate information.</param>
      <param name="password">The password required to access the certificate information.</param>
      <param name="keyStorageFlags">A bitwise combination of the enumeration values that control how and where the certificate is imported.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Insert(System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Inserts an object into the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object at the specified index.</summary>
      <param name="index">The zero-based index at which to insert certificate.</param>
      <param name="certificate">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> is greater than the <see cref="P:System.Collections.CollectionBase.Count"></see> property.</exception>
      <exception cref="T:System.NotSupportedException">The collection is read-only.   -or-   The collection has a fixed size.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="certificate">certificate</paramref> is null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> is equal to or greater than the <see cref="P:System.Collections.CollectionBase.Count"></see> property.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="index">index</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Remove(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Removes the first occurrence of a certificate from the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</summary>
      <param name="certificate">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> object to be removed from the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="certificate">certificate</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.RemoveRange(System.Security.Cryptography.X509Certificates.X509Certificate2[])">
      <summary>Removes multiple <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> objects in an array from an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</summary>
      <param name="certificates">An array of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> objects.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="certificates">certificates</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.RemoveRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>Removes multiple <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> objects in an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object from another <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</summary>
      <param name="certificates">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="certificates">certificates</paramref> is null.</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator">
      <summary>Supports a simple iteration over a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.Current">
      <summary>Gets the current element in the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</summary>
      <returns>The current element in the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element in the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.System#Collections#IEnumerator#Current">
      <summary>For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current"></see>.</summary>
      <returns>The current element in the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.System#Collections#IEnumerator#MoveNext">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerator.MoveNext"></see>.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.System#Collections#IEnumerator#Reset">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerator.Reset"></see>.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator">
      <summary>Enumerates the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> objects in an <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.#ctor(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator"></see> class for the specified <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</summary>
      <param name="mappings">The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> to enumerate.</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.Current">
      <summary>Gets the current <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> in the <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</summary>
      <returns>The current <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> in the <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was instantiated.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection is modified after the enumerator is instantiated.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.System#Collections#IEnumerator#Current">
      <summary>For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current"></see>.</summary>
      <returns>The current X.509 certificate object in the <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> object.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerator.MoveNext"></see>.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was instantiated.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.System#Collections#IEnumerator#Reset">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerator.Reset"></see>.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was instantiated.</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection">
      <summary>Defines a collection that stores <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> objects.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> class from an array of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> objects.</summary>
      <param name="value">The array of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> objects with which to initialize the new object.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> class from another <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</summary>
      <param name="value">The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> with which to initialize the new object.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Add(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Adds an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> with the specified value to the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</summary>
      <param name="value">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> to add to the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</param>
      <returns>The index into the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> at which the new <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> was inserted.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate[])">
      <summary>Copies the elements of an array of type <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> to the end of the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</summary>
      <param name="value">The array of type <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> containing the objects to add to the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value">value</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
      <summary>Copies the elements of the specified <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> to the end of the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</summary>
      <param name="value">The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> containing the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value">value</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Contains(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Gets a value indicating whether the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> contains the specified <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see>.</summary>
      <param name="value">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> to locate.</param>
      <returns>true if the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> is contained in this collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.CopyTo(System.Security.Cryptography.X509Certificates.X509Certificate[],System.Int32)">
      <summary>Copies the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> values in the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> to a one-dimensional <see cref="T:System.Array"></see> instance at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the values copied from <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</param>
      <param name="index">The index into array to begin copying.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="array">array</paramref> parameter is multidimensional.   -or-   The number of elements in the <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> is greater than the available space between <paramref name="arrayIndex">arrayIndex</paramref> and the end of <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array">array</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="arrayIndex">arrayIndex</paramref> parameter is less than the <paramref name="array">array</paramref> parameter's lower bound.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</summary>
      <returns>An enumerator of the subelements of <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> you can use to iterate through the collection.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetHashCode">
      <summary>Builds a hash value based on all values contained in the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</summary>
      <returns>A hash value based on all values contained in the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.IndexOf(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Returns the index of the specified <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> in the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</summary>
      <param name="value">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> to locate.</param>
      <returns>The index of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> specified by the <paramref name="value">value</paramref> parameter in the <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Insert(System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Inserts a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> into the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> at the specified index.</summary>
      <param name="index">The zero-based index where value should be inserted.</param>
      <param name="value">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> to insert.</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Item(System.Int32)">
      <summary>Gets or sets the entry at the specified index of the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</summary>
      <param name="index">The zero-based index of the entry to locate in the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</param>
      <returns>The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> at the specified index of the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Remove(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Removes a specific <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> from the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</summary>
      <param name="value">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> to remove from the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> specified by the <paramref name="value">value</paramref> parameter is not found in the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Chain">
      <summary>Represents a chain-building engine for <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> certificates.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain"></see> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain"></see> class specifying a value that indicates whether the machine context should be used.</summary>
      <param name="useMachineContext">true to use the machine context; false to use the current user context.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain"></see> class using an <see cref="T:System.IntPtr"></see> handle to an X.509 chain.</summary>
      <param name="chainContext">An <see cref="T:System.IntPtr"></see> handle to an X.509 chain.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="chainContext">chainContext</paramref> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="chainContext">chainContext</paramref> parameter points to an invalid context.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.Build(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Builds an X.509 chain using the policy specified in <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy"></see>.</summary>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> object.</param>
      <returns>true if the X.509 certificate is valid; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="certificate">certificate</paramref> is not a valid certificate or is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="certificate">certificate</paramref> is unreadable.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Chain.ChainContext">
      <summary>Gets a handle to an X.509 chain.</summary>
      <returns>An <see cref="T:System.IntPtr"></see> handle to an X.509 chain.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Chain.ChainElements">
      <summary>Gets a collection of <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElement"></see> objects.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"></see> object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Chain.ChainPolicy">
      <summary>Gets or sets the <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy"></see> to use when building an X.509 certificate chain.</summary>
      <returns>The <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy"></see> object associated with this X.509 chain.</returns>
      <exception cref="T:System.ArgumentNullException">The value being set for this property is null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Chain.ChainStatus">
      <summary>Gets the status of each element in an <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain"></see> object.</summary>
      <returns>An array of <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainStatus"></see> objects.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.Create">
      <summary>Creates an <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain"></see> object after querying for the mapping defined in the CryptoConfig file, and maps the chain to that mapping.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain"></see> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.Dispose">
      <summary>Releases all of the resources used by this <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain"></see>.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain"></see>, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.Finalize">
      
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.Reset">
      <summary>Clears the current <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain"></see> object.</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Chain.SafeHandle">
      <summary>Gets a safe handle for this <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain"></see> instance.</summary>
      <returns>Returns the <see cref="T:Microsoft.Win32.SafeHandles.SafeX509ChainHandle"></see>.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ChainElement">
      <summary>Represents an element of an X.509 chain.</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElement.Certificate">
      <summary>Gets the X.509 certificate at a particular chain element.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"></see> object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElement.ChainElementStatus">
      <summary>Gets the error status of the current X.509 certificate in a chain.</summary>
      <returns>An array of <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainStatus"></see> objects.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElement.Information">
      <summary>Gets additional error information from an unmanaged certificate chain structure.</summary>
      <returns>A string representing the pwszExtendedErrorInfo member of the unmanaged CERT_CHAIN_ELEMENT structure in the Crypto API.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection">
      <summary>Represents a collection of <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElement"></see> objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.CopyTo(System.Security.Cryptography.X509Certificates.X509ChainElement[],System.Int32)">
      <summary>Copies an <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"></see> object into an array, starting at the specified index.</summary>
      <param name="array">An array of <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElement"></see> objects.</param>
      <param name="index">An integer representing the index value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="index">index</paramref> is less than zero, or greater than or equal to the length of the array.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="index">index</paramref> plus the current count is greater than the length of the array.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.Count">
      <summary>Gets the number of elements in the collection.</summary>
      <returns>An integer representing the number of elements in the collection.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.GetEnumerator">
      <summary>Gets an <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator"></see> object that can be used to navigate through a collection of chain elements.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator"></see> object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.IsSynchronized">
      <summary>Gets a value indicating whether the collection of chain elements is synchronized.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElement"></see> object at the specified index.</summary>
      <param name="index">An integer value.</param>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElement"></see> object.</returns>
      <exception cref="T:System.InvalidOperationException"><paramref name="index">index</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is greater than or equal to the length of the collection.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to an <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"></see> object.</summary>
      <returns>A pointer reference to the current object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies an <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"></see> object into an array, starting at the specified index.</summary>
      <param name="array">An array to copy the <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"></see> object to.</param>
      <param name="index">The index of array at which to start copying.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="index">index</paramref> is less than zero, or greater than or equal to the length of the array.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="index">index</paramref> plus the current count is greater than the length of the array.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets an <see cref="T:System.Collections.IEnumerator"></see> object that can be used to navigate a collection of chain elements.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> object.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator">
      <summary>Supports a simple iteration over an <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"></see>. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator.Current">
      <summary>Gets the current element in the <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"></see>.</summary>
      <returns>The current element in the <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator.MoveNext">
      <summary>Advances the enumerator to the next element in the <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"></see>.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"></see>.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the current element in the <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"></see>.</summary>
      <returns>The current element in the <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy">
      <summary>Represents the chain policy to be applied when building an X509 certificate chain. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainPolicy.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy"></see> class.</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.ApplicationPolicy">
      <summary>Gets a collection of object identifiers (OIDs) specifying which application policies or enhanced key usages (EKUs) the certificate supports.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.OidCollection"></see> object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.CertificatePolicy">
      <summary>Gets a collection of object identifiers (OIDs) specifying which certificate policies the certificate supports.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.OidCollection"></see> object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.ExtraStore">
      <summary>Represents an additional collection of certificates that can be searched by the chaining engine when validating a certificate chain.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"></see> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainPolicy.Reset">
      <summary>Resets the <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy"></see> members to their default values.</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.RevocationFlag">
      <summary>Gets or sets values for X509 revocation flags.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509RevocationFlag"></see> object.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Security.Cryptography.X509Certificates.X509RevocationFlag"></see> value supplied is not a valid flag.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.RevocationMode">
      <summary>Gets or sets values for X509 certificate revocation mode.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509RevocationMode"></see> object.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Security.Cryptography.X509Certificates.X509RevocationMode"></see> value supplied is not a valid flag.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.UrlRetrievalTimeout">
      <summary>Gets the time span that elapsed during online revocation verification or downloading the certificate revocation list (CRL).</summary>
      <returns>A <see cref="T:System.TimeSpan"></see> object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.VerificationFlags">
      <summary>Gets verification flags for the certificate.</summary>
      <returns>A value from the <see cref="T:System.Security.Cryptography.X509Certificates.X509VerificationFlags"></see> enumeration.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Security.Cryptography.X509Certificates.X509VerificationFlags"></see> value supplied is not a valid flag. <see cref="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.NoFlag"></see> is the default value.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.VerificationTime">
      <summary>The time that the certificate was verified expressed in local time.</summary>
      <returns>A <see cref="T:System.DateTime"></see> object.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ChainStatus">
      <summary>Provides a simple structure for storing X509 chain status and error information.</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainStatus.Status">
      <summary>Specifies the status of the X509 chain.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags"></see> value.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainStatus.StatusInformation">
      <summary>Specifies a description of the <see cref="P:System.Security.Cryptography.X509Certificates.X509Chain.ChainStatus"></see> value.</summary>
      <returns>A localizable string.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags">
      <summary>Defines the status of an X509 chain.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.CtlNotSignatureValid">
      <summary>Specifies that the certificate trust list (CTL) contains an invalid signature.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.CtlNotTimeValid">
      <summary>Specifies that the certificate trust list (CTL) is not valid because of an invalid time value, such as one that indicates that the CTL has expired.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.CtlNotValidForUsage">
      <summary>Specifies that the certificate trust list (CTL) is not valid for this use.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.Cyclic">
      <summary>Specifies that the X509 chain could not be built.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.ExplicitDistrust">
      <summary>Specifies that the certificate is explicitly distrusted.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasExcludedNameConstraint">
      <summary>Specifies that the X509 chain is invalid because a certificate has excluded a name constraint.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasNotDefinedNameConstraint">
      <summary>Specifies that the certificate has an undefined name constraint.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasNotPermittedNameConstraint">
      <summary>Specifies that the certificate has an impermissible name constraint.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasNotSupportedCriticalExtension">
      <summary>Specifies that the certificate does not support a critical extension.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasNotSupportedNameConstraint">
      <summary>Specifies that the certificate does not have a supported name constraint or has a name constraint that is unsupported.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasWeakSignature">
      <summary>Specifies that the certificate has not been strong signed. Typically, this indicates that the MD2 or MD5 hashing algorithms were used to create a hash of the certificate.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.InvalidBasicConstraints">
      <summary>Specifies that the X509 chain is invalid due to invalid basic constraints.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.InvalidExtension">
      <summary>Specifies that the X509 chain is invalid due to an invalid extension.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.InvalidNameConstraints">
      <summary>Specifies that the X509 chain is invalid due to invalid name constraints.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.InvalidPolicyConstraints">
      <summary>Specifies that the X509 chain is invalid due to invalid policy constraints.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError">
      <summary>Specifies that the X509 chain has no errors.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoIssuanceChainPolicy">
      <summary>Specifies that there is no certificate policy extension in the certificate. This error would occur if a group policy has specified that all certificates must have a certificate policy.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NotSignatureValid">
      <summary>Specifies that the X509 chain is invalid due to an invalid certificate signature.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NotTimeNested">
      <summary>Deprecated. Specifies that the CA (certificate authority) certificate and the issued certificate have validity periods that are not nested. For example, the CA cert can be valid from January 1 to December 1 and the issued certificate from January 2 to December 2, which would mean the validity periods are not nested.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NotTimeValid">
      <summary>Specifies that the X509 chain is not valid due to an invalid time value, such as a value that indicates an expired certificate.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NotValidForUsage">
      <summary>Specifies that the key usage is not valid.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.OfflineRevocation">
      <summary>Specifies that the online certificate revocation list (CRL) the X509 chain relies on is currently offline.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.PartialChain">
      <summary>Specifies that the X509 chain could not be built up to the root certificate.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.RevocationStatusUnknown">
      <summary>Specifies that it is not possible to determine whether the certificate has been revoked. This can be due to the certificate revocation list (CRL) being offline or unavailable.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.Revoked">
      <summary>Specifies that the X509 chain is invalid due to a revoked certificate.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.UntrustedRoot">
      <summary>Specifies that the X509 chain is invalid due to an untrusted root certificate.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension">
      <summary>Defines the collection of object identifiers (OIDs) that indicates the applications that use the key. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension"></see> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension"></see> class using an <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object and a value that identifies whether the extension is critical.</summary>
      <param name="encodedEnhancedKeyUsages">The encoded data to use to create the extension.</param>
      <param name="critical">true if the extension is critical; otherwise, false.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension.#ctor(System.Security.Cryptography.OidCollection,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension"></see> class using an <see cref="T:System.Security.Cryptography.OidCollection"></see> and a value that identifies whether the extension is critical.</summary>
      <param name="enhancedKeyUsages">An <see cref="T:System.Security.Cryptography.OidCollection"></see> collection.</param>
      <param name="critical">true if the extension is critical; otherwise, false.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The specified <see cref="T:System.Security.Cryptography.OidCollection"></see> contains one or more corrupt values.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension"></see> class using an <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object.</summary>
      <param name="asnEncodedData">The encoded data to use to create the extension.</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension.EnhancedKeyUsages">
      <summary>Gets the collection of object identifiers (OIDs) that indicate the applications that use the key.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.OidCollection"></see> object indicating the applications that use the key.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Extension">
      <summary>Represents an X509 extension.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Extension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension"></see> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Extension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension"></see> class.</summary>
      <param name="encodedExtension">The encoded data to be used to create the extension.</param>
      <param name="critical">true if the extension is critical; otherwise false.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Extension.#ctor(System.Security.Cryptography.Oid,System.Byte[],System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension"></see> class.</summary>
      <param name="oid">The object identifier used to identify the extension.</param>
      <param name="rawData">The encoded data used to create the extension.</param>
      <param name="critical">true if the extension is critical; otherwise false.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="oid">oid</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="oid">oid</paramref> is an empty string (&quot;&quot;).</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Extension.#ctor(System.String,System.Byte[],System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension"></see> class.</summary>
      <param name="oid">A string representing the object identifier.</param>
      <param name="rawData">The encoded data used to create the extension.</param>
      <param name="critical">true if the extension is critical; otherwise false.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>Copies the extension properties of the specified <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object.</summary>
      <param name="asnEncodedData">The <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> to be copied.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="asnEncodedData">asnEncodedData</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asnEncodedData">asnEncodedData</paramref> does not have a valid X.509 extension.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Extension.Critical">
      <summary>Gets a Boolean value indicating whether the extension is critical.</summary>
      <returns>true if the extension is critical; otherwise, false.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection">
      <summary>Represents a collection of <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension"></see> objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"></see> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.Add(System.Security.Cryptography.X509Certificates.X509Extension)">
      <summary>Adds an <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension"></see> object to an <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"></see> object.</summary>
      <param name="extension">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension"></see> object to add to the <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"></see> object.</param>
      <returns>The index at which the <paramref name="extension">extension</paramref> parameter was added.</returns>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="extension">extension</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.CopyTo(System.Security.Cryptography.X509Certificates.X509Extension[],System.Int32)">
      <summary>Copies a collection into an array starting at the specified index.</summary>
      <param name="array">An array of <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension"></see> objects.</param>
      <param name="index">The location in the array at which copying starts.</param>
      <exception cref="T:System.ArgumentException"><paramref name="index">index</paramref> is a zero-length string or contains an invalid value.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="index">index</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> specifies a value that is not in the range of the array.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.Count">
      <summary>Gets the number of <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension"></see> objects in a <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"></see> object.</summary>
      <returns>An integer representing the number of <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension"></see> objects in the <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"></see> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through an <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"></see> object.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator"></see> object to use to iterate through the <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"></see> object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.IsSynchronized">
      <summary>Gets a value indicating whether the collection is guaranteed to be thread safe.</summary>
      <returns>true if the collection is thread safe; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension"></see> object at the specified index.</summary>
      <param name="index">The location of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension"></see> object to retrieve.</param>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension"></see> object.</returns>
      <exception cref="T:System.InvalidOperationException"><paramref name="index">index</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is equal to or greater than the length of the array.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.Item(System.String)">
      <summary>Gets the first <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension"></see> object whose value or friendly name is specified by an object identifier (OID).</summary>
      <param name="oid">The object identifier (OID) of the extension to retrieve.</param>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension"></see> object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.SyncRoot">
      <summary>Gets an object that you can use to synchronize access to the <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"></see> object.</summary>
      <returns>An object that you can use to synchronize access to the <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"></see> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the collection into an array starting at the specified index.</summary>
      <param name="array">An array of <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension"></see> objects.</param>
      <param name="index">The location in the array at which copying starts.</param>
      <exception cref="T:System.ArgumentException"><paramref name="index">index</paramref> is a zero-length string or contains an invalid value.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="index">index</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> specifies a value that is not in the range of the array.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can iterate through an <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"></see> object.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> object to use to iterate through the <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"></see> object.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator">
      <summary>Supports a simple iteration over a <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"></see>. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator.Current">
      <summary>Gets the current element in the <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"></see>.</summary>
      <returns>The current element in the <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator.MoveNext">
      <summary>Advances the enumerator to the next element in the <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"></see>.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"></see>.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator.System#Collections#IEnumerator#Current">
      <summary>Gets an object from a collection.</summary>
      <returns>The current element in the <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509FindType">
      <summary>Specifies the type of value the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method searches for.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByApplicationPolicy">
      <summary>The <paramref name="findValue">findValue</paramref> parameter for the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method must be a string representing either the application policy friendly name or the object identifier (OID, or <see cref="T:System.Security.Cryptography.Oid"></see>) of the certificate. For example, &quot;Encrypting File System&quot; or &quot;1.3.6.1.4.1.311.10.3.4&quot; can be used. For an application that will be localized, the OID value must be used, because the friendly name is localized.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByCertificatePolicy">
      <summary>The <paramref name="findValue">findValue</paramref> parameter for the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method must be a string representing either the friendly name or the object identifier (OID, or <see cref="T:System.Security.Cryptography.Oid"></see>) of the certificate policy. The best practice is to use the OID, such as &quot;1.3.6.1.4.1.311.10.3.4&quot;. For an application that will be localized, the OID must be used, because the friendly name is localized.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByExtension">
      <summary>The <paramref name="findValue">findValue</paramref> parameter for the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method must be a string describing the extension to find. The object identifier (OID) is most commonly used to direct the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method to search for all certificates that have an extension matching that OID value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerDistinguishedName">
      <summary>The <paramref name="findValue">findValue</paramref> parameter for the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method must be a string representing the issuer distinguished name of the certificate. This is a more specific search than that provided by the <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerName"></see> enumeration value. Using the <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerDistinguishedName"></see> value, the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method performs a case-insensitive string comparison for the entire distinguished name. Searching by issuer name is a less precise search.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerName">
      <summary>The <paramref name="findValue">findValue</paramref> parameter for the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method must be a string representing the issuer name of the certificate. This is a less specific search than that provided by the <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerDistinguishedName"></see> enumeration value. Using the <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerName"></see> value, the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method performs a case-insensitive string comparison using the supplied value. For example, if you pass &quot;MyCA&quot; to the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method, it will find all certificates with the issuer name containing that string, regardless of other issuer values.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByKeyUsage">
      <summary>The <paramref name="findValue">findValue</paramref> parameter for the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method must be either a string representing the key usage or an integer representing a bit mask containing all the requested key usages. For the string value, only one key usage at a time can be specified, but the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method can be used in a cascading sequence to get the intersection of the requested usages. For example, the <paramref name="findValue">findValue</paramref> parameter can be set to &quot;KeyEncipherment&quot; or an integer (0x30 indicates &quot;KeyEncipherment&quot; and &quot;DataEncipherment&quot;). Values of the <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags"></see> enumeration can also be used.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySerialNumber">
      <summary>The <paramref name="findValue">findValue</paramref> parameter for the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method must be a string that represents the serial number of the certificate as displayed by the certificate dialog box, but without the spaces, or as returned by the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumberString"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName">
      <summary>The <paramref name="findValue">findValue</paramref> parameter for the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method must be a string representing the subject distinguished name of the certificate. This is a more specific search than that provided by the <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName"></see> enumeration value. Using the <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName"></see> value, the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method performs a case-insensitive string comparison for the entire distinguished name. Searching by subject name is a less precise search.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectKeyIdentifier">
      <summary>The <paramref name="findValue">findValue</paramref> parameter for the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method must be a string representing the subject key identifier in hexadecimal, such as &quot;F3E815D45E83B8477B9284113C64EF208E897112&quot;, as displayed in the UI.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName">
      <summary>The <paramref name="findValue">findValue</paramref> parameter for the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method must be a string representing the subject name of the certificate. This is a less specific search than that provided by the <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName"></see> enumeration value. Using the <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName"></see> value, the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method performs a case-insensitive string comparison using the supplied value. For example, if you pass &quot;MyCert&quot; to the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method, it will find all certificates with the subject name containing that string, regardless of other subject values. Searching by distinguished name is a more precise search.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTemplateName">
      <summary>The <paramref name="findValue">findValue</paramref> parameter for the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method must be a string representing the template name of the certificate, such as &quot;ClientAuth&quot;. A template name is an X509 version 3 extension that specifies the uses of the certificate.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByThumbprint">
      <summary>The <paramref name="findValue">findValue</paramref> parameter for the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method must be a string representing the thumbprint of the certificate.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeExpired">
      <summary>The <paramref name="findValue">findValue</paramref> parameter for the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method must be a <see cref="T:System.DateTime"></see> value in local time. For example, you can find all the certificates that will be valid until the end of the year by eliminating the results of a <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> operation for <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeExpired"></see> of the last day of the year from the results of a <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> operation for <see cref="P:System.DateTime.Now"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeNotYetValid">
      <summary>The <paramref name="findValue">findValue</paramref> parameter for the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method must be a <see cref="T:System.DateTime"></see> value in local time. The value does not have to be in the future. For example, you can use <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeNotYetValid"></see> to find certificates that became valid in the current year by taking the intersection of the results of a <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> operation for <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeNotYetValid"></see> for the last day of last year with the results of a <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> operation for <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeValid"></see> of <see cref="P:System.DateTime.Now"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeValid">
      <summary>The <paramref name="findValue">findValue</paramref> parameter for the <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)"></see> method must be a <see cref="T:System.DateTime"></see> value in local time. You can use <see cref="P:System.DateTime.Now"></see> to find all the currently valid certificates.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509IncludeOption">
      <summary>Specifies how much of the X.509 certificate chain should be included in the X.509 data.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.EndCertOnly">
      <summary>Only the end certificate is included in the X.509 chain information.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.ExcludeRoot">
      <summary>The entire X.509 chain is included except for the root certificate.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.None">
      <summary>No X.509 chain information is included.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.WholeChain">
      <summary>The entire X.509 chain is included.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension">
      <summary>Defines the usage of a key contained within an X.509 certificate.  This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension"></see> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension"></see> class using an <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object and a value that identifies whether the extension is critical.</summary>
      <param name="encodedKeyUsage">The encoded data to use to create the extension.</param>
      <param name="critical">true if the extension is critical; otherwise, false.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension.#ctor(System.Security.Cryptography.X509Certificates.X509KeyUsageFlags,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension"></see> class using the specified <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags"></see> value and a value that identifies whether the extension is critical.</summary>
      <param name="keyUsages">One of the <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags"></see> values that describes how to use the key.</param>
      <param name="critical">true if the extension is critical; otherwise, false.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension"></see> class using an <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object.</summary>
      <param name="asnEncodedData">The encoded data to use to create the extension.</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension.KeyUsages">
      <summary>Gets the key usage flag associated with the certificate.</summary>
      <returns>One of the <see cref="P:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension.KeyUsages"></see> values.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The extension cannot be decoded.</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags">
      <summary>Defines how the certificate key can be used. If this value is not defined, the key can be used for any purpose.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.CrlSign">
      <summary>The key can be used to sign a certificate revocation list (CRL).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.DataEncipherment">
      <summary>The key can be used for data encryption.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.DecipherOnly">
      <summary>The key can be used for decryption only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.DigitalSignature">
      <summary>The key can be used as a digital signature.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.EncipherOnly">
      <summary>The key can be used for encryption only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.KeyAgreement">
      <summary>The key can be used to determine key agreement, such as a key created using the Diffie-Hellman key agreement algorithm.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.KeyCertSign">
      <summary>The key can be used to sign certificates.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.KeyEncipherment">
      <summary>The key can be used for key encryption.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.None">
      <summary>No key usage parameters.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.NonRepudiation">
      <summary>The key can be used for authentication.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509NameType">
      <summary>Specifies the type of name the X509 certificate contains.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509NameType.DnsFromAlternativeName">
      <summary>The DNS name associated with the alternative name of either the subject or the issuer of an X.509 certificate.  This value is equivalent to the <see cref="F:System.Security.Cryptography.X509Certificates.X509NameType.DnsName"></see> value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509NameType.DnsName">
      <summary>The DNS name associated with the alternative name of either the subject or issuer of an X509 certificate.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509NameType.EmailName">
      <summary>The email address of the subject or issuer associated of an X509 certificate.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509NameType.SimpleName">
      <summary>The simple name of a subject or issuer of an X509 certificate.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509NameType.UpnName">
      <summary>The UPN name of the subject or issuer of an X509 certificate.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509NameType.UrlName">
      <summary>The URL address associated with the alternative name of either the subject or issuer of an X509 certificate.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509RevocationFlag">
      <summary>Specifies which X509 certificates in the chain should be checked for revocation.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509RevocationFlag.EndCertificateOnly">
      <summary>Only the end certificate is checked for revocation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509RevocationFlag.EntireChain">
      <summary>The entire chain of certificates is checked for revocation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509RevocationFlag.ExcludeRoot">
      <summary>The entire chain, except the root certificate, is checked for revocation.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509RevocationMode">
      <summary>Specifies the mode used to check for X509 certificate revocation.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509RevocationMode.NoCheck">
      <summary>No revocation check is performed on the certificate.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509RevocationMode.Offline">
      <summary>A revocation check is made using a cached certificate revocation list (CRL).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509RevocationMode.Online">
      <summary>A revocation check is made using an online certificate revocation list (CRL).</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Store">
      <summary>Represents an X.509 store, which is a physical store where certificates are persisted and managed. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Store"></see> class using the personal certificates of the current user store.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Store"></see> class using an Intptr handle to an HCERTSTORE store.</summary>
      <param name="storeHandle">A handle to an HCERTSTORE store.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="storeHandle">storeHandle</paramref> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="storeHandle">storeHandle</paramref> parameter points to an invalid context.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.Security.Cryptography.X509Certificates.StoreLocation)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Store"></see> class using the specified <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation"></see> value.</summary>
      <param name="storeLocation">One of the enumeration values that specifies the location of the X.509 certificate store.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.Security.Cryptography.X509Certificates.StoreName)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Store"></see> class using the specified <see cref="T:System.Security.Cryptography.X509Certificates.StoreName"></see> value.</summary>
      <param name="storeName">One of the enumeration values that specifies the name of the X.509 certificate store.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Store"></see> class using the specified store name.</summary>
      <param name="storeName">A string value that represents the store name. See <see cref="T:System.Security.Cryptography.X509Certificates.StoreName"></see> for more information.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Store"></see> class using the specified <see cref="T:System.Security.Cryptography.X509Certificates.StoreName"></see> and <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation"></see> values.</summary>
      <param name="storeName">One of the enumeration values that specifies the name of the X.509 certificate store.</param>
      <param name="storeLocation">One of the enumeration values that specifies the location of the X.509 certificate store.</param>
      <exception cref="T:System.ArgumentException"><paramref name="storeLocation">storeLocation</paramref> is not a valid location or <paramref name="storeName">storeName</paramref> is not a valid name.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Store"></see> class using a string that represents a value from the <see cref="T:System.Security.Cryptography.X509Certificates.StoreName"></see> enumeration and a value from the <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation"></see> enumeration.</summary>
      <param name="storeName">A string that represents a value from the <see cref="T:System.Security.Cryptography.X509Certificates.StoreName"></see> enumeration.</param>
      <param name="storeLocation">One of the enumeration values that specifies the location of the X.509 certificate store.</param>
      <exception cref="T:System.ArgumentException"><paramref name="storeLocation">storeLocation</paramref> contains invalid values.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.Add(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Adds a certificate to an X.509 certificate store.</summary>
      <param name="certificate">The certificate to add.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="certificate">certificate</paramref> is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate could not be added to the store.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>Adds a collection of certificates to an X.509 certificate store.</summary>
      <param name="certificates">The collection of certificates to add.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="certificates">certificates</paramref> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Store.Certificates">
      <summary>Returns a collection of certificates located in an X.509 certificate store.</summary>
      <returns>A collection of certificates.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.Close">
      <summary>Closes an X.509 certificate store.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.Dispose">
      <summary>Releases the resources used by this <see cref="T:System.Security.Cryptography.X509Certificates.X509Store"></see>.</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Store.Location">
      <summary>Gets the location of the X.509 certificate store.</summary>
      <returns>The location of the certificate store.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Store.Name">
      <summary>Gets the name of the X.509 certificate store.</summary>
      <returns>The name of the certificate store.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.Open(System.Security.Cryptography.X509Certificates.OpenFlags)">
      <summary>Opens an X.509 certificate store or creates a new store, depending on <see cref="T:System.Security.Cryptography.X509Certificates.OpenFlags"></see> flag settings.</summary>
      <param name="flags">A bitwise combination of enumeration values that specifies the way to open the X.509 certificate store.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The store is unreadable.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.ArgumentException">The store contains invalid values.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.Remove(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Removes a certificate from an X.509 certificate store.</summary>
      <param name="certificate">The certificate to remove.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="certificate">certificate</paramref> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.RemoveRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>Removes a range of certificates from an X.509 certificate store.</summary>
      <param name="certificates">A range of certificates to remove.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="certificates">certificates</paramref> is null.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Store.StoreHandle">
      <summary>Gets an <see cref="T:System.IntPtr"></see> handle to an HCERTSTORE store.</summary>
      <returns>A handle to an HCERTSTORE store.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The store is not open.</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension">
      <summary>Defines a string that identifies a certificate's subject key identifier (SKI). This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension"></see> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Byte[],System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension"></see> class using a byte array and a value that identifies whether the extension is critical.</summary>
      <param name="subjectKeyIdentifier">A byte array that represents data to use to create the extension.</param>
      <param name="critical">true if the extension is critical; otherwise, false.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension"></see> class using encoded data and a value that identifies whether the extension is critical.</summary>
      <param name="encodedSubjectKeyIdentifier">The <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object to use to create the extension.</param>
      <param name="critical">true if the extension is critical; otherwise, false.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Security.Cryptography.X509Certificates.PublicKey,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension"></see> class using a public key and a value indicating whether the extension is critical.</summary>
      <param name="key">A <see cref="T:System.Security.Cryptography.X509Certificates.PublicKey"></see> object to create a subject key identifier (SKI) from.</param>
      <param name="critical">true if the extension is critical; otherwise, false.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension"></see> class using a string and a value that identifies whether the extension is critical.</summary>
      <param name="subjectKeyIdentifier">A string, encoded in hexadecimal format, that represents the subject key identifier (SKI) for a certificate.</param>
      <param name="critical">true if the extension is critical; otherwise, false.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Security.Cryptography.X509Certificates.PublicKey,System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension"></see> class using a public key, a hash algorithm identifier, and a value indicating whether the extension is critical.</summary>
      <param name="key">A <see cref="T:System.Security.Cryptography.X509Certificates.PublicKey"></see> object to create a subject key identifier (SKI) from.</param>
      <param name="algorithm">One of the <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm"></see> values that identifies which hash algorithm to use.</param>
      <param name="critical">true if the extension is critical; otherwise, false.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>Creates a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension"></see> class by copying information from encoded data.</summary>
      <param name="asnEncodedData">The <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object to use to create the extension.</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.SubjectKeyIdentifier">
      <summary>Gets a string that represents the subject key identifier (SKI) for a certificate.</summary>
      <returns>A string, encoded in hexadecimal format, that represents the subject key identifier (SKI).</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The extension cannot be decoded.</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm">
      <summary>Defines the type of hash algorithm to use with the <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension"></see> class.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm.CapiSha1">
      <summary>The subject key identifier (SKI) is composed of a 160-bit SHA-1 hash of the encoded public key (including the tag, length, and number of unused bits).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm.Sha1">
      <summary>The SKI is composed of the 160-bit SHA-1 hash of the value of the public key (excluding the tag, length, and number of unused bits).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm.ShortSha1">
      <summary>The SKI is composed of a four-bit type field with the value 0100, followed by the least significant 60 bits of the SHA-1 hash of the value of the public key (excluding the tag, length, and number of unused bit string bits)</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509VerificationFlags">
      <summary>Specifies conditions under which verification of certificates in the X509 chain should be conducted.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.AllFlags">
      <summary>All flags pertaining to verification are included.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.AllowUnknownCertificateAuthority">
      <summary>Ignore that the chain cannot be verified due to an unknown certificate authority (CA).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreCertificateAuthorityRevocationUnknown">
      <summary>Ignore that the certificate authority revocation is unknown when determining certificate verification.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreCtlNotTimeValid">
      <summary>Ignore that the certificate trust list (CTL) is not valid, for reasons such as the CTL has expired, when determining certificate verification.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreCtlSignerRevocationUnknown">
      <summary>Ignore that the certificate trust list (CTL) signer revocation is unknown when determining certificate verification.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreEndRevocationUnknown">
      <summary>Ignore that the end certificate (the user certificate) revocation is unknown when determining certificate verification.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreInvalidBasicConstraints">
      <summary>Ignore that the basic constraints are not valid when determining certificate verification.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreInvalidName">
      <summary>Ignore that the certificate has an invalid name when determining certificate verification.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreInvalidPolicy">
      <summary>Ignore that the certificate has invalid policy when determining certificate verification.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreNotTimeNested">
      <summary>Ignore that the CA (certificate authority) certificate and the issued certificate have validity periods that are not nested when verifying the certificate. For example, the CA cert can be valid from January 1 to December 1 and the issued certificate from January 2 to December 2, which would mean the validity periods are not nested.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreNotTimeValid">
      <summary>Ignore certificates in the chain that are not valid either because they have expired or they are not yet in effect when determining certificate validity.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreRootRevocationUnknown">
      <summary>Ignore that the root revocation is unknown when determining certificate verification.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreWrongUsage">
      <summary>Ignore that the certificate was not issued for the current use when determining certificate verification.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.NoFlag">
      <summary>No flags pertaining to verification are included.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ObservableCollection`1">
      <summary>Represents a dynamic data collection that provides notifications when items get added, removed, or when the whole list is refreshed.</summary>
      <typeparam name="T">The type of elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"></see> class.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"></see> class that contains elements copied from the specified collection.</summary>
      <param name="collection">The collection from which the elements are copied.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collection">collection</paramref> parameter cannot be null.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"></see> class that contains elements copied from the specified list.</summary>
      <param name="list">The list from which the elements are copied.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="list">list</paramref> parameter cannot be null.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy">
      <summary>Disallows reentrant attempts to change this collection.</summary>
      <returns>An <see cref="T:System.IDisposable"></see> object that can be used to dispose of the object.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy">
      <summary>Checks for reentrant attempts to change this collection.</summary>
      <exception cref="T:System.InvalidOperationException">If there was a call to <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy"></see> of which the <see cref="T:System.IDisposable"></see> return value has not yet been disposed of. Typically, this means when there are additional attempts to change this collection during a <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"></see> event. However, it depends on when derived classes choose to call <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy"></see>.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
      <summary>Occurs when an item is added, removed, changed, moved, or the entire list is refreshed.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary>Inserts an item into the collection at the specified index.</summary>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="item">The object to insert.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)">
      <summary>Moves the item at the specified index to a new location in the collection.</summary>
      <param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
      <param name="newIndex">The zero-based index specifying the new location of the item.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)">
      <summary>Moves the item at the specified index to a new location in the collection.</summary>
      <param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
      <param name="newIndex">The zero-based index specifying the new location of the item.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"></see> event with the provided arguments.</summary>
      <param name="e">Arguments of the event being raised.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged"></see> event with the provided arguments.</summary>
      <param name="e">Arguments of the event being raised.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
      <summary>Removes the item at the specified index of the collection.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1">
      <summary>Represents a read-only <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"></see>.</summary>
      <typeparam name="T">The type of elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1"></see> class that serves as a wrapper around the specified <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"></see>.</summary>
      <param name="list">The <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"></see> with which to create this instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1"></see> class.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="list">list</paramref> is null.</exception>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged">
      <summary>Occurs when an item is added or removed.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged"></see> event using the provided arguments.</summary>
      <param name="args">Arguments of the event being raised.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged"></see> event using the provided arguments.</summary>
      <param name="args">Arguments of the event being raised.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Collections.Specialized.BitVector32.Section">
      <summary>Represents a section of the vector that can contain an integer number.</summary>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.Equals(System.Collections.Specialized.BitVector32.Section)">
      <summary>Determines whether the specified <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> object is the same as the current <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> object.</summary>
      <param name="obj">The <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> object to compare with the current <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> object.</param>
      <returns>true if the <paramref name="obj">obj</paramref> parameter is the same as the current <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> object; otherwise false.</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.Equals(System.Object)">
      <summary>Determines whether the specified object is the same as the current <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> object.</summary>
      <param name="o">The object to compare with the current <see cref="T:System.Collections.Specialized.BitVector32.Section"></see>.</param>
      <returns>true if the specified object is the same as the current <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> object; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.GetHashCode">
      <summary>Serves as a hash function for the current <see cref="T:System.Collections.Specialized.BitVector32.Section"></see>, suitable for hashing algorithms and data structures, such as a hash table.</summary>
      <returns>A hash code for the current <see cref="T:System.Collections.Specialized.BitVector32.Section"></see>.</returns>
    </member>
    <member name="P:System.Collections.Specialized.BitVector32.Section.Mask">
      <summary>Gets a mask that isolates this section within the <see cref="T:System.Collections.Specialized.BitVector32"></see>.</summary>
      <returns>A mask that isolates this section within the <see cref="T:System.Collections.Specialized.BitVector32"></see>.</returns>
    </member>
    <member name="P:System.Collections.Specialized.BitVector32.Section.Offset">
      <summary>Gets the offset of this section from the start of the <see cref="T:System.Collections.Specialized.BitVector32"></see>.</summary>
      <returns>The offset of this section from the start of the <see cref="T:System.Collections.Specialized.BitVector32"></see>.</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.op_Equality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)">
      <summary>Determines whether two specified <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> objects are equal.</summary>
      <param name="a">A <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> object.</param>
      <param name="b">A <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> object.</param>
      <returns>true if the <paramref name="a">a</paramref> and <paramref name="b">b</paramref> parameters represent the same <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> object, otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.op_Inequality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)">
      <summary>Determines whether two <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> objects have different values.</summary>
      <param name="a">A <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> object.</param>
      <param name="b">A <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> object.</param>
      <returns>true if the <paramref name="a">a</paramref> and <paramref name="b">b</paramref> parameters represent different <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> objects; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.ToString">
      <returns></returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.ToString(System.Collections.Specialized.BitVector32.Section)">
      <summary>Returns a string that represents the specified <see cref="T:System.Collections.Specialized.BitVector32.Section"></see>.</summary>
      <param name="value">The <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> to represent.</param>
      <returns>A string that represents the specified <see cref="T:System.Collections.Specialized.BitVector32.Section"></see>.</returns>
    </member>
    <member name="T:System.Collections.Specialized.BitVector32">
      <summary>Provides a simple structure that stores Boolean values and small integers in 32 bits of memory.</summary>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.BitVector32"></see> structure containing the data represented in an existing <see cref="T:System.Collections.Specialized.BitVector32"></see> structure.</summary>
      <param name="value">A <see cref="T:System.Collections.Specialized.BitVector32"></see> structure that contains the data to copy.</param>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.BitVector32"></see> structure containing the data represented in an integer.</summary>
      <param name="data">An integer representing the data of the new <see cref="T:System.Collections.Specialized.BitVector32"></see>.</param>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.CreateMask">
      <summary>Creates the first mask in a series of masks that can be used to retrieve individual bits in a <see cref="T:System.Collections.Specialized.BitVector32"></see> that is set up as bit flags.</summary>
      <returns>A mask that isolates the first bit flag in the <see cref="T:System.Collections.Specialized.BitVector32"></see>.</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)">
      <summary>Creates an additional mask following the specified mask in a series of masks that can be used to retrieve individual bits in a <see cref="T:System.Collections.Specialized.BitVector32"></see> that is set up as bit flags.</summary>
      <param name="previous">The mask that indicates the previous bit flag.</param>
      <returns>A mask that isolates the bit flag following the one that <paramref name="previous">previous</paramref> points to in <see cref="T:System.Collections.Specialized.BitVector32"></see>.</returns>
      <exception cref="T:System.InvalidOperationException"><paramref name="previous">previous</paramref> indicates the last bit flag in the <see cref="T:System.Collections.Specialized.BitVector32"></see>.</exception>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)">
      <summary>Creates the first <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> in a series of sections that contain small integers.</summary>
      <param name="maxValue">A 16-bit signed integer that specifies the maximum value for the new <see cref="T:System.Collections.Specialized.BitVector32.Section"></see>.</param>
      <returns>A <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> that can hold a number from zero to <paramref name="maxValue">maxValue</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="maxValue">maxValue</paramref> is less than 1.</exception>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)">
      <summary>Creates a new <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> following the specified <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> in a series of sections that contain small integers.</summary>
      <param name="maxValue">A 16-bit signed integer that specifies the maximum value for the new <see cref="T:System.Collections.Specialized.BitVector32.Section"></see>.</param>
      <param name="previous">The previous <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> in the <see cref="T:System.Collections.Specialized.BitVector32"></see>.</param>
      <returns>A <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> that can hold a number from zero to <paramref name="maxValue">maxValue</paramref>.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="maxValue">maxValue</paramref> is less than 1.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="previous">previous</paramref> includes the final bit in the <see cref="T:System.Collections.Specialized.BitVector32"></see>.   -or-  <paramref name="maxValue">maxValue</paramref> is greater than the highest value that can be represented by the number of bits after <paramref name="previous">previous</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Specialized.BitVector32.Data">
      <summary>Gets the value of the <see cref="T:System.Collections.Specialized.BitVector32"></see> as an integer.</summary>
      <returns>The value of the <see cref="T:System.Collections.Specialized.BitVector32"></see> as an integer.</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the <see cref="T:System.Collections.Specialized.BitVector32"></see>.</summary>
      <param name="o">The object to compare with the current <see cref="T:System.Collections.Specialized.BitVector32"></see>.</param>
      <returns>true if the specified object is equal to the <see cref="T:System.Collections.Specialized.BitVector32"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.GetHashCode">
      <summary>Serves as a hash function for the <see cref="T:System.Collections.Specialized.BitVector32"></see>.</summary>
      <returns>A hash code for the <see cref="T:System.Collections.Specialized.BitVector32"></see>.</returns>
    </member>
    <member name="P:System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)">
      <summary>Gets or sets the value stored in the specified <see cref="T:System.Collections.Specialized.BitVector32.Section"></see>.</summary>
      <param name="section">A <see cref="T:System.Collections.Specialized.BitVector32.Section"></see> that contains the value to get or set.</param>
      <returns>The value stored in the specified <see cref="T:System.Collections.Specialized.BitVector32.Section"></see>.</returns>
    </member>
    <member name="P:System.Collections.Specialized.BitVector32.Item(System.Int32)">
      <summary>Gets or sets the state of the bit flag indicated by the specified mask.</summary>
      <param name="bit">A mask that indicates the bit to get or set.</param>
      <returns>true if the specified bit flag is on (1); otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Collections.Specialized.BitVector32"></see>.</summary>
      <returns>A string that represents the current <see cref="T:System.Collections.Specialized.BitVector32"></see>.</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)">
      <summary>Returns a string that represents the specified <see cref="T:System.Collections.Specialized.BitVector32"></see>.</summary>
      <param name="value">The <see cref="T:System.Collections.Specialized.BitVector32"></see> to represent.</param>
      <returns>A string that represents the specified <see cref="T:System.Collections.Specialized.BitVector32"></see>.</returns>
    </member>
    <member name="T:System.ComponentModel.DescriptionAttribute">
      <summary>Specifies a description for a property or event.</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DescriptionAttribute"></see> class with no parameters.</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DescriptionAttribute"></see> class with a description.</summary>
      <param name="description">The description text.</param>
    </member>
    <member name="F:System.ComponentModel.DescriptionAttribute.Default">
      <summary>Specifies the default value for the <see cref="T:System.ComponentModel.DescriptionAttribute"></see>, which is an empty string (&quot;&quot;). This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.Description">
      <summary>Gets the description stored in this attribute.</summary>
      <returns>The description stored in this attribute.</returns>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.DescriptionValue">
      <summary>Gets or sets the string stored as the description.</summary>
      <returns>The string stored as the description. The default value is an empty string (&quot;&quot;).</returns>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.Equals(System.Object)">
      <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.DescriptionAttribute"></see>.</summary>
      <param name="obj">The object to test the value equality of.</param>
      <returns>true if the value of the given object is equal to that of the current; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.IsDefaultAttribute">
      <summary>Returns a value indicating whether this is the default <see cref="T:System.ComponentModel.DescriptionAttribute"></see> instance.</summary>
      <returns>true, if this is the default <see cref="T:System.ComponentModel.DescriptionAttribute"></see> instance; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary>Provides data for the <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner"></see> event.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs"></see> class.</summary>
      <param name="oldDesigner">The document that is losing activation.</param>
      <param name="newDesigner">The document that is gaining activation.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary>Gets the document that is gaining activation.</summary>
      <returns>An <see cref="T:System.ComponentModel.Design.IDesignerHost"></see> that represents the document gaining activation.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary>Gets the document that is losing activation.</summary>
      <returns>An <see cref="T:System.ComponentModel.Design.IDesignerHost"></see> that represents the document losing activation.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged"></see> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary>The exception that is thrown when an attempt to check out a file that is checked into a source code management program is canceled or fails.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.CheckoutException"></see> class with no associated message or error code.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.CheckoutException"></see> class with the specified message.</summary>
      <param name="message">A message describing the exception.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.CheckoutException"></see> class using the specified serialization data and context.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to be used for deserialization.</param>
      <param name="context">The destination to be used for deserialization.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.CheckoutException"></see> class with the specified detailed description and the specified exception.</summary>
      <param name="message">A detailed description of the error.</param>
      <param name="innerException">A reference to the inner exception that is the cause of this exception.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.CheckoutException"></see> class with the specified message and error code.</summary>
      <param name="message">A message describing the exception.</param>
      <param name="errorCode">The error code to pass.</param>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.CheckoutException"></see> class that specifies that the check out was canceled. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary>Represents a unique command identifier that consists of a numeric command ID and a GUID menu group identifier.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.CommandID"></see> class using the specified menu group GUID and command ID number.</summary>
      <param name="menuGroup">The GUID of the group that this menu command belongs to.</param>
      <param name="commandID">The numeric identifier of this menu command.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:System.ComponentModel.Design.CommandID"></see> instances are equal.</summary>
      <param name="obj">The object to compare.</param>
      <returns>true if the specified object is equivalent to this one; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary>Serves as a hash function for a particular type.</summary>
      <returns>A hash code for the current <see cref="T:System.Object"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary>Gets the GUID of the menu group that the menu command identified by this <see cref="T:System.ComponentModel.Design.CommandID"></see> belongs to.</summary>
      <returns>The GUID of the command group for this command.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary>Gets the numeric command ID.</summary>
      <returns>The command ID number.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary>Returns a <see cref="T:System.String"></see> that represents the current object.</summary>
      <returns>A string that contains the command ID information, both the GUID and integer identifier.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged"></see> event. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs"></see> class.</summary>
      <param name="component">The component that was changed.</param>
      <param name="member">A <see cref="T:System.ComponentModel.MemberDescriptor"></see> that represents the member that was changed.</param>
      <param name="oldValue">The old value of the changed member.</param>
      <param name="newValue">The new value of the changed member.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary>Gets the component that was modified.</summary>
      <returns>An <see cref="T:System.Object"></see> that represents the component that was modified.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary>Gets the member that has been changed.</summary>
      <returns>A <see cref="T:System.ComponentModel.MemberDescriptor"></see> that indicates the member that has been changed.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary>Gets the new value of the changed member.</summary>
      <returns>The new value of the changed member. This property can be null.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary>Gets the old value of the changed member.</summary>
      <returns>The old value of the changed member. This property can be null.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary>Represents the method that will handle a <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged"></see> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging"></see> event. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs"></see> class.</summary>
      <param name="component">The component that is about to be changed.</param>
      <param name="member">A <see cref="T:System.ComponentModel.MemberDescriptor"></see> indicating the member of the component that is about to be changed.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary>Gets the component that is about to be changed or the component that is the parent container of the member that is about to be changed.</summary>
      <returns>The component that is about to have a member changed.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary>Gets the member that is about to be changed.</summary>
      <returns>A <see cref="T:System.ComponentModel.MemberDescriptor"></see> indicating the member that is about to be changed, if known, or null otherwise.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary>Represents the method that will handle a <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging"></see> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs"></see> event that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded"></see>, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding"></see>, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved"></see>, and <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving"></see> events.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ComponentEventArgs"></see> class.</summary>
      <param name="component">The component that is the source of the event.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary>Gets the component associated with the event.</summary>
      <returns>The component associated with the event.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding"></see>, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded"></see>, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving"></see>, and <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved"></see> events raised for component-level events.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.Design.ComponentEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename"></see> event.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs"></see> class.</summary>
      <param name="component">The component to be renamed.</param>
      <param name="oldName">The old name of the component.</param>
      <param name="newName">The new name of the component.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary>Gets the component that is being renamed.</summary>
      <returns>The component that is being renamed.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary>Gets the name of the component after the rename event.</summary>
      <returns>The name of the component after the rename event.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary>Gets the name of the component before the rename event.</summary>
      <returns>The previous name of the component.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary>Represents the method that will handle a <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename"></see> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.InitializationEventAttribute">
      <summary>Specifies which event is raised on initialization. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.InitializationEventAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.InitializationEventAttribute"></see> class.</summary>
      <param name="eventName">The name of the initialization event.</param>
    </member>
    <member name="P:System.ComponentModel.InitializationEventAttribute.EventName">
      <summary>Gets the name of the initialization event.</summary>
      <returns>The name of the initialization event.</returns>
    </member>
    <member name="T:System.ComponentModel.INotifyDataErrorInfo">
      <summary>Defines members that data entity classes can implement to provide custom synchronous and asynchronous validation support.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged">
      <summary>Occurs when the validation errors have changed for a property or for the entire entity.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.INotifyDataErrorInfo.GetErrors(System.String)">
      <summary>Gets the validation errors for a specified property or for the entire entity.</summary>
      <param name="propertyName">The name of the property to retrieve validation errors for; or null or <see cref="F:System.String.Empty"></see>, to retrieve entity-level errors.</param>
      <returns>The validation errors for the property or entity.</returns>
    </member>
    <member name="P:System.ComponentModel.INotifyDataErrorInfo.HasErrors">
      <summary>Gets a value that indicates whether the entity has validation errors.</summary>
      <returns>true if the entity currently has validation errors; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanged">
      <summary>Notifies clients that a property value has changed.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanging">
      <summary>Notifies clients that a property value is changing.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging">
      <summary>Occurs when a property value is changing.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary>Specifies the installer for a type that installs components.</summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.InstallerTypeAttribute"></see> class with the name of the component's installer type.</summary>
      <param name="typeName">The name of a <see cref="T:System.Type"></see> that represents the installer for the component this attribute is bound to. This class must implement <see cref="T:System.ComponentModel.Design.IDesigner"></see>.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.InstallerTypeAttribute"></see> class, when given a <see cref="T:System.Type"></see> that represents the installer for a component.</summary>
      <param name="installerType">A <see cref="T:System.Type"></see> that represents the installer for the component this attribute is bound to. This class must implement <see cref="T:System.ComponentModel.Design.IDesigner"></see>.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.InstallerTypeAttribute"></see>.</summary>
      <param name="obj">The object to test the value equality of.</param>
      <returns>true if the value of the given object is equal to that of the current; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary>Returns the hashcode for this object.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.InstallerTypeAttribute"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary>Gets the type of installer associated with this attribute.</summary>
      <returns>A <see cref="T:System.Type"></see> that represents the type of installer associated with this attribute, or null if an installer does not exist.</returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary>Creates an instance of a particular type of property from a drop-down box within the <see cref="T:System.Windows.Forms.PropertyGrid"></see>.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.InstanceCreationEditor"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>When overridden in a derived class, returns an instance of the specified type.</summary>
      <param name="context">The context information.</param>
      <param name="instanceType">The specified type.</param>
      <returns>An instance of the specified type or null.</returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary>Gets the specified text.</summary>
      <returns>The specified text.</returns>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary>Provides a type converter to convert 16-bit signed integer objects to and from other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Int16Converter"></see> class.</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary>Provides a type converter to convert 32-bit signed integer objects to and from other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Int32Converter"></see> class.</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary>Provides a type converter to convert 64-bit signed integer objects to and from various other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Int64Converter"></see> class.</summary>
    </member>
    <member name="T:System.ComponentModel.InvalidAsynchronousStateException">
      <summary>Thrown when a thread on which an operation should execute no longer exists or has no message loop.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidAsynchronousStateException"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidAsynchronousStateException"></see> class with the specified detailed description.</summary>
      <param name="message">A detailed description of the error.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidAsynchronousStateException"></see> class with the given <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see>.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to be used for deserialization.</param>
      <param name="context">The destination to be used for deserialization.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidAsynchronousStateException"></see> class with the specified detailed description and the specified exception.</summary>
      <param name="message">A detailed description of the error.</param>
      <param name="innerException">A reference to the inner exception that is the cause of this exception.</param>
    </member>
    <member name="T:System.ComponentModel.InvalidEnumArgumentException">
      <summary>The exception thrown when using invalid arguments that are enumerators.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidEnumArgumentException"></see> class without a message.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidEnumArgumentException"></see> class with the specified message.</summary>
      <param name="message">The message to display with this exception.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidEnumArgumentException"></see> class using the specified serialization data and context.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to be used for deserialization.</param>
      <param name="context">The destination to be used for deserialization.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidEnumArgumentException"></see> class with the specified detailed description and the specified exception.</summary>
      <param name="message">A detailed description of the error.</param>
      <param name="innerException">A reference to the inner exception that is the cause of this exception.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Int32,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidEnumArgumentException"></see> class with a message generated from the argument, the invalid value, and an enumeration class.</summary>
      <param name="argumentName">The name of the argument that caused the exception.</param>
      <param name="invalidValue">The value of the argument that failed.</param>
      <param name="enumClass">A <see cref="T:System.Type"></see> that represents the enumeration class with the valid values.</param>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary>Indicates whether a class converts property change events to <see cref="E:System.ComponentModel.IBindingList.ListChanged"></see> events.</summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary>Gets a value indicating whether the <see cref="T:System.ComponentModel.IRaiseItemChangedEvents"></see> object raises <see cref="E:System.ComponentModel.IBindingList.ListChanged"></see> events.</summary>
      <returns>true if the <see cref="T:System.ComponentModel.IRaiseItemChangedEvents"></see> object raises <see cref="E:System.ComponentModel.IBindingList.ListChanged"></see> events when one of its property values changes; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.IRevertibleChangeTracking">
      <summary>Provides support for rolling back the changes</summary>
    </member>
    <member name="M:System.ComponentModel.IRevertibleChangeTracking.RejectChanges">
      <summary>Resets the object’s state to unchanged by rejecting the modifications.</summary>
    </member>
    <member name="T:System.ComponentModel.ISite">
      <summary>Provides functionality required by sites.</summary>
    </member>
    <member name="P:System.ComponentModel.ISite.Component">
      <summary>Gets the component associated with the <see cref="T:System.ComponentModel.ISite"></see> when implemented by a class.</summary>
      <returns>The <see cref="T:System.ComponentModel.IComponent"></see> instance associated with the <see cref="T:System.ComponentModel.ISite"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Container">
      <summary>Gets the <see cref="T:System.ComponentModel.IContainer"></see> associated with the <see cref="T:System.ComponentModel.ISite"></see> when implemented by a class.</summary>
      <returns>The <see cref="T:System.ComponentModel.IContainer"></see> instance associated with the <see cref="T:System.ComponentModel.ISite"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.DesignMode">
      <summary>Determines whether the component is in design mode when implemented by a class.</summary>
      <returns>true if the component is in design mode; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Name">
      <summary>Gets or sets the name of the component associated with the <see cref="T:System.ComponentModel.ISite"></see> when implemented by a class.</summary>
      <returns>The name of the component associated with the <see cref="T:System.ComponentModel.ISite"></see>; or null, if no name is assigned to the component.</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitialize">
      <summary>Specifies that this object supports a simple, transacted notification for batch initialization.</summary>
    </member>
    <member name="M:System.ComponentModel.ISupportInitialize.BeginInit">
      <summary>Signals the object that initialization is starting.</summary>
    </member>
    <member name="M:System.ComponentModel.ISupportInitialize.EndInit">
      <summary>Signals the object that initialization is complete.</summary>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary>Allows coordination of initialization for a component and its dependent properties.</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary>Occurs when initialization of the component is completed.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary>Gets a value indicating whether the component is initialized.</summary>
      <returns>true to indicate the component has completed initialization; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.ISynchronizeInvoke">
      <summary>Provides a way to synchronously or asynchronously execute a delegate.</summary>
    </member>
    <member name="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
      <summary>Asynchronously executes the delegate on the thread that created this object.</summary>
      <param name="method">A <see cref="T:System.Delegate"></see> to a method that takes parameters of the same number and type that are contained in args.</param>
      <param name="args">An array of type <see cref="T:System.Object"></see> to pass as arguments to the given method. This can be null if no arguments are needed.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> interface that represents the asynchronous operation started by calling this method.</returns>
    </member>
    <member name="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
      <summary>Waits until the process started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])"></see> completes, and then returns the value generated by the process.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult"></see> interface that represents the asynchronous operation started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])"></see>.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the return value generated by the asynchronous operation.</returns>
    </member>
    <member name="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
      <summary>Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.</summary>
      <param name="method">A <see cref="T:System.Delegate"></see> that contains a method to call, in the context of the thread for the control.</param>
      <param name="args">An array of type <see cref="T:System.Object"></see> that represents the arguments to pass to the given method. This can be null if no arguments are needed.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the return value from the delegate being invoked, or null if the delegate has no return value.</returns>
    </member>
    <member name="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
      <summary>Gets a value indicating whether the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])"></see> when calling an object that implements this interface.</summary>
      <returns>true if the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])"></see>; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>Provides contextual information about a component, such as its container and property descriptor.</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>Gets the container representing this <see cref="T:System.ComponentModel.TypeDescriptor"></see> request.</summary>
      <returns>An <see cref="T:System.ComponentModel.IContainer"></see> with the set of objects for this <see cref="T:System.ComponentModel.TypeDescriptor"></see>; otherwise, null if there is no container or if the <see cref="T:System.ComponentModel.TypeDescriptor"></see> does not use outside objects.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>Gets the object that is connected with this type descriptor request.</summary>
      <returns>The object that invokes the method on the <see cref="T:System.ComponentModel.TypeDescriptor"></see>; otherwise, null if there is no object responsible for the call.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>Raises the <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged"></see> event.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>Raises the <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging"></see> event.</summary>
      <returns>true if this object can be changed; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>Gets the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that is associated with the given context item.</summary>
      <returns>The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that describes the given context item; otherwise, null if there is no <see cref="T:System.ComponentModel.PropertyDescriptor"></see> responsible for the call.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary>Provides functionality to discover the schema for a bindable list, where the properties available for binding differ from the public properties of the object to bind to.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>Returns the <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> that represents the properties on each item used to bind data.</summary>
      <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects to find in the collection as bindable. This can be null.</param>
      <returns>The <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> that represents the properties on each item used to bind data.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>Returns the name of the list.</summary>
      <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects, for which the list name is returned. This can be null.</param>
      <returns>The name of the list.</returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary>Provides the abstract base class for all licenses. A license is granted to a specific instance of a component.</summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.License"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary>When overridden in a derived class, disposes of the resources used by the license.</summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary>When overridden in a derived class, gets the license key granted to this component.</summary>
      <returns>A license key granted to this component.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary>Specifies when you can use a licensed object and provides a way of obtaining additional services needed to support licenses running within its domain.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.LicenseContext"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>When overridden in a derived class, returns a saved license key for the specified type, from the specified resource assembly.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type of component.</param>
      <param name="resourceAssembly">An <see cref="T:System.Reflection.Assembly"></see> with the license key.</param>
      <returns>The <see cref="P:System.ComponentModel.License.LicenseKey"></see> for the specified type. This method returns null unless you override it.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary>Gets the requested service, if it is available.</summary>
      <param name="type">The type of service to retrieve.</param>
      <returns>An instance of the service, or null if the service cannot be found.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>When overridden in a derived class, sets a license key for the specified type.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the component associated with the license key.</param>
      <param name="key">The <see cref="P:System.ComponentModel.License.LicenseKey"></see> to save for the type of component.</param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary>When overridden in a derived class, gets a value that specifies when you can use a license.</summary>
      <returns>One of the <see cref="T:System.ComponentModel.LicenseUsageMode"></see> values that specifies when you can use a license. The default is <see cref="F:System.ComponentModel.LicenseUsageMode.Runtime"></see>.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary>Represents the exception thrown when a component cannot be granted a license.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.LicenseException"></see> class for the type of component that was denied a license.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type of component that was not granted a license.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.LicenseException"></see> class with the given <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see>.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to be used for deserialization.</param>
      <param name="context">The destination to be used for deserialization.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.LicenseException"></see> class for the type and the instance of the component that was denied a license.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type of component that was not granted a license.</param>
      <param name="instance">The instance of the component that was not granted a license.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.LicenseException"></see> class for the type and the instance of the component that was denied a license, along with a message to display.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type of component that was not granted a license.</param>
      <param name="instance">The instance of the component that was not granted a license.</param>
      <param name="message">The exception message to display.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.LicenseException"></see> class for the type and the instance of the component that was denied a license, along with a message to display and the original exception thrown.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type of component that was not granted a license.</param>
      <param name="instance">The instance of the component that was not granted a license.</param>
      <param name="message">The exception message to display.</param>
      <param name="innerException">An <see cref="T:System.Exception"></see> that represents the original exception.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to be used for deserialization.</param>
      <param name="context">The destination to be used for deserialization.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary>Gets the type of the component that was not granted a license.</summary>
      <returns>A <see cref="T:System.Type"></see> that represents the type of component that was not granted a license.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary>Provides properties and methods to add a license to a component and to manage a <see cref="T:System.ComponentModel.LicenseProvider"></see>. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary>Creates an instance of the specified type, given a context in which you can use the licensed instance.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type to create.</param>
      <param name="creationContext">A <see cref="T:System.ComponentModel.LicenseContext"></see> that specifies when you can use the licensed instance.</param>
      <returns>An instance of the specified type.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary>Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type to create.</param>
      <param name="creationContext">A <see cref="T:System.ComponentModel.LicenseContext"></see> that specifies when you can use the licensed instance.</param>
      <param name="args">An array of type <see cref="T:System.Object"></see> that represents the arguments for the type.</param>
      <returns>An instance of the specified type with the given array of arguments.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary>Gets or sets the current <see cref="T:System.ComponentModel.LicenseContext"></see>, which specifies when you can use the licensed object.</summary>
      <returns>A <see cref="T:System.ComponentModel.LicenseContext"></see> that specifies when you can use the licensed object.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.ComponentModel.LicenseManager.CurrentContext"></see> property is currently locked and cannot be changed.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary>Returns whether the given type has a valid license.</summary>
      <param name="type">The <see cref="T:System.Type"></see> to find a valid license for.</param>
      <returns>true if the given type is licensed; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary>Determines whether a valid license can be granted for the specified type.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type of object that requests the <see cref="T:System.ComponentModel.License"></see>.</param>
      <returns>true if a valid license can be granted; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary>Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid <see cref="T:System.ComponentModel.License"></see>.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type of object that requests the license.</param>
      <param name="instance">An object of the specified type or a type derived from the specified type.</param>
      <param name="license">A <see cref="T:System.ComponentModel.License"></see> that is a valid license, or null if a valid license cannot be granted.</param>
      <returns>true if a valid <see cref="T:System.ComponentModel.License"></see> can be granted; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary>Prevents changes being made to the current <see cref="T:System.ComponentModel.LicenseContext"></see> of the given object.</summary>
      <param name="contextUser">The object whose current context you want to lock.</param>
      <exception cref="T:System.InvalidOperationException">The context is already locked.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary>Allows changes to be made to the current <see cref="T:System.ComponentModel.LicenseContext"></see> of the given object.</summary>
      <param name="contextUser">The object whose current context you want to unlock.</param>
      <exception cref="T:System.ArgumentException"><paramref name="contextUser">contextUser</paramref> represents a different user than the one specified in a previous call to <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)"></see>.</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary>Gets the <see cref="T:System.ComponentModel.LicenseUsageMode"></see> which specifies when you can use the licensed object for the <see cref="P:System.ComponentModel.LicenseManager.CurrentContext"></see>.</summary>
      <returns>One of the <see cref="T:System.ComponentModel.LicenseUsageMode"></see> values, as specified in the <see cref="P:System.ComponentModel.LicenseManager.CurrentContext"></see> property.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary>Determines whether a license can be granted for the specified type.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type of object that requests the license.</param>
      <exception cref="T:System.ComponentModel.LicenseException">A <see cref="T:System.ComponentModel.License"></see> cannot be granted.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary>Determines whether a license can be granted for the instance of the specified type.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type of object that requests the license.</param>
      <param name="instance">An <see cref="T:System.Object"></see> of the specified type or a type derived from the specified type.</param>
      <returns>A valid <see cref="T:System.ComponentModel.License"></see>.</returns>
      <exception cref="T:System.ComponentModel.LicenseException">The type is licensed, but a <see cref="T:System.ComponentModel.License"></see> cannot be granted.</exception>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary>Provides the abstract base class for implementing a license provider.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.LicenseProvider"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.</summary>
      <param name="context">A <see cref="T:System.ComponentModel.LicenseContext"></see> that specifies where you can use the licensed object.</param>
      <param name="type">A <see cref="T:System.Type"></see> that represents the component requesting the license.</param>
      <param name="instance">An object that is requesting the license.</param>
      <param name="allowExceptions">true if a <see cref="T:System.ComponentModel.LicenseException"></see> should be thrown when the component cannot be granted a license; otherwise, false.</param>
      <returns>A valid <see cref="T:System.ComponentModel.License"></see>.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary>Specifies the <see cref="T:System.ComponentModel.LicenseProvider"></see> to use with a class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.LicenseProviderAttribute"></see> class without a license provider.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.LicenseProviderAttribute"></see> class with the specified type.</summary>
      <param name="typeName">The fully qualified name of the license provider class.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.LicenseProviderAttribute"></see> class with the specified type of license provider.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type of the license provider class.</param>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary>Specifies the default value, which is no provider. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="value">Another object to compare to.</param>
      <returns>true if <paramref name="value">value</paramref> is equal to this instance; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.LicenseProviderAttribute"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary>Gets the license provider that must be used with the associated class.</summary>
      <returns>A <see cref="T:System.Type"></see> that represents the type of the license provider. The default value is null.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary>Indicates a unique ID for this attribute type.</summary>
      <returns>A unique ID for this attribute type.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary>Specifies when the <see cref="T:System.ComponentModel.License"></see> can be used.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary>Used during design time by a visual designer or the compiler.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary>Used during runtime.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary>Provides an implementation of a <see cref="T:System.ComponentModel.LicenseProvider"></see>. The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.LicFileLicenseProvider"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary>Returns a key for the specified type.</summary>
      <param name="type">The object type to return the key.</param>
      <returns>A confirmation that the <paramref name="type">type</paramref> parameter is licensed.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>Returns a license for the instance of the component, if one is available.</summary>
      <param name="context">A <see cref="T:System.ComponentModel.LicenseContext"></see> that specifies where you can use the licensed object.</param>
      <param name="type">A <see cref="T:System.Type"></see> that represents the component requesting the <see cref="T:System.ComponentModel.License"></see>.</param>
      <param name="instance">An object that requests the <see cref="T:System.ComponentModel.License"></see>.</param>
      <param name="allowExceptions">true if a <see cref="T:System.ComponentModel.LicenseException"></see> should be thrown when a component cannot be granted a license; otherwise, false.</param>
      <returns>A valid <see cref="T:System.ComponentModel.License"></see>. If this method cannot find a valid <see cref="T:System.ComponentModel.License"></see> or a valid <paramref name="context">context</paramref> parameter, it returns null.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary>Determines whether the key that the <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"></see> method retrieves is valid for the specified type.</summary>
      <param name="key">The <see cref="P:System.ComponentModel.License.LicenseKey"></see> to check.</param>
      <param name="type">A <see cref="T:System.Type"></see> that represents the component requesting the <see cref="T:System.ComponentModel.License"></see>.</param>
      <returns>true if the key is a valid <see cref="P:System.ComponentModel.License.LicenseKey"></see> for the specified type; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary>Specifies that a list can be used as a data source. A visual designer should use this attribute to determine whether to display a particular list in a data-binding picker. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ListBindableAttribute"></see> class using a value to indicate whether the list is bindable.</summary>
      <param name="listBindable">true if the list is bindable; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ListBindableAttribute"></see> class using <see cref="T:System.ComponentModel.BindableSupport"></see> to indicate whether the list is bindable.</summary>
      <param name="flags">A <see cref="T:System.ComponentModel.BindableSupport"></see> that indicates whether the list is bindable.</param>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary>Represents the default value for <see cref="T:System.ComponentModel.ListBindableAttribute"></see>.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary>Returns whether the object passed is equal to this <see cref="T:System.ComponentModel.ListBindableAttribute"></see>.</summary>
      <param name="obj">The object to test equality with.</param>
      <returns>true if the object passed is equal to this <see cref="T:System.ComponentModel.ListBindableAttribute"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.ListBindableAttribute"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary>Returns whether <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable"></see> is set to the default value.</summary>
      <returns>true if <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable"></see> is set to the default value; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary>Gets whether the list is bindable.</summary>
      <returns>true if the list is bindable; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary>Specifies that the list is not bindable. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary>Specifies that the list is bindable. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.IBindingList.ListChanged"></see> event.</summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ListChangedEventArgs"></see> class given the type of change and the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> affected.</summary>
      <param name="listChangedType">A <see cref="T:System.ComponentModel.ListChangedType"></see> value indicating the type of change.</param>
      <param name="propDesc">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that was added, removed, or changed.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ListChangedEventArgs"></see> class given the type of change and the index of the affected item.</summary>
      <param name="listChangedType">A <see cref="T:System.ComponentModel.ListChangedType"></see> value indicating the type of change.</param>
      <param name="newIndex">The index of the item that was added, changed, or removed.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ListChangedEventArgs"></see> class given the type of change, the index of the affected item, and a <see cref="T:System.ComponentModel.PropertyDescriptor"></see> describing the affected item.</summary>
      <param name="listChangedType">A <see cref="T:System.ComponentModel.ListChangedType"></see> value indicating the type of change.</param>
      <param name="newIndex">The index of the item that was added or changed.</param>
      <param name="propDesc">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> describing the item.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ListChangedEventArgs"></see> class given the type of change and the old and new index of the item that was moved.</summary>
      <param name="listChangedType">A <see cref="T:System.ComponentModel.ListChangedType"></see> value indicating the type of change.</param>
      <param name="newIndex">The new index of the item that was moved.</param>
      <param name="oldIndex">The old index of the item that was moved.</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary>Gets the type of change.</summary>
      <returns>A <see cref="T:System.ComponentModel.ListChangedType"></see> value indicating the type of change.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary>Gets the index of the item affected by the change.</summary>
      <returns>The index of the affected by the change.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary>Gets the old index of an item that has been moved.</summary>
      <returns>The old index of the moved item.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary>Gets the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that was added, changed, or deleted.</summary>
      <returns>The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> affected by the change.</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.ComponentModel.IBindingList.ListChanged"></see> event of the <see cref="T:System.ComponentModel.IBindingList"></see> class.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.ListChangedEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary>Specifies how the list changed.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary>An item added to the list. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex"></see> contains the index of the item that was added.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary>An item changed in the list. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex"></see> contains the index of the item that was changed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary>An item deleted from the list. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex"></see> contains the index of the item that was deleted.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary>An item moved within the list. <see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex"></see> contains the previous index for the item, whereas <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex"></see> contains the new index for the item.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary>A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> was added, which changed the schema.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary>A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> was changed, which changed the schema.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary>A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> was deleted, which changed the schema.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary>Much of the list has changed. Any listening controls should refresh all their data from the list.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Configuration.SettingsPropertyCollection">
      <summary>Contains a collection of <see cref="T:System.Configuration.SettingsProperty"></see> objects.</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyCollection"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.Add(System.Configuration.SettingsProperty)">
      <summary>Adds a <see cref="T:System.Configuration.SettingsProperty"></see> object to the collection.</summary>
      <param name="property">A <see cref="T:System.Configuration.SettingsProperty"></see> object.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.Clear">
      <summary>Removes all <see cref="T:System.Configuration.SettingsProperty"></see> objects from the collection.</summary>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.Clone">
      <summary>Creates a copy of the existing collection.</summary>
      <returns>A <see cref="T:System.Configuration.SettingsPropertyCollection"></see> class.</returns>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies this <see cref="T:System.Configuration.SettingsPropertyCollection"></see> object to an array.</summary>
      <param name="array">The array to copy the object to.</param>
      <param name="index">The index at which to begin copying.</param>
    </member>
    <member name="P:System.Configuration.SettingsPropertyCollection.Count">
      <summary>Gets a value that specifies the number of <see cref="T:System.Configuration.SettingsProperty"></see> objects in the collection.</summary>
      <returns>The number of <see cref="T:System.Configuration.SettingsProperty"></see> objects in the collection.</returns>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.GetEnumerator">
      <summary>Gets the <see cref="T:System.Collections.IEnumerator"></see> object as it applies to the collection.</summary>
      <returns>The <see cref="T:System.Collections.IEnumerator"></see> object as it applies to the collection.</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Configuration.SettingsPropertyCollection"></see> is synchronized; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyCollection.Item(System.String)">
      <summary>Gets the collection item with the specified name.</summary>
      <param name="name">The name of the <see cref="T:System.Configuration.SettingsProperty"></see> object.</param>
      <returns>The <see cref="T:System.Configuration.SettingsProperty"></see> object with the specified <paramref name="name">name</paramref>.</returns>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.OnAdd(System.Configuration.SettingsProperty)">
      <summary>Performs additional, custom processing when adding to the contents of the <see cref="T:System.Configuration.SettingsPropertyCollection"></see> instance.</summary>
      <param name="property">A <see cref="T:System.Configuration.SettingsProperty"></see> object.</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.OnAddComplete(System.Configuration.SettingsProperty)">
      <summary>Performs additional, custom processing after adding to the contents of the <see cref="T:System.Configuration.SettingsPropertyCollection"></see> instance.</summary>
      <param name="property">A <see cref="T:System.Configuration.SettingsProperty"></see> object.</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.OnClear">
      <summary>Performs additional, custom processing when clearing the contents of the <see cref="T:System.Configuration.SettingsPropertyCollection"></see> instance.</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.OnClearComplete">
      <summary>Performs additional, custom processing after clearing the contents of the <see cref="T:System.Configuration.SettingsPropertyCollection"></see> instance.</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.OnRemove(System.Configuration.SettingsProperty)">
      <summary>Performs additional, custom processing when removing the contents of the <see cref="T:System.Configuration.SettingsPropertyCollection"></see> instance.</summary>
      <param name="property">A <see cref="T:System.Configuration.SettingsProperty"></see> object.</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.OnRemoveComplete(System.Configuration.SettingsProperty)">
      <summary>Performs additional, custom processing after removing the contents of the <see cref="T:System.Configuration.SettingsPropertyCollection"></see> instance.</summary>
      <param name="property">A <see cref="T:System.Configuration.SettingsProperty"></see> object.</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.Remove(System.String)">
      <summary>Removes a <see cref="T:System.Configuration.SettingsProperty"></see> object from the collection.</summary>
      <param name="name">The name of the <see cref="T:System.Configuration.SettingsProperty"></see> object.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.SetReadOnly">
      <summary>Sets the collection to be read-only.</summary>
    </member>
    <member name="P:System.Configuration.SettingsPropertyCollection.SyncRoot">
      <summary>Gets the object to synchronize access to the collection.</summary>
      <returns>The object to synchronize access to the collection.</returns>
    </member>
    <member name="T:System.Configuration.SettingsPropertyIsReadOnlyException">
      <summary>Provides an exception for read-only <see cref="T:System.Configuration.SettingsProperty"></see> objects.</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyIsReadOnlyException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyIsReadOnlyException"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyIsReadOnlyException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyIsReadOnlyException"></see> class based on a supplied parameter.</summary>
      <param name="message">A string containing an exception message.</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyIsReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyIsReadOnlyException"></see> class based on the supplied parameters.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object that contains contextual information about the source or destination of the serialized stream.</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyIsReadOnlyException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyIsReadOnlyException"></see> class based on supplied parameters.</summary>
      <param name="message">A string containing an exception message.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:System.Configuration.SettingsPropertyNotFoundException">
      <summary>Provides an exception for <see cref="T:System.Configuration.SettingsProperty"></see> objects that are not found.</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyNotFoundException"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyNotFoundException"></see> class, based on a supplied parameter.</summary>
      <param name="message">A string containing an exception message.</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyNotFoundException"></see> class, based on supplied parameters.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object that contains contextual information about the source or destination of the serialized stream.</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyNotFoundException"></see> class, based on supplied parameters.</summary>
      <param name="message">A string containing an exception message.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:System.Configuration.SettingsPropertyValue">
      <summary>Contains the value of a settings property that can be loaded and stored by an instance of <see cref="T:System.Configuration.SettingsBase"></see>.</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValue.#ctor(System.Configuration.SettingsProperty)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyValue"></see> class, based on supplied parameters.</summary>
      <param name="property">Specifies a <see cref="T:System.Configuration.SettingsProperty"></see> object.</param>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.Deserialized">
      <summary>Gets or sets whether the value of a <see cref="T:System.Configuration.SettingsProperty"></see> object has been deserialized.</summary>
      <returns>true if the value of a <see cref="T:System.Configuration.SettingsProperty"></see> object has been deserialized; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.IsDirty">
      <summary>Gets or sets whether the value of a <see cref="T:System.Configuration.SettingsProperty"></see> object has changed.</summary>
      <returns>true if the value of a <see cref="T:System.Configuration.SettingsProperty"></see> object has changed; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.Name">
      <summary>Gets the name of the property from the associated <see cref="T:System.Configuration.SettingsProperty"></see> object.</summary>
      <returns>The name of the <see cref="T:System.Configuration.SettingsProperty"></see> object.</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.Property">
      <summary>Gets the <see cref="T:System.Configuration.SettingsProperty"></see> object.</summary>
      <returns>The <see cref="T:System.Configuration.SettingsProperty"></see> object that describes the <see cref="T:System.Configuration.SettingsPropertyValue"></see> object.</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.PropertyValue">
      <summary>Gets or sets the value of the <see cref="T:System.Configuration.SettingsProperty"></see> object.</summary>
      <returns>The value of the <see cref="T:System.Configuration.SettingsProperty"></see> object. When this value is set, the <see cref="P:System.Configuration.SettingsPropertyValue.IsDirty"></see> property is set to true and <see cref="P:System.Configuration.SettingsPropertyValue.UsingDefaultValue"></see> is set to false.   When a value is first accessed from the <see cref="P:System.Configuration.SettingsPropertyValue.PropertyValue"></see> property, and if the value was initially stored into the <see cref="T:System.Configuration.SettingsPropertyValue"></see> object as a serialized representation using the <see cref="P:System.Configuration.SettingsPropertyValue.SerializedValue"></see> property, the <see cref="P:System.Configuration.SettingsPropertyValue.PropertyValue"></see> property will trigger deserialization of the underlying value.  As a side effect, the <see cref="P:System.Configuration.SettingsPropertyValue.Deserialized"></see> property will be set to true.   If this chain of events occurs in ASP.NET, and if an error occurs during the deserialization process, the error is logged using the health-monitoring feature of ASP.NET. By default, this means that deserialization errors will show up in the Application Event Log when running under ASP.NET. If this process occurs outside of ASP.NET, and if an error occurs during deserialization, the error is suppressed, and the remainder of the logic during deserialization occurs. If there is no serialized value to deserialize when the deserialization is attempted, then <see cref="T:System.Configuration.SettingsPropertyValue"></see> object will instead attempt to return a default value if one was configured as defined on the associated <see cref="T:System.Configuration.SettingsProperty"></see> instance. In this case, if the <see cref="P:System.Configuration.SettingsProperty.DefaultValue"></see> property was set to either null, or to the string &quot;[null]&quot;, then the <see cref="T:System.Configuration.SettingsPropertyValue"></see> object will initialize the <see cref="P:System.Configuration.SettingsPropertyValue.PropertyValue"></see> property to either null for reference types, or to the default value for the associated value type.  On the other hand, if <see cref="P:System.Configuration.SettingsProperty.DefaultValue"></see> property holds a valid object reference or string value (other than &quot;[null]&quot;), then the <see cref="P:System.Configuration.SettingsProperty.DefaultValue"></see> property is returned instead.   If there is no serialized value to deserialize when the deserialization is attempted, and no default value was specified, then an empty string will be returned for string types. For all other types, a default instance will be returned by calling <see cref="M:System.Activator.CreateInstance(System.Type)"></see> — for reference types this means an attempt will be made to create an object instance using the default constructor.  If this attempt fails, then null is returned.</returns>
      <exception cref="T:System.ArgumentException">While attempting to use the default value from the <see cref="P:System.Configuration.SettingsProperty.DefaultValue"></see> property, an error occurred.  Either the attempt to convert <see cref="P:System.Configuration.SettingsProperty.DefaultValue"></see> property to a valid type failed, or the resulting value was not compatible with the type defined by <see cref="P:System.Configuration.SettingsProperty.PropertyType"></see>.</exception>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.SerializedValue">
      <summary>Gets or sets the serialized value of the <see cref="T:System.Configuration.SettingsProperty"></see> object.</summary>
      <returns>The serialized value of a <see cref="T:System.Configuration.SettingsProperty"></see> object.</returns>
      <exception cref="T:System.ArgumentException">The serialization options for the property indicated the use of a string type converter, but a type converter was not available.</exception>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.UsingDefaultValue">
      <summary>Gets a Boolean value specifying whether the value of the <see cref="T:System.Configuration.SettingsPropertyValue"></see> object is the default value as defined by the <see cref="P:System.Configuration.SettingsProperty.DefaultValue"></see> property value on the associated <see cref="T:System.Configuration.SettingsProperty"></see> object.</summary>
      <returns>true if the value of the <see cref="T:System.Configuration.SettingsProperty"></see> object is the default value; otherwise, false.</returns>
    </member>
    <member name="T:System.Configuration.SettingsPropertyValueCollection">
      <summary>Contains a collection of settings property values that map <see cref="T:System.Configuration.SettingsProperty"></see> objects to <see cref="T:System.Configuration.SettingsPropertyValue"></see> objects.</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyValueCollection"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.Add(System.Configuration.SettingsPropertyValue)">
      <summary>Adds a <see cref="T:System.Configuration.SettingsPropertyValue"></see> object to the collection.</summary>
      <param name="property">A <see cref="T:System.Configuration.SettingsPropertyValue"></see> object.</param>
      <exception cref="T:System.NotSupportedException">An attempt was made to add an item to the collection, but the collection was marked as read-only.</exception>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.Clear">
      <summary>Removes all <see cref="T:System.Configuration.SettingsPropertyValue"></see> objects from the collection.</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.Clone">
      <summary>Creates a copy of the existing collection.</summary>
      <returns>A <see cref="T:System.Configuration.SettingsPropertyValueCollection"></see> class.</returns>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies this <see cref="T:System.Configuration.SettingsPropertyValueCollection"></see> collection to an array.</summary>
      <param name="array">The array to copy the collection to.</param>
      <param name="index">The index at which to begin copying.</param>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValueCollection.Count">
      <summary>Gets a value that specifies the number of <see cref="T:System.Configuration.SettingsPropertyValue"></see> objects in the collection.</summary>
      <returns>The number of <see cref="T:System.Configuration.SettingsPropertyValue"></see> objects in the collection.</returns>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.GetEnumerator">
      <summary>Gets the <see cref="T:System.Collections.IEnumerator"></see> object as it applies to the collection.</summary>
      <returns>The <see cref="T:System.Collections.IEnumerator"></see> object as it applies to the collection.</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValueCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Configuration.SettingsPropertyValueCollection"></see> collection is synchronized; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValueCollection.Item(System.String)">
      <summary>Gets an item from the collection.</summary>
      <param name="name">A <see cref="T:System.Configuration.SettingsPropertyValue"></see> object.</param>
      <returns>The <see cref="T:System.Configuration.SettingsPropertyValue"></see> object with the specified <paramref name="name">name</paramref>.</returns>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.Remove(System.String)">
      <summary>Removes a <see cref="T:System.Configuration.SettingsPropertyValue"></see> object from the collection.</summary>
      <param name="name">The name of the <see cref="T:System.Configuration.SettingsPropertyValue"></see> object.</param>
      <exception cref="T:System.NotSupportedException">An attempt was made to remove an item from the collection, but the collection was marked as read-only.</exception>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.SetReadOnly">
      <summary>Sets the collection to be read-only.</summary>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValueCollection.SyncRoot">
      <summary>Gets the object to synchronize access to the collection.</summary>
      <returns>The object to synchronize access to the collection.</returns>
    </member>
    <member name="T:System.Configuration.SettingsPropertyWrongTypeException">
      <summary>Provides an exception that is thrown when an invalid type is used with a <see cref="T:System.Configuration.SettingsProperty"></see> object.</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyWrongTypeException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyWrongTypeException"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyWrongTypeException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyWrongTypeException"></see> class based on the supplied parameter.</summary>
      <param name="message">A string containing an exception message.</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyWrongTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyWrongTypeException"></see> class based on the supplied parameters.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination of the serialized stream.</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyWrongTypeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyWrongTypeException"></see> class based on the supplied parameters.</summary>
      <param name="message">A string containing an exception message.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:System.Configuration.SettingsProvider">
      <summary>Acts as a base class for deriving custom settings providers in the application settings architecture.</summary>
    </member>
    <member name="M:System.Configuration.SettingsProvider.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Configuration.SettingsProvider"></see> class.</summary>
    </member>
    <member name="P:System.Configuration.SettingsProvider.ApplicationName">
      <summary>Gets or sets the name of the currently running application.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the application's shortened name, which does not contain a full path or extension, for example, SimpleAppSettings.</returns>
    </member>
    <member name="M:System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
      <summary>Returns the collection of settings property values for the specified application instance and settings property group.</summary>
      <param name="context">A <see cref="T:System.Configuration.SettingsContext"></see> describing the current application use.</param>
      <param name="collection">A <see cref="T:System.Configuration.SettingsPropertyCollection"></see> containing the settings property group whose values are to be retrieved.</param>
      <returns>A <see cref="T:System.Configuration.SettingsPropertyValueCollection"></see> containing the values for the specified settings property group.</returns>
    </member>
    <member name="M:System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
      <summary>Sets the values of the specified group of property settings.</summary>
      <param name="context">A <see cref="T:System.Configuration.SettingsContext"></see> describing the current application usage.</param>
      <param name="collection">A <see cref="T:System.Configuration.SettingsPropertyValueCollection"></see> representing the group of property settings to set.</param>
    </member>
    <member name="T:System.Configuration.SettingsProviderAttribute">
      <summary>Specifies the settings provider used to provide storage for the current application settings class or property. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.SettingsProviderAttribute.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Configuration.SettingsProviderAttribute"></see> class.</summary>
      <param name="providerTypeName">A <see cref="T:System.String"></see> containing the name of the settings provider.</param>
    </member>
    <member name="M:System.Configuration.SettingsProviderAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsProviderAttribute"></see> class.</summary>
      <param name="providerType">A <see cref="T:System.Type"></see> containing the settings provider type.</param>
    </member>
    <member name="P:System.Configuration.SettingsProviderAttribute.ProviderTypeName">
      <summary>Gets the type name of the settings provider.</summary>
      <returns>A <see cref="T:System.String"></see> containing the name of the settings provider.</returns>
    </member>
    <member name="T:System.Configuration.SettingsProviderCollection">
      <summary>Represents a collection of application settings providers.</summary>
    </member>
    <member name="M:System.Configuration.SettingsProviderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsProviderCollection"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.SettingsProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
      <summary>Adds a new settings provider to the collection.</summary>
      <param name="provider">A <see cref="T:System.Configuration.Provider.ProviderBase"></see> to add to the collection.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="provider">provider</paramref> parameter is not of type <see cref="T:System.Configuration.SettingsProvider"></see>.   -or-   The <see cref="P:System.Configuration.Provider.ProviderBase.Name"></see> property of the provider parameter is null or an empty string.   -or-   A settings provider with the same <see cref="P:System.Configuration.Provider.ProviderBase.Name"></see> already exists in the collection.</exception>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="provider">provider</paramref> parameter is null.</exception>
    </member>
    <member name="P:System.Configuration.SettingsProviderCollection.Item(System.String)">
      <summary>Gets the settings provider in the collection that matches the specified name.</summary>
      <param name="name">A <see cref="T:System.String"></see> containing the friendly name of the settings provider.</param>
      <returns>If found, the <see cref="T:System.Configuration.SettingsProvider"></see> whose name matches that specified by the name parameter; otherwise, null.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name">name</paramref> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The collection is read-only when setting this value.</exception>
    </member>
    <member name="T:System.Configuration.SettingsSavingEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsSaving"></see> event.</summary>
      <param name="sender">The source of the event, typically a data container or data-bound collection.</param>
      <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.Configuration.SettingsSerializeAs">
      <summary>Determines the serialization scheme used to store application settings.</summary>
    </member>
    <member name="F:System.Configuration.SettingsSerializeAs.Binary">
      <summary>The settings property is serialized using binary object serialization.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Configuration.SettingsSerializeAs.ProviderSpecific">
      <summary>The settings provider has implicit knowledge of the property or its type and picks an appropriate serialization mechanism. Often used for custom serialization.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Configuration.SettingsSerializeAs.String">
      <summary>The settings property is serialized as plain text.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Configuration.SettingsSerializeAs.Xml">
      <summary>The settings property is serialized as XML using XML serialization.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Configuration.SettingsSerializeAsAttribute">
      <summary>Specifies the serialization mechanism that the settings provider should use. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.SettingsSerializeAsAttribute.#ctor(System.Configuration.SettingsSerializeAs)">
      <summary>Initializes an instance of the <see cref="T:System.Configuration.SettingsSerializeAsAttribute"></see> class.</summary>
      <param name="serializeAs">A <see cref="T:System.Configuration.SettingsSerializeAs"></see> enumerated value that specifies the serialization scheme.</param>
    </member>
    <member name="P:System.Configuration.SettingsSerializeAsAttribute.SerializeAs">
      <summary>Gets the <see cref="T:System.Configuration.SettingsSerializeAs"></see> enumeration value that specifies the serialization scheme.</summary>
      <returns>A <see cref="T:System.Configuration.SettingsSerializeAs"></see> enumerated value that specifies the serialization scheme.</returns>
    </member>
    <member name="T:System.Configuration.SettingValueElement">
      <summary>Contains the XML representing the serialized value of the setting. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.SettingValueElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingValueElement"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.SettingValueElement.Equals(System.Object)">
      <summary>Compares the current <see cref="T:System.Configuration.SettingValueElement"></see> instance to the specified object.</summary>
      <param name="settingValue">The object to compare.</param>
      <returns>true if the <see cref="T:System.Configuration.SettingValueElement"></see> instance is equal to the specified object; otherwise, false.</returns>
    </member>
    <member name="M:System.Configuration.SettingValueElement.GetHashCode">
      <summary>Gets a unique value representing the <see cref="T:System.Configuration.SettingValueElement"></see> current instance.</summary>
      <returns>A unique value representing the <see cref="T:System.Configuration.SettingValueElement"></see> current instance.</returns>
    </member>
    <member name="P:System.Configuration.SettingValueElement.ValueXml">
      <summary>Gets or sets the value of a <see cref="T:System.Configuration.SettingValueElement"></see> object by using an <see cref="T:System.Xml.XmlNode"></see> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlNode"></see> object containing the value of a <see cref="T:System.Configuration.SettingElement"></see>.</returns>
    </member>
    <member name="T:System.Configuration.SingleTagSectionHandler">
      <summary>Handles configuration sections that are represented by a single XML tag in the .config file.</summary>
    </member>
    <member name="M:System.Configuration.SingleTagSectionHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SingleTagSectionHandler"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.SingleTagSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>Used internally to create a new instance of this object.</summary>
      <param name="parent">The parent of this object.</param>
      <param name="context">The context of this object.</param>
      <param name="section">The <see cref="T:System.Xml.XmlNode"></see> object in the configuration.</param>
      <returns>The created object handler.</returns>
    </member>
    <member name="T:System.Configuration.SpecialSetting">
      <summary>Specifies the special setting category of a application settings property.</summary>
    </member>
    <member name="F:System.Configuration.SpecialSetting.ConnectionString">
      <summary>The configuration property represents a connection string, typically for a data store or network resource.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Configuration.SpecialSetting.WebServiceUrl">
      <summary>The configuration property represents a Uniform Resource Locator (URL) to a Web service.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Configuration.SpecialSettingAttribute">
      <summary>Indicates that an application settings property has a special significance. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.SpecialSettingAttribute.#ctor(System.Configuration.SpecialSetting)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SpecialSettingAttribute"></see> class.</summary>
      <param name="specialSetting"></param>
    </member>
    <member name="P:System.Configuration.SpecialSettingAttribute.SpecialSetting">
      <summary>Gets the value describing the special setting category of the application settings property.</summary>
      <returns>A <see cref="T:System.Configuration.SpecialSetting"></see> enumeration value defining the category of the application settings property.</returns>
    </member>
    <member name="T:System.Configuration.UriSection">
      <summary>Represents the Uri section within a configuration file.</summary>
    </member>
    <member name="M:System.Configuration.UriSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.UriSection"></see> class.</summary>
    </member>
    <member name="P:System.Configuration.UriSection.Idn">
      <summary>Gets an <see cref="T:System.Configuration.IdnElement"></see> object that contains the configuration setting for International Domain Name (IDN) processing in the <see cref="T:System.Uri"></see> class.</summary>
      <returns>The configuration setting for International Domain Name (IDN) processing in the <see cref="T:System.Uri"></see> class.</returns>
    </member>
    <member name="P:System.Configuration.UriSection.IriParsing">
      <summary>Gets an <see cref="T:System.Configuration.IriParsingElement"></see> object that contains the configuration setting for International Resource Identifiers (IRI) parsing in the <see cref="T:System.Uri"></see> class.</summary>
      <returns>The configuration setting for International Resource Identifiers (IRI) parsing in the <see cref="T:System.Uri"></see> class.</returns>
    </member>
    <member name="P:System.Configuration.UriSection.SchemeSettings">
      <summary>Gets a <see cref="T:System.Configuration.SchemeSettingElementCollection"></see> object that contains the configuration settings for scheme parsing in the <see cref="T:System.Uri"></see> class.</summary>
      <returns>The configuration settings for scheme parsing in the <see cref="T:System.Uri"></see> class</returns>
    </member>
    <member name="T:System.Configuration.UserScopedSettingAttribute">
      <summary>Specifies that an application settings group or property contains distinct values for each user of an application. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.UserScopedSettingAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.UserScopedSettingAttribute"></see> class.</summary>
    </member>
    <member name="T:System.Configuration.UserSettingsGroup">
      <summary>Represents a grouping of related user settings sections within a configuration file. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.UserSettingsGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.UserSettingsGroup"></see> class.</summary>
    </member>
    <member name="T:System.Diagnostics.TextWriterTraceListener">
      <summary>Directs tracing or debugging output to a <see cref="T:System.IO.TextWriter"></see> or to a <see cref="T:System.IO.Stream"></see>, such as <see cref="T:System.IO.FileStream"></see>.</summary>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TextWriterTraceListener"></see> class with <see cref="T:System.IO.TextWriter"></see> as the output recipient.</summary>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TextWriterTraceListener"></see> class, using the stream as the recipient of the debugging and tracing output.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream"></see> that represents the stream the <see cref="T:System.Diagnostics.TextWriterTraceListener"></see> writes to.</param>
      <exception cref="T:System.ArgumentNullException">The stream is null.</exception>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TextWriterTraceListener"></see> class using the specified writer as recipient of the tracing or debugging output.</summary>
      <param name="writer">A <see cref="T:System.IO.TextWriter"></see> that receives the output from the <see cref="T:System.Diagnostics.TextWriterTraceListener"></see>.</param>
      <exception cref="T:System.ArgumentNullException">The writer is null.</exception>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TextWriterTraceListener"></see> class, using the file as the recipient of the debugging and tracing output.</summary>
      <param name="fileName">The name of the file the <see cref="T:System.Diagnostics.TextWriterTraceListener"></see> writes to.</param>
      <exception cref="T:System.ArgumentNullException">The file is null.</exception>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TextWriterTraceListener"></see> class with the specified name, using the stream as the recipient of the debugging and tracing output.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream"></see> that represents the stream the <see cref="T:System.Diagnostics.TextWriterTraceListener"></see> writes to.</param>
      <param name="name">The name of the new instance.</param>
      <exception cref="T:System.ArgumentNullException">The stream is null.</exception>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TextWriterTraceListener"></see> class with the specified name, using the specified writer as recipient of the tracing or debugging output.</summary>
      <param name="writer">A <see cref="T:System.IO.TextWriter"></see> that receives the output from the <see cref="T:System.Diagnostics.TextWriterTraceListener"></see>.</param>
      <param name="name">The name of the new instance.</param>
      <exception cref="T:System.ArgumentNullException">The writer is null.</exception>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TextWriterTraceListener"></see> class with the specified name, using the file as the recipient of the debugging and tracing output.</summary>
      <param name="fileName">The name of the file the <see cref="T:System.Diagnostics.TextWriterTraceListener"></see> writes to.</param>
      <param name="name">The name of the new instance.</param>
      <exception cref="T:System.ArgumentNullException">The stream is null.</exception>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.Close">
      <summary>Closes the <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer"></see> so that it no longer receives tracing or debugging output.</summary>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)">
      <summary>Disposes this <see cref="T:System.Diagnostics.TextWriterTraceListener"></see> object.</summary>
      <param name="disposing">true to release managed resources; if false, <see cref="M:System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)"></see> has no effect.</param>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.Flush">
      <summary>Flushes the output buffer for the <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer"></see>.</summary>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.Write(System.String)">
      <summary>Writes a message to this instance's <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer"></see>.</summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)">
      <summary>Writes a message to this instance's <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer"></see> followed by a line terminator. The default line terminator is a carriage return followed by a line feed (\r\n).</summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="P:System.Diagnostics.TextWriterTraceListener.Writer">
      <summary>Gets or sets the text writer that receives the tracing or debugging output.</summary>
      <returns>A <see cref="T:System.IO.TextWriter"></see> that represents the writer that receives the tracing or debugging output.</returns>
    </member>
    <member name="T:System.Diagnostics.ThreadPriorityLevel">
      <summary>Specifies the priority level of a thread.</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.AboveNormal">
      <summary>Specifies one step above the normal priority for the associated <see cref="T:System.Diagnostics.ProcessPriorityClass"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.BelowNormal">
      <summary>Specifies one step below the normal priority for the associated <see cref="T:System.Diagnostics.ProcessPriorityClass"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Highest">
      <summary>Specifies highest priority. This is two steps above the normal priority for the associated <see cref="T:System.Diagnostics.ProcessPriorityClass"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Idle">
      <summary>Specifies idle priority. This is the lowest possible priority value of all threads, independent of the value of the associated <see cref="T:System.Diagnostics.ProcessPriorityClass"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Lowest">
      <summary>Specifies lowest priority. This is two steps below the normal priority for the associated <see cref="T:System.Diagnostics.ProcessPriorityClass"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Normal">
      <summary>Specifies normal priority for the associated <see cref="T:System.Diagnostics.ProcessPriorityClass"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.TimeCritical">
      <summary>Specifies time-critical priority. This is the highest priority of all threads, independent of the value of the associated <see cref="T:System.Diagnostics.ProcessPriorityClass"></see>.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Diagnostics.ThreadState">
      <summary>Specifies the current execution state of the thread.</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Initialized">
      <summary>A state that indicates the thread has been initialized, but has not yet started.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Ready">
      <summary>A state that indicates the thread is waiting to use a processor because no processor is free. The thread is prepared to run on the next available processor.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Running">
      <summary>A state that indicates the thread is currently using a processor.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Standby">
      <summary>A state that indicates the thread is about to use a processor. Only one thread can be in this state at a time.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Terminated">
      <summary>A state that indicates the thread has finished executing and has exited.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Transition">
      <summary>A state that indicates the thread is waiting for a resource, other than the processor, before it can execute. For example, it might be waiting for its execution stack to be paged in from disk.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Unknown">
      <summary>The state of the thread is unknown.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Wait">
      <summary>A state that indicates the thread is not ready to use the processor because it is waiting for a peripheral operation to complete or a resource to become free. When the thread is ready, it will be rescheduled.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Diagnostics.ThreadWaitReason">
      <summary>Specifies the reason a thread is waiting.</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.EventPairHigh">
      <summary>The thread is waiting for event pair high.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.EventPairLow">
      <summary>The thread is waiting for event pair low.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.ExecutionDelay">
      <summary>Thread execution is delayed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.Executive">
      <summary>The thread is waiting for the scheduler.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.FreePage">
      <summary>The thread is waiting for a free virtual memory page.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.LpcReceive">
      <summary>The thread is waiting for a local procedure call to arrive.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.LpcReply">
      <summary>The thread is waiting for reply to a local procedure call to arrive.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.PageIn">
      <summary>The thread is waiting for a virtual memory page to arrive in memory.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.PageOut">
      <summary>The thread is waiting for a virtual memory page to be written to disk.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.Suspended">
      <summary>Thread execution is suspended.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.SystemAllocation">
      <summary>The thread is waiting for system allocation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.Unknown">
      <summary>The thread is waiting for an unknown reason.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.UserRequest">
      <summary>The thread is waiting for a user request.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.VirtualMemory">
      <summary>The thread is waiting for the system to allocate virtual memory.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Diagnostics.Trace">
      <summary>Provides a set of methods and properties that help you trace the execution of your code. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Diagnostics.Trace.Assert(System.Boolean)">
      <summary>Checks for a condition; if the condition is false, displays a message box that shows the call stack.</summary>
      <param name="condition">The conditional expression to evaluate. If the condition is true, a failure message is not sent and the message box is not displayed.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Assert(System.Boolean,System.String)">
      <summary>Checks for a condition; if the condition is false, outputs a specified message and displays a message box that shows the call stack.</summary>
      <param name="condition">The conditional expression to evaluate. If the condition is true, the specified message is not sent and the message box is not displayed.</param>
      <param name="message">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)">
      <summary>Checks for a condition; if the condition is false, outputs two specified messages and displays a message box that shows the call stack.</summary>
      <param name="condition">The conditional expression to evaluate. If the condition is true, the specified messages are not sent and the message box is not displayed.</param>
      <param name="message">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection.</param>
      <param name="detailMessage">The detailed message to send to the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection.</param>
    </member>
    <member name="P:System.Diagnostics.Trace.AutoFlush">
      <summary>Gets or sets whether <see cref="M:System.Diagnostics.Trace.Flush"></see> should be called on the <see cref="P:System.Diagnostics.Trace.Listeners"></see> after every write.</summary>
      <returns>true if <see cref="M:System.Diagnostics.Trace.Flush"></see> is called on the <see cref="P:System.Diagnostics.Trace.Listeners"></see> after every write; otherwise, false.</returns>
    </member>
    <member name="M:System.Diagnostics.Trace.Close">
      <summary>Flushes the output buffer, and then closes the <see cref="P:System.Diagnostics.Trace.Listeners"></see>.</summary>
    </member>
    <member name="P:System.Diagnostics.Trace.CorrelationManager">
      <summary>Gets the correlation manager for the thread for this trace.</summary>
      <returns>The <see cref="T:System.Diagnostics.CorrelationManager"></see> object associated with the thread for this trace.</returns>
    </member>
    <member name="M:System.Diagnostics.Trace.Fail(System.String)">
      <summary>Emits the specified error message.</summary>
      <param name="message">A message to emit.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Fail(System.String,System.String)">
      <summary>Emits an error message, and a detailed error message.</summary>
      <param name="message">A message to emit.</param>
      <param name="detailMessage">A detailed message to emit.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Flush">
      <summary>Flushes the output buffer, and causes buffered data to be written to the <see cref="P:System.Diagnostics.Trace.Listeners"></see>.</summary>
    </member>
    <member name="M:System.Diagnostics.Trace.Indent">
      <summary>Increases the current <see cref="P:System.Diagnostics.Trace.IndentLevel"></see> by one.</summary>
    </member>
    <member name="P:System.Diagnostics.Trace.IndentLevel">
      <summary>Gets or sets the indent level.</summary>
      <returns>The indent level. The default is zero.</returns>
    </member>
    <member name="P:System.Diagnostics.Trace.IndentSize">
      <summary>Gets or sets the number of spaces in an indent.</summary>
      <returns>The number of spaces in an indent. The default is four.</returns>
    </member>
    <member name="P:System.Diagnostics.Trace.Listeners">
      <summary>Gets the collection of listeners that is monitoring the trace output.</summary>
      <returns>A <see cref="T:System.Diagnostics.TraceListenerCollection"></see> that represents a collection of type <see cref="T:System.Diagnostics.TraceListener"></see> monitoring the trace output.</returns>
    </member>
    <member name="M:System.Diagnostics.Trace.Refresh">
      <summary>Refreshes the trace configuration data.</summary>
    </member>
    <member name="M:System.Diagnostics.Trace.TraceError(System.String)">
      <summary>Writes an error message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection using the specified message.</summary>
      <param name="message">The informative message to write.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.TraceError(System.String,System.Object[])">
      <summary>Writes an error message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection using the specified array of objects and formatting information.</summary>
      <param name="format">A format string that contains zero or more format items, which correspond to objects in the args array.</param>
      <param name="args">An object array containing zero or more objects to format.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.TraceInformation(System.String)">
      <summary>Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection using the specified message.</summary>
      <param name="message">The informative message to write.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])">
      <summary>Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection using the specified array of objects and formatting information.</summary>
      <param name="format">A format string that contains zero or more format items, which correspond to objects in the args array.</param>
      <param name="args">An object array containing zero or more objects to format.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])">
      <summary>Writes a warning message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection using the specified array of objects and formatting information.</summary>
      <param name="format">A format string that contains zero or more format items, which correspond to objects in the args array.</param>
      <param name="args">An object array containing zero or more objects to format.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.TraceWarning(System.String)">
      <summary>Writes a warning message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection using the specified message.</summary>
      <param name="message">The informative message to write.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Unindent">
      <summary>Decreases the current <see cref="P:System.Diagnostics.Trace.IndentLevel"></see> by one.</summary>
    </member>
    <member name="P:System.Diagnostics.Trace.UseGlobalLock">
      <summary>Gets or sets a value indicating whether the global lock should be used.</summary>
      <returns>true if the global lock is to be used; otherwise, false. The default is true.</returns>
    </member>
    <member name="M:System.Diagnostics.Trace.Write(System.Object)">
      <summary>Writes the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection.</summary>
      <param name="value">An <see cref="T:System.Object"></see> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners"></see>.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Write(System.String)">
      <summary>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection.</summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Write(System.Object,System.String)">
      <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection.</summary>
      <param name="value">An <see cref="T:System.Object"></see> name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners"></see>.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Write(System.String,System.String)">
      <summary>Writes a category name and a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection.</summary>
      <param name="message">A message to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)">
      <summary>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection if a condition is true.</summary>
      <param name="condition">true to cause a message to be written; otherwise, false.</param>
      <param name="message">A message to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)">
      <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection if a condition is true.</summary>
      <param name="condition">true to cause a message to be written; otherwise, false.</param>
      <param name="value">An <see cref="T:System.Object"></see> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners"></see>.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)">
      <summary>Writes the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection if a condition is true.</summary>
      <param name="condition">true to cause a message to be written; otherwise, false.</param>
      <param name="value">An <see cref="T:System.Object"></see> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners"></see>.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)">
      <summary>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection if a condition is true.</summary>
      <param name="condition">true to cause a message to be written; otherwise, false.</param>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLine(System.Object)">
      <summary>Writes the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection.</summary>
      <param name="value">An <see cref="T:System.Object"></see> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners"></see>.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLine(System.String)">
      <summary>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection.</summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLine(System.Object,System.String)">
      <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection.</summary>
      <param name="value">An <see cref="T:System.Object"></see> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners"></see>.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLine(System.String,System.String)">
      <summary>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection.</summary>
      <param name="message">A message to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)">
      <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection if a condition is true.</summary>
      <param name="condition">true to cause a message to be written; otherwise, false.</param>
      <param name="value">An <see cref="T:System.Object"></see> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners"></see>.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)">
      <summary>Writes the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection if a condition is true.</summary>
      <param name="condition">true to cause a message to be written; otherwise, false.</param>
      <param name="value">An <see cref="T:System.Object"></see> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners"></see>.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)">
      <summary>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection if a condition is true.</summary>
      <param name="condition">true to cause a message to be written; otherwise, false.</param>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)">
      <summary>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection if a condition is true.</summary>
      <param name="condition">true to cause a message to be written; otherwise, false.</param>
      <param name="message">A message to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="T:System.Diagnostics.TraceEventCache">
      <summary>Provides trace event data specific to a thread and a process.</summary>
    </member>
    <member name="M:System.Diagnostics.TraceEventCache.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TraceEventCache"></see> class.</summary>
    </member>
    <member name="P:System.Diagnostics.TraceEventCache.Callstack">
      <summary>Gets the call stack for the current thread.</summary>
      <returns>A string containing stack trace information. This value can be an empty string (&quot;&quot;).</returns>
    </member>
    <member name="P:System.Diagnostics.TraceEventCache.DateTime">
      <summary>Gets the date and time at which the event trace occurred.</summary>
      <returns>A <see cref="T:System.DateTime"></see> structure whose value is a date and time expressed in Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="P:System.Diagnostics.TraceEventCache.LogicalOperationStack">
      <summary>Gets the correlation data, contained in a stack.</summary>
      <returns>A <see cref="T:System.Collections.Stack"></see> containing correlation data.</returns>
    </member>
    <member name="P:System.Diagnostics.TraceEventCache.ProcessId">
      <summary>Gets the unique identifier of the current process.</summary>
      <returns>The system-generated unique identifier of the current process.</returns>
    </member>
    <member name="P:System.Diagnostics.TraceEventCache.ThreadId">
      <summary>Gets a unique identifier for the current managed thread.</summary>
      <returns>A string that represents a unique integer identifier for this managed thread.</returns>
    </member>
    <member name="P:System.Diagnostics.TraceEventCache.Timestamp">
      <summary>Gets the current number of ticks in the timer mechanism.</summary>
      <returns>The tick counter value of the underlying timer mechanism.</returns>
    </member>
    <member name="T:System.Diagnostics.TraceEventType">
      <summary>Identifies the type of event that has caused the trace.</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Critical">
      <summary>Fatal error or application crash.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Error">
      <summary>Recoverable error.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Information">
      <summary>Informational message.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Resume">
      <summary>Resumption of a logical operation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Start">
      <summary>Starting of a logical operation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Stop">
      <summary>Stopping of a logical operation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Suspend">
      <summary>Suspension of a logical operation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Transfer">
      <summary>Changing of correlation identity.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Verbose">
      <summary>Debugging trace.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Warning">
      <summary>Noncritical problem.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Diagnostics.TraceFilter">
      <summary>Provides the base class for trace filter implementations.</summary>
    </member>
    <member name="M:System.Diagnostics.TraceFilter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TraceFilter"></see> class.</summary>
    </member>
    <member name="M:System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])">
      <summary>When overridden in a derived class, determines whether the trace listener should trace the event.</summary>
      <param name="cache">The <see cref="T:System.Diagnostics.TraceEventCache"></see> that contains information for the trace event.</param>
      <param name="source">The name of the source.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"></see> values specifying the type of event that has caused the trace.</param>
      <param name="id">A trace identifier number.</param>
      <param name="formatOrMessage">Either the format to use for writing an array of arguments specified by the args parameter, or a message to write.</param>
      <param name="args">An array of argument objects.</param>
      <param name="data1">A trace data object.</param>
      <param name="data">An array of trace data objects.</param>
      <returns>true to trace the specified event; otherwise, false.</returns>
    </member>
    <member name="T:System.Diagnostics.TraceLevel">
      <summary>Specifies what messages to output for the <see cref="T:System.Diagnostics.Debug"></see>, <see cref="T:System.Diagnostics.Trace"></see> and <see cref="T:System.Diagnostics.TraceSwitch"></see> classes.</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Error">
      <summary>Output error-handling messages.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Info">
      <summary>Output informational messages, warnings, and error-handling messages.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Off">
      <summary>Output no tracing and debugging messages.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Verbose">
      <summary>Output all debugging and tracing messages.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Warning">
      <summary>Output warnings and error-handling messages.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Diagnostics.TraceListener">
      <summary>Provides the abstract base class for the listeners who monitor trace and debug output.</summary>
    </member>
    <member name="M:System.Diagnostics.TraceListener.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TraceListener"></see> class.</summary>
    </member>
    <member name="M:System.Diagnostics.TraceListener.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TraceListener"></see> class using the specified name as the listener.</summary>
      <param name="name">The name of the <see cref="T:System.Diagnostics.TraceListener"></see>.</param>
    </member>
    <member name="P:System.Diagnostics.TraceListener.Attributes">
      <summary>Gets the custom trace listener attributes defined in the application configuration file.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.StringDictionary"></see> containing the custom attributes for the trace listener.</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Close">
      <summary>When overridden in a derived class, closes the output stream so it no longer receives tracing or debugging output.</summary>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Diagnostics.TraceListener"></see>.</summary>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Diagnostics.TraceListener"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Fail(System.String)">
      <summary>Emits an error message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"></see> class.</summary>
      <param name="message">A message to emit.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Fail(System.String,System.String)">
      <summary>Emits an error message and a detailed error message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"></see> class.</summary>
      <param name="message">A message to emit.</param>
      <param name="detailMessage">A detailed message to emit.</param>
    </member>
    <member name="P:System.Diagnostics.TraceListener.Filter">
      <summary>Gets and sets the trace filter for the trace listener.</summary>
      <returns>An object derived from the <see cref="T:System.Diagnostics.TraceFilter"></see> base class.</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Flush">
      <summary>When overridden in a derived class, flushes the output buffer.</summary>
    </member>
    <member name="M:System.Diagnostics.TraceListener.GetSupportedAttributes">
      <summary>Gets the custom attributes supported by the trace listener.</summary>
      <returns>A string array naming the custom attributes supported by the trace listener, or null if there are no custom attributes.</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListener.IndentLevel">
      <summary>Gets or sets the indent level.</summary>
      <returns>The indent level. The default is zero.</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListener.IndentSize">
      <summary>Gets or sets the number of spaces in an indent.</summary>
      <returns>The number of spaces in an indent. The default is four spaces.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Set operation failed because the value is less than zero.</exception>
    </member>
    <member name="P:System.Diagnostics.TraceListener.IsThreadSafe">
      <summary>Gets a value indicating whether the trace listener is thread safe.</summary>
      <returns>true if the trace listener is thread safe; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListener.Name">
      <summary>Gets or sets a name for this <see cref="T:System.Diagnostics.TraceListener"></see>.</summary>
      <returns>A name for this <see cref="T:System.Diagnostics.TraceListener"></see>. The default is an empty string (&quot;&quot;).</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListener.NeedIndent">
      <summary>Gets or sets a value indicating whether to indent the output.</summary>
      <returns>true if the output should be indented; otherwise, false.</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>Writes trace information, a data object and event information to the listener specific output.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"></see> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"></see> values specifying the type of event that has caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="data">The trace data to emit.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>Writes trace information, an array of data objects and event information to the listener specific output.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"></see> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"></see> values specifying the type of event that has caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="data">An array of objects to emit as data.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
      <summary>Writes trace and event information to the listener specific output.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"></see> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"></see> values specifying the type of event that has caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>Writes trace information, a message, and event information to the listener specific output.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"></see> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"></see> values specifying the type of event that has caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>Writes trace information, a formatted array of objects and event information to the listener specific output.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"></see> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"></see> values specifying the type of event that has caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="format">A format string that contains zero or more format items, which correspond to objects in the args array.</param>
      <param name="args">An object array containing zero or more objects to format.</param>
    </member>
    <member name="P:System.Diagnostics.TraceListener.TraceOutputOptions">
      <summary>Gets or sets the trace output options.</summary>
      <returns>A bitwise combination of the enumeration values. The default is <see cref="F:System.Diagnostics.TraceOptions.None"></see>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Set operation failed because the value is invalid.</exception>
    </member>
    <member name="M:System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
      <summary>Writes trace information, a message, a related activity identity and event information to the listener specific output.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"></see> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="message">A message to write.</param>
      <param name="relatedActivityId">A <see cref="T:System.Guid"></see> object identifying a related activity.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Write(System.Object)">
      <summary>Writes the value of the object's <see cref="M:System.Object.ToString"></see> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"></see> class.</summary>
      <param name="o">An <see cref="T:System.Object"></see> whose fully qualified class name you want to write.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Write(System.String)">
      <summary>When overridden in a derived class, writes the specified message to the listener you create in the derived class.</summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Write(System.Object,System.String)">
      <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString"></see> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"></see> class.</summary>
      <param name="o">An <see cref="T:System.Object"></see> whose fully qualified class name you want to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Write(System.String,System.String)">
      <summary>Writes a category name and a message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"></see> class.</summary>
      <param name="message">A message to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteIndent">
      <summary>Writes the indent to the listener you create when you implement this class, and resets the <see cref="P:System.Diagnostics.TraceListener.NeedIndent"></see> property to false.</summary>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteLine(System.Object)">
      <summary>Writes the value of the object's <see cref="M:System.Object.ToString"></see> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"></see> class, followed by a line terminator.</summary>
      <param name="o">An <see cref="T:System.Object"></see> whose fully qualified class name you want to write.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteLine(System.String)">
      <summary>When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.</summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)">
      <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString"></see> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"></see> class, followed by a line terminator.</summary>
      <param name="o">An <see cref="T:System.Object"></see> whose fully qualified class name you want to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteLine(System.String,System.String)">
      <summary>Writes a category name and a message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"></see> class, followed by a line terminator.</summary>
      <param name="message">A message to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="T:System.Diagnostics.TraceListenerCollection">
      <summary>Provides a thread-safe list of <see cref="T:System.Diagnostics.TraceListener"></see> objects.</summary>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Add(System.Diagnostics.TraceListener)">
      <summary>Adds a <see cref="T:System.Diagnostics.TraceListener"></see> to the list.</summary>
      <param name="listener">A <see cref="T:System.Diagnostics.TraceListener"></see> to add to the list.</param>
      <returns>The position at which the new listener was inserted.</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListener[])">
      <summary>Adds an array of <see cref="T:System.Diagnostics.TraceListener"></see> objects to the list.</summary>
      <param name="value">An array of <see cref="T:System.Diagnostics.TraceListener"></see> objects to add to the list.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListenerCollection)">
      <summary>Adds the contents of another <see cref="T:System.Diagnostics.TraceListenerCollection"></see> to the list.</summary>
      <param name="value">Another <see cref="T:System.Diagnostics.TraceListenerCollection"></see> whose contents are added to the list.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Clear">
      <summary>Clears all the listeners from the list.</summary>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Contains(System.Diagnostics.TraceListener)">
      <summary>Checks whether the list contains the specified listener.</summary>
      <param name="listener">A <see cref="T:System.Diagnostics.TraceListener"></see> to find in the list.</param>
      <returns>true if the listener is in the list; otherwise, false.</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.CopyTo(System.Diagnostics.TraceListener[],System.Int32)">
      <summary>Copies a section of the current <see cref="T:System.Diagnostics.TraceListenerCollection"></see> list to the specified array at the specified index.</summary>
      <param name="listeners">An array of type <see cref="T:System.Array"></see> to copy the elements into.</param>
      <param name="index">The starting index number in the current list to copy from.</param>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.Count">
      <summary>Gets the number of listeners in the list.</summary>
      <returns>The number of listeners in the list.</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.GetEnumerator">
      <summary>Gets an enumerator for this list.</summary>
      <returns>An enumerator of type <see cref="T:System.Collections.IEnumerator"></see>.</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.IndexOf(System.Diagnostics.TraceListener)">
      <summary>Gets the index of the specified listener.</summary>
      <param name="listener">A <see cref="T:System.Diagnostics.TraceListener"></see> to find in the list.</param>
      <returns>The index of the listener, if it can be found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Insert(System.Int32,System.Diagnostics.TraceListener)">
      <summary>Inserts the listener at the specified index.</summary>
      <param name="index">The position in the list to insert the new <see cref="T:System.Diagnostics.TraceListener"></see>.</param>
      <param name="listener">A <see cref="T:System.Diagnostics.TraceListener"></see> to insert in the list.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> is not a valid index in the list.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="listener">listener</paramref> is null.</exception>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Diagnostics.TraceListener"></see> at the specified index.</summary>
      <param name="i">The zero-based index of the <see cref="T:System.Diagnostics.TraceListener"></see> to get from the list.</param>
      <returns>A <see cref="T:System.Diagnostics.TraceListener"></see> with the specified index.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.Item(System.String)">
      <summary>Gets the first <see cref="T:System.Diagnostics.TraceListener"></see> in the list with the specified name.</summary>
      <param name="name">The name of the <see cref="T:System.Diagnostics.TraceListener"></see> to get from the list.</param>
      <returns>The first <see cref="T:System.Diagnostics.TraceListener"></see> in the list with the given <see cref="P:System.Diagnostics.TraceListener.Name"></see>. This item returns null if no <see cref="T:System.Diagnostics.TraceListener"></see> with the given name can be found.</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Remove(System.String)">
      <summary>Removes from the collection the first <see cref="T:System.Diagnostics.TraceListener"></see> with the specified name.</summary>
      <param name="name">The name of the <see cref="T:System.Diagnostics.TraceListener"></see> to remove from the list.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Remove(System.Diagnostics.TraceListener)">
      <summary>Removes from the collection the specified <see cref="T:System.Diagnostics.TraceListener"></see>.</summary>
      <param name="listener">A <see cref="T:System.Diagnostics.TraceListener"></see> to remove from the list.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.RemoveAt(System.Int32)">
      <summary>Removes from the collection the <see cref="T:System.Diagnostics.TraceListener"></see> at the specified index.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.Diagnostics.TraceListener"></see> to remove from the list.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> is not a valid index in the list.</exception>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies a section of the current <see cref="T:System.Diagnostics.TraceListenerCollection"></see> to the specified array of <see cref="T:System.Diagnostics.TraceListener"></see> objects.</summary>
      <param name="array">The one-dimensional array of <see cref="T:System.Diagnostics.TraceListener"></see> objects that is the destination of the elements copied from the <see cref="T:System.Diagnostics.TraceListenerCollection"></see>. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Diagnostics.TraceListenerCollection"></see> is synchronized (thread safe).</summary>
      <returns>Always true.</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Diagnostics.TraceListenerCollection"></see>.</summary>
      <returns>The current <see cref="T:System.Diagnostics.TraceListenerCollection"></see> object.</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adds a trace listener to the <see cref="T:System.Diagnostics.TraceListenerCollection"></see>.</summary>
      <param name="value">The object to add to the <see cref="T:System.Diagnostics.TraceListenerCollection"></see>.</param>
      <returns>The position into which the new trace listener was inserted.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> is null.   -or-  <paramref name="value">value</paramref> is not a <see cref="T:System.Diagnostics.TraceListener"></see>.</exception>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Diagnostics.TraceListenerCollection"></see> contains a specific object.</summary>
      <param name="value">The object to locate in the <see cref="T:System.Diagnostics.TraceListenerCollection"></see>.</param>
      <returns>true if the <see cref="T:System.Object"></see> is found in the <see cref="T:System.Diagnostics.TraceListenerCollection"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific object in the <see cref="T:System.Diagnostics.TraceListenerCollection"></see>.</summary>
      <param name="value">The object to locate in the <see cref="T:System.Diagnostics.TraceListenerCollection"></see>.</param>
      <returns>The index of <paramref name="value">value</paramref> if found in the <see cref="T:System.Diagnostics.TraceListenerCollection"></see>; otherwise, -1.</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts a <see cref="T:System.Diagnostics.TraceListener"></see> object at the specified position in the <see cref="T:System.Diagnostics.TraceListenerCollection"></see>.</summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">The <see cref="T:System.Diagnostics.TraceListener"></see> object to insert into the <see cref="T:System.Diagnostics.TraceListenerCollection"></see>.</param>
      <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> is not a <see cref="T:System.Diagnostics.TraceListener"></see> object.</exception>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Diagnostics.TraceListenerCollection"></see> has a fixed size.</summary>
      <returns>Always false.</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Diagnostics.TraceListenerCollection"></see> is read-only</summary>
      <returns>Always false.</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Diagnostics.TraceListener"></see> at the specified index in the <see cref="T:System.Diagnostics.TraceListenerCollection"></see>.</summary>
      <param name="index">The zero-based index of the value to get.</param>
      <returns>The <see cref="T:System.Diagnostics.TraceListener"></see> at the specified index.</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes an object from the <see cref="T:System.Diagnostics.TraceListenerCollection"></see>.</summary>
      <param name="value">The object to remove from the <see cref="T:System.Diagnostics.TraceListenerCollection"></see>.</param>
    </member>
    <member name="T:System.Diagnostics.TraceOptions">
      <summary>Specifies trace data options to be written to the trace output.</summary>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.Callstack">
      <summary>Write the call stack, which is represented by the return value of the <see cref="P:System.Environment.StackTrace"></see> property.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.DateTime">
      <summary>Write the date and time.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.LogicalOperationStack">
      <summary>Write the logical operation stack, which is represented by the return value of the <see cref="P:System.Diagnostics.CorrelationManager.LogicalOperationStack"></see> property.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.None">
      <summary>Do not write any elements.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.ProcessId">
      <summary>Write the process identity, which is represented by the return value of the <see cref="P:System.Diagnostics.Process.Id"></see> property.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.ThreadId">
      <summary>Write the thread identity, which is represented by the return value of the <see cref="P:System.Threading.Thread.ManagedThreadId"></see> property for the current thread.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.Timestamp">
      <summary>Write the timestamp, which is represented by the return value of the <see cref="M:System.Diagnostics.Stopwatch.GetTimestamp"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Diagnostics.TraceSource">
      <summary>Provides a set of methods and properties that enable applications to trace the execution of code and associate trace messages with their source.</summary>
    </member>
    <member name="M:System.Diagnostics.TraceSource.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TraceSource"></see> class, using the specified name for the source.</summary>
      <param name="name">The name of the source (typically, the name of the application).</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="name">name</paramref> is an empty string (&quot;&quot;).</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.#ctor(System.String,System.Diagnostics.SourceLevels)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TraceSource"></see> class, using the specified name for the source and the default source level at which tracing is to occur.</summary>
      <param name="name">The name of the source, typically the name of the application.</param>
      <param name="defaultLevel">A bitwise combination of the enumeration values that specifies the default source level at which to trace.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="name">name</paramref> is an empty string (&quot;&quot;).</exception>
    </member>
    <member name="P:System.Diagnostics.TraceSource.Attributes">
      <summary>Gets the custom switch attributes defined in the application configuration file.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.StringDictionary"></see> containing the custom attributes for the trace switch.</returns>
    </member>
    <member name="M:System.Diagnostics.TraceSource.Close">
      <summary>Closes all the trace listeners in the trace listener collection.</summary>
    </member>
    <member name="M:System.Diagnostics.TraceSource.Flush">
      <summary>Flushes all the trace listeners in the trace listener collection.</summary>
      <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.GetSupportedAttributes">
      <summary>Gets the custom attributes supported by the trace source.</summary>
      <returns>A string array naming the custom attributes supported by the trace source, or null if there are no custom attributes.</returns>
    </member>
    <member name="P:System.Diagnostics.TraceSource.Listeners">
      <summary>Gets the collection of trace listeners for the trace source.</summary>
      <returns>A <see cref="T:System.Diagnostics.TraceListenerCollection"></see> that contains the active trace listeners associated with the source.</returns>
    </member>
    <member name="P:System.Diagnostics.TraceSource.Name">
      <summary>Gets the name of the trace source.</summary>
      <returns>The name of the trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.TraceSource.Switch">
      <summary>Gets or sets the source switch value.</summary>
      <returns>A <see cref="T:System.Diagnostics.SourceSwitch"></see> object representing the source switch value.</returns>
      <exception cref="T:System.ArgumentNullException"><see cref="P:System.Diagnostics.TraceSource.Switch"></see> is set to null.</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>Writes trace data to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"></see> collection using the specified event type, event identifier, and trace data.</summary>
      <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="data">The trace data.</param>
      <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>Writes trace data to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"></see> collection using the specified event type, event identifier, and trace data array.</summary>
      <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="data">An object array containing the trace data.</param>
      <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32)">
      <summary>Writes a trace event message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"></see> collection using the specified event type and event identifier.</summary>
      <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
      <param name="id">A numeric identifier for the event.</param>
      <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>Writes a trace event message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"></see> collection using the specified event type, event identifier, and message.</summary>
      <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="message">The trace message to write.</param>
      <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>Writes a trace event to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"></see> collection using the specified event type, event identifier, and argument array and format.</summary>
      <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="format">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the args array.</param>
      <param name="args">An object array containing zero or more objects to format.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="format">format</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="format">format</paramref> is invalid.   -or-   The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.</exception>
      <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceInformation(System.String)">
      <summary>Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"></see> collection using the specified message.</summary>
      <param name="message">The informative message to write.</param>
      <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceInformation(System.String,System.Object[])">
      <summary>Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"></see> collection using the specified object array and formatting information.</summary>
      <param name="format">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the args array.</param>
      <param name="args">An array containing zero or more objects to format.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="format">format</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="format">format</paramref> is invalid.   -or-   The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.</exception>
      <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceTransfer(System.Int32,System.String,System.Guid)">
      <summary>Writes a trace transfer message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"></see> collection using the specified numeric identifier, message, and related activity identifier.</summary>
      <param name="id">A numeric identifier for the event.</param>
      <param name="message">The trace message to write.</param>
      <param name="relatedActivityId">A structure that identifies the related activity.</param>
    </member>
    <member name="T:System.Diagnostics.TraceSwitch">
      <summary>Provides a multilevel switch to control tracing and debug output without recompiling your code.</summary>
    </member>
    <member name="M:System.Diagnostics.TraceSwitch.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TraceSwitch"></see> class, using the specified display name and description.</summary>
      <param name="displayName">The name to display on a user interface.</param>
      <param name="description">The description of the switch.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSwitch.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TraceSwitch"></see> class, using the specified display name, description, and default value for the switch.</summary>
      <param name="displayName">The name to display on a user interface.</param>
      <param name="description">The description of the switch.</param>
      <param name="defaultSwitchValue">The default value of the switch.</param>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.Level">
      <summary>Gets or sets the trace level that determines the messages the switch allows.</summary>
      <returns>One of the <see cref="T:System.Diagnostics.TraceLevel"></see> values that that specifies the level of messages that are allowed by the switch.</returns>
      <exception cref="T:System.ArgumentException"><see cref="P:System.Diagnostics.TraceSwitch.Level"></see> is set to a value that is not one of the <see cref="T:System.Diagnostics.TraceLevel"></see> values.</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSwitch.OnSwitchSettingChanged">
      <summary>Updates and corrects the level for this switch.</summary>
    </member>
    <member name="M:System.Diagnostics.TraceSwitch.OnValueChanged">
      <summary>Sets the <see cref="P:System.Diagnostics.Switch.SwitchSetting"></see> property to the integer equivalent of the <see cref="P:System.Diagnostics.Switch.Value"></see> property.</summary>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.TraceError">
      <summary>Gets a value indicating whether the switch allows error-handling messages.</summary>
      <returns>true if the <see cref="P:System.Diagnostics.TraceSwitch.Level"></see> property is set to <see cref="F:System.Diagnostics.TraceLevel.Error"></see>, <see cref="F:System.Diagnostics.TraceLevel.Warning"></see>, <see cref="F:System.Diagnostics.TraceLevel.Info"></see>, or <see cref="F:System.Diagnostics.TraceLevel.Verbose"></see>; otherwise, false.</returns>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.TraceInfo">
      <summary>Gets a value indicating whether the switch allows informational messages.</summary>
      <returns>true if the <see cref="P:System.Diagnostics.TraceSwitch.Level"></see> property is set to <see cref="F:System.Diagnostics.TraceLevel.Info"></see> or <see cref="F:System.Diagnostics.TraceLevel.Verbose"></see>; otherwise, false.</returns>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.TraceVerbose">
      <summary>Gets a value indicating whether the switch allows all messages.</summary>
      <returns>true if the <see cref="P:System.Diagnostics.TraceSwitch.Level"></see> property is set to <see cref="F:System.Diagnostics.TraceLevel.Verbose"></see>; otherwise, false.</returns>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.TraceWarning">
      <summary>Gets a value indicating whether the switch allows warning messages.</summary>
      <returns>true if the <see cref="P:System.Diagnostics.TraceSwitch.Level"></see> property is set to <see cref="F:System.Diagnostics.TraceLevel.Warning"></see>, <see cref="F:System.Diagnostics.TraceLevel.Info"></see>, or <see cref="F:System.Diagnostics.TraceLevel.Verbose"></see>; otherwise, false.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.OpenFlags">
      <summary>Specifies the way to open the X.509 certificate store.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.OpenFlags.IncludeArchived">
      <summary>Open the X.509 certificate store and include archived certificates.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.OpenFlags.MaxAllowed">
      <summary>Open the X.509 certificate store for the highest access allowed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.OpenFlags.OpenExistingOnly">
      <summary>Opens only existing stores; if no store exists, the <see cref="M:System.Security.Cryptography.X509Certificates.X509Store.Open(System.Security.Cryptography.X509Certificates.OpenFlags)"></see> method will not create a new store.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.OpenFlags.ReadOnly">
      <summary>Open the X.509 certificate store for reading only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.OpenFlags.ReadWrite">
      <summary>Open the X.509 certificate store for both reading and writing.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.PublicKey">
      <summary>Represents a certificate's public key information. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.PublicKey.#ctor(System.Security.Cryptography.Oid,System.Security.Cryptography.AsnEncodedData,System.Security.Cryptography.AsnEncodedData)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.PublicKey"></see> class using an object identifier (OID) object of the public key, an ASN.1-encoded representation of the public key parameters, and an ASN.1-encoded representation of the public key value.</summary>
      <param name="oid">An object identifier (OID) object that represents the public key.</param>
      <param name="parameters">An ASN.1-encoded representation of the public key parameters.</param>
      <param name="keyValue">An ASN.1-encoded representation of the public key value.</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.PublicKey.EncodedKeyValue">
      <summary>Gets the ASN.1-encoded representation of the public key value.</summary>
      <returns>The ASN.1-encoded representation of the public key value.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.PublicKey.EncodedParameters">
      <summary>Gets the ASN.1-encoded representation of the public key parameters.</summary>
      <returns>The ASN.1-encoded representation of the public key parameters.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.PublicKey.Key">
      <summary>Gets an <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider"></see> or <see cref="T:System.Security.Cryptography.DSACryptoServiceProvider"></see> object representing the public key.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm"></see> object representing the public key.</returns>
      <exception cref="T:System.NotSupportedException">The key algorithm is not supported.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.PublicKey.Oid">
      <summary>Gets an object identifier (OID) object of the public key.</summary>
      <returns>An object identifier (OID) object of the public key.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
      <summary>Represents the results from a single capturing group.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
      <summary>Gets a collection of all the captures matched by the capturing group, in innermost-leftmost-first order (or innermost-rightmost-first order if the regular expression is modified with the <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft"></see> option). The collection may have zero or more items.</summary>
      <returns>The collection of substrings matched by the group.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Name">
      <summary>Returns the name of the capturing group representing by the current instance.</summary>
      <returns>The name of the capturing group represented by the current instance.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
      <summary>Gets a value indicating whether the match is successful.</summary>
      <returns>true if the match is successful; otherwise, false.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)">
      <summary>Returns a Group object equivalent to the one supplied that is safe to share between multiple threads.</summary>
      <param name="inner">The input <see cref="T:System.Text.RegularExpressions.Group"></see> object.</param>
      <returns>A regular expression Group object.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="inner">inner</paramref> is null.</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
      <summary>Returns the set of captured groups in a single match.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies all the elements of the collection to the given array beginning at the given index.</summary>
      <param name="array">The array the collection is to be copied into.</param>
      <param name="arrayIndex">The position in the destination array where the copying is to begin.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.IndexOutOfRangeException"><paramref name="arrayIndex">arrayIndex</paramref> is outside the bounds of <paramref name="array">array</paramref>.   -or-  <paramref name="arrayIndex">arrayIndex</paramref> plus <see cref="P:System.Text.RegularExpressions.GroupCollection.Count"></see> is outside the bounds of <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
      <summary>Returns the number of groups in the collection.</summary>
      <returns>The number of groups in the collection.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
      <summary>Provides an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that contains all <see cref="T:System.Text.RegularExpressions.Group"></see> objects in the <see cref="T:System.Text.RegularExpressions.GroupCollection"></see>.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to the <see cref="T:System.Text.RegularExpressions.GroupCollection"></see> is synchronized (thread-safe).</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
      <summary>Enables access to a member of the collection by integer index.</summary>
      <param name="groupnum">The zero-based index of the collection member to be retrieved.</param>
      <returns>The member of the collection specified by <paramref name="groupnum">groupnum</paramref>.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
      <summary>Enables access to a member of the collection by string index.</summary>
      <param name="groupname">The name of a capturing group.</param>
      <returns>The member of the collection specified by <paramref name="groupname">groupname</paramref>.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Text.RegularExpressions.GroupCollection"></see>.</summary>
      <returns>A copy of the <see cref="T:System.Text.RegularExpressions.Match"></see> object to synchronize.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
      <summary>Represents the results from a single regular expression match.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
      <summary>Gets the empty group. All failed matches return this empty match.</summary>
      <returns>An empty match.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
      <summary>Gets a collection of groups matched by the regular expression.</summary>
      <returns>The character groups matched by the pattern.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
      <summary>Returns a new <see cref="T:System.Text.RegularExpressions.Match"></see> object with the results for the next match, starting at the position at which the last match ended (at the character after the last matched character).</summary>
      <returns>The next regular expression match.</returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
      <summary>Returns the expansion of the specified replacement pattern.</summary>
      <param name="replacement">The replacement pattern to use.</param>
      <returns>The expanded version of the <paramref name="replacement">replacement</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="replacement">replacement</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">Expansion is not allowed for this pattern.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
      <summary>Returns a <see cref="T:System.Text.RegularExpressions.Match"></see> instance equivalent to the one supplied that is suitable to share between multiple threads.</summary>
      <param name="inner">A regular expression match equivalent to the one expected.</param>
      <returns>A regular expression match that is suitable to share between multiple threads.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="inner">inner</paramref> is null.</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
      <summary>Represents the set of successful matches found by iteratively applying a regular expression pattern to the input string.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies all the elements of the collection to the given array starting at the given index.</summary>
      <param name="array">The array the collection is to be copied into.</param>
      <param name="arrayIndex">The position in the array where copying is to begin.</param>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is a multi-dimensional array.</exception>
      <exception cref="T:System.IndexOutOfRangeException"><paramref name="arrayIndex">arrayIndex</paramref> is outside the bounds of <paramref name="array">array</paramref>.   -or-  <paramref name="arrayIndex">arrayIndex</paramref> plus <see cref="P:System.Text.RegularExpressions.MatchCollection.Count"></see> is outside the bounds of <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
      <summary>Gets the number of matches.</summary>
      <returns>The number of matches.</returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
      <summary>Provides an enumerator that iterates through the collection.</summary>
      <returns>An object that contains all <see cref="T:System.Text.RegularExpressions.Match"></see> objects within the <see cref="T:System.Text.RegularExpressions.MatchCollection"></see>.</returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read only.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
      <summary>Gets a value indicating whether access to the collection is synchronized (thread-safe).</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
      <summary>Gets an individual member of the collection.</summary>
      <param name="i">Index into the <see cref="T:System.Text.RegularExpressions.Match"></see> collection.</param>
      <returns>The captured substring at position <paramref name="i">i</paramref> in the collection.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i">i</paramref> is less than 0 or greater than or equal to <see cref="P:System.Text.RegularExpressions.MatchCollection.Count"></see>.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection. This property always returns the object itself.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
      <summary>Represents the method that is called each time a regular expression match is found during a <see cref="Overload:System.Text.RegularExpressions.Regex.Replace"></see> method operation.</summary>
      <param name="match">The <see cref="T:System.Text.RegularExpressions.Match"></see> object that represents a single regular expression match during a <see cref="Overload:System.Text.RegularExpressions.Regex.Replace"></see> method operation.</param>
      <returns></returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
      <summary>Represents an immutable regular expression.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex"></see> class.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex"></see> class for the specified regular expression.</summary>
      <param name="pattern">The regular expression pattern to match.</param>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="pattern">pattern</paramref> is null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex"></see> class by using serialized data.</summary>
      <param name="info">The object that contains a serialized pattern and <see cref="T:System.Text.RegularExpressions.RegexOptions"></see> information.</param>
      <param name="context">The destination for this serialization. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException">The pattern that <paramref name="info">info</paramref> contains is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="info">info</paramref> contains an invalid <see cref="T:System.Text.RegularExpressions.RegexOptions"></see> flag.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex"></see> class for the specified regular expression, with options that modify the pattern.</summary>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="options">A bitwise combination of the enumeration values that modify the regular expression.</param>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="pattern">pattern</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options">options</paramref> contains an invalid flag.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex"></see> class for the specified regular expression, with options that modify the pattern and a value that specifies how long a pattern matching method should attempt a match before it times out.</summary>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="options">A bitwise combination of the enumeration values that modify the regular expression.</param>
      <param name="matchTimeout">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"></see> to indicate that the method should not time out.</param>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="pattern">pattern</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options">options</paramref> is not a valid <see cref="T:System.Text.RegularExpressions.RegexOptions"></see> value.   -or-  <paramref name="matchTimeout">matchTimeout</paramref> is negative, zero, or greater than approximately 24 days.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CacheSize">
      <summary>Gets or sets the maximum number of entries in the current static cache of compiled regular expressions.</summary>
      <returns>The maximum number of entries in the static cache.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value in a set operation is less than zero.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capnames">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CapNames">
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.caps">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Caps">
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capsize">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capslist">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)">
      <summary>Compiles one or more specified <see cref="T:System.Text.RegularExpressions.Regex"></see> objects to a named assembly.</summary>
      <param name="regexinfos">An array that describes the regular expressions to compile.</param>
      <param name="assemblyname">The file name of the assembly.</param>
      <exception cref="T:System.ArgumentException">The value of the <paramref name="assemblyname">assemblyname</paramref> parameter's <see cref="P:System.Reflection.AssemblyName.Name"></see> property is an empty or null string.   -or-   The regular expression pattern of one or more objects in <paramref name="regexinfos">regexinfos</paramref> contains invalid syntax.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="assemblyname">assemblyname</paramref> or <paramref name="regexinfos">regexinfos</paramref> is null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])">
      <summary>Compiles one or more specified <see cref="T:System.Text.RegularExpressions.Regex"></see> objects to a named assembly with the specified attributes.</summary>
      <param name="regexinfos">An array that describes the regular expressions to compile.</param>
      <param name="assemblyname">The file name of the assembly.</param>
      <param name="attributes">An array that defines the attributes to apply to the assembly.</param>
      <exception cref="T:System.ArgumentException">The value of the <paramref name="assemblyname">assemblyname</paramref> parameter's <see cref="P:System.Reflection.AssemblyName.Name"></see> property is an empty or null string.   -or-   The regular expression pattern of one or more objects in <paramref name="regexinfos">regexinfos</paramref> contains invalid syntax.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="assemblyname">assemblyname</paramref> or <paramref name="regexinfos">regexinfos</paramref> is null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)">
      <summary>Compiles one or more specified <see cref="T:System.Text.RegularExpressions.Regex"></see> objects and a specified resource file to a named assembly with the specified attributes.</summary>
      <param name="regexinfos">An array that describes the regular expressions to compile.</param>
      <param name="assemblyname">The file name of the assembly.</param>
      <param name="attributes">An array that defines the attributes to apply to the assembly.</param>
      <param name="resourceFile">The name of the Win32 resource file to include in the assembly.</param>
      <exception cref="T:System.ArgumentException">The value of the <paramref name="assemblyname">assemblyname</paramref> parameter's <see cref="P:System.Reflection.AssemblyName.Name"></see> property is an empty or null string.   -or-   The regular expression pattern of one or more objects in <paramref name="regexinfos">regexinfos</paramref> contains invalid syntax.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="assemblyname">assemblyname</paramref> or <paramref name="regexinfos">regexinfos</paramref> is null.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">The <paramref name="resourceFile">resourceFile</paramref> parameter designates an invalid Win32 resource file.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file designated by the <paramref name="resourceFile">resourceFile</paramref> parameter cannot be found.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
      <summary>Escapes a minimal set of characters (\, *, +, ?, |, {, [, (,), ^, $,., #, and white space) by replacing them with their escape codes. This instructs the regular expression engine to interpret these characters literally rather than as metacharacters.</summary>
      <param name="str">The input string that contains the text to convert.</param>
      <returns>A string of characters with metacharacters converted to their escaped form.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="str">str</paramref> is null.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.factory">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
      <summary>Returns an array of capturing group names for the regular expression.</summary>
      <returns>A string array of group names.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
      <summary>Returns an array of capturing group numbers that correspond to group names in an array.</summary>
      <returns>An integer array of group numbers.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
      <summary>Gets the group name that corresponds to the specified group number.</summary>
      <param name="i">The group number to convert to the corresponding group name.</param>
      <returns>A string that contains the group name associated with the specified group number. If there is no group name that corresponds to <paramref name="i">i</paramref>, the method returns <see cref="F:System.String.Empty"></see>.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
      <summary>Returns the group number that corresponds to the specified group name.</summary>
      <param name="name">The group name to convert to the corresponding group number.</param>
      <returns>The group number that corresponds to the specified group name, or -1 if <paramref name="name">name</paramref> is not a valid group name.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout">
      <summary>Specifies that a pattern-matching operation should not time out.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.InitializeReferences">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <exception cref="T:System.NotSupportedException">References have already been initialized.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.internalMatchTimeout">
      <summary>The maximum amount of time that can elapse in a pattern-matching operation before the operation times out.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
      <summary>Indicates whether the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex"></see> constructor finds a match in a specified input string.</summary>
      <param name="input">The string to search for a match.</param>
      <returns>true if the regular expression finds a match; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> is null.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
      <summary>Indicates whether the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex"></see> constructor finds a match in the specified input string, beginning at the specified starting position in the string.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="startat">The character position at which to start the search.</param>
      <returns>true if the regular expression finds a match; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat">startat</paramref> is less than zero or greater than the length of <paramref name="input">input</paramref>.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
      <summary>Indicates whether the specified regular expression finds a match in the specified input string.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <returns>true if the regular expression finds a match; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> or <paramref name="pattern">pattern</paramref> is null.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
      <returns>true if the regular expression finds a match; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> or <paramref name="pattern">pattern</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options">options</paramref> is not a valid <see cref="T:System.Text.RegularExpressions.RegexOptions"></see> value.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options and time-out interval.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
      <param name="matchTimeout">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"></see> to indicate that the method should not time out.</param>
      <returns>true if the regular expression finds a match; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> or <paramref name="pattern">pattern</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options">options</paramref> is not a valid <see cref="T:System.Text.RegularExpressions.RegexOptions"></see> value.   -or-  <paramref name="matchTimeout">matchTimeout</paramref> is negative, zero, or greater than approximately 24 days.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Searches the input string for the first occurrence of the specified regular expression, using the specified matching options.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
      <returns>An object that contains information about the match.</returns>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> or <paramref name="pattern">pattern</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options">options</paramref> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions"></see> values.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
      <summary>Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position and searching only the specified number of characters.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="beginning">The zero-based character position in the input string that defines the leftmost position to be searched.</param>
      <param name="length">The number of characters in the substring to include in the search.</param>
      <returns>An object that contains information about the match.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="beginning">beginning</paramref> is less than zero or greater than the length of <paramref name="input">input</paramref>.   -or-  <paramref name="length">length</paramref> is less than zero or greater than the length of <paramref name="input">input</paramref>.   -or-  <paramref name="beginning">beginning</paramref>+<paramref name="length">length</paramref>–1 identifies a position that is outside the range of <paramref name="input">input</paramref>.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Searches the input string for the first occurrence of the specified regular expression, using the specified matching options and time-out interval.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
      <param name="matchTimeout">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"></see> to indicate that the method should not time out.</param>
      <returns>An object that contains information about the match.</returns>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> or <paramref name="pattern">pattern</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options">options</paramref> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions"></see> values.   -or-  <paramref name="matchTimeout">matchTimeout</paramref> is negative, zero, or greater than approximately 24 days.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
      <summary>Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position in the string.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="startat">The zero-based character position at which to start the search.</param>
      <returns>An object that contains information about the match.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat">startat</paramref> is less than zero or greater than the length of <paramref name="input">input</paramref>.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
      <summary>Searches the specified input string for the first occurrence of the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex"></see> constructor.</summary>
      <param name="input">The string to search for a match.</param>
      <returns>An object that contains information about the match.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> is null.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
      <summary>Searches the specified input string for the first occurrence of the specified regular expression.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <returns>An object that contains information about the match.</returns>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> or <paramref name="pattern">pattern</paramref> is null.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
      <summary>Searches the specified input string for all occurrences of a regular expression.</summary>
      <param name="input">The string to search for a match.</param>
      <returns>A collection of the <see cref="T:System.Text.RegularExpressions.Match"></see> objects found by the search. If no matches are found, the method returns an empty collection object.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> is null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
      <summary>Searches the specified input string for all occurrences of a regular expression, beginning at the specified starting position in the string.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="startat">The character position in the input string at which to start the search.</param>
      <returns>A collection of the <see cref="T:System.Text.RegularExpressions.Match"></see> objects found by the search. If no matches are found, the method returns an empty collection object.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat">startat</paramref> is less than zero or greater than the length of <paramref name="input">input</paramref>.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
      <summary>Searches the specified input string for all occurrences of a specified regular expression.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <returns>A collection of the <see cref="T:System.Text.RegularExpressions.Match"></see> objects found by the search. If no matches are found, the method returns an empty collection object.</returns>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> or <paramref name="pattern">pattern</paramref> is null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="options">A bitwise combination of the enumeration values that specify options for matching.</param>
      <returns>A collection of the <see cref="T:System.Text.RegularExpressions.Match"></see> objects found by the search. If no matches are found, the method returns an empty collection object.</returns>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> or <paramref name="pattern">pattern</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options">options</paramref> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions"></see> values.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options and time-out interval.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="options">A bitwise combination of the enumeration values that specify options for matching.</param>
      <param name="matchTimeout">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"></see> to indicate that the method should not time out.</param>
      <returns>A collection of the <see cref="T:System.Text.RegularExpressions.Match"></see> objects found by the search. If no matches are found, the method returns an empty collection object.</returns>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> or <paramref name="pattern">pattern</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options">options</paramref> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions"></see> values.   -or-  <paramref name="matchTimeout">matchTimeout</paramref> is negative, zero, or greater than approximately 24 days.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.MatchTimeout">
      <summary>Gets the time-out interval of the current instance.</summary>
      <returns>The maximum time interval that can elapse in a pattern-matching operation before a <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"></see> is thrown, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"></see> if time-outs are disabled.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
      <summary>Gets the options that were passed into the <see cref="T:System.Text.RegularExpressions.Regex"></see> constructor.</summary>
      <returns>One or more members of the <see cref="T:System.Text.RegularExpressions.RegexOptions"></see> enumeration that represent options that were passed to the <see cref="T:System.Text.RegularExpressions.Regex"></see> constructor</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.pattern">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>In a specified input string, replaces all substrings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"></see> delegate. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="evaluator">A custom method that examines each match and returns either the original matched string or a replacement string.</param>
      <param name="options">A bitwise combination of enumeration values that provide options for matching.</param>
      <param name="matchTimeout">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"></see> to indicate that the method should not time out.</param>
      <returns>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <paramref name="pattern">pattern</paramref> is not matched in the current instance, the method returns the current instance unchanged.</returns>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref>, <paramref name="pattern">pattern</paramref>, or <paramref name="evaluator">evaluator</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options">options</paramref> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions"></see> values.   -or-  <paramref name="matchTimeout">matchTimeout</paramref> is negative, zero, or greater than approximately 24 days.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="replacement">The replacement string.</param>
      <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
      <param name="matchTimeout">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"></see> to indicate that the method should not time out.</param>
      <returns>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <paramref name="pattern">pattern</paramref> is not matched in the current instance, the method returns the current instance unchanged.</returns>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref>, <paramref name="pattern">pattern</paramref>, or <paramref name="replacement">replacement</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options">options</paramref> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions"></see> values.   -or-  <paramref name="matchTimeout">matchTimeout</paramref> is negative, zero, or greater than approximately 24 days.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
      <summary>In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"></see> delegate.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="evaluator">A custom method that examines each match and returns either the original matched string or a replacement string.</param>
      <param name="count">The maximum number of times the replacement will occur.</param>
      <param name="startat">The character position in the input string where the search begins.</param>
      <returns>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> or <paramref name="evaluator">evaluator</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat">startat</paramref> is less than zero or greater than the length of <paramref name="input">input</paramref>.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
      <summary>In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"></see> delegate. Specified options modify the matching operation.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="evaluator">A custom method that examines each match and returns either the original matched string or a replacement string.</param>
      <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
      <returns>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If <paramref name="pattern">pattern</paramref> is not matched in the current instance, the method returns the current instance unchanged.</returns>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref>, <paramref name="pattern">pattern</paramref>, or <paramref name="evaluator">evaluator</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options">options</paramref> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions"></see> values.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="replacement">The replacement string.</param>
      <param name="count">Maximum number of times the replacement can occur.</param>
      <param name="startat">The character position in the input string where the search begins.</param>
      <returns>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> or <paramref name="replacement">replacement</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat">startat</paramref> is less than zero or greater than the length of <paramref name="input">input</paramref>.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Specified options modify the matching operation.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="replacement">The replacement string.</param>
      <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
      <returns>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <paramref name="pattern">pattern</paramref> is not matched in the current instance, the method returns the current instance unchanged.</returns>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref>, <paramref name="pattern">pattern</paramref>, or <paramref name="replacement">replacement</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options">options</paramref> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions"></see> values.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"></see> delegate.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="evaluator">A custom method that examines each match and returns either the original matched string or a replacement string.</param>
      <returns>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If <paramref name="pattern">pattern</paramref> is not matched in the current instance, the method returns the current instance unchanged.</returns>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref>, <paramref name="pattern">pattern</paramref>, or <paramref name="evaluator">evaluator</paramref> is null.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
      <summary>In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="replacement">The replacement string.</param>
      <returns>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <paramref name="pattern">pattern</paramref> is not matched in the current instance, the method returns the current instance unchanged.</returns>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref>, <paramref name="pattern">pattern</paramref>, or <paramref name="replacement">replacement</paramref> is null.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
      <summary>In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="replacement">The replacement string.</param>
      <param name="count">The maximum number of times the replacement can occur.</param>
      <returns>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> or <paramref name="replacement">replacement</paramref> is null.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"></see> delegate.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="evaluator">A custom method that examines each match and returns either the original matched string or a replacement string.</param>
      <returns>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> or <paramref name="evaluator">evaluator</paramref> is null.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
      <summary>In a specified input string, replaces all strings that match a regular expression pattern with a specified replacement string.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="replacement">The replacement string.</param>
      <returns>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> or <paramref name="replacement">replacement</paramref> is null.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
      <summary>In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"></see> delegate.</summary>
      <param name="input">The string to search for a match.</param>
      <param name="evaluator">A custom method that examines each match and returns either the original matched string or a replacement string.</param>
      <param name="count">The maximum number of times the replacement will occur.</param>
      <returns>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> or <paramref name="evaluator">evaluator</paramref> is null.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
      <summary>Gets a value that indicates whether the regular expression searches from right to left.</summary>
      <returns>true if the regular expression searches from right to left; otherwise, false.</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.roptions">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</summary>
      <param name="input">The string to split.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
      <param name="matchTimeout">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"></see> to indicate that the method should not time out.</param>
      <returns>A string array.</returns>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> or <paramref name="pattern">pattern</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options">options</paramref> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions"></see> values.   -or-  <paramref name="matchTimeout">matchTimeout</paramref> is negative, zero, or greater than approximately 24 days.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Specified options modify the matching operation.</summary>
      <param name="input">The string to split.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
      <returns>An array of strings.</returns>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> or <paramref name="pattern">pattern</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options">options</paramref> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions"></see> values.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
      <summary>Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex"></see> constructor. The search for the regular expression pattern starts at a specified character position in the input string.</summary>
      <param name="input">The string to be split.</param>
      <param name="count">The maximum number of times the split can occur.</param>
      <param name="startat">The character position in the input string where the search will begin.</param>
      <returns>An array of strings.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat">startat</paramref> is less than zero or greater than the length of <paramref name="input">input</paramref>.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
      <summary>Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex"></see> constructor.</summary>
      <param name="input">The string to be split.</param>
      <param name="count">The maximum number of times the split can occur.</param>
      <returns>An array of strings.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> is null.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
      <summary>Splits an input string into an array of substrings at the positions defined by a regular expression pattern specified in the <see cref="T:System.Text.RegularExpressions.Regex"></see> constructor.</summary>
      <param name="input">The string to split.</param>
      <returns>An array of strings.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> is null.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
      <summary>Splits an input string into an array of substrings at the positions defined by a regular expression pattern.</summary>
      <param name="input">The string to split.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <returns>An array of strings.</returns>
      <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="input">input</paramref> or <paramref name="pattern">pattern</paramref> is null.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
      <summary>Returns the regular expression pattern that was passed into the Regex constructor.</summary>
      <returns>The <paramref name="pattern">pattern</paramref> parameter that was passed into the Regex constructor.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
      <summary>Converts any escaped characters in the input string.</summary>
      <param name="str">The input string containing the text to convert.</param>
      <returns>A string of characters with any escaped characters converted to their unescaped form.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="str">str</paramref> includes an unrecognized escape sequence.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="str">str</paramref> is null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionC">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns>true if the <see cref="P:System.Text.RegularExpressions.Regex.Options"></see> property contains the <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled"></see> option; otherwise, false.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionR">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns>true if the <see cref="P:System.Text.RegularExpressions.Regex.Options"></see> property contains the <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft"></see> option; otherwise, false.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)">
      <summary>Checks whether a time-out interval is within an acceptable range.</summary>
      <param name="matchTimeout">The time-out interval to check.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object with the data necessary to deserialize the current <see cref="T:System.Text.RegularExpressions.Regex"></see> object.</summary>
      <param name="si">The object to populate with serialization information.</param>
      <param name="context">The place to store and retrieve serialized data. This parameter is reserved for future use.</param>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
      <summary>The exception that is thrown when the execution time of a regular expression pattern-matching method exceeds its time-out interval.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"></see> class with a system-supplied message.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"></see> class with the specified message string.</summary>
      <param name="message">A string that describes the exception.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"></see> class with serialized data.</summary>
      <param name="info">The object that contains the serialized data.</param>
      <param name="context">The stream that contains the serialized data.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A string that describes the exception.</param>
      <param name="inner">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.String,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"></see> class with information about the regular expression pattern, the input text, and the time-out interval.</summary>
      <param name="regexInput">The input text processed by the regular expression engine when the time-out occurred.</param>
      <param name="regexPattern">The pattern used by the regular expression engine when the time-out occurred.</param>
      <param name="matchTimeout">The time-out interval.</param>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Input">
      <summary>Gets the input text that the regular expression engine was processing when the time-out occurred.</summary>
      <returns>The regular expression input text.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout">
      <summary>Gets the time-out interval for a regular expression match.</summary>
      <returns>The time-out interval.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Pattern">
      <summary>Gets the regular expression pattern that was used in the matching operation when the time-out occurred.</summary>
      <returns>The regular expression pattern.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object with the data needed to serialize a <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"></see> object.</summary>
      <param name="si">The object to populate with data.</param>
      <param name="context">The destination for this serialization.</param>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
      <summary>Provides enumerated values to use to set regular expression options.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Compiled">
      <summary>Specifies that the regular expression is compiled to an assembly. This yields faster execution but increases startup time. This value should not be assigned to the <see cref="P:System.Text.RegularExpressions.RegexCompilationInfo.Options"></see> property when calling the <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)"></see> method. For more information, see the &quot;Compiled Regular Expressions&quot; section in the <see cref="~/docs/standard/base-types/regular-expression-options.md">Regular Expression Options</see> topic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
      <summary>Specifies that cultural differences in language is ignored. For more information, see the &quot;Comparison Using the Invariant Culture&quot; section in the <see cref="~/docs/standard/base-types/regular-expression-options.md">Regular Expression Options</see> topic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
      <summary>Enables ECMAScript-compliant behavior for the expression. This value can be used only in conjunction with the <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase"></see>, <see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline"></see>, and <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled"></see> values. The use of this value with any other values results in an exception.   For more information on the <see cref="F:System.Text.RegularExpressions.RegexOptions.ECMAScript"></see> option, see the &quot;ECMAScript Matching Behavior&quot; section in the <see cref="~/docs/standard/base-types/regular-expression-options.md">Regular Expression Options</see> topic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
      <summary><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="2"><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Specifies that the only valid captures are explicitly named or numbered groups of the form (?<name>…). This allows unnamed parentheses to act as noncapturing groups without the syntactic clumsiness of the expression (?:…). For more information, see the &quot;Explicit Captures Only&quot; section in the <a href="~/docs/standard/base-types/regular-expression-options.md" data-raw-source="[Regular Expression Options](~/docs/standard/base-types/regular-expression-options.md)" sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Regular Expression Options</a> topic.<p>
</name></p>
</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
      <summary>Specifies case-insensitive matching. For more information, see the &quot;Case-Insensitive Matching &quot; section in the <see cref="~/docs/standard/base-types/regular-expression-options.md">Regular Expression Options</see> topic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
      <summary>Eliminates unescaped white space from the pattern and enables comments marked with #. However, this value does not affect or eliminate white space in <see cref="~/docs/standard/base-types/character-classes-in-regular-expressions.md">character classes</see>, numeric <see cref="~/docs/standard/base-types/quantifiers-in-regular-expressions.md">quantifiers</see>, or tokens that mark the beginning of individual <see cref="~/docs/standard/base-types/regular-expression-language-quick-reference.md">regular expression language elements</see>. For more information, see the &quot;Ignore White Space&quot; section of the <see cref="~/docs/standard/base-types/regular-expression-options.md">Regular Expression Options</see> topic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
      <summary>Multiline mode. Changes the meaning of ^ and $ so they match at the beginning and end, respectively, of any line, and not just the beginning and end of the entire string. For more information, see the &quot;Multiline Mode&quot; section in the <see cref="~/docs/standard/base-types/regular-expression-options.md">Regular Expression Options</see> topic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
      <summary>Specifies that no options are set. For more information about the default behavior of the regular expression engine, see the &quot;Default Options&quot; section in the <see cref="~/docs/standard/base-types/regular-expression-options.md">Regular Expression Options</see> topic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
      <summary>Specifies that the search will be from right to left instead of from left to right. For more information, see the &quot;Right-to-Left Mode&quot; section in the <see cref="~/docs/standard/base-types/regular-expression-options.md">Regular Expression Options</see> topic.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
      <summary>Specifies single-line mode. Changes the meaning of the dot (.) so it matches every character (instead of every character except \n). For more information, see the &quot;Single-line Mode&quot; section in the <see cref="~/docs/standard/base-types/regular-expression-options.md">Regular Expression Options</see> topic.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunner">
      <summary>The <see cref="T:System.Text.RegularExpressions.RegexRunner"></see> class is the base class for compiled regular expressions.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.RegexRunner"></see> class.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Capture(System.Int32,System.Int32,System.Int32)">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <param name="capnum">A capture number.</param>
      <param name="start">The starting position of the capture.</param>
      <param name="end">The ending position of the capture.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInClass(System.Char,System.String)">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method. Determines whether a character is in a character class.</summary>
      <param name="ch">A character to test.</param>
      <param name="charClass">The internal name of a character class.</param>
      <returns>true if the <paramref name="ch">ch</paramref> parameter is in the character class specified by the <paramref name="charClass">charClass</paramref> parameter.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInSet(System.Char,System.String,System.String)">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <param name="ch">A character.</param>
      <param name="set">The character set.</param>
      <param name="category">The character category.</param>
      <returns>Returns <see cref="T:System.Boolean"></see>.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CheckTimeout">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawl(System.Int32)">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <param name="i">A number to save.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawlpos">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns>Returns <see cref="T:System.Int32"></see>.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleCrawl">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleStack">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleTrack">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.EnsureStorage">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.FindFirstChar">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns>Returns <see cref="T:System.Boolean"></see>.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Go">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.InitTrackCount">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsBoundary(System.Int32,System.Int32,System.Int32)">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <param name="index">The possible boundary position.</param>
      <param name="startpos">The starting position.</param>
      <param name="endpos">The ending position.</param>
      <returns>Returns <see cref="T:System.Boolean"></see>.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsECMABoundary(System.Int32,System.Int32,System.Int32)">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <param name="index">The possible ECMA boundary position.</param>
      <param name="startpos">The starting position.</param>
      <param name="endpos">The ending position.</param>
      <returns>Returns <see cref="T:System.Boolean"></see>.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsMatched(System.Int32)">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <param name="cap">The capture number.</param>
      <returns>Returns <see cref="T:System.Boolean"></see>.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchIndex(System.Int32)">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <param name="cap">The capture number.</param>
      <returns>Returns <see cref="T:System.Int32"></see>.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchLength(System.Int32)">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <param name="cap">The capture number.</param>
      <returns>Returns <see cref="T:System.Int32"></see>.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Popcrawl">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns>Returns <see cref="T:System.Int32"></see>.</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawl">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawlpos">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runmatch">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runregex">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstack">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstackpos">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtext">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextbeg">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextend">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextpos">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextstart">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrack">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackcount">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackpos">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <param name="regex">An instance of the regular expression engine.</param>
      <param name="text">The text to scan for a pattern match.</param>
      <param name="textbeg">The zero-based starting position in text at which the regular expression engine scans for a match.</param>
      <param name="textend">The zero-based ending position in text at which the regular expression engine scans for a match.</param>
      <param name="textstart">The zero-based starting position to scan for this match.</param>
      <param name="prevlen">The number of characters in the previous match.</param>
      <param name="quick">true to search for a match in quick mode; otherwise, false.</param>
      <returns>A match.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.TimeSpan)">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <param name="regex">An instance of the regular expression engine.</param>
      <param name="text">The text to scan for a pattern match.</param>
      <param name="textbeg">The zero-based starting position in text at which the regular expression engine scans for a match.</param>
      <param name="textend">The zero-based ending position in text at which the regular expression engine scans for a match.</param>
      <param name="textstart">The zero-based starting position to scan for this match.</param>
      <param name="prevlen">The number of characters in the previous match.</param>
      <param name="quick">true to search for a match in quick mode; otherwise, false.</param>
      <param name="timeout">The timeout interval.</param>
      <returns>A match.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.TransferCapture(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
      <param name="capnum">A capture number.</param>
      <param name="uncapnum">A saved capture number.</param>
      <param name="start">The starting position.</param>
      <param name="end">The ending position.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Uncapture">
      <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex"></see> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly"></see> method.</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunnerFactory">
      <summary>Creates a <see cref="T:System.Text.RegularExpressions.RegexRunner"></see> class for a compiled regular expression.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.RegexRunnerFactory"></see> class.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.CreateInstance">
      <summary>When overridden in a derived class, creates a <see cref="T:System.Text.RegularExpressions.RegexRunner"></see> object for a specific compiled regular expression.</summary>
      <returns>A <see cref="T:System.Text.RegularExpressions.RegexRunner"></see> object designed to execute a specific compiled regular expression.</returns>
    </member>
    <member name="T:System.Threading.Barrier">
      <summary>Enables multiple tasks to cooperatively work on an algorithm in parallel through multiple phases.</summary>
    </member>
    <member name="M:System.Threading.Barrier.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Barrier"></see> class.</summary>
      <param name="participantCount">The number of participating threads.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="participantCount">participantCount</paramref> is less than 0 or greater than 32,767.</exception>
    </member>
    <member name="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Barrier"></see> class.</summary>
      <param name="participantCount">The number of participating threads.</param>
      <param name="postPhaseAction">The <see cref="T:System.Action`1"></see> to be executed after each phase. null (Nothing in Visual Basic) may be passed to indicate no action is taken.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="participantCount">participantCount</paramref> is less than 0 or greater than 32,767.</exception>
    </member>
    <member name="M:System.Threading.Barrier.AddParticipant">
      <summary>Notifies the <see cref="T:System.Threading.Barrier"></see> that there will be an additional participant.</summary>
      <returns>The phase number of the barrier in which the new participants will first participate.</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">Adding a participant would cause the barrier's participant count to exceed 32,767.   -or-   The method was invoked from within a post-phase action.</exception>
    </member>
    <member name="M:System.Threading.Barrier.AddParticipants(System.Int32)">
      <summary>Notifies the <see cref="T:System.Threading.Barrier"></see> that there will be additional participants.</summary>
      <param name="participantCount">The number of additional participants to add to the barrier.</param>
      <returns>The phase number of the barrier in which the new participants will first participate.</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="participantCount">participantCount</paramref> is less than 0.   -or-   Adding <paramref name="participantCount">participantCount</paramref> participants would cause the barrier's participant count to exceed 32,767.</exception>
      <exception cref="T:System.InvalidOperationException">The method was invoked from within a post-phase action.</exception>
    </member>
    <member name="P:System.Threading.Barrier.CurrentPhaseNumber">
      <summary>Gets the number of the barrier's current phase.</summary>
      <returns>Returns the number of the barrier's current phase.</returns>
    </member>
    <member name="M:System.Threading.Barrier.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.Barrier"></see> class.</summary>
      <exception cref="T:System.InvalidOperationException">The method was invoked from within a post-phase action.</exception>
    </member>
    <member name="M:System.Threading.Barrier.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Threading.Barrier"></see>, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Threading.Barrier.ParticipantCount">
      <summary>Gets the total number of participants in the barrier.</summary>
      <returns>Returns the total number of participants in the barrier.</returns>
    </member>
    <member name="P:System.Threading.Barrier.ParticipantsRemaining">
      <summary>Gets the number of participants in the barrier that haven’t yet signaled in the current phase.</summary>
      <returns>Returns the number of participants in the barrier that haven’t yet signaled in the current phase.</returns>
    </member>
    <member name="M:System.Threading.Barrier.RemoveParticipant">
      <summary>Notifies the <see cref="T:System.Threading.Barrier"></see> that there will be one less participant.</summary>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The barrier already has 0 participants.   -or-   The method was invoked from within a post-phase action.</exception>
    </member>
    <member name="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
      <summary>Notifies the <see cref="T:System.Threading.Barrier"></see> that there will be fewer participants.</summary>
      <param name="participantCount">The number of additional participants to remove from the barrier.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The total participant count is less than the specified <paramref name="participantCount">participantCount</paramref></exception>
      <exception cref="T:System.InvalidOperationException">The barrier already has 0 participants.   -or-   The method was invoked from within a post-phase action.   -or-   current participant count is less than the specified participantCount</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait">
      <summary>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well.</summary>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</exception>
      <exception cref="T:System.Threading.BarrierPostPhaseException">If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
      <summary>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a 32-bit signed integer to measure the timeout.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"></see>(-1) to wait indefinitely.</param>
      <returns>if all participants reached the barrier within the specified time; otherwise false.</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout">millisecondsTimeout</paramref> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.InvalidOperationException">The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</exception>
      <exception cref="T:System.Threading.BarrierPostPhaseException">If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
      <summary>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier, while observing a cancellation token.</summary>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> to observe.</param>
      <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken">cancellationToken</paramref> has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
      <summary>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a <see cref="T:System.TimeSpan"></see> object to measure the time interval.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan"></see> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"></see> that represents -1 milliseconds to wait indefinitely.</param>
      <returns>true if all other participants reached the barrier; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is a negative number other than -1 milliseconds, which represents an infinite time-out, or it is greater than 32,767.</exception>
      <exception cref="T:System.InvalidOperationException">The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
      <summary>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a 32-bit signed integer to measure the timeout, while observing a cancellation token.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"></see>(-1) to wait indefinitely.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> to observe.</param>
      <returns>if all participants reached the barrier within the specified time; otherwise false</returns>
      <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken">cancellationToken</paramref> has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout">millisecondsTimeout</paramref> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.InvalidOperationException">The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a <see cref="T:System.TimeSpan"></see> object to measure the time interval, while observing a cancellation token.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan"></see> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"></see> that represents -1 milliseconds to wait indefinitely.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"></see> to observe.</param>
      <returns>true if all other participants reached the barrier; otherwise, false.</returns>
      <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken">cancellationToken</paramref> has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is a negative number other than -1 milliseconds, which represents an infinite time-out.</exception>
      <exception cref="T:System.InvalidOperationException">The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</exception>
    </member>
    <member name="T:System.Threading.BarrierPostPhaseException">
      <summary>The exception that is thrown when the post-phase action of a <see cref="T:System.Threading.Barrier"></see> fails</summary>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.BarrierPostPhaseException"></see> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.BarrierPostPhaseException"></see> class with the specified inner exception.</summary>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.BarrierPostPhaseException"></see> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.BarrierPostPhaseException"></see> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.BarrierPostPhaseException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Threading.Semaphore">
      <summary>Limits the number of threads that can access a resource or pool of resources concurrently.</summary>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Semaphore"></see> class, specifying the initial number of entries and the maximum number of concurrent entries.</summary>
      <param name="initialCount">The initial number of requests for the semaphore that can be granted concurrently.</param>
      <param name="maximumCount">The maximum number of requests for the semaphore that can be granted concurrently.</param>
      <exception cref="T:System.ArgumentException"><paramref name="initialCount">initialCount</paramref> is greater than <paramref name="maximumCount">maximumCount</paramref>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumCount">maximumCount</paramref> is less than 1.   -or-  <paramref name="initialCount">initialCount</paramref> is less than 0.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Semaphore"></see> class, specifying the initial number of entries and the maximum number of concurrent entries, and optionally specifying the name of a system semaphore object.</summary>
      <param name="initialCount">The initial number of requests for the semaphore that can be granted concurrently.</param>
      <param name="maximumCount">The maximum number of requests for the semaphore that can be granted concurrently.</param>
      <param name="name">The name of a named system semaphore object.</param>
      <exception cref="T:System.ArgumentException"><paramref name="initialCount">initialCount</paramref> is greater than <paramref name="maximumCount">maximumCount</paramref>.   -or-  <paramref name="name">name</paramref> is longer than 260 characters.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumCount">maximumCount</paramref> is less than 1.   -or-  <paramref name="initialCount">initialCount</paramref> is less than 0.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl"></see>.</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Semaphore"></see> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, and specifying a variable that receives a value indicating whether a new system semaphore was created.</summary>
      <param name="initialCount">The initial number of requests for the semaphore that can be satisfied concurrently.</param>
      <param name="maximumCount">The maximum number of requests for the semaphore that can be satisfied concurrently.</param>
      <param name="name">The name of a named system semaphore object.</param>
      <param name="createdNew">When this method returns, contains true if a local semaphore was created (that is, if name is null or an empty string) or if the specified named system semaphore was created; false if the specified named system semaphore already existed. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentException"><paramref name="initialCount">initialCount</paramref> is greater than <paramref name="maximumCount">maximumCount</paramref>.   -or-  <paramref name="name">name</paramref> is longer than 260 characters.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumCount">maximumCount</paramref> is less than 1.   -or-  <paramref name="initialCount">initialCount</paramref> is less than 0.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl"></see>.</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@,System.Security.AccessControl.SemaphoreSecurity)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Semaphore"></see> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, specifying a variable that receives a value indicating whether a new system semaphore was created, and specifying security access control for the system semaphore.</summary>
      <param name="initialCount">The initial number of requests for the semaphore that can be satisfied concurrently.</param>
      <param name="maximumCount">The maximum number of requests for the semaphore that can be satisfied concurrently.</param>
      <param name="name">The name of a named system semaphore object.</param>
      <param name="createdNew">When this method returns, contains true if a local semaphore was created (that is, if name is null or an empty string) or if the specified named system semaphore was created; false if the specified named system semaphore already existed. This parameter is passed uninitialized.</param>
      <param name="semaphoreSecurity">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity"></see> object that represents the access control security to be applied to the named system semaphore.</param>
      <exception cref="T:System.ArgumentException"><paramref name="initialCount">initialCount</paramref> is greater than <paramref name="maximumCount">maximumCount</paramref>.   -or-  <paramref name="name">name</paramref> is longer than 260 characters.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumCount">maximumCount</paramref> is less than 1.   -or-  <paramref name="initialCount">initialCount</paramref> is less than 0.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl"></see>.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.GetAccessControl">
      <summary>Gets the access control security for a named system semaphore.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.SemaphoreSecurity"></see> object that represents the access control security for the named system semaphore.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The current <see cref="T:System.Threading.Semaphore"></see> object represents a named system semaphore, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions"></see> rights.   -or-   The current <see cref="T:System.Threading.Semaphore"></see> object represents a named system semaphore and was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions"></see> rights.</exception>
      <exception cref="T:System.NotSupportedException">Not supported for Windows 98 or Windows Millennium Edition.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.OpenExisting(System.String)">
      <summary>Opens the specified named semaphore, if it already exists.</summary>
      <param name="name">The name of the system semaphore to open.</param>
      <returns>An object that represents the named system semaphore.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="name">name</paramref> is an empty string.   -or-  <paramref name="name">name</paramref> is longer than 260 characters.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">The named semaphore does not exist.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named semaphore exists, but the user does not have the security access required to use it.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.OpenExisting(System.String,System.Security.AccessControl.SemaphoreRights)">
      <summary>Opens the specified named semaphore, if it already exists, with the desired security access.</summary>
      <param name="name">The name of the system semaphore to open.</param>
      <param name="rights">A bitwise combination of the enumeration values that represent the desired security access.</param>
      <returns>An object that represents the named system semaphore.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="name">name</paramref> is an empty string.   -or-  <paramref name="name">name</paramref> is longer than 260 characters.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">The named semaphore does not exist.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named semaphore exists, but the user does not have the desired security access rights.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.Release">
      <summary>Exits the semaphore and returns the previous count.</summary>
      <returns>The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release"></see> method was called.</returns>
      <exception cref="T:System.Threading.SemaphoreFullException">The semaphore count is already at the maximum value.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred with a named semaphore.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify"></see>.   -or-   The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify"></see>.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.Release(System.Int32)">
      <summary>Exits the semaphore a specified number of times and returns the previous count.</summary>
      <param name="releaseCount">The number of times to exit the semaphore.</param>
      <returns>The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release"></see> method was called.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="releaseCount">releaseCount</paramref> is less than 1.</exception>
      <exception cref="T:System.Threading.SemaphoreFullException">The semaphore count is already at the maximum value.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred with a named semaphore.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify"></see> rights.   -or-   The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify"></see> rights.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)">
      <summary>Sets the access control security for a named system semaphore.</summary>
      <param name="semaphoreSecurity">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity"></see> object that represents the access control security to be applied to the named system semaphore.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="semaphoreSecurity">semaphoreSecurity</paramref> is null.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions"></see> rights.   -or-   The semaphore was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions"></see> rights.</exception>
      <exception cref="T:System.NotSupportedException">The current <see cref="T:System.Threading.Semaphore"></see> object does not represent a named system semaphore.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)">
      <summary>Opens the specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</summary>
      <param name="name">The name of the system semaphore to open.</param>
      <param name="result">When this method returns, contains a <see cref="T:System.Threading.Semaphore"></see> object that represents the named semaphore if the call succeeded, or null if the call failed. This parameter is treated as uninitialized.</param>
      <returns>true if the named semaphore was opened successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="name">name</paramref> is an empty string.   -or-  <paramref name="name">name</paramref> is longer than 260 characters.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named semaphore exists, but the user does not have the security access required to use it.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Security.AccessControl.SemaphoreRights,System.Threading.Semaphore@)">
      <summary>Opens the specified named semaphore, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</summary>
      <param name="name">The name of the system semaphore to open.</param>
      <param name="rights">A bitwise combination of the enumeration values that represent the desired security access.</param>
      <param name="result">When this method returns, contains a <see cref="T:System.Threading.Semaphore"></see> object that represents the named semaphore if the call succeeded, or null if the call failed. This parameter is treated as uninitialized.</param>
      <returns>true if the named semaphore was opened successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="name">name</paramref> is an empty string.   -or-  <paramref name="name">name</paramref> is longer than 260 characters.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named semaphore exists, but the user does not have the security access required to use it.</exception>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary>Represents a reference to the value of an argument passed to a method.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArgumentReferenceExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArgumentReferenceExpression"></see> class using the specified parameter name.</summary>
      <param name="parameterName">The name of the parameter to reference.</param>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary>Gets or sets the name of the parameter this expression references.</summary>
      <returns>The name of the parameter to reference.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary>Represents an expression that creates an array.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression"></see> class using the specified array data type and code expression indicating the number of indexes for the array.</summary>
      <param name="createType">A <see cref="T:System.CodeDom.CodeTypeReference"></see> indicating the data type of the array to create.</param>
      <param name="size">An expression that indicates the number of indexes of the array to create.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression"></see> class using the specified array data type and initialization expressions.</summary>
      <param name="createType">A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the data type of the array to create.</param>
      <param name="initializers">An array of expressions to use to initialize the array.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression"></see> class using the specified array data type and number of indexes for the array.</summary>
      <param name="createType">A <see cref="T:System.CodeDom.CodeTypeReference"></see> indicating the data type of the array to create.</param>
      <param name="size">The number of indexes of the array to create.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression"></see> class using the specified array data type name and code expression indicating the number of indexes for the array.</summary>
      <param name="createType">The name of the data type of the array to create.</param>
      <param name="size">An expression that indicates the number of indexes of the array to create.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression"></see> class using the specified array data type name and initializers.</summary>
      <param name="createType">The name of the data type of the array to create.</param>
      <param name="initializers">An array of expressions to use to initialize the array.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression"></see> class using the specified array data type name and number of indexes for the array.</summary>
      <param name="createType">The name of the data type of the array to create.</param>
      <param name="size">The number of indexes of the array to create.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression"></see> class using the specified array data type and code expression indicating the number of indexes for the array.</summary>
      <param name="createType">The data type of the array to create.</param>
      <param name="size">An expression that indicates the number of indexes of the array to create.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression"></see> class using the specified array data type and initializers.</summary>
      <param name="createType">The data type of the array to create.</param>
      <param name="initializers">An array of expressions to use to initialize the array.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression"></see> class using the specified array data type and number of indexes for the array.</summary>
      <param name="createType">The data type of the array to create.</param>
      <param name="size">The number of indexes of the array to create.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary>Gets or sets the type of array to create.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the type of the array.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary>Gets the initializers with which to initialize the array.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpressionCollection"></see> that indicates the initialization values.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary>Gets or sets the number of indexes in the array.</summary>
      <returns>The number of indexes in the array.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary>Gets or sets the expression that indicates the size of the array.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the size of the array.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary>Represents a reference to an index of an array.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayIndexerExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayIndexerExpression"></see> class using the specified target object and indexes.</summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the array the indexer targets.</param>
      <param name="indices">The index or indexes to reference.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary>Gets or sets the index or indexes of the indexer expression.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpressionCollection"></see> that indicates the index or indexes of the indexer expression.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary>Gets or sets the target object of the array indexer.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that represents the array being indexed.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary>Represents a simple assignment statement.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAssignStatement"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAssignStatement"></see> class using the specified expressions.</summary>
      <param name="left">The variable to assign to.</param>
      <param name="right">The value to assign.</param>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary>Gets or sets the expression representing the object or reference to assign to.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the object or reference to assign to.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary>Gets or sets the expression representing the object or reference to assign.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the object or reference to assign.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary>Represents a statement that attaches an event-handler delegate to an event.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttachEventStatement"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttachEventStatement"></see> class using the specified event and delegate.</summary>
      <param name="eventRef">A <see cref="T:System.CodeDom.CodeEventReferenceExpression"></see> that indicates the event to attach an event handler to.</param>
      <param name="listener">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the new event handler.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttachEventStatement"></see> class using the specified object containing the event, event name, and event-handler delegate.</summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the object that contains the event.</param>
      <param name="eventName">The name of the event to attach an event handler to.</param>
      <param name="listener">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the new event handler.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary>Gets or sets the event to attach an event-handler delegate to.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeEventReferenceExpression"></see> that indicates the event to attach an event handler to.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary>Gets or sets the new event-handler delegate to attach to the event.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the new event handler to attach.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary>Represents an argument used in a metadata attribute declaration.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeArgument"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeArgument"></see> class using the specified value.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeExpression"></see> that represents the value of the argument.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeArgument"></see> class using the specified name and value.</summary>
      <param name="name">The name of the attribute property the argument applies to.</param>
      <param name="value">A <see cref="T:System.CodeDom.CodeExpression"></see> that represents the value of the argument.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary>Gets or sets the name of the attribute.</summary>
      <returns>The name of the attribute property the argument is for.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary>Gets or sets the value for the attribute argument.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the value for the attribute argument.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary>Represents a collection of <see cref="T:System.CodeDom.CodeAttributeArgument"></see> objects.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeArgumentCollection"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeArgumentCollection"></see> class containing the specified array of <see cref="T:System.CodeDom.CodeAttributeArgument"></see> objects.</summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeAttributeArgument"></see> objects with which to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException">One or more objects in the array are null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeArgumentCollection"></see> class containing the elements of the specified source collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeAttributeArgumentCollection"></see> with which to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary>Adds the specified <see cref="T:System.CodeDom.CodeAttributeArgument"></see> object to the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeAttributeArgument"></see> object to add.</param>
      <returns>The index at which the new element was inserted.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary>Copies the elements of the specified <see cref="T:System.CodeDom.CodeAttributeArgument"></see> array to the end of the collection.</summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeAttributeArgument"></see> that contains the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>Copies the contents of another <see cref="T:System.CodeDom.CodeAttributeArgumentCollection"></see> object to the end of the collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeAttributeArgumentCollection"></see> that contains the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary>Gets a value that indicates whether the collection contains the specified <see cref="T:System.CodeDom.CodeAttributeArgument"></see> object.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeAttributeArgument"></see> object to locate in the collection.</param>
      <returns>true if the collection contains the specified object; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary>Copies the collection objects to a one-dimensional <see cref="T:System.Array"></see> instance beginning at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the values copied from the collection.</param>
      <param name="index">The index of the array at which to begin inserting.</param>
      <exception cref="T:System.ArgumentException">The destination array is multidimensional.   -or-   The number of elements in the <see cref="T:System.CodeDom.CodeAttributeArgumentCollection"></see> is greater than the available space between the index of the target array specified by the <paramref name="index">index</paramref> parameter and the end of the target array.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array">array</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is less than the target array's minimum index.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary>Gets the index of the specified <see cref="T:System.CodeDom.CodeAttributeArgument"></see> object in the collection, if it exists in the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeAttributeArgument"></see> object to locate in the collection.</param>
      <returns>The index of the specified object, if found, in the collection; otherwise, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary>Inserts the specified <see cref="T:System.CodeDom.CodeAttributeArgument"></see> object into the collection at the specified index.</summary>
      <param name="index">The zero-based index where the specified object should be inserted.</param>
      <param name="value">The <see cref="T:System.CodeDom.CodeAttributeArgument"></see> object to insert.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.CodeDom.CodeAttributeArgument"></see> object at the specified index in the collection.</summary>
      <param name="index">The index of the collection to access.</param>
      <returns>A <see cref="T:System.CodeDom.CodeAttributeArgument"></see> at each valid index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary>Removes the specified <see cref="T:System.CodeDom.CodeAttributeArgument"></see> object from the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeAttributeArgument"></see> object to remove from the collection.</param>
      <exception cref="T:System.ArgumentException">The specified object is not found in the collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary>Represents an attribute declaration.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> class using the specified code type reference.</summary>
      <param name="attributeType">The <see cref="T:System.CodeDom.CodeTypeReference"></see> that identifies the attribute.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> class using the specified name.</summary>
      <param name="name">The name of the attribute.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeAttributeArgument[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> class using the specified code type reference and arguments.</summary>
      <param name="attributeType">The <see cref="T:System.CodeDom.CodeTypeReference"></see> that identifies the attribute.</param>
      <param name="arguments">An array of type <see cref="T:System.CodeDom.CodeAttributeArgument"></see> that contains the arguments for the attribute.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> class using the specified name and arguments.</summary>
      <param name="name">The name of the attribute.</param>
      <param name="arguments">An array of type <see cref="T:System.CodeDom.CodeAttributeArgument"></see> that contains the arguments for the attribute.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary>Gets the arguments for the attribute.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeAttributeArgumentCollection"></see> that contains the arguments for the attribute.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.AttributeType">
      <summary>Gets the code type reference for the code attribute declaration.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> that identifies the <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see>.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary>Gets or sets the name of the attribute being declared.</summary>
      <returns>The name of the attribute.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary>Represents a collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> objects.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"></see> class containing the specified array of <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> objects.</summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> objects with which to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException">One or more objects in the array are null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"></see> class containing the elements of the specified source collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"></see> with which to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Adds a <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> object with the specified value to the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> object to add.</param>
      <returns>The index at which the new element was inserted.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>Copies the elements of the specified <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> array to the end of the collection.</summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> that contains the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Copies the contents of another <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"></see> object to the end of the collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"></see> that contains the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Gets or sets a value that indicates whether the collection contains the specified <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> object.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> object to locate.</param>
      <returns>true if the collection contains the specified object; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary>Copies the collection objects to a one-dimensional <see cref="T:System.Array"></see> instance beginning at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the values copied from the collection.</param>
      <param name="index">The index of the array at which to begin inserting.</param>
      <exception cref="T:System.ArgumentException">The destination array is multidimensional.   -or-   The number of elements in the <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"></see> is greater than the available space between the index of the target array specified by the <paramref name="index">index</paramref> parameter and the end of the target array.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array">array</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is less than the target array's minimum index.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Gets the index of the specified <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> object in the collection, if it exists in the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> object to locate in the collection.</param>
      <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary>Inserts the specified <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> object into the collection at the specified index.</summary>
      <param name="index">The zero-based index where the specified object should be inserted.</param>
      <param name="value">The <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> object to insert.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> object at the specified index.</summary>
      <param name="index">The index of the collection to access.</param>
      <returns>A <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> at each valid index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Removes the specified <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> object from the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> object to remove from the collection.</param>
      <exception cref="T:System.ArgumentException">The specified object is not found in the collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary>Represents a reference to the base class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBaseReferenceExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeBaseReferenceExpression"></see> class.</summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary>Represents an expression that consists of a binary operation between two expressions.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeBinaryOperatorExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeBinaryOperatorExpression"></see> class using the specified parameters.</summary>
      <param name="left">The <see cref="T:System.CodeDom.CodeExpression"></see> on the left of the operator.</param>
      <param name="op">A <see cref="T:System.CodeDom.CodeBinaryOperatorType"></see> indicating the type of operator.</param>
      <param name="right">The <see cref="T:System.CodeDom.CodeExpression"></see> on the right of the operator.</param>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary>Gets or sets the code expression on the left of the operator.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the left operand.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary>Gets or sets the operator in the binary operator expression.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeBinaryOperatorType"></see> that indicates the type of operator in the expression.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary>Gets or sets the code expression on the right of the operator.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the right operand.</returns>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary>Defines identifiers for supported binary operators.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary>Addition operator.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary>Assignment operator.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary>Bitwise and operator.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary>Bitwise or operator.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary>Boolean and operator. This represents a short circuiting operator. A short circuiting operator will evaluate only as many expressions as necessary before returning a correct value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary>Boolean or operator. This represents a short circuiting operator. A short circuiting operator will evaluate only as many expressions as necessary before returning a correct value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary>Division operator.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary>Greater than operator.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary>Greater than or equal operator.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary>Identity equal operator.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary>Identity not equal operator.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary>Less than operator.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary>Less than or equal operator.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary>Modulus operator.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary>Multiplication operator.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary>Subtraction operator.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary>Value equal operator.</summary>
      <returns></returns>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary>Represents an expression cast to a data type or interface.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCastExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCastExpression"></see> class using the specified destination type and expression.</summary>
      <param name="targetType">A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the destination type of the cast.</param>
      <param name="expression">The <see cref="T:System.CodeDom.CodeExpression"></see> to cast.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCastExpression"></see> class using the specified destination type and expression.</summary>
      <param name="targetType">The name of the destination type of the cast.</param>
      <param name="expression">The <see cref="T:System.CodeDom.CodeExpression"></see> to cast.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCastExpression"></see> class using the specified destination type and expression.</summary>
      <param name="targetType">The destination data type of the cast.</param>
      <param name="expression">The <see cref="T:System.CodeDom.CodeExpression"></see> to cast.</param>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary>Gets or sets the expression to cast.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the code to cast.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary>Gets or sets the destination type of the cast.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the destination type to cast to.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary>Represents a catch exception block of a try/catch statement.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCatchClause"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCatchClause"></see> class using the specified local variable name for the exception.</summary>
      <param name="localName">The name of the local variable declared in the catch clause for the exception. This is optional.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCatchClause"></see> class using the specified local variable name for the exception and exception type.</summary>
      <param name="localName">The name of the local variable declared in the catch clause for the exception. This is optional.</param>
      <param name="catchExceptionType">A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the type of exception to catch.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCatchClause"></see> class using the specified local variable name for the exception, exception type and statement collection.</summary>
      <param name="localName">The name of the local variable declared in the catch clause for the exception. This is optional.</param>
      <param name="catchExceptionType">A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the type of exception to catch.</param>
      <param name="statements">An array of <see cref="T:System.CodeDom.CodeStatement"></see> objects that represent the contents of the catch block.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary>Gets or sets the type of the exception to handle with the catch block.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the type of the exception to handle.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary>Gets or sets the variable name of the exception that the catch clause handles.</summary>
      <returns>The name for the exception variable that the catch clause handles.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary>Gets the statements within the catch block.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeStatementCollection"></see> containing the statements within the catch block.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary>Represents a collection of <see cref="T:System.CodeDom.CodeCatchClause"></see> objects.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCatchClauseCollection"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCatchClauseCollection"></see> class containing the specified array of <see cref="T:System.CodeDom.CodeCatchClause"></see> objects.</summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeCatchClause"></see> objects with which to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException">One or more objects in the array are null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCatchClauseCollection"></see> class containing the elements of the specified source collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeCatchClauseCollection"></see> with which to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary>Adds the specified <see cref="T:System.CodeDom.CodeCatchClause"></see> object to the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeCatchClause"></see> object to add.</param>
      <returns>The index at which the new element was inserted.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary>Copies the elements of the specified <see cref="T:System.CodeDom.CodeCatchClause"></see> array to the end of the collection.</summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeCatchClause"></see> that contains the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary>Copies the contents of another <see cref="T:System.CodeDom.CodeCatchClauseCollection"></see> object to the end of the collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeCatchClauseCollection"></see> that contains the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary>Gets a value that indicates whether the collection contains the specified <see cref="T:System.CodeDom.CodeCatchClause"></see> object.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeCatchClause"></see> object to locate in the collection.</param>
      <returns>true if the collection contains the specified object; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary>Copies the collection objects to a one-dimensional <see cref="T:System.Array"></see> instance beginning at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the values copied from the collection.</param>
      <param name="index">The index of the array at which to begin inserting.</param>
      <exception cref="T:System.ArgumentException">The destination array is multidimensional.   -or-   The number of elements in the <see cref="T:System.CodeDom.CodeCatchClauseCollection"></see> is greater than the available space between the index of the target array specified by the <paramref name="index">index</paramref> parameter and the end of the target array.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array">array</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is less than the target array's minimum index.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary>Gets the index of the specified <see cref="T:System.CodeDom.CodeCatchClause"></see> object in the collection, if it exists in the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeCatchClause"></see> object to locate in the collection.</param>
      <returns>The index of the specified object, if found, in the collection; otherwise, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary>Inserts the specified <see cref="T:System.CodeDom.CodeCatchClause"></see> object into the collection at the specified index.</summary>
      <param name="index">The zero-based index where the specified object should be inserted.</param>
      <param name="value">The <see cref="T:System.CodeDom.CodeCatchClause"></see> object to insert.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.CodeDom.CodeCatchClause"></see> object at the specified index in the collection.</summary>
      <param name="index">The index of the collection to access.</param>
      <returns>A <see cref="T:System.CodeDom.CodeCatchClause"></see> object at each valid index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary>Removes the specified <see cref="T:System.CodeDom.CodeCatchClause"></see> object from the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeCatchClause"></see> object to remove from the collection.</param>
      <exception cref="T:System.ArgumentException">The specified object is not found in the collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeChecksumPragma">
      <summary>Represents a code checksum pragma code entity.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeChecksumPragma"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeChecksumPragma"></see> class using a file name, a GUID representing the checksum algorithm, and a byte stream representing the checksum data.</summary>
      <param name="fileName">The path to the checksum file.</param>
      <param name="checksumAlgorithmId">A <see cref="T:System.Guid"></see> that identifies the checksum algorithm to use.</param>
      <param name="checksumData">A byte array that contains the checksum data.</param>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
      <summary>Gets or sets a GUID that identifies the checksum algorithm to use.</summary>
      <returns>A <see cref="T:System.Guid"></see> that identifies the checksum algorithm to use.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumData">
      <summary>Gets or sets the value of the data for the checksum calculation.</summary>
      <returns>A byte array that contains the data for the checksum calculation.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.FileName">
      <summary>Gets or sets the path to the checksum file.</summary>
      <returns>The path to the checksum file.</returns>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary>Represents a comment.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeComment"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeComment"></see> class with the specified text as contents.</summary>
      <param name="text">The contents of the comment.</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeComment"></see> class using the specified text and documentation comment flag.</summary>
      <param name="text">The contents of the comment.</param>
      <param name="docComment">true if the comment is a documentation comment; otherwise, false.</param>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary>Gets or sets a value that indicates whether the comment is a documentation comment.</summary>
      <returns>true if the comment is a documentation comment; otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary>Gets or sets the text of the comment.</summary>
      <returns>A string containing the comment text.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary>Represents a statement consisting of a single comment.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCommentStatement"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCommentStatement"></see> class using the specified comment.</summary>
      <param name="comment">A <see cref="T:System.CodeDom.CodeComment"></see> that indicates the comment.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCommentStatement"></see> class using the specified text as contents.</summary>
      <param name="text">The contents of the comment.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCommentStatement"></see> class using the specified text and documentation comment flag.</summary>
      <param name="text">The contents of the comment.</param>
      <param name="docComment">true if the comment is a documentation comment; otherwise, false.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary>Gets or sets the contents of the comment.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeComment"></see> that indicates the comment.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary>Represents a collection of <see cref="T:System.CodeDom.CodeCommentStatement"></see> objects.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCommentStatementCollection"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCommentStatementCollection"></see> class containing the specified array of <see cref="T:System.CodeDom.CodeCommentStatement"></see> objects.</summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeCommentStatement"></see> objects with which to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException">One or more objects in the array are null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCommentStatementCollection"></see> class containing the elements of the specified source collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeCommentStatementCollection"></see> with which to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary>Adds the specified <see cref="T:System.CodeDom.CodeCommentStatement"></see> object to the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeCommentStatement"></see> object to add.</param>
      <returns>The index at which the new element was inserted.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary>Copies the elements of the specified <see cref="T:System.CodeDom.CodeCommentStatement"></see> array to the end of the collection.</summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeCommentStatement"></see> that contains the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary>Copies the contents of another <see cref="T:System.CodeDom.CodeCommentStatementCollection"></see> object to the end of the collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeCommentStatementCollection"></see> that contains the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary>Gets a value that indicates whether the collection contains the specified <see cref="T:System.CodeDom.CodeCommentStatement"></see> object.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeCommentStatement"></see> to search for in the collection.</param>
      <returns>true if the collection contains the specified object; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary>Copies the collection objects to the specified one-dimensional <see cref="T:System.Array"></see> beginning at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the values copied from the collection.</param>
      <param name="index">The index of the array at which to begin inserting.</param>
      <exception cref="T:System.ArgumentException">The destination array is multidimensional.   -or-   The number of elements in the <see cref="T:System.CodeDom.CodeCommentStatementCollection"></see> is greater than the available space between the index of the target array specified by the <paramref name="index">index</paramref> parameter and the end of the target array.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array">array</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is less than the target array's minimum index.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary>Gets the index of the specified <see cref="T:System.CodeDom.CodeCommentStatement"></see> object in the collection, if it exists in the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeCommentStatement"></see> object to locate.</param>
      <returns>The index of the specified object, if found, in the collection; otherwise, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary>Inserts a <see cref="T:System.CodeDom.CodeCommentStatement"></see> object into the collection at the specified index.</summary>
      <param name="index">The zero-based index where the item should be inserted.</param>
      <param name="value">The <see cref="T:System.CodeDom.CodeCommentStatement"></see> object to insert.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.CodeDom.CodeCommentStatement"></see> object at the specified index in the collection.</summary>
      <param name="index">The index of the collection to access.</param>
      <returns>A <see cref="T:System.CodeDom.CodeCommentStatement"></see> object at each valid index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary>Removes the specified <see cref="T:System.CodeDom.CodeCommentStatement"></see> object from the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeCommentStatement"></see> object to remove from the collection.</param>
      <exception cref="T:System.ArgumentException">The specified object is not found in the collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary>Provides a container for a CodeDOM program graph.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCompileUnit"></see> class.</summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary>Gets a collection of custom attributes for the generated assembly.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"></see> that indicates the custom attributes for the generated assembly.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.EndDirectives">
      <summary>Gets a <see cref="T:System.CodeDom.CodeDirectiveCollection"></see> object containing end directives.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeDirectiveCollection"></see> object containing end directives.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary>Gets the collection of namespaces.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeNamespaceCollection"></see> that indicates the namespaces that the compile unit uses.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary>Gets the referenced assemblies.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.StringCollection"></see> that contains the file names of the referenced assemblies.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.StartDirectives">
      <summary>Gets a <see cref="T:System.CodeDom.CodeDirectiveCollection"></see> object containing start directives.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeDirectiveCollection"></see> object containing start directives.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary>Represents a conditional branch statement, typically represented as an if statement.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeConditionStatement"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeConditionStatement"></see> class using the specified condition and statements.</summary>
      <param name="condition">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the expression to evaluate.</param>
      <param name="trueStatements">An array of type <see cref="T:System.CodeDom.CodeStatement"></see> containing the statements to execute if the condition is true.</param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeConditionStatement"></see> class using the specified condition and statements.</summary>
      <param name="condition">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the condition to evaluate.</param>
      <param name="trueStatements">An array of type <see cref="T:System.CodeDom.CodeStatement"></see> containing the statements to execute if the condition is true.</param>
      <param name="falseStatements">An array of type <see cref="T:System.CodeDom.CodeStatement"></see> containing the statements to execute if the condition is false.</param>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary>Gets or sets the expression to evaluate true or false.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> to evaluate true or false.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary>Gets the collection of statements to execute if the conditional expression evaluates to false.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeStatementCollection"></see> containing the statements to execute if the conditional expression evaluates to false.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary>Gets the collection of statements to execute if the conditional expression evaluates to true.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeStatementCollection"></see> containing the statements to execute if the conditional expression evaluates to true.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary>Represents a declaration for an instance constructor of a type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeConstructor"></see> class.</summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary>Gets the collection of base constructor arguments.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpressionCollection"></see> that contains the base constructor arguments.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary>Gets the collection of chained constructor arguments.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpressionCollection"></see> that contains the chained constructor arguments.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDefaultValueExpression">
      <summary>Represents a reference to a default value.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDefaultValueExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDefaultValueExpression"></see> class using the specified code type reference.</summary>
      <param name="type">A <see cref="T:System.CodeDom.CodeTypeReference"></see> that specifies the reference to a value type.</param>
    </member>
    <member name="P:System.CodeDom.CodeDefaultValueExpression.Type">
      <summary>Gets or sets the data type reference for a default value.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> object representing a data type that has a default value.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary>Represents an expression that creates a delegate.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDelegateCreateExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDelegateCreateExpression"></see> class.</summary>
      <param name="delegateType">A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the data type of the delegate.</param>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the object containing the event-handler method.</param>
      <param name="methodName">The name of the event-handler method.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary>Gets or sets the data type of the delegate.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the data type of the delegate.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary>Gets or sets the name of the event handler method.</summary>
      <returns>The name of the event handler method.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary>Gets or sets the object that contains the event-handler method.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the object containing the event-handler method.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary>Represents an expression that raises an event.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDelegateInvokeExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDelegateInvokeExpression"></see> class using the specified target object.</summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the target object.</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDelegateInvokeExpression"></see> class using the specified target object and parameters.</summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the target object.</param>
      <param name="parameters">An array of <see cref="T:System.CodeDom.CodeExpression"></see> objects that indicate the parameters.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary>Gets or sets the parameters to pass to the event handling methods attached to the event.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the parameters to pass to the event handling methods attached to the event.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary>Gets or sets the event to invoke.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the event to invoke.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary>Represents an expression used as a method invoke parameter along with a reference direction indicator.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDirectionExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDirectionExpression"></see> class using the specified field direction and expression.</summary>
      <param name="direction">A <see cref="T:System.CodeDom.FieldDirection"></see> that indicates the field direction of the expression.</param>
      <param name="expression">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the code expression to represent.</param>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary>Gets or sets the field direction for this direction expression.</summary>
      <returns>A <see cref="T:System.CodeDom.FieldDirection"></see> that indicates the field direction for this direction expression.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary>Gets or sets the code expression to represent.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the expression to represent.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirective">
      <summary>Serves as the base class for code directive classes.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirective.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDirective"></see> class.</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectiveCollection">
      <summary>Represents a collection of <see cref="T:System.CodeDom.CodeDirective"></see> objects.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDirectiveCollection"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirective[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDirectiveCollection"></see> class with the code directive objects in the specified array.</summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeDirective"></see> objects with which to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirectiveCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDirectiveCollection"></see> class with the elements in the specified code directive collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeDirectiveCollection"></see> object with which to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Add(System.CodeDom.CodeDirective)">
      <summary>Adds the specified <see cref="T:System.CodeDom.CodeDirective"></see> object to the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeDirective"></see> object to add.</param>
      <returns>The index position at which the new element was inserted.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirective[])">
      <summary>Adds an array of <see cref="T:System.CodeDom.CodeDirective"></see> objects to the end of the collection.</summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeDirective"></see> objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirectiveCollection)">
      <summary>Adds the contents of the specified <see cref="T:System.CodeDom.CodeDirectiveCollection"></see> object to the end of the collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeDirectiveCollection"></see> object containing the <see cref="T:System.CodeDom.CodeDirective"></see> objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Contains(System.CodeDom.CodeDirective)">
      <summary>Gets a value indicating whether the collection contains the specified <see cref="T:System.CodeDom.CodeDirective"></see> object.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeDirective"></see> object to search for in the collection.</param>
      <returns>true if the collection contains the specified object; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.CopyTo(System.CodeDom.CodeDirective[],System.Int32)">
      <summary>Copies the contents of the collection to a one-dimensional array beginning at the specified index.</summary>
      <param name="array">An array of type <see cref="T:System.CodeDom.CodeDirective"></see> that is the destination of the values copied from the collection.</param>
      <param name="index">The index in the array at which to begin inserting collection objects.</param>
      <exception cref="T:System.ArgumentException">The destination array is multidimensional.   -or-   The number of elements in the <see cref="T:System.CodeDom.CodeDirectiveCollection"></see> is greater than the available space between the index of the target array specified by <paramref name="index">index</paramref> and the end of the target array.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than the target array's minimum index.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.IndexOf(System.CodeDom.CodeDirective)">
      <summary>Gets the index in the collection of the specified <see cref="T:System.CodeDom.CodeDirective"></see> object, if it exists in the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeDirective"></see> object to locate in the collection.</param>
      <returns>The index position in the collection of the specified object, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Insert(System.Int32,System.CodeDom.CodeDirective)">
      <summary>Inserts the specified <see cref="T:System.CodeDom.CodeDirective"></see> object into the collection at the specified index.</summary>
      <param name="index">The zero-based index position where the specified object should be inserted.</param>
      <param name="value">The <see cref="T:System.CodeDom.CodeDirective"></see> object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than 0.   -or-  <paramref name="index">index</paramref> is greater than <see cref="P:System.Collections.CollectionBase.Count"></see>.</exception>
    </member>
    <member name="P:System.CodeDom.CodeDirectiveCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.CodeDom.CodeDirective"></see> object at the specified index in the collection.</summary>
      <param name="index">The index position to access.</param>
      <returns>The <see cref="T:System.CodeDom.CodeDirective"></see> at the index position.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is outside the valid range of index positions for the collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Remove(System.CodeDom.CodeDirective)">
      <summary>Removes the specified <see cref="T:System.CodeDom.CodeDirective"></see> object from the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeDirective"></see> object to remove from the collection.</param>
      <exception cref="T:System.ArgumentException">The specified object is not found in the collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary>Represents the entry point method of an executable.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeEntryPointMethod"></see> class.</summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary>Represents a reference to an event.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeEventReferenceExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeEventReferenceExpression"></see> class using the specified target object and event name.</summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the object that contains the event.</param>
      <param name="eventName">The name of the event to reference.</param>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary>Gets or sets the name of the event.</summary>
      <returns>The name of the event.</returns>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary>Gets or sets the object that contains the event.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the object that contains the event.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary>Provides the base class for serializing a set of components or serializable objects into a serialization store.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary>Creates a new <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore"></see>.</summary>
      <returns>A new created serialization store.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary>Deserializes the given store to produce a collection of objects.</summary>
      <param name="store">The <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore"></see> to deserialize.</param>
      <returns>A collection of objects created according to the stored state.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="store">store</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="store">store</paramref> does not contain data in a format the serialization container can process.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>Deserializes the given store and populates the given <see cref="T:System.ComponentModel.IContainer"></see> with deserialized <see cref="T:System.ComponentModel.IComponent"></see> objects.</summary>
      <param name="store">The <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore"></see> to deserialize.</param>
      <param name="container">The <see cref="T:System.ComponentModel.IContainer"></see> to which <see cref="T:System.ComponentModel.IComponent"></see> objects will be added.</param>
      <returns>A collection of objects created according to the stored state.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="store">store</paramref> or <paramref name="container">container</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="store">store</paramref> does not contain data in a format the serialization container can process.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>Deserializes the given <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore"></see> to the given container.</summary>
      <param name="store">The <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore"></see> to deserialize.</param>
      <param name="container">The container to which <see cref="T:System.ComponentModel.IComponent"></see> objects will be added.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="store">store</paramref> or <paramref name="container">container</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="store">store</paramref> does not contain data in a format the serialization container can process.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary>Deserializes the given <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore"></see> to the given container, optionally validating recycled types.</summary>
      <param name="store">The <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore"></see> to deserialize.</param>
      <param name="container">The container to which <see cref="T:System.ComponentModel.IComponent"></see> objects will be added.</param>
      <param name="validateRecycledTypes">true to guarantee that the deserialization will only work if applied to an object of the same type.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="store">store</paramref> or <paramref name="container">container</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="store">store</paramref> does not contain data in a format the serialization container can process.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary>Deserializes the given <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore"></see> to the given container, optionally applying default property values.</summary>
      <param name="store">The <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore"></see> to deserialize.</param>
      <param name="container">The container to which <see cref="T:System.ComponentModel.IComponent"></see> objects will be added.</param>
      <param name="validateRecycledTypes">true to guarantee that the deserialization will only work if applied to an object of the same type.</param>
      <param name="applyDefaults">true to indicate that the default property values should be applied.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="store">store</paramref> or <paramref name="container">container</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="store">store</paramref> does not contain data in a format the serialization container can process.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary>Loads a <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore"></see> from a stream.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream"></see> from which the store will be loaded.</param>
      <returns>A new <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore"></see> instance.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="stream">stream</paramref> does not contain data saved by a previous call to <see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)"></see>.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>Serializes the given object to the given <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore"></see>.</summary>
      <param name="store">The <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore"></see> to which the state of value will be written.</param>
      <param name="value">The object to serialize.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="store">store</paramref> or <paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="store">store</paramref> is closed, or <paramref name="store">store</paramref> is not a supported type of serialization store. Use a store returned by <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore"></see>.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>Serializes the given object, accounting for default property values.</summary>
      <param name="store">The <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore"></see> to which the state of value will be serialized.</param>
      <param name="value">The object to serialize.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="store">store</paramref> or <paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="store">store</paramref> is closed, or <paramref name="store">store</paramref> is not a supported type of serialization store. Use a store returned by <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore"></see>.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Serializes the given member on the given object.</summary>
      <param name="store">The <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore"></see> to which the state of member will be serialized.</param>
      <param name="owningObject">The object to which member is attached.</param>
      <param name="member">A <see cref="T:System.ComponentModel.MemberDescriptor"></see> specifying the member to serialize.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="store">store</paramref> or <paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="store">store</paramref> is closed, or <paramref name="store">store</paramref> is not a supported type of serialization store. Use a store returned by <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore"></see>.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Serializes the given member on the given object, accounting for the default property value.</summary>
      <param name="store">The <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore"></see> to which the state of member will be serialized.</param>
      <param name="owningObject">The object to which member is attached.</param>
      <param name="member">The member to serialize.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="store">store</paramref> or <paramref name="value">value</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="store">store</paramref> is closed, or <paramref name="store">store</paramref> is not a supported type of serialization store. Use a store returned by <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore"></see>.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary>Provides a stack object that can be used by a serializer to make information available to nested serializers.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.ContextStack"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary>Appends an object to the end of the stack, rather than pushing it onto the top of the stack.</summary>
      <param name="context">A context object to append to the stack.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="context">context</paramref> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary>Gets the current object on the stack.</summary>
      <returns>The current object on the stack, or null if no objects were pushed.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary>Gets the object on the stack at the specified level.</summary>
      <param name="level">The level of the object to retrieve on the stack. Level 0 is the top of the stack, level 1 is the next down, and so on. This level must be 0 or greater. If level is greater than the number of levels on the stack, it returns null.</param>
      <returns>The object on the stack at the specified level, or null if no object exists at that level.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="level">level</paramref> is less than 0.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary>Gets the first object on the stack that inherits from or implements the specified type.</summary>
      <param name="type">A type to retrieve from the context stack.</param>
      <returns>The first object on the stack that inherits from or implements the specified type, or null if no object on the stack implements the type.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="type">type</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary>Removes the current object off of the stack, returning its value.</summary>
      <returns>The object removed from the stack; null if no objects are on the stack.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary>Pushes, or places, the specified object onto the stack.</summary>
      <param name="context">The context object to push onto the stack.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="context">context</paramref> is null.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary>The <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute"></see> attribute is placed on a serializer to indicate the class to use as a default provider of that type of serializer.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute"></see> class with the named provider type.</summary>
      <param name="providerTypeName">The name of the serialization provider type.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="providerTypeName">providerTypeName</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute"></see> class with the given provider type.</summary>
      <param name="providerType">The <see cref="T:System.Type"></see> of the serialization provider.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="providerType">providerType</paramref> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary>Gets the type name of the serialization provider.</summary>
      <returns>A string containing the name of the provider.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary>Provides a basic designer loader interface that can be used to implement a custom designer loader.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary>Begins loading a designer.</summary>
      <param name="host">The loader host through which this loader loads components.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader"></see>.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary>Writes cached changes to the location that the designer was loaded from.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary>Gets a value indicating whether the loader is currently loading a document.</summary>
      <returns>true if the loader is currently loading a document; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute">
      <summary>Indicates a serializer for the serialization manager to use to serialize the values of the type this attribute is applied to. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute"></see> class.</summary>
      <param name="serializerTypeName">The fully qualified name of the data type of the serializer.</param>
      <param name="baseSerializerTypeName">The fully qualified name of the base data type of the serializer. Multiple serializers can be supplied for a class as long as the serializers have different base types.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute"></see> class.</summary>
      <param name="serializerTypeName">The fully qualified name of the data type of the serializer.</param>
      <param name="baseSerializerType">The base data type of the serializer. Multiple serializers can be supplied for a class as long as the serializers have different base types.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute"></see> class.</summary>
      <param name="serializerType">The data type of the serializer.</param>
      <param name="baseSerializerType">The base data type of the serializer. Multiple serializers can be supplied for a class as long as the serializers have different base types.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>Gets the fully qualified type name of the serializer base type.</summary>
      <returns>The fully qualified type name of the serializer base type.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName">
      <summary>Gets the fully qualified type name of the serializer.</summary>
      <returns>The fully qualified type name of the serializer.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId">
      <summary>Indicates a unique ID for this attribute type.</summary>
      <returns>A unique ID for this attribute type.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary>Provides an interface that can extend a designer host to support loading from a serialized state.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary>Ends the designer loading operation.</summary>
      <param name="baseClassName">The fully qualified name of the base class of the document that this designer is designing.</param>
      <param name="successful">true if the designer is successfully loaded; otherwise, false.</param>
      <param name="errorCollection">A collection containing the errors encountered during load, if any. If no errors were encountered, pass either an empty collection or null.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary>Reloads the design document.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary>Provides an interface that extends <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost"></see> to specify whether errors are tolerated while loading a design document.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary>Gets or sets a value indicating whether it is possible to reload with errors.</summary>
      <returns>true if the designer loader can reload the design document when errors are detected; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary>Gets or sets a value indicating whether errors should be ignored when <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload"></see> is called.</summary>
      <returns>true if the designer loader will ignore errors when it reloads; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary>Provides an interface that can extend a designer loader to support asynchronous loading of external components.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary>Registers an external component as part of the load process managed by this interface.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary>Signals that a dependent load has finished.</summary>
      <param name="successful">true if the load of the designer is successful; false if errors prevented the load from finishing.</param>
      <param name="errorCollection">A collection of errors that occurred during the load, if any. If no errors occurred, pass either an empty collection or null.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary>Reloads the design document.</summary>
      <returns>true if the reload request is accepted, or false if the loader does not allow the reload.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary>Provides an interface that can manage design-time serialization.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Adds the specified serialization provider to the serialization manager.</summary>
      <param name="provider">The serialization provider to add.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary>Gets a stack-based, user-defined storage area that is useful for communication between serializers.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.Serialization.ContextStack"></see> that stores data.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>Creates an instance of the specified type and adds it to a collection of named instances.</summary>
      <param name="type">The data type to create.</param>
      <param name="arguments">The arguments to pass to the constructor for this type.</param>
      <param name="name">The name of the object. This name can be used to access the object later through <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)"></see>. If null is passed, the object is still created but cannot be accessed by name.</param>
      <param name="addToContainer">If true, this object is added to the design container. The object must implement <see cref="T:System.ComponentModel.IComponent"></see> for this to have any effect.</param>
      <returns>The newly created object instance.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary>Gets an instance of a created object of the specified name, or null if that object does not exist.</summary>
      <param name="name">The name of the object to retrieve.</param>
      <returns>An instance of the object with the given name, or null if no object by that name can be found.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary>Gets the name of the specified object, or null if the object has no name.</summary>
      <param name="value">The object to retrieve the name for.</param>
      <returns>The name of the object, or null if the object is unnamed.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary>Gets a serializer of the requested type for the specified object type.</summary>
      <param name="objectType">The type of the object to get the serializer for.</param>
      <param name="serializerType">The type of the serializer to retrieve.</param>
      <returns>An instance of the requested serializer, or null if no appropriate serializer can be located.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary>Gets a type of the specified name.</summary>
      <param name="typeName">The fully qualified name of the type to load.</param>
      <returns>An instance of the type, or null if the type cannot be loaded.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary>Indicates custom properties that can be serializable with available serializers.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> containing the properties to be serialized.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Removes a custom serialization provider from the serialization manager.</summary>
      <param name="provider">The provider to remove. This object must have been added using <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)"></see>.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary>Reports an error in serialization.</summary>
      <param name="errorInformation">The error to report. This information object can be of any object type. If it is an exception, the message of the exception is extracted and reported to the user. If it is any other type, <see cref="M:System.Object.ToString"></see> is called to display the information to the user.</param>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary>Occurs when <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)"></see> cannot locate the specified name in the serialization manager's name table.</summary>
      <returns></returns>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary>Occurs when serialization is complete.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary>Sets the name of the specified existing object.</summary>
      <param name="instance">The object instance to name.</param>
      <param name="name">The name to give the instance.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary>Provides an interface that enables access to a serializer.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary>Gets a serializer using the specified attributes.</summary>
      <param name="manager">The serialization manager requesting the serializer.</param>
      <param name="currentSerializer">An instance of the current serializer of the specified type. This can be null if no serializer of the specified type exists.</param>
      <param name="objectType">The data type of the object to serialize.</param>
      <param name="serializerType">The data type of the serializer to create.</param>
      <returns>An instance of a serializer of the type requested, or null if the request cannot be satisfied.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary>Provides an interface that can invoke serialization and deserialization.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary>Deserializes the specified serialization data object and returns a collection of objects represented by that data.</summary>
      <param name="serializationData">An object consisting of serialized data.</param>
      <returns>An <see cref="T:System.Collections.ICollection"></see> of objects rebuilt from the specified serialization data object.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary>Serializes the specified collection of objects and stores them in a serialization data object.</summary>
      <param name="objects">A collection of objects to serialize.</param>
      <returns>An object that contains the serialized state of the specified collection of objects.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary>Provides a service that can generate unique names for objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary>Creates a new name that is unique to all components in the specified container.</summary>
      <param name="container">The container where the new object is added.</param>
      <param name="dataType">The data type of the object that receives the name.</param>
      <returns>A unique name for the data type.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary>Gets a value indicating whether the specified name is valid.</summary>
      <param name="name">The name to validate.</param>
      <returns>true if the name is valid; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary>Gets a value indicating whether the specified name is valid.</summary>
      <param name="name">The name to validate.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary>Provides the information necessary to create an instance of an object. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"></see> class using the specified member information and arguments.</summary>
      <param name="member">The member information for the descriptor. This can be a <see cref="T:System.Reflection.MethodInfo"></see>, <see cref="T:System.Reflection.ConstructorInfo"></see>, <see cref="T:System.Reflection.FieldInfo"></see>, or <see cref="T:System.Reflection.PropertyInfo"></see>. If this is a <see cref="T:System.Reflection.MethodInfo"></see>, <see cref="T:System.Reflection.FieldInfo"></see>, or <see cref="T:System.Reflection.PropertyInfo"></see>, it must represent a static member.</param>
      <param name="arguments">The collection of arguments to pass to the member. This parameter can be null or an empty collection if there are no arguments. The collection can also consist of other instances of <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"></see>.</param>
      <exception cref="T:System.ArgumentException"><paramref name="member">member</paramref> is of type <see cref="T:System.Reflection.MethodInfo"></see>, <see cref="T:System.Reflection.FieldInfo"></see>, or <see cref="T:System.Reflection.PropertyInfo"></see>, and it does not represent a static member.  <paramref name="member">member</paramref> is of type <see cref="T:System.Reflection.PropertyInfo"></see> and is not readable.  <paramref name="member">member</paramref> is of type <see cref="T:System.Reflection.MethodInfo"></see> or <see cref="T:System.Reflection.ConstructorInfo"></see>, and the number of arguments in <paramref name="arguments">arguments</paramref> does not match the signature of <paramref name="member.">member.</paramref><paramref name="member">member</paramref> is of type <see cref="T:System.Reflection.ConstructorInfo"></see> and represents a static member.  <paramref name="member">member</paramref> is of type <see cref="T:System.Reflection.FieldInfo"></see>, and the number of arguments in <paramref name="arguments">arguments</paramref> is not zero.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"></see> class using the specified member information, arguments, and value indicating whether the specified information completely describes the instance.</summary>
      <param name="member">The member information for the descriptor. This can be a <see cref="T:System.Reflection.MethodInfo"></see>, <see cref="T:System.Reflection.ConstructorInfo"></see>, <see cref="T:System.Reflection.FieldInfo"></see>, or <see cref="T:System.Reflection.PropertyInfo"></see>. If this is a <see cref="T:System.Reflection.MethodInfo"></see>, <see cref="T:System.Reflection.FieldInfo"></see>, or <see cref="T:System.Reflection.PropertyInfo"></see>, it must represent a static member.</param>
      <param name="arguments">The collection of arguments to pass to the member. This parameter can be null or an empty collection if there are no arguments. The collection can also consist of other instances of <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"></see>.</param>
      <param name="isComplete">true if the specified information completely describes the instance; otherwise, false.</param>
      <exception cref="T:System.ArgumentException"><paramref name="member">member</paramref> is of type <see cref="T:System.Reflection.MethodInfo"></see>, <see cref="T:System.Reflection.FieldInfo"></see>, or <see cref="T:System.Reflection.PropertyInfo"></see>, and it does not represent a static member  <paramref name="member">member</paramref> is of type <see cref="T:System.Reflection.PropertyInfo"></see> and is not readable.  <paramref name="member">member</paramref> is of type <see cref="T:System.Reflection.MethodInfo"></see> or <see cref="T:System.Reflection.ConstructorInfo"></see> and the number of arguments in <paramref name="arguments">arguments</paramref> does not match the signature of <paramref name="member">member</paramref>.  <paramref name="member">member</paramref> is of type <see cref="T:System.Reflection.ConstructorInfo"></see> and represents a static member  <paramref name="member">member</paramref> is of type <see cref="T:System.Reflection.FieldInfo"></see>, and the number of arguments in <paramref name="arguments">arguments</paramref> is not zero.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary>Gets the collection of arguments that can be used to reconstruct an instance of the object that this instance descriptor represents.</summary>
      <returns>An <see cref="T:System.Collections.ICollection"></see> of arguments that can be used to create the object.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary>Invokes this instance descriptor and returns the object the descriptor describes.</summary>
      <returns>The object this instance descriptor describes.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary>Gets a value indicating whether the contents of this <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"></see> completely identify the instance.</summary>
      <returns>true if the instance is completely described; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary>Gets the member information that describes the instance this descriptor is associated with.</summary>
      <returns>A <see cref="T:System.Reflection.MemberInfo"></see> that describes the instance that this object is associated with.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary>Represents a single relationship between an object and a member.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship"></see> class.</summary>
      <param name="owner">The object that owns member.</param>
      <param name="member">The member which is to be related to owner.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="owner">owner</paramref> or <paramref name="member">member</paramref> is null.</exception>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary>Represents the empty member relationship. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship"></see> instances are equal.</summary>
      <param name="obj">The <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship"></see> to compare with the current <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship"></see>.</param>
      <returns>true if the specified <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship"></see> is equal to the current <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary>Gets a value indicating whether this relationship is equal to the <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty"></see> relationship.</summary>
      <returns>true if this relationship is equal to the <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty"></see> relationship; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary>Gets the related member.</summary>
      <returns>The member that is passed in to the <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Tests whether two specified <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship"></see> structures are equivalent.</summary>
      <param name="left">The <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship"></see> structure that is to the left of the equality operator.</param>
      <param name="right">The <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship"></see> structure that is to the right of the equality operator.</param>
      <returns>This operator returns true if the two <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship"></see> structures are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Tests whether two specified <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship"></see> structures are different.</summary>
      <param name="left">The <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship"></see> structure that is to the left of the inequality operator.</param>
      <param name="right">The <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship"></see> structure that is to the right of the inequality operator.</param>
      <returns>This operator returns true if the two <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship"></see> structures are different; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary>Gets the owning object.</summary>
      <returns>The owning object that is passed in to the <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)"></see>.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary>Provides the base class for relating one member to another.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Gets a relationship to the given source relationship.</summary>
      <param name="source">The source relationship.</param>
      <returns>A relationship to <paramref name="source">source</paramref>, or <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty"></see> if no relationship exists.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Establishes a relationship between a source and target object.</summary>
      <param name="source">The source relationship. This is the left-hand side of a relationship assignment.</param>
      <returns>The current relationship associated with <paramref name="source">source</paramref>, or <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty"></see> if there is no relationship.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="source">source</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="source">source</paramref> is empty, or the relationship is not supported by the service.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Establishes a relationship between a source and target object.</summary>
      <param name="sourceOwner">The owner of a source relationship.</param>
      <param name="sourceMember">The member of a source relationship.</param>
      <returns>A <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship"></see> structure encapsulating the relationship between a source and target object, or null if there is no relationship.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="sourceOwner">sourceOwner</paramref> or <paramref name="sourceMember">sourceMember</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="sourceOwner">sourceOwner</paramref> or <paramref name="sourceMember">sourceMember</paramref> is empty, or the relationship is not supported by the service.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Creates a relationship between the source object and target relationship.</summary>
      <param name="source">The source relationship.</param>
      <param name="relationship">The relationship to set into the source.</param>
      <exception cref="T:System.ArgumentException">The relationship is not supported by the service.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Gets a value indicating whether the given relationship is supported.</summary>
      <param name="source">The source relationship.</param>
      <param name="relationship">The relationship to set into the source.</param>
      <returns>true if a relationship between the given two objects is supported; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName"></see> event.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs"></see> class.</summary>
      <param name="name">The name to resolve.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary>Gets the name of the object to resolve.</summary>
      <returns>The name of the object to resolve.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary>Gets or sets the object that matches the name.</summary>
      <returns>The object that the name is associated with.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName"></see> event of a serialization manager.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.Configuration.ConfigurationException">
      <summary>The exception that is thrown when a configuration system error has occurred.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException"></see> class.</summary>
      <param name="message">A message describing why this <see cref="T:System.Configuration.ConfigurationException"></see> exception was thrown.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException"></see> class.</summary>
      <param name="info">The object that holds the information to deserialize.</param>
      <param name="context">Contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException"></see> class.</summary>
      <param name="message">A message describing why this <see cref="T:System.Configuration.ConfigurationException"></see> exception was thrown.</param>
      <param name="inner">The inner exception that caused this <see cref="T:System.Configuration.ConfigurationException"></see> to be thrown, if any.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.Xml.XmlNode)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException"></see> class.</summary>
      <param name="message">A message describing why this <see cref="T:System.Configuration.ConfigurationException"></see> exception was thrown.</param>
      <param name="node">The <see cref="T:System.Xml.XmlNode"></see> that caused this <see cref="T:System.Configuration.ConfigurationException"></see> to be thrown.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.Exception,System.Xml.XmlNode)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException"></see> class.</summary>
      <param name="message">A message describing why this <see cref="T:System.Configuration.ConfigurationException"></see> exception was thrown.</param>
      <param name="inner">The inner exception that caused this <see cref="T:System.Configuration.ConfigurationException"></see> to be thrown, if any.</param>
      <param name="node">The <see cref="T:System.Xml.XmlNode"></see> that caused this <see cref="T:System.Configuration.ConfigurationException"></see> to be thrown.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException"></see> class.</summary>
      <param name="message">A message describing why this <see cref="T:System.Configuration.ConfigurationException"></see> exception was thrown.</param>
      <param name="filename">The path to the configuration file that caused this <see cref="T:System.Configuration.ConfigurationException"></see> to be thrown.</param>
      <param name="line">The line number within the configuration file at which this <see cref="T:System.Configuration.ConfigurationException"></see> was thrown.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.Exception,System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException"></see> class.</summary>
      <param name="message">A message describing why this <see cref="T:System.Configuration.ConfigurationException"></see> exception was thrown.</param>
      <param name="inner">The inner exception that caused this <see cref="T:System.Configuration.ConfigurationException"></see> to be thrown, if any.</param>
      <param name="filename">The path to the configuration file that caused this <see cref="T:System.Configuration.ConfigurationException"></see> to be thrown.</param>
      <param name="line">The line number within the configuration file at which this <see cref="T:System.Configuration.ConfigurationException"></see> was thrown.</param>
    </member>
    <member name="P:System.Configuration.ConfigurationException.BareMessage">
      <summary>Gets a description of why this configuration exception was thrown.</summary>
      <returns>A description of why this <see cref="T:System.Configuration.ConfigurationException"></see> exception was thrown.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationException.Filename">
      <summary>Gets the path to the configuration file that caused this configuration exception to be thrown.</summary>
      <returns>The path to the configuration file that caused this <see cref="T:System.Configuration.ConfigurationException"></see> exception to be thrown.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object with the file name and line number at which this configuration exception occurred.</summary>
      <param name="info">The object that holds the information to be serialized.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.GetXmlNodeFilename(System.Xml.XmlNode)">
      <summary>Gets the path to the configuration file from which the internal <see cref="T:System.Xml.XmlNode"></see> object was loaded when this configuration exception was thrown.</summary>
      <param name="node">The <see cref="T:System.Xml.XmlNode"></see> that caused this <see cref="T:System.Configuration.ConfigurationException"></see> exception to be thrown.</param>
      <returns>A string representing the node file name.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationException.GetXmlNodeLineNumber(System.Xml.XmlNode)">
      <summary>Gets the line number within the configuration file that the internal <see cref="T:System.Xml.XmlNode"></see> object represented when this configuration exception was thrown.</summary>
      <param name="node">The <see cref="T:System.Xml.XmlNode"></see> that caused this <see cref="T:System.Configuration.ConfigurationException"></see> exception to be thrown.</param>
      <returns>An int representing the node line number.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationException.Line">
      <summary>Gets the line number within the configuration file at which this configuration exception was thrown.</summary>
      <returns>The line number within the configuration file at which this <see cref="T:System.Configuration.ConfigurationException"></see> exception was thrown.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationException.Message">
      <summary>Gets an extended description of why this configuration exception was thrown.</summary>
      <returns>An extended description of why this <see cref="T:System.Configuration.ConfigurationException"></see> exception was thrown.</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationSettings">
      <summary>Provides runtime versions 1.0 and 1.1 support for reading configuration sections and common configuration settings.</summary>
    </member>
    <member name="P:System.Configuration.ConfigurationSettings.AppSettings">
      <summary>Gets a read-only <see cref="T:System.Collections.Specialized.NameValueCollection"></see> of the application settings section of the configuration file.</summary>
      <returns>A read-only <see cref="T:System.Collections.Specialized.NameValueCollection"></see> of the application settings section from the configuration file.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSettings.GetConfig(System.String)">
      <summary>Returns the <see cref="T:System.Configuration.ConfigurationSection"></see> object for the passed configuration section name and path.</summary>
      <param name="sectionName">A configuration name and path, such as &quot;system.net/settings&quot;.</param>
      <returns><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="3"><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="1">The <xref href="System.Configuration.ConfigurationSection"></xref> object for the passed configuration section name and path.  </p>
 <block subset="none" type="note"><p><br> The <xref href="System.Configuration.ConfigurationSettings"></xref> class provides backward compatibility only. You should use the <xref href="System.Configuration.ConfigurationManager"></xref> class or <xref href="System.Web.Configuration.WebConfigurationManager"></xref> class instead.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="5" sourceendlinenumber="5"></block></p>
</returns>
      <exception cref="T:System.Configuration.ConfigurationException">Unable to retrieve the requested section.</exception>
    </member>
    <member name="T:System.Configuration.ConfigXmlDocument">
      <summary>Wraps the corresponding <see cref="T:System.Xml.XmlDocument"></see> type and also carries the necessary information for reporting file-name and line numbers.</summary>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigXmlDocument"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateAttribute(System.String,System.String,System.String)">
      <summary>Creates a configuration element attribute.</summary>
      <param name="prefix">The prefix definition.</param>
      <param name="localName">The name that is used locally.</param>
      <param name="namespaceUri">The URL that is assigned to the namespace.</param>
      <returns>The <see cref="P:System.Xml.Serialization.XmlAttributes.XmlAttribute"></see> attribute.</returns>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateCDataSection(System.String)">
      <summary>Creates an XML CData section.</summary>
      <param name="data">The data to use.</param>
      <returns>The <see cref="T:System.Xml.XmlCDataSection"></see> value.</returns>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateComment(System.String)">
      <summary>Create an XML comment.</summary>
      <param name="data"></param>
      <returns>The <see cref="T:System.Xml.XmlComment"></see> value.</returns>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateElement(System.String,System.String,System.String)">
      <summary>Creates a configuration element.</summary>
      <param name="prefix">The prefix definition.</param>
      <param name="localName">The name used locally.</param>
      <param name="namespaceUri">The namespace for the URL.</param>
      <returns>The <see cref="T:System.Xml.XmlElement"></see> value.</returns>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateSignificantWhitespace(System.String)">
      <summary>Creates white spaces.</summary>
      <param name="data">The data to use.</param>
      <returns>The <see cref="T:System.Xml.XmlSignificantWhitespace"></see> value.</returns>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateTextNode(System.String)">
      <summary>Create a text node.</summary>
      <param name="text">The text to use.</param>
      <returns>The <see cref="T:System.Xml.XmlText"></see> value.</returns>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateWhitespace(System.String)">
      <summary>Creates white space.</summary>
      <param name="data">The data to use.</param>
      <returns>The <see cref="T:System.Xml.XmlWhitespace"></see> value.</returns>
    </member>
    <member name="P:System.Configuration.ConfigXmlDocument.Filename">
      <summary>Gets the configuration file name.</summary>
      <returns>The configuration file name.</returns>
    </member>
    <member name="P:System.Configuration.ConfigXmlDocument.LineNumber">
      <summary>Gets the current node line number.</summary>
      <returns>The line number for the current node.</returns>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.Load(System.String)">
      <summary>Loads the configuration file.</summary>
      <param name="filename">The name of the file.</param>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.LoadSingleElement(System.String,System.Xml.XmlTextReader)">
      <summary>Loads a single configuration element.</summary>
      <param name="filename">The name of the file.</param>
      <param name="sourceReader">The source for the reader.</param>
    </member>
    <member name="P:System.Configuration.ConfigXmlDocument.System#Configuration#Internal#IConfigErrorInfo#Filename">
      <summary>Gets the configuration file name.</summary>
      <returns>The file name.</returns>
    </member>
    <member name="P:System.Configuration.ConfigXmlDocument.System#Configuration#Internal#IConfigErrorInfo#LineNumber">
      <summary>Gets the configuration line number.</summary>
      <returns>The line number.</returns>
    </member>
    <member name="T:System.Configuration.DefaultSettingValueAttribute">
      <summary>Specifies the default value for an application settings property.</summary>
    </member>
    <member name="M:System.Configuration.DefaultSettingValueAttribute.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Configuration.DefaultSettingValueAttribute"></see> class.</summary>
      <param name="value">A <see cref="T:System.String"></see> that represents the default value for the property.</param>
    </member>
    <member name="P:System.Configuration.DefaultSettingValueAttribute.Value">
      <summary>Gets the default value for the application settings property.</summary>
      <returns>A <see cref="T:System.String"></see> that represents the default value for the property.</returns>
    </member>
    <member name="T:System.Configuration.DictionarySectionHandler">
      <summary>Provides key/value pair configuration information from a configuration section.</summary>
    </member>
    <member name="M:System.Configuration.DictionarySectionHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.DictionarySectionHandler"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.DictionarySectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>Creates a new configuration handler and adds it to the section-handler collection based on the specified parameters.</summary>
      <param name="parent">Parent object.</param>
      <param name="context">Configuration context object.</param>
      <param name="section">Section XML node.</param>
      <returns>A configuration object.</returns>
    </member>
    <member name="P:System.Configuration.DictionarySectionHandler.KeyAttributeName">
      <summary>Gets the XML attribute name to use as the key in a key/value pair.</summary>
      <returns>A string value containing the name of the key attribute.</returns>
    </member>
    <member name="P:System.Configuration.DictionarySectionHandler.ValueAttributeName">
      <summary>Gets the XML attribute name to use as the value in a key/value pair.</summary>
      <returns>A string value containing the name of the value attribute.</returns>
    </member>
    <member name="T:System.Net.Sockets.SendPacketsElement">
      <summary>Represents an element in a <see cref="T:System.Net.Sockets.SendPacketsElement"></see> array.</summary>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.SendPacketsElement"></see> class using the specified buffer.</summary>
      <param name="buffer">A byte array of data to send using the <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)"></see> method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer">buffer</paramref> parameter cannot be null</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.SendPacketsElement"></see> class using the specified file.</summary>
      <param name="filepath">The filename of the file to be transmitted using the <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)"></see> method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filepath">filepath</paramref> parameter cannot be null</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.SendPacketsElement"></see> class using the specified buffer, buffer offset, and count.</summary>
      <param name="buffer">A byte array of data to send using the <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)"></see> method.</param>
      <param name="offset">The offset, in bytes, from the beginning of the buffer to the location in the buffer to start sending the data specified in the buffer parameter.</param>
      <param name="count">The number of bytes to send starting from the offset parameter. If count is zero, no bytes are sent.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer">buffer</paramref> parameter cannot be null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset">offset</paramref> and <paramref name="count">count</paramref> parameters must be greater than or equal to zero.   The <paramref name="offset">offset</paramref> and <paramref name="count">count</paramref> must be less than the size of the buffer</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.SendPacketsElement"></see> class using the specified filename path, offset, and count.</summary>
      <param name="filepath">The filename of the file to be transmitted using the <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)"></see> method.</param>
      <param name="offset">The offset, in bytes, from the beginning of the file to the location in the file to start sending the file specified in the filepath parameter.</param>
      <param name="count">The number of bytes to send starting from the offset parameter. If count is zero, the entire file is sent.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filepath">filepath</paramref> parameter cannot be null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset">offset</paramref> and <paramref name="count">count</paramref> parameters must be greater than or equal to zero.   The <paramref name="offset">offset</paramref> and <paramref name="count">count</paramref> must be less than the size of the file indicated by the <paramref name="filepath">filepath</paramref> parameter.</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.SendPacketsElement"></see> class using the specified buffer, buffer offset, and count with an option to combine this element with the next element in a single send request from the sockets layer to the transport.</summary>
      <param name="buffer">A byte array of data to send using the <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)"></see> method.</param>
      <param name="offset">The offset, in bytes, from the beginning of the buffer to the location in the buffer to start sending the data specified in the buffer parameter.</param>
      <param name="count">The number bytes to send starting from the offset parameter. If count is zero, no bytes are sent.</param>
      <param name="endOfPacket">A Boolean value that specifies that this element should not be combined with the next element in a single send request from the sockets layer to the transport. This flag is used for granular control of the content of each message on a datagram or message-oriented socket.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer">buffer</paramref> parameter cannot be null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset">offset</paramref> and <paramref name="count">count</paramref> parameters must be greater than or equal to zero.   The <paramref name="offset">offset</paramref> and <paramref name="count">count</paramref> must be less than the size of the buffer</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.SendPacketsElement"></see> class using the specified filename path, buffer offset, and count with an option to combine this element with the next element in a single send request from the sockets layer to the transport.</summary>
      <param name="filepath">The filename of the file to be transmitted using the <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)"></see> method.</param>
      <param name="offset">The offset, in bytes, from the beginning of the file to the location in the file to start sending the file specified in the filepath parameter.</param>
      <param name="count">The number of bytes to send starting from the offset parameter. If count is zero, the entire file is sent.</param>
      <param name="endOfPacket">A Boolean value that specifies that this element should not be combined with the next element in a single send request from the sockets layer to the transport. This flag is used for granular control of the content of each message on a datagram or message-oriented socket.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filepath">filepath</paramref> parameter cannot be null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset">offset</paramref> and <paramref name="count">count</paramref> parameters must be greater than or equal to zero.   The <paramref name="offset">offset</paramref> and <paramref name="count">count</paramref> must be less than the size of the file indicated by the <paramref name="filepath">filepath</paramref> parameter.</exception>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.Buffer">
      <summary>Gets the buffer to be sent if the <see cref="T:System.Net.Sockets.SendPacketsElement"></see> class was initialized with a <paramref name="buffer">buffer</paramref> parameter.</summary>
      <returns>The byte buffer to send if the <see cref="T:System.Net.Sockets.SendPacketsElement"></see> class was initialized with a <paramref name="buffer">buffer</paramref> parameter.</returns>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.Count">
      <summary>Gets the count of bytes to be sent.</summary>
      <returns>The count of bytes to send if the <see cref="T:System.Net.Sockets.SendPacketsElement"></see> class was initialized with a <paramref name="count">count</paramref> parameter.</returns>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.EndOfPacket">
      <summary>Gets a Boolean value that indicates if this element should not be combined with the next element in a single send request from the sockets layer to the transport.</summary>
      <returns>A Boolean value that indicates if this element should not be combined with the next element in a single send request.</returns>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.FilePath">
      <summary>Gets the filename of the file to send if the <see cref="T:System.Net.Sockets.SendPacketsElement"></see> class was initialized with a <paramref name="filepath">filepath</paramref> parameter.</summary>
      <returns>The filename of the file to send if the <see cref="T:System.Net.Sockets.SendPacketsElement"></see> class was initialized with a <paramref name="filepath">filepath</paramref> parameter.</returns>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.Offset">
      <summary>Gets the offset, in bytes, from the beginning of the data buffer or file to the location in the buffer or file to start sending the data.</summary>
      <returns>The offset, in bytes, from the beginning of the data buffer or file to the location in the buffer or file to start sending the data.</returns>
    </member>
    <member name="T:System.Net.Sockets.Socket">
      <summary>Implements the Berkeley sockets interface.</summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketInformation)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket"></see> class using the specified value returned from <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)"></see>.</summary>
      <param name="socketInformation">The socket information returned by <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)"></see>.</param>
    </member>
    <member name="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket"></see> class using the specified socket type and protocol.</summary>
      <param name="socketType">One of the <see cref="T:System.Net.Sockets.SocketType"></see> values.</param>
      <param name="protocolType">One of the <see cref="T:System.Net.Sockets.ProtocolType"></see> values.</param>
      <exception cref="T:System.Net.Sockets.SocketException">The combination of  <paramref name="socketType">socketType</paramref> and <paramref name="protocolType">protocolType</paramref> results in an invalid socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket"></see> class using the specified address family, socket type and protocol.</summary>
      <param name="addressFamily">One of the <see cref="T:System.Net.Sockets.AddressFamily"></see> values.</param>
      <param name="socketType">One of the <see cref="T:System.Net.Sockets.SocketType"></see> values.</param>
      <param name="protocolType">One of the <see cref="T:System.Net.Sockets.ProtocolType"></see> values.</param>
      <exception cref="T:System.Net.Sockets.SocketException">The combination of <paramref name="addressFamily">addressFamily</paramref>, <paramref name="socketType">socketType</paramref>, and <paramref name="protocolType">protocolType</paramref> results in an invalid socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Accept">
      <summary>Creates a new <see cref="T:System.Net.Sockets.Socket"></see> for a newly created connection.</summary>
      <returns>A <see cref="T:System.Net.Sockets.Socket"></see> for a newly created connection.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">The accepting socket is not listening for connections. You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)"></see> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)"></see> before calling <see cref="M:System.Net.Sockets.Socket.Accept"></see>.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Begins an asynchronous operation to accept an incoming connection attempt.</summary>
      <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"></see> object to use for this asynchronous socket operation.</param>
      <returns>Returns true if the I/O operation is pending. The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will be raised upon completion of the operation.   Returns false if the I/O operation completed synchronously. The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will not be raised and the <paramref name="e">e</paramref> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</returns>
      <exception cref="T:System.ArgumentException">An argument is not valid. This exception occurs if the buffer provided is not large enough. The buffer must be at least 2 * (sizeof(SOCKADDR_STORAGE + 16) bytes.   This exception also occurs if multiple buffers are specified, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList"></see> property is not null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">An argument is out of range. The exception occurs if the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count"></see> is less than 0.</exception>
      <exception cref="T:System.InvalidOperationException">An invalid operation was requested. This exception occurs if the accepting <see cref="T:System.Net.Sockets.Socket"></see> is not listening for connections or the accepted socket is bound.   You must call the <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)"></see> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)"></see> method before calling the <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)"></see> method.   This exception also occurs if the socket is already connected or a socket operation was already in progress using the specified <paramref name="e">e</paramref> parameter.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP or later is required for this method.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.AddressFamily">
      <summary>Gets the address family of the <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <returns>One of the <see cref="T:System.Net.Sockets.AddressFamily"></see> values.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.Available">
      <summary>Gets the amount of data that has been received from the network and is available to be read.</summary>
      <returns>The number of bytes of data received from the network and available to be read.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginAccept(System.Net.Sockets.Socket,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to accept an incoming connection attempt from a specified socket and receives the first block of data sent by the client application.</summary>
      <param name="acceptSocket">The accepted <see cref="T:System.Net.Sockets.Socket"></see> object. This value may be null.</param>
      <param name="receiveSize">The maximum number of bytes to receive.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback"></see> delegate.</param>
      <param name="state">An object that contains state information for this request.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object that references the asynchronous <see cref="T:System.Net.Sockets.Socket"></see> object creation.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> object has been closed.</exception>
      <exception cref="T:System.NotSupportedException">Windows NT is required for this method.</exception>
      <exception cref="T:System.InvalidOperationException">The accepting socket is not listening for connections. You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)"></see> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)"></see> before calling <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)"></see>.   -or-   The accepted socket is bound.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="receiveSize">receiveSize</paramref> is less than 0.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginAccept(System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to accept an incoming connection attempt and receives the first block of data sent by the client application.</summary>
      <param name="receiveSize">The number of bytes to accept from the sender.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback"></see> delegate.</param>
      <param name="state">An object that contains state information for this request.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous <see cref="T:System.Net.Sockets.Socket"></see> creation.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> object has been closed.</exception>
      <exception cref="T:System.NotSupportedException">Windows NT is required for this method.</exception>
      <exception cref="T:System.InvalidOperationException">The accepting socket is not listening for connections. You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)"></see> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)"></see> before calling <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)"></see>.   -or-   The accepted socket is bound.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="receiveSize">receiveSize</paramref> is less than 0.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to accept an incoming connection attempt.</summary>
      <param name="callback">The <see cref="T:System.AsyncCallback"></see> delegate.</param>
      <param name="state">An object that contains state information for this request.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous <see cref="T:System.Net.Sockets.Socket"></see> creation.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> object has been closed.</exception>
      <exception cref="T:System.NotSupportedException">Windows NT is required for this method.</exception>
      <exception cref="T:System.InvalidOperationException">The accepting socket is not listening for connections. You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)"></see> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)"></see> before calling <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)"></see>.   -or-   The accepted socket is bound.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="receiveSize">receiveSize</paramref> is less than 0.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request for a remote host connection.</summary>
      <param name="remoteEP"></param>
      <param name="callback">The <see cref="T:System.AsyncCallback"></see> delegate.</param>
      <param name="state">An object that contains state information for this request.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous connection.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="remoteEP">remoteEP</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.Socket"></see> is <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)"></see>ing.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request for a remote host connection. The host is specified by an <see cref="T:System.Net.IPAddress"></see> and a port number.</summary>
      <param name="address">The <see cref="T:System.Net.IPAddress"></see> of the remote host.</param>
      <param name="port">The port number of the remote host.</param>
      <param name="requestCallback"></param>
      <param name="state">A user-defined object that contains information about the connect operation. This object is passed to the requestCallback delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous connection.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Net.Sockets.Socket"></see> is not in the socket family.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="address">address</paramref> is zero.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.Socket"></see> is <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)"></see>ing.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request for a remote host connection. The host is specified by an <see cref="T:System.Net.IPAddress"></see> array and a port number.</summary>
      <param name="addresses">At least one <see cref="T:System.Net.IPAddress"></see>, designating the remote host.</param>
      <param name="port">The port number of the remote host.</param>
      <param name="requestCallback"></param>
      <param name="state">A user-defined object that contains information about the connect operation. This object is passed to the requestCallback delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous connections.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="addresses">addresses</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.NotSupportedException">This method is valid for sockets that use <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"></see> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"></see>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="address">address</paramref> is zero.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.Socket"></see> is <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)"></see>ing.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request for a remote host connection. The host is specified by a host name and a port number.</summary>
      <param name="host">The name of the remote host.</param>
      <param name="port">The port number of the remote host.</param>
      <param name="requestCallback"></param>
      <param name="state">A user-defined object that contains information about the connect operation. This object is passed to the requestCallback delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous connection.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="host">host</paramref> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.NotSupportedException">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"></see> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"></see> families.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.Socket"></see> is <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)"></see>ing.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request to disconnect from a remote endpoint.</summary>
      <param name="reuseSocket">true if this socket can be reused after the connection is closed; otherwise, false.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback"></see> delegate.</param>
      <param name="state">An object that contains state information for this request.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object that references the asynchronous operation.</returns>
      <exception cref="T:System.NotSupportedException">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> object has been closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)">
      <summary>Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that is the storage location for the received data.</param>
      <param name="offset">The location in buffer to store the received data.</param>
      <param name="size">The number of bytes to receive.</param>
      <param name="socketFlags"></param>
      <param name="errorCode"></param>
      <param name="callback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)"></see> delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous read.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> is less than 0.   -or-  <paramref name="offset">offset</paramref> is greater than the length of <paramref name="buffer">buffer</paramref>.   -or-  <paramref name="size">size</paramref> is less than 0.   -or-  <paramref name="size">size</paramref> is greater than the length of <paramref name="buffer">buffer</paramref> minus the value of the <paramref name="offset">offset</paramref> parameter.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
      <summary>Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that is the storage location for the received data.</param>
      <param name="offset">The zero-based position in the buffer parameter at which to store the received data.</param>
      <param name="size">The number of bytes to receive.</param>
      <param name="socketFlags"></param>
      <param name="callback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)"></see> delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous read.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> is less than 0.   -or-  <paramref name="offset">offset</paramref> is greater than the length of <paramref name="buffer">buffer</paramref>.   -or-  <paramref name="size">size</paramref> is less than 0.   -or-  <paramref name="size">size</paramref> is greater than the length of <paramref name="buffer">buffer</paramref> minus the value of the <paramref name="offset">offset</paramref> parameter.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
      <summary>Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <param name="buffers">An array of type <see cref="T:System.Byte"></see> that is the storage location for the received data.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)"></see> delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous read.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)">
      <summary>Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <param name="buffers">An array of type <see cref="T:System.Byte"></see> that is the storage location for the received data.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <param name="errorCode">A <see cref="T:System.Net.Sockets.SocketError"></see> object that stores the socket error.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)"></see> delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous read.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)">
      <summary>Begins to asynchronously receive data from a specified network device.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that is the storage location for the received data.</param>
      <param name="offset">The zero-based position in the buffer parameter at which to store the data.</param>
      <param name="size">The number of bytes to receive.</param>
      <param name="socketFlags"></param>
      <param name="remoteEP"></param>
      <param name="callback">The <see cref="T:System.AsyncCallback"></see> delegate.</param>
      <param name="state">An object that contains state information for this request.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous read.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.   -or-  <paramref name="remoteEP">remoteEP</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> is less than 0.   -or-  <paramref name="offset">offset</paramref> is greater than the length of <paramref name="buffer">buffer</paramref>.   -or-  <paramref name="size">size</paramref> is less than 0.   -or-  <paramref name="size">size</paramref> is greater than the length of <paramref name="buffer">buffer</paramref> minus the value of the <paramref name="offset">offset</paramref> parameter.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)">
      <summary>Begins to asynchronously receive the specified number of bytes of data into the specified location of the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see>, and stores the endpoint and packet information..</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that is the storage location for the received data.</param>
      <param name="offset">The zero-based position in the buffer parameter at which to store the data.</param>
      <param name="size">The number of bytes to receive.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <param name="remoteEP">An <see cref="T:System.Net.EndPoint"></see> that represents the source of the data.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback"></see> delegate.</param>
      <param name="state">An object that contains state information for this request.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous read.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.   -or-  <paramref name="remoteEP">remoteEP</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> is less than 0.   -or-  <paramref name="offset">offset</paramref> is greater than the length of <paramref name="buffer">buffer</paramref>.   -or-  <paramref name="size">size</paramref> is less than 0.   -or-  <paramref name="size">size</paramref> is greater than the length of <paramref name="buffer">buffer</paramref> minus the value of the <paramref name="offset">offset</paramref> parameter.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.NotSupportedException">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
      <summary>Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <param name="buffers">An array of type <see cref="T:System.Byte"></see> that contains the data to send.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback"></see> delegate.</param>
      <param name="state">An object that contains state information for this request.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous send.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffers">buffers</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="buffers">buffers</paramref> is empty.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See remarks section below.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)">
      <summary>Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <param name="buffers">An array of type <see cref="T:System.Byte"></see> that contains the data to send.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <param name="errorCode">A <see cref="T:System.Net.Sockets.SocketError"></see> object that stores the socket error.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback"></see> delegate.</param>
      <param name="state">An object that contains state information for this request.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous send.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffers">buffers</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="buffers">buffers</paramref> is empty.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See remarks section below.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
      <summary>Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that contains the data to send.</param>
      <param name="offset">The zero-based position in the buffer parameter at which to begin sending data.</param>
      <param name="size">The number of bytes to send.</param>
      <param name="socketFlags"></param>
      <param name="callback">The <see cref="T:System.AsyncCallback"></see> delegate.</param>
      <param name="state">An object that contains state information for this request.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous send.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See remarks section below.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> is less than 0.   -or-  <paramref name="offset">offset</paramref> is less than the length of <paramref name="buffer">buffer</paramref>.   -or-  <paramref name="size">size</paramref> is less than 0.   -or-  <paramref name="size">size</paramref> is greater than the length of <paramref name="buffer">buffer</paramref> minus the value of the <paramref name="offset">offset</paramref> parameter.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)">
      <summary>Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that contains the data to send.</param>
      <param name="offset">The zero-based position in the buffer parameter at which to begin sending data.</param>
      <param name="size">The number of bytes to send.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <param name="errorCode">A <see cref="T:System.Net.Sockets.SocketError"></see> object that stores the socket error.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback"></see> delegate.</param>
      <param name="state">An object that contains state information for this request.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous send.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See remarks section below.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> is less than 0.   -or-  <paramref name="offset">offset</paramref> is less than the length of <paramref name="buffer">buffer</paramref>.   -or-  <paramref name="size">size</paramref> is less than 0.   -or-  <paramref name="size">size</paramref> is greater than the length of <paramref name="buffer">buffer</paramref> minus the value of the <paramref name="offset">offset</paramref> parameter.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)">
      <summary>Sends the file <paramref name="fileName">fileName</paramref> to a connected <see cref="T:System.Net.Sockets.Socket"></see> object using the <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread"></see> flag.</summary>
      <param name="fileName">A string that contains the path and name of the file to send. This parameter can be null.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback"></see> delegate.</param>
      <param name="state">An object that contains state information for this request.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object that represents the asynchronous send.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> object has been closed.</exception>
      <exception cref="T:System.NotSupportedException">The socket is not connected to a remote host.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file <paramref name="fileName">fileName</paramref> was not found.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See remarks section below.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions,System.AsyncCallback,System.Object)">
      <summary>Sends a file and buffers of data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket"></see> object.</summary>
      <param name="fileName">A string that contains the path and name of the file to be sent. This parameter can be null.</param>
      <param name="preBuffer">A <see cref="T:System.Byte"></see> array that contains data to be sent before the file is sent. This parameter can be null.</param>
      <param name="postBuffer">A <see cref="T:System.Byte"></see> array that contains data to be sent after the file is sent. This parameter can be null.</param>
      <param name="flags">A bitwise combination of <see cref="T:System.Net.Sockets.TransmitFileOptions"></see> values.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback"></see> delegate to be invoked when this operation completes. This parameter can be null.</param>
      <param name="state">A user-defined object that contains state information for this request. This parameter can be null.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object that represents the asynchronous operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> object has been closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See remarks section below.</exception>
      <exception cref="T:System.NotSupportedException">The operating system is not Windows NT or later.   - or -   The socket is not connected to a remote host.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file <paramref name="fileName">fileName</paramref> was not found.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)">
      <summary>Sends data asynchronously to a specific remote host.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that contains the data to send.</param>
      <param name="offset">The zero-based position in buffer at which to begin sending data.</param>
      <param name="size">The number of bytes to send.</param>
      <param name="socketFlags"></param>
      <param name="remoteEP"></param>
      <param name="callback">The <see cref="T:System.AsyncCallback"></see> delegate.</param>
      <param name="state">An object that contains state information for this request.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous send.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.   -or-  <paramref name="remoteEP">remoteEP</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> is less than 0.   -or-  <paramref name="offset">offset</paramref> is greater than the length of <paramref name="buffer">buffer</paramref>.   -or-  <paramref name="size">size</paramref> is less than 0.   -or-  <paramref name="size">size</paramref> is greater than the length of <paramref name="buffer">buffer</paramref> minus the value of the <paramref name="offset">offset</paramref> parameter.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)">
      <summary>Associates a <see cref="T:System.Net.Sockets.Socket"></see> with a local endpoint.</summary>
      <param name="localEP">The local <see cref="T:System.Net.EndPoint"></see> to associate with the <see cref="T:System.Net.Sockets.Socket"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="localEP">localEP</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.Blocking">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Net.Sockets.Socket"></see> is in blocking mode.</summary>
      <returns>true if the <see cref="T:System.Net.Sockets.Socket"></see> will block; otherwise, false. The default is true.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Cancels an asynchronous request for a remote host connection.</summary>
      <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"></see> object used to request the connection to the remote host by calling one of the <see cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)"></see> methods.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter cannot be null and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint"></see> cannot be null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Close(System.Int32)">
      <summary>Closes the <see cref="T:System.Net.Sockets.Socket"></see> connection and releases all associated resources with a specified timeout to allow queued data to be sent.</summary>
      <param name="timeout">Wait up to timeout seconds to send any remaining data, then close the socket.</param>
    </member>
    <member name="M:System.Net.Sockets.Socket.Close">
      <summary>Closes the <see cref="T:System.Net.Sockets.Socket"></see> connection and releases all associated resources.</summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)">
      <summary>Establishes a connection to a remote host.</summary>
      <param name="remoteEP">An <see cref="T:System.Net.EndPoint"></see> that represents the remote device.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="remoteEP">remoteEP</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.Socket"></see> is <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)"></see>ing.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Connect(System.Net.IPAddress,System.Int32)">
      <summary>Establishes a connection to a remote host. The host is specified by an IP address and a port number.</summary>
      <param name="address">The IP address of the remote host.</param>
      <param name="port">The port number of the remote host.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.NotSupportedException">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"></see> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"></see> families.</exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="address">address</paramref> is zero.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.Socket"></see> is <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)"></see>ing.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Connect(System.Net.IPAddress[],System.Int32)">
      <summary>Establishes a connection to a remote host. The host is specified by an array of IP addresses and a port number.</summary>
      <param name="addresses">The IP addresses of the remote host.</param>
      <param name="port">The port number of the remote host.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="addresses">addresses</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.NotSupportedException">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"></see> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"></see> families.</exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="address">address</paramref> is zero.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.Socket"></see> is <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)"></see>ing.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Connect(System.String,System.Int32)">
      <summary>Establishes a connection to a remote host. The host is specified by a host name and a port number.</summary>
      <param name="host">The name of the remote host.</param>
      <param name="port">The port number of the remote host.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="host">host</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.NotSupportedException">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"></see> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"></see> families.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.Socket"></see> is <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)"></see>ing.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Begins an asynchronous request for a connection to a remote host.</summary>
      <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"></see> object to use for this asynchronous socket operation.</param>
      <returns>Returns true if the I/O operation is pending. The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will be raised upon completion of the operation.   Returns false if the I/O operation completed synchronously. In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will not be raised and the <paramref name="e">e</paramref> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</returns>
      <exception cref="T:System.ArgumentException">An argument is not valid. This exception occurs if multiple buffers are specified, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList"></see> property is not null.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter cannot be null and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint"></see> cannot be null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.Socket"></see> is listening or a socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"></see> object specified in the <paramref name="e">e</paramref> parameter.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP or later is required for this method. This exception also occurs if the local endpoint and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint"></see> are not the same address family.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Begins an asynchronous request for a connection to a remote host.</summary>
      <param name="socketType">One of the <see cref="T:System.Net.Sockets.SocketType"></see> values.</param>
      <param name="protocolType">One of the <see cref="T:System.Net.Sockets.ProtocolType"></see> values.</param>
      <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"></see> object to use for this asynchronous socket operation.</param>
      <returns>Returns true if the I/O operation is pending. The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will be raised upon completion of the operation.   Returns false if the I/O operation completed synchronously. In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will not be raised and the <paramref name="e">e</paramref> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</returns>
      <exception cref="T:System.ArgumentException">An argument is not valid. This exception occurs if multiple buffers are specified, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList"></see> property is not null.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter cannot be null and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint"></see> cannot be null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.Socket"></see> is listening or a socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"></see> object specified in the <paramref name="e">e</paramref> parameter.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP or later is required for this method. This exception also occurs if the local endpoint and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint"></see> are not the same address family.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.Connected">
      <summary>Gets a value that indicates whether a <see cref="T:System.Net.Sockets.Socket"></see> is connected to a remote host as of the last <see cref="Overload:System.Net.Sockets.Socket.Send"></see> or <see cref="Overload:System.Net.Sockets.Socket.Receive"></see> operation.</summary>
      <returns>true if the <see cref="T:System.Net.Sockets.Socket"></see> was connected to a remote resource as of the most recent operation; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Disconnect(System.Boolean)">
      <summary>Closes the socket connection and allows reuse of the socket.</summary>
      <param name="reuseSocket">true if this socket can be reused after the current connection is closed; otherwise, false.</param>
      <exception cref="T:System.PlatformNotSupportedException">This method requires Windows 2000 or earlier, or the exception will be thrown.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> object has been closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Begins an asynchronous request to disconnect from a remote endpoint.</summary>
      <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"></see> object to use for this asynchronous socket operation.</param>
      <returns>Returns true if the I/O operation is pending. The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will be raised upon completion of the operation.   Returns false if the I/O operation completed synchronously. In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will not be raised and the <paramref name="e">e</paramref> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e">e</paramref> parameter cannot be null.</exception>
      <exception cref="T:System.InvalidOperationException">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"></see> object specified in the <paramref name="e">e</paramref> parameter.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP or later is required for this method.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Net.Sockets.Socket"></see> class.</summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.Socket"></see>, and optionally disposes of the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
    </member>
    <member name="P:System.Net.Sockets.Socket.DontFragment">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that specifies whether the <see cref="T:System.Net.Sockets.Socket"></see> allows Internet Protocol (IP) datagrams to be fragmented.</summary>
      <returns>true if the <see cref="T:System.Net.Sockets.Socket"></see> allows datagram fragmentation; otherwise, false. The default is true.</returns>
      <exception cref="T:System.NotSupportedException">This property can be set only for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"></see> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"></see> families.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.DualMode">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that specifies whether the <see cref="T:System.Net.Sockets.Socket"></see> is a dual-mode socket used for both IPv4 and IPv6.</summary>
      <returns>true if the <see cref="T:System.Net.Sockets.Socket"></see> is a  dual-mode socket; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)">
      <summary>Duplicates the socket reference for the target process, and closes the socket for this process.</summary>
      <param name="targetProcessId">The ID of the target process where a duplicate of the socket reference is created.</param>
      <returns>The socket reference to be passed to the target process.</returns>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="targetProcessID">targetProcessID</paramref> is not a valid process id.   -or-   Duplication of the socket reference failed.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.EnableBroadcast">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that specifies whether the <see cref="T:System.Net.Sockets.Socket"></see> can send or receive broadcast packets.</summary>
      <returns>true if the <see cref="T:System.Net.Sockets.Socket"></see> allows broadcast packets; otherwise, false. The default is false.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">This option is valid for a datagram socket only.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.Int32@,System.IAsyncResult)">
      <summary>Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket"></see> object to handle remote host communication. This method returns a buffer that contains the initial data and the number of bytes transferred.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that contains the bytes transferred.</param>
      <param name="bytesTransferred">The number of bytes transferred.</param>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> object that stores state information for this asynchronous operation as well as any user defined data.</param>
      <returns>A <see cref="T:System.Net.Sockets.Socket"></see> object to handle communication with the remote host.</returns>
      <exception cref="T:System.NotSupportedException">Windows NT is required for this method.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> object has been closed.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is empty.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not created by a call to <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)"></see>.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)"></see> method was previously called.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket"></see>.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)">
      <summary>Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket"></see> to handle remote host communication.</summary>
      <param name="asyncResult"></param>
      <returns>A <see cref="T:System.Net.Sockets.Socket"></see> to handle communication with the remote host.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="result">result</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="result">result</paramref> was not created by a call to <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)"></see>.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)"></see> method was previously called.</exception>
      <exception cref="T:System.NotSupportedException">Windows NT is required for this method.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.IAsyncResult)">
      <summary>Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket"></see> object to handle remote host communication. This method returns a buffer that contains the initial data transferred.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that contains the bytes transferred.</param>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> object that stores state information for this asynchronous operation as well as any user defined data.</param>
      <returns>A <see cref="T:System.Net.Sockets.Socket"></see> object to handle communication with the remote host.</returns>
      <exception cref="T:System.NotSupportedException">Windows NT is required for this method.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> object has been closed.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is empty.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not created by a call to <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)"></see>.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)"></see> method was previously called.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket"></see></exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)">
      <summary>Ends a pending asynchronous connection request.</summary>
      <param name="asyncResult"></param>
      <exception cref="T:System.ArgumentNullException"><paramref name="result">result</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="result">result</paramref> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)"></see> method.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)"></see> was previously called for the asynchronous connection.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)">
      <summary>Ends a pending asynchronous disconnect request.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> object that stores state information and any user-defined data for this asynchronous operation.</param>
      <exception cref="T:System.NotSupportedException">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> object has been closed.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)"></see> method.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)"></see> was previously called for the asynchronous connection.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.Net.WebException">The disconnect request has timed out.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)">
      <summary>Ends a pending asynchronous read.</summary>
      <param name="asyncResult"></param>
      <returns>The number of bytes received.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="result">result</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="result">result</paramref> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"></see> method.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)"></see> was previously called for the asynchronous read.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult,System.Net.Sockets.SocketError@)">
      <summary>Ends a pending asynchronous read.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> that stores state information and any user defined data for this asynchronous operation.</param>
      <param name="errorCode">A <see cref="T:System.Net.Sockets.SocketError"></see> object that stores the socket error.</param>
      <returns>The number of bytes received.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"></see> method.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)"></see> was previously called for the asynchronous read.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)">
      <summary>Ends a pending asynchronous read from a specific endpoint.</summary>
      <param name="asyncResult"></param>
      <param name="endPoint"></param>
      <returns>If successful, the number of bytes received. If unsuccessful, returns 0.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)"></see> method.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)"></see> was previously called for the asynchronous read.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)">
      <summary>Ends a pending asynchronous read from a specific endpoint. This method also reveals more information about the packet than <see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)"></see>.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> that stores state information and any user defined data for this asynchronous operation.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values for the received packet.</param>
      <param name="endPoint">The source <see cref="T:System.Net.EndPoint"></see>.</param>
      <param name="ipPacketInformation">The <see cref="T:System.Net.IPAddress"></see> and interface of the received packet.</param>
      <returns>If successful, the number of bytes received. If unsuccessful, returns 0.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null -or-  <paramref name="endPoint">endPoint</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)"></see> method.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)"></see> was previously called for the asynchronous read.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)">
      <summary>Ends a pending asynchronous send.</summary>
      <param name="asyncResult"></param>
      <returns>If successful, the number of bytes sent to the <see cref="T:System.Net.Sockets.Socket"></see>; otherwise, an invalid <see cref="T:System.Net.Sockets.Socket"></see> error.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="result">result</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="result">result</paramref> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"></see> method.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)"></see> was previously called for the asynchronous send.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult,System.Net.Sockets.SocketError@)">
      <summary>Ends a pending asynchronous send.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> that stores state information for this asynchronous operation.</param>
      <param name="errorCode">A <see cref="T:System.Net.Sockets.SocketError"></see> object that stores the socket error.</param>
      <returns>If successful, the number of bytes sent to the <see cref="T:System.Net.Sockets.Socket"></see>; otherwise, an invalid <see cref="T:System.Net.Sockets.Socket"></see> error.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"></see> method.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)"></see> was previously called for the asynchronous send.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)">
      <summary>Ends a pending asynchronous send of a file.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> object that stores state information for this asynchronous operation.</param>
      <exception cref="T:System.NotSupportedException">Windows NT is required for this method.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> object has been closed.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is empty.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)"></see> method.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)"></see> was previously called for the asynchronous <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)"></see>.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See remarks section below.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)">
      <summary>Ends a pending asynchronous send to a specific location.</summary>
      <param name="asyncResult"></param>
      <returns>If successful, the number of bytes sent; otherwise, an invalid <see cref="T:System.Net.Sockets.Socket"></see> error.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="result">result</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="result">result</paramref> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)"></see> method.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)"></see> was previously called for the asynchronous send.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.ExclusiveAddressUse">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that specifies whether the <see cref="T:System.Net.Sockets.Socket"></see> allows only one process to bind to a port.</summary>
      <returns>true if the <see cref="T:System.Net.Sockets.Socket"></see> allows only one socket to bind to a specific port; otherwise, false. The default is true for Windows Server 2003 and Windows XP Service Pack 2, and false for all other versions.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)"></see> has been called for this <see cref="T:System.Net.Sockets.Socket"></see>.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Finalize">
      <summary>Frees resources used by the <see cref="T:System.Net.Sockets.Socket"></see> class.</summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
      <summary>Returns the value of the specified <see cref="T:System.Net.Sockets.Socket"></see> option in an array.</summary>
      <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"></see> values.</param>
      <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"></see> values.</param>
      <param name="optionLength">The length, in bytes, of the expected return value.</param>
      <returns>An array of type <see cref="T:System.Byte"></see> that contains the value of the socket option.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.   - or -   In .NET Compact Framework applications, the Windows CE default buffer space is set to 32768 bytes. You can change the per socket buffer space by calling <see cref="Overload:System.Net.Sockets.Socket.SetSocketOption"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
      <summary>Returns the specified <see cref="T:System.Net.Sockets.Socket"></see> option setting, represented as a byte array.</summary>
      <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"></see> values.</param>
      <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"></see> values.</param>
      <param name="optionValue">An array of type <see cref="T:System.Byte"></see> that is to receive the option setting.</param>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.   - or -   In .NET Compact Framework applications, the Windows CE default buffer space is set to 32768 bytes. You can change the per socket buffer space by calling <see cref="Overload:System.Net.Sockets.Socket.SetSocketOption"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)">
      <summary>Returns the value of a specified <see cref="T:System.Net.Sockets.Socket"></see> option, represented as an object.</summary>
      <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"></see> values.</param>
      <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"></see> values.</param>
      <returns>An object that represents the value of the option. When the <paramref name="optionName">optionName</paramref> parameter is set to <see cref="F:System.Net.Sockets.SocketOptionName.Linger"></see> the return value is an instance of the <see cref="T:System.Net.Sockets.LingerOption"></see> class. When <paramref name="optionName">optionName</paramref> is set to <see cref="F:System.Net.Sockets.SocketOptionName.AddMembership"></see> or <see cref="F:System.Net.Sockets.SocketOptionName.DropMembership"></see>, the return value is an instance of the <see cref="T:System.Net.Sockets.MulticastOption"></see> class. When <paramref name="optionName">optionName</paramref> is any other value, the return value is an integer.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.   -or-  <paramref name="optionName">optionName</paramref> was set to the unsupported value <see cref="F:System.Net.Sockets.SocketOptionName.MaxConnections"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.Handle">
      <summary>Gets the operating system handle for the <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <returns>An <see cref="T:System.IntPtr"></see> that represents the operating system handle for the <see cref="T:System.Net.Sockets.Socket"></see>.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])">
      <summary>Sets low-level operating modes for the <see cref="T:System.Net.Sockets.Socket"></see> using numerical control codes.</summary>
      <param name="ioControlCode">An <see cref="T:System.Int32"></see> value that specifies the control code of the operation to perform.</param>
      <param name="optionInValue">A <see cref="T:System.Byte"></see> array that contains the input data required by the operation.</param>
      <param name="optionOutValue">A <see cref="T:System.Byte"></see> array that contains the output data returned by the operation.</param>
      <returns>The number of bytes in the <paramref name="optionOutValue">optionOutValue</paramref> parameter.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt was made to change the blocking mode without using the <see cref="P:System.Net.Sockets.Socket.Blocking"></see> property.</exception>
      <exception cref="T:System.Security.SecurityException">A caller in the call stack does not have the required permissions.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])">
      <summary>Sets low-level operating modes for the <see cref="T:System.Net.Sockets.Socket"></see> using the <see cref="T:System.Net.Sockets.IOControlCode"></see> enumeration to specify control codes.</summary>
      <param name="ioControlCode">A <see cref="T:System.Net.Sockets.IOControlCode"></see> value that specifies the control code of the operation to perform.</param>
      <param name="optionInValue">An array of type <see cref="T:System.Byte"></see> that contains the input data required by the operation.</param>
      <param name="optionOutValue">An array of type <see cref="T:System.Byte"></see> that contains the output data returned by the operation.</param>
      <returns>The number of bytes in the <paramref name="optionOutValue">optionOutValue</paramref> parameter.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt was made to change the blocking mode without using the <see cref="P:System.Net.Sockets.Socket.Blocking"></see> property.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.IsBound">
      <summary>Gets a value that indicates whether the <see cref="T:System.Net.Sockets.Socket"></see> is bound to a specific local port.</summary>
      <returns>true if the <see cref="T:System.Net.Sockets.Socket"></see> is bound to a local port; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.LingerState">
      <summary>Gets or sets a value that specifies whether the <see cref="T:System.Net.Sockets.Socket"></see> will delay closing a socket in an attempt to send all pending data.</summary>
      <returns>A <see cref="T:System.Net.Sockets.LingerOption"></see> that specifies how to linger while closing a socket.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Listen(System.Int32)">
      <summary>Places a <see cref="T:System.Net.Sockets.Socket"></see> in a listening state.</summary>
      <param name="backlog">The maximum length of the pending connections queue.</param>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.LocalEndPoint">
      <summary>Gets the local endpoint.</summary>
      <returns>The <see cref="T:System.Net.EndPoint"></see> that the <see cref="T:System.Net.Sockets.Socket"></see> is using for communications.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.MulticastLoopback">
      <summary>Gets or sets a value that specifies whether outgoing multicast packets are delivered to the sending application.</summary>
      <returns>true if the <see cref="T:System.Net.Sockets.Socket"></see> receives outgoing multicast packets; otherwise, false.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.NoDelay">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that specifies whether the stream <see cref="T:System.Net.Sockets.Socket"></see> is using the Nagle algorithm.</summary>
      <returns>false if the <see cref="T:System.Net.Sockets.Socket"></see> uses the Nagle algorithm; otherwise, true. The default is false.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.OSSupportsIPv4">
      <summary>Indicates whether the underlying operating system and network adaptors support Internet Protocol version 4 (IPv4).</summary>
      <returns>true if the operating system and network adaptors support the IPv4 protocol; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.OSSupportsIPv6">
      <summary>Indicates whether the underlying operating system and network adaptors support Internet Protocol version 6 (IPv6).</summary>
      <returns>true if the operating system and network adaptors support the IPv6 protocol; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)">
      <summary>Determines the status of the <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <param name="microSeconds">The time to wait for a response, in microseconds.</param>
      <param name="mode">One of the <see cref="T:System.Net.Sockets.SelectMode"></see> values.</param>
      <returns><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="2"><p sourcefile="System.yml" sourcestartlinenumber="1" sourceendlinenumber="1">The status of the <xref href="System.Net.Sockets.Socket"></xref> based on the polling mode value passed in the <code data-dev-comment-type="paramref">mode</code> parameter.  </p>
 <table><thead><tr><th> Mode  <p>
<p sourcefile="System.yml" sourcestartlinenumber="4" sourceendlinenumber="4"> </th><th> Return Value  <p>
<p sourcefile="System.yml" sourcestartlinenumber="6" sourceendlinenumber="6"> </th></tr></thead><tbody><tr><td><xref href="System.Net.Sockets.SelectMode.SelectRead"></xref></td><td><code>true</code> if <xref href="System.Net.Sockets.Socket.Listen(System.Int32)"></xref> has been called and a connection is pending;  <p>
<p sourcefile="System.yml" sourcestartlinenumber="8" sourceendlinenumber="8"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="10" sourceendlinenumber="10"> <code>true</code> if data is available for reading;  </p>
<p sourcefile="System.yml" sourcestartlinenumber="12" sourceendlinenumber="12"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="14" sourceendlinenumber="14"> <code>true</code> if the connection has been closed, reset, or terminated;  </p>
<p sourcefile="System.yml" sourcestartlinenumber="16" sourceendlinenumber="16"> otherwise, returns <code>false</code>.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="18" sourceendlinenumber="18"> </td></tr><tr><td><xref href="System.Net.Sockets.SelectMode.SelectWrite"></xref></td><td><code>true</code>, if processing a <xref href="System.Net.Sockets.Socket.Connect(System.Net.EndPoint)"></xref>, and the connection has succeeded;  <p>
<p sourcefile="System.yml" sourcestartlinenumber="20" sourceendlinenumber="20"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="22" sourceendlinenumber="22"> <code>true</code> if data can be sent;  </p>
<p sourcefile="System.yml" sourcestartlinenumber="24" sourceendlinenumber="24"> otherwise, returns <code>false</code>.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="26" sourceendlinenumber="26"> </td></tr><tr><td><xref href="System.Net.Sockets.SelectMode.SelectError"></xref></td><td><code>true</code> if processing a <xref href="System.Net.Sockets.Socket.Connect(System.Net.EndPoint)"></xref> that does not block, and the connection has failed;  <p>
<p sourcefile="System.yml" sourcestartlinenumber="28" sourceendlinenumber="28"> -or-  </p>
<p sourcefile="System.yml" sourcestartlinenumber="30" sourceendlinenumber="30"> <code>true</code> if <xref href="System.Net.Sockets.SocketOptionName.OutOfBandInline"></xref> is not set and out-of-band data is available;  </p>
<p sourcefile="System.yml" sourcestartlinenumber="32" sourceendlinenumber="32"> otherwise, returns <code>false</code>.  </p>
<p sourcefile="System.yml" sourcestartlinenumber="34" sourceendlinenumber="34"> </td></tr></tbody></table></p>
</returns>
      <exception cref="T:System.NotSupportedException">The <paramref name="mode">mode</paramref> parameter is not one of the <see cref="T:System.Net.Sockets.SelectMode"></see> values.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See remarks below.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.ProtocolType">
      <summary>Gets the protocol type of the <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <returns>One of the <see cref="T:System.Net.Sockets.ProtocolType"></see> values.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
      <summary>Receives data from a bound <see cref="T:System.Net.Sockets.Socket"></see> into a receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see>.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that is the storage location for the received data.</param>
      <param name="offset">The position in the buffer parameter to store the received data.</param>
      <param name="size">The number of bytes to receive.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <param name="errorCode">A <see cref="T:System.Net.Sockets.SocketError"></see> object that stores the socket error.</param>
      <returns>The number of bytes received.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> is less than 0.   -or-  <paramref name="offset">offset</paramref> is greater than the length of <paramref name="buffer">buffer</paramref>.   -or-  <paramref name="size">size</paramref> is less than 0.   -or-  <paramref name="size">size</paramref> is greater than the length of <paramref name="buffer">buffer</paramref> minus the value of the <paramref name="offset">offset</paramref> parameter.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="socketFlags">socketFlags</paramref> is not a valid combination of values.   -or-   The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint"></see> property is not set.   -or-   An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller in the call stack does not have the required permissions.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>Receives the specified number of bytes from a bound <see cref="T:System.Net.Sockets.Socket"></see> into the specified offset position of the receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see>.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that is the storage location for received data.</param>
      <param name="offset">The location in buffer to store the received data.</param>
      <param name="size">The number of bytes to receive.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <returns>The number of bytes received.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> is less than 0.   -or-  <paramref name="offset">offset</paramref> is greater than the length of <paramref name="buffer">buffer</paramref>.   -or-  <paramref name="size">size</paramref> is less than 0.   -or-  <paramref name="size">size</paramref> is greater than the length of <paramref name="buffer">buffer</paramref> minus the value of the <paramref name="offset">offset</paramref> parameter.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="socketFlags">socketFlags</paramref> is not a valid combination of values.   -or-   The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint"></see> property was not set.   -or-   An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller in the call stack does not have the required permissions.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
      <summary>Receives data from a bound <see cref="T:System.Net.Sockets.Socket"></see> into the list of receive buffers, using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see>.</summary>
      <param name="buffers">A list of <see cref="T:System.ArraySegment`1"></see>s of type <see cref="T:System.Byte"></see> that contains the received data.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <param name="errorCode">A <see cref="T:System.Net.Sockets.SocketError"></see> object that stores the socket error.</param>
      <returns>The number of bytes received.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffers">buffers</paramref> is null.   -or-  <paramref name="buffers">buffers</paramref>.Count is zero.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred while attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>Receives the specified number of bytes of data from a bound <see cref="T:System.Net.Sockets.Socket"></see> into a receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see>.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that is the storage location for the received data.</param>
      <param name="size">The number of bytes to receive.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <returns>The number of bytes received.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size">size</paramref> exceeds the size of <paramref name="buffer">buffer</paramref>.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller in the call stack does not have the required permissions.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
      <summary>Receives data from a bound <see cref="T:System.Net.Sockets.Socket"></see> into the list of receive buffers.</summary>
      <param name="buffers">A list of <see cref="T:System.ArraySegment`1"></see>s of type <see cref="T:System.Byte"></see> that contains the received data.</param>
      <returns>The number of bytes received.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer">buffer</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred while attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)">
      <summary>Receives data from a bound <see cref="T:System.Net.Sockets.Socket"></see> into a receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see>.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that is the storage location for the received data.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <returns>The number of bytes received.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller in the call stack does not have the required permissions.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[])">
      <summary>Receives data from a bound <see cref="T:System.Net.Sockets.Socket"></see> into a receive buffer.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that is the storage location for the received data.</param>
      <returns>The number of bytes received.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller in the call stack does not have the required permissions.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)">
      <summary>Receives data from a bound <see cref="T:System.Net.Sockets.Socket"></see> into the list of receive buffers, using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see>.</summary>
      <param name="buffers">A list of <see cref="T:System.ArraySegment`1"></see>s of type <see cref="T:System.Byte"></see> that contains the received data.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <returns>The number of bytes received.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffers">buffers</paramref> is null.   -or-  <paramref name="buffers">buffers</paramref>.Count is zero.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred while attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Begins an asynchronous request to receive data from a connected <see cref="T:System.Net.Sockets.Socket"></see> object.</summary>
      <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"></see> object to use for this asynchronous socket operation.</param>
      <returns>Returns true if the I/O operation is pending. The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will be raised upon completion of the operation.   Returns false if the I/O operation completed synchronously. In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will not be raised and the <paramref name="e">e</paramref> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</returns>
      <exception cref="T:System.ArgumentException">An argument was invalid. The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer"></see> or <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList"></see> properties on the <paramref name="e">e</paramref> parameter must reference valid buffers. One or the other of these properties may be set, but not both at the same time.</exception>
      <exception cref="T:System.InvalidOperationException">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"></see> object specified in the <paramref name="e">e</paramref> parameter.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP or later is required for this method.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.ReceiveBufferSize">
      <summary>Gets or sets a value that specifies the size of the receive buffer of the <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <returns>An <see cref="T:System.Int32"></see> that contains the size, in bytes, of the receive buffer. The default is 8192.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than 0.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)">
      <summary>Receives a datagram into the data buffer and stores the endpoint.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that is the storage location for received data.</param>
      <param name="remoteEP">An <see cref="T:System.Net.EndPoint"></see>, passed by reference, that represents the remote server.</param>
      <returns>The number of bytes received.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.   -or-  <paramref name="remoteEP">remoteEP</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller in the call stack does not have the required permissions.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
      <summary>Receives a datagram into the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see>, and stores the endpoint.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that is the storage location for the received data.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <param name="remoteEP">An <see cref="T:System.Net.EndPoint"></see>, passed by reference, that represents the remote server.</param>
      <returns>The number of bytes received.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.   -or-  <paramref name="remoteEP">remoteEP</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller in the call stack does not have the required permissions.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
      <summary>Receives the specified number of bytes into the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see>, and stores the endpoint.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that is the storage location for received data.</param>
      <param name="size">The number of bytes to receive.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <param name="remoteEP">An <see cref="T:System.Net.EndPoint"></see>, passed by reference, that represents the remote server.</param>
      <returns>The number of bytes received.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.   -or-  <paramref name="remoteEP">remoteEP</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size">size</paramref> is less than 0.   -or-  <paramref name="size">size</paramref> is greater than the length of <paramref name="buffer">buffer</paramref>.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="socketFlags">socketFlags</paramref> is not a valid combination of values.   -or-   The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint"></see> property was not set.   -or-   An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller in the call stack does not have the required permissions.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
      <summary>Receives the specified number of bytes of data into the specified location of the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see>, and stores the endpoint.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that is the storage location for received data.</param>
      <param name="offset">The position in the buffer parameter to store the received data.</param>
      <param name="size">The number of bytes to receive.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <param name="remoteEP">An <see cref="T:System.Net.EndPoint"></see>, passed by reference, that represents the remote server.</param>
      <returns>The number of bytes received.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.   -or-  <paramref name="remoteEP">remoteEP</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> is less than 0.   -or-  <paramref name="offset">offset</paramref> is greater than the length of <paramref name="buffer">buffer</paramref>.   -or-  <paramref name="size">size</paramref> is less than 0.   -or-  <paramref name="size">size</paramref> is greater than the length of the <paramref name="buffer">buffer</paramref> minus the value of the offset parameter.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="socketFlags">socketFlags</paramref> is not a valid combination of values.   -or-   The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint"></see> property was not set.   -or-   An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Begins to asynchronously receive data from a specified network device.</summary>
      <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"></see> object to use for this asynchronous socket operation.</param>
      <returns>Returns true if the I/O operation is pending. The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will be raised upon completion of the operation.   Returns false if the I/O operation completed synchronously. In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will not be raised and the <paramref name="e">e</paramref> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint"></see> cannot be null.</exception>
      <exception cref="T:System.InvalidOperationException">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"></see> object specified in the <paramref name="e">e</paramref> parameter.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP or later is required for this method.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)">
      <summary>Receives the specified number of bytes of data into the specified location of the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see>, and stores the endpoint and packet information.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that is the storage location for received data.</param>
      <param name="offset">The position in the buffer parameter to store the received data.</param>
      <param name="size">The number of bytes to receive.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <param name="remoteEP">An <see cref="T:System.Net.EndPoint"></see>, passed by reference, that represents the remote server.</param>
      <param name="ipPacketInformation">An <see cref="T:System.Net.Sockets.IPPacketInformation"></see> holding address and interface information.</param>
      <returns>The number of bytes received.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.   - or-  <paramref name="remoteEP">remoteEP</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> is less than 0.   -or-  <paramref name="offset">offset</paramref> is greater than the length of <paramref name="buffer">buffer</paramref>.   -or-  <paramref name="size">size</paramref> is less than 0.   -or-  <paramref name="size">size</paramref> is greater than the length of the <paramref name="buffer">buffer</paramref> minus the value of the offset parameter.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="socketFlags">socketFlags</paramref> is not a valid combination of values.   -or-   The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint"></see> property was not set.   -or-   The .NET Framework is running on an AMD 64-bit processor.   -or-   An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.NotSupportedException">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Begins to asynchronously receive the specified number of bytes of data into the specified location in the data buffer, using the specified <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags"></see>, and stores the endpoint and packet information.</summary>
      <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"></see> object to use for this asynchronous socket operation.</param>
      <returns>Returns true if the I/O operation is pending. The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will be raised upon completion of the operation.   Returns false if the I/O operation completed synchronously. In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will not be raised and the <paramref name="e">e</paramref> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint"></see> cannot be null.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP or later is required for this method.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.ReceiveTimeout">
      <summary>Gets or sets a value that specifies the amount of time after which a synchronous <see cref="Overload:System.Net.Sockets.Socket.Receive"></see> call will time out.</summary>
      <returns>The time-out value, in milliseconds. The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than -1.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.RemoteEndPoint">
      <summary>Gets the remote endpoint.</summary>
      <returns>The <see cref="T:System.Net.EndPoint"></see> with which the <see cref="T:System.Net.Sockets.Socket"></see> is communicating.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary>Determines the status of one or more sockets.</summary>
      <param name="checkRead">An <see cref="T:System.Collections.IList"></see> of <see cref="T:System.Net.Sockets.Socket"></see> instances to check for readability.</param>
      <param name="checkWrite">An <see cref="T:System.Collections.IList"></see> of <see cref="T:System.Net.Sockets.Socket"></see> instances to check for writability.</param>
      <param name="checkError">An <see cref="T:System.Collections.IList"></see> of <see cref="T:System.Net.Sockets.Socket"></see> instances to check for errors.</param>
      <param name="microSeconds">The time-out value, in microseconds. A -1 value indicates an infinite time-out.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="checkRead">checkRead</paramref> parameter is null or empty.   -and-   The <paramref name="checkWrite">checkWrite</paramref> parameter is null or empty   -and-   The <paramref name="checkError">checkError</paramref> parameter is null or empty.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[])">
      <summary>Sends data to a connected <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that contains the data to be sent.</param>
      <returns>The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
      <summary>Sends the set of buffers in the list to a connected <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <param name="buffers">A list of <see cref="T:System.ArraySegment`1"></see>s of type <see cref="T:System.Byte"></see> that contains the data to be sent.</param>
      <returns>The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffers">buffers</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="buffers">buffers</paramref> is empty.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See remarks section below.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)">
      <summary>Sends data to a connected <see cref="T:System.Net.Sockets.Socket"></see> using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see>.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that contains the data to be sent.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <returns>The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)">
      <summary>Sends the set of buffers in the list to a connected <see cref="T:System.Net.Sockets.Socket"></see>, using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see>.</summary>
      <param name="buffers">A list of <see cref="T:System.ArraySegment`1"></see>s of type <see cref="T:System.Byte"></see> that contains the data to be sent.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <returns>The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffers">buffers</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="buffers">buffers</paramref> is empty.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>Sends the specified number of bytes of data to a connected <see cref="T:System.Net.Sockets.Socket"></see>, using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see>.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that contains the data to be sent.</param>
      <param name="size">The number of bytes to send.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <returns>The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size">size</paramref> is less than 0 or exceeds the size of the buffer.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="socketFlags">socketFlags</paramref> is not a valid combination of values.   -or-   An operating system error occurs while accessing the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
      <summary>Sends the set of buffers in the list to a connected <see cref="T:System.Net.Sockets.Socket"></see>, using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see>.</summary>
      <param name="buffers">A list of <see cref="T:System.ArraySegment`1"></see>s of type <see cref="T:System.Byte"></see> that contains the data to be sent.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <param name="errorCode">A <see cref="T:System.Net.Sockets.SocketError"></see> object that stores the socket error.</param>
      <returns>The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffers">buffers</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="buffers">buffers</paramref> is empty.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>Sends the specified number of bytes of data to a connected <see cref="T:System.Net.Sockets.Socket"></see>, starting at the specified offset, and using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see>.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that contains the data to be sent.</param>
      <param name="offset">The position in the data buffer at which to begin sending data.</param>
      <param name="size">The number of bytes to send.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <returns>The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> is less than 0.   -or-  <paramref name="offset">offset</paramref> is greater than the length of <paramref name="buffer">buffer</paramref>.   -or-  <paramref name="size">size</paramref> is less than 0.   -or-  <paramref name="size">size</paramref> is greater than the length of <paramref name="buffer">buffer</paramref> minus the value of the <paramref name="offset">offset</paramref> parameter.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="socketFlags">socketFlags</paramref> is not a valid combination of values.   -or-   An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
      <summary>Sends the specified number of bytes of data to a connected <see cref="T:System.Net.Sockets.Socket"></see>, starting at the specified offset, and using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see></summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that contains the data to be sent.</param>
      <param name="offset">The position in the data buffer at which to begin sending data.</param>
      <param name="size">The number of bytes to send.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <param name="errorCode">A <see cref="T:System.Net.Sockets.SocketError"></see> object that stores the socket error.</param>
      <returns>The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> is less than 0.   -or-  <paramref name="offset">offset</paramref> is greater than the length of <paramref name="buffer">buffer</paramref>.   -or-  <paramref name="size">size</paramref> is less than 0.   -or-  <paramref name="size">size</paramref> is greater than the length of <paramref name="buffer">buffer</paramref> minus the value of the <paramref name="offset">offset</paramref> parameter.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="socketFlags">socketFlags</paramref> is not a valid combination of values.   -or-   An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket"></see> object.</summary>
      <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"></see> object to use for this asynchronous socket operation.</param>
      <returns>Returns true if the I/O operation is pending. The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will be raised upon completion of the operation.   Returns false if the I/O operation completed synchronously. In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will not be raised and the <paramref name="e">e</paramref> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer"></see> or <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList"></see> properties on the <paramref name="e">e</paramref> parameter must reference valid buffers. One or the other of these properties may be set, but not both at the same time.</exception>
      <exception cref="T:System.InvalidOperationException">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"></see> object specified in the <paramref name="e">e</paramref> parameter.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP or later is required for this method.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">The <see cref="T:System.Net.Sockets.Socket"></see> is not yet connected or was not obtained via an <see cref="M:System.Net.Sockets.Socket.Accept"></see>, <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)"></see>,or <see cref="Overload:System.Net.Sockets.Socket.BeginAccept"></see>, method.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.SendBufferSize">
      <summary>Gets or sets a value that specifies the size of the send buffer of the <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <returns>An <see cref="T:System.Int32"></see> that contains the size, in bytes, of the send buffer. The default is 8192.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than 0.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendFile(System.String)">
      <summary>Sends the file <paramref name="fileName">fileName</paramref> to a connected <see cref="T:System.Net.Sockets.Socket"></see> object with the <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread"></see> transmit flag.</summary>
      <param name="fileName">A <see cref="T:System.String"></see> that contains the path and name of the file to be sent. This parameter can be null.</param>
      <exception cref="T:System.NotSupportedException">The socket is not connected to a remote host.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.Socket"></see> object is not in blocking mode and cannot accept this synchronous call.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file <paramref name="fileName">fileName</paramref> was not found.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions)">
      <summary>Sends the file <paramref name="fileName">fileName</paramref> and buffers of data to a connected <see cref="T:System.Net.Sockets.Socket"></see> object using the specified <see cref="T:System.Net.Sockets.TransmitFileOptions"></see> value.</summary>
      <param name="fileName">A <see cref="T:System.String"></see> that contains the path and name of the file to be sent. This parameter can be null.</param>
      <param name="preBuffer">A <see cref="T:System.Byte"></see> array that contains data to be sent before the file is sent. This parameter can be null.</param>
      <param name="postBuffer">A <see cref="T:System.Byte"></see> array that contains data to be sent after the file is sent. This parameter can be null.</param>
      <param name="flags">One or more of <see cref="T:System.Net.Sockets.TransmitFileOptions"></see> values.</param>
      <exception cref="T:System.NotSupportedException">The operating system is not Windows NT or later.   - or -   The socket is not connected to a remote host.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.Socket"></see> object is not in blocking mode and cannot accept this synchronous call.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file <paramref name="fileName">fileName</paramref> was not found.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Sends a collection of files or in memory data buffers asynchronously to a connected <see cref="T:System.Net.Sockets.Socket"></see> object.</summary>
      <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"></see> object to use for this asynchronous socket operation.</param>
      <returns>Returns true if the I/O operation is pending. The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will be raised upon completion of the operation.   Returns false if the I/O operation completed synchronously. In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will not be raised and the <paramref name="e">e</paramref> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</returns>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in the <see cref="P:System.Net.Sockets.SendPacketsElement.FilePath"></see> property was not found.</exception>
      <exception cref="T:System.InvalidOperationException">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"></see> object specified in the <paramref name="e">e</paramref> parameter.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP or later is required for this method. This exception also occurs if the <see cref="T:System.Net.Sockets.Socket"></see> is not connected to a remote host.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">A connectionless <see cref="T:System.Net.Sockets.Socket"></see> is being used and the file being sent exceeds the maximum packet size of the underlying transport.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.SendTimeout">
      <summary>Gets or sets a value that specifies the amount of time after which a synchronous <see cref="Overload:System.Net.Sockets.Socket.Send"></see> call will time out.</summary>
      <returns>The time-out value, in milliseconds. If you set the property with a value between 1 and 499, the value will be changed to 500. The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than -1.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)">
      <summary>Sends data to the specified endpoint.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that contains the data to be sent.</param>
      <param name="remoteEP">The <see cref="T:System.Net.EndPoint"></see> that represents the destination for the data.</param>
      <returns>The number of bytes sent.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.   -or-  <paramref name="remoteEP">remoteEP</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <summary>Sends data to a specific endpoint using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see>.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that contains the data to be sent.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <param name="remoteEP">The <see cref="T:System.Net.EndPoint"></see> that represents the destination location for the data.</param>
      <returns>The number of bytes sent.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.   -or-  <paramref name="remoteEP">remoteEP</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <summary>Sends the specified number of bytes of data to the specified endpoint using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see>.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that contains the data to be sent.</param>
      <param name="size">The number of bytes to send.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <param name="remoteEP">The <see cref="T:System.Net.EndPoint"></see> that represents the destination location for the data.</param>
      <returns>The number of bytes sent.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.   -or-  <paramref name="remoteEP">remoteEP</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="size">size</paramref> exceeds the size of <paramref name="buffer">buffer</paramref>.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <summary>Sends the specified number of bytes of data to the specified endpoint, starting at the specified location in the buffer, and using the specified <see cref="T:System.Net.Sockets.SocketFlags"></see>.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that contains the data to be sent.</param>
      <param name="offset">The position in the data buffer at which to begin sending data.</param>
      <param name="size">The number of bytes to send.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"></see> values.</param>
      <param name="remoteEP">The <see cref="T:System.Net.EndPoint"></see> that represents the destination location for the data.</param>
      <returns>The number of bytes sent.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.   -or-  <paramref name="remoteEP">remoteEP</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> is less than 0.   -or-  <paramref name="offset">offset</paramref> is greater than the length of <paramref name="buffer">buffer</paramref>.   -or-  <paramref name="size">size</paramref> is less than 0.   -or-  <paramref name="size">size</paramref> is greater than the length of <paramref name="buffer">buffer</paramref> minus the value of the <paramref name="offset">offset</paramref> parameter.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="socketFlags">socketFlags</paramref> is not a valid combination of values.   -or-   An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller in the call stack does not have the required permissions.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Sends data asynchronously to a specific remote host.</summary>
      <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"></see> object to use for this asynchronous socket operation.</param>
      <returns>Returns true if the I/O operation is pending. The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will be raised upon completion of the operation.   Returns false if the I/O operation completed synchronously. In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"></see> event on the <paramref name="e">e</paramref> parameter will not be raised and the <paramref name="e">e</paramref> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint"></see> cannot be null.</exception>
      <exception cref="T:System.InvalidOperationException">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"></see> object specified in the <paramref name="e">e</paramref> parameter.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP or later is required for this method.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">The protocol specified is connection-oriented, but the <see cref="T:System.Net.Sockets.Socket"></see> is not yet connected.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)">
      <summary>Set the IP protection level on a socket.</summary>
      <param name="level">The IP protection level to set on this socket.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="level">level</paramref> parameter cannot be <see cref="F:System.Net.Sockets.IPProtectionLevel.Unspecified"></see>. The IP protection level cannot be set to unspecified.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Net.Sockets.AddressFamily"></see> of the socket must be either <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"></see> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"></see>.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)">
      <summary>Sets the specified <see cref="T:System.Net.Sockets.Socket"></see> option to the specified <see cref="T:System.Boolean"></see> value.</summary>
      <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"></see> values.</param>
      <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"></see> values.</param>
      <param name="optionValue">The value of the option, represented as a <see cref="T:System.Boolean"></see>.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> object has been closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
      <summary>Sets the specified <see cref="T:System.Net.Sockets.Socket"></see> option to the specified value, represented as a byte array.</summary>
      <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"></see> values.</param>
      <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"></see> values.</param>
      <param name="optionValue">An array of type <see cref="T:System.Byte"></see> that represents the value of the option.</param>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
      <summary>Sets the specified <see cref="T:System.Net.Sockets.Socket"></see> option to the specified integer value.</summary>
      <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"></see> values.</param>
      <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"></see> values.</param>
      <param name="optionValue">A value of the option.</param>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)">
      <summary>Sets the specified <see cref="T:System.Net.Sockets.Socket"></see> option to the specified value, represented as an object.</summary>
      <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"></see> values.</param>
      <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"></see> values.</param>
      <param name="optionValue">A <see cref="T:System.Net.Sockets.LingerOption"></see> or <see cref="T:System.Net.Sockets.MulticastOption"></see> that contains the value of the option.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="optionValue">optionValue</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)">
      <summary>Disables sends and receives on a <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <param name="how">One of the <see cref="T:System.Net.Sockets.SocketShutdown"></see> values that specifies the operation that will no longer be allowed.</param>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.SocketType">
      <summary>Gets the type of the <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <returns>One of the <see cref="T:System.Net.Sockets.SocketType"></see> values.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.SupportsIPv4">
      <summary>Gets a value indicating whether IPv4 support is available and enabled on the current host.</summary>
      <returns>true if the current host supports the IPv4 protocol; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.SupportsIPv6">
      <summary>Gets a value that indicates whether the Framework supports IPv6 for certain obsolete <see cref="T:System.Net.Dns"></see> members.</summary>
      <returns>true if the Framework supports IPv6 for certain obsolete <see cref="T:System.Net.Dns"></see> methods; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.Ttl">
      <summary>Gets or sets a value that specifies the Time To Live (TTL) value of Internet Protocol (IP) packets sent by the <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <returns>The TTL value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The TTL value can't be set to a negative number.</exception>
      <exception cref="T:System.NotSupportedException">This property can be set only for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"></see> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"></see> families.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. This error is also returned when an attempt was made to set TTL to a value higher than 255.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.UseOnlyOverlappedIO">
      <summary>Specifies whether the socket should only use Overlapped I/O mode.</summary>
      <returns>true if the <see cref="T:System.Net.Sockets.Socket"></see> uses only overlapped I/O; otherwise, false. The default is false.</returns>
      <exception cref="T:System.InvalidOperationException">The socket has been bound to a completion port.</exception>
    </member>
    <member name="T:System.Net.Sockets.SocketAsyncEventArgs">
      
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.#ctor">
      
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket">
      <returns></returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer">
      <returns></returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList">
      <returns></returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.BytesTransferred">
      <returns></returns>
    </member>
    <member name="E:System.Net.Sockets.SocketAsyncEventArgs.Completed">
      <returns></returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError">
      <returns></returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.ConnectSocket">
      <returns></returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.Count">
      <returns></returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.DisconnectReuseSocket">
      <returns></returns>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.Dispose">
      
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.Finalize">
      
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.LastOperation">
      <returns></returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.Offset">
      <returns></returns>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)">
      <param name="e"></param>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.ReceiveMessageFromPacketInfo">
      <returns></returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint">
      <returns></returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements">
      <returns></returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags">
      <returns></returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsSendSize">
      <returns></returns>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Int32,System.Int32)">
      <param name="offset"></param>
      <param name="count"></param>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)">
      <param name="buffer"></param>
      <param name="offset"></param>
      <param name="count"></param>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SocketClientAccessPolicyProtocol">
      <returns></returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SocketError">
      <returns></returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags">
      <returns></returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken">
      <returns></returns>
    </member>
    <member name="T:System.Net.Sockets.SocketAsyncOperation">
      <summary>The type of asynchronous socket operation most recently performed with this context object.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Accept">
      <summary>A socket Accept operation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Connect">
      <summary>A socket Connect operation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Disconnect">
      <summary>A socket Disconnect operation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.None">
      <summary>None of the socket operations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Receive">
      <summary>A socket Receive operation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.ReceiveFrom">
      <summary>A socket ReceiveFrom operation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.ReceiveMessageFrom">
      <summary>A socket ReceiveMessageFrom operation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Send">
      <summary>A socket Send operation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.SendPackets">
      <summary>A socket SendPackets operation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.SendTo">
      <summary>A socket SendTo operation.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Sockets.SocketError">
      <summary>Defines error codes for the <see cref="T:System.Net.Sockets.Socket"></see> class.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AccessDenied">
      <summary>An attempt was made to access a <see cref="T:System.Net.Sockets.Socket"></see> in a way that is forbidden by its access permissions.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AddressAlreadyInUse">
      <summary>Only one use of an address is normally permitted.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AddressFamilyNotSupported">
      <summary>The address family specified is not supported. This error is returned if the IPv6 address family was specified and the IPv6 stack is not installed on the local machine. This error is returned if the IPv4 address family was specified and the IPv4 stack is not installed on the local machine.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AddressNotAvailable">
      <summary>The selected IP address is not valid in this context.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AlreadyInProgress">
      <summary>The nonblocking <see cref="T:System.Net.Sockets.Socket"></see> already has an operation in progress.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ConnectionAborted">
      <summary>The connection was aborted by the .NET Framework or the underlying socket provider.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ConnectionRefused">
      <summary>The remote host is actively refusing a connection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ConnectionReset">
      <summary>The connection was reset by the remote peer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.DestinationAddressRequired">
      <summary>A required address was omitted from an operation on a <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Disconnecting">
      <summary>A graceful shutdown is in progress.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Fault">
      <summary>An invalid pointer address was detected by the underlying socket provider.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.HostDown">
      <summary>The operation failed because the remote host is down.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.HostNotFound">
      <summary>No such host is known. The name is not an official host name or alias.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.HostUnreachable">
      <summary>There is no network route to the specified host.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.InProgress">
      <summary>A blocking operation is in progress.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Interrupted">
      <summary>A blocking <see cref="T:System.Net.Sockets.Socket"></see> call was canceled.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.InvalidArgument">
      <summary>An invalid argument was supplied to a <see cref="T:System.Net.Sockets.Socket"></see> member.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.IOPending">
      <summary>The application has initiated an overlapped operation that cannot be completed immediately.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.IsConnected">
      <summary>The <see cref="T:System.Net.Sockets.Socket"></see> is already connected.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.MessageSize">
      <summary>The datagram is too long.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NetworkDown">
      <summary>The network is not available.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NetworkReset">
      <summary>The application tried to set <see cref="F:System.Net.Sockets.SocketOptionName.KeepAlive"></see> on a connection that has already timed out.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NetworkUnreachable">
      <summary>No route to the remote host exists.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NoBufferSpaceAvailable">
      <summary>No free buffer space is available for a <see cref="T:System.Net.Sockets.Socket"></see> operation.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NoData">
      <summary>The requested name or IP address was not found on the name server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NoRecovery">
      <summary>The error is unrecoverable or the requested database cannot be located.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NotConnected">
      <summary>The application tried to send or receive data, and the <see cref="T:System.Net.Sockets.Socket"></see> is not connected.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NotInitialized">
      <summary>The underlying socket provider has not been initialized.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NotSocket">
      <summary>A <see cref="T:System.Net.Sockets.Socket"></see> operation was attempted on a non-socket.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.OperationAborted">
      <summary>The overlapped operation was aborted due to the closure of the <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.OperationNotSupported">
      <summary>The address family is not supported by the protocol family.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProcessLimit">
      <summary>Too many processes are using the underlying socket provider.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolFamilyNotSupported">
      <summary>The protocol family is not implemented or has not been configured.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolNotSupported">
      <summary>The protocol is not implemented or has not been configured.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolOption">
      <summary>An unknown, invalid, or unsupported option or level was used with a <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolType">
      <summary>The protocol type is incorrect for this <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Shutdown">
      <summary>A request to send or receive data was disallowed because the <see cref="T:System.Net.Sockets.Socket"></see> has already been closed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.SocketError">
      <summary>An unspecified <see cref="T:System.Net.Sockets.Socket"></see> error has occurred.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.SocketNotSupported">
      <summary>The support for the specified socket type does not exist in this address family.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Success">
      <summary>The <see cref="T:System.Net.Sockets.Socket"></see> operation succeeded.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.SystemNotReady">
      <summary>The network subsystem is unavailable.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TimedOut">
      <summary>The connection attempt timed out, or the connected host has failed to respond.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TooManyOpenSockets">
      <summary>There are too many open sockets in the underlying socket provider.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TryAgain">
      <summary>The name of the host could not be resolved. Try again later.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TypeNotFound">
      <summary>The specified class was not found.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.VersionNotSupported">
      <summary>The version of the underlying socket provider is out of range.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketError.WouldBlock">
      <summary>An operation on a nonblocking socket cannot be completed immediately.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Sockets.SocketException">
      <summary>The exception that is thrown when a socket error occurs.</summary>
    </member>
    <member name="M:System.Net.Sockets.SocketException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.SocketException"></see> class with the last operating system error code.</summary>
    </member>
    <member name="M:System.Net.Sockets.SocketException.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.SocketException"></see> class with the specified error code.</summary>
      <param name="errorCode">The error code that indicates the error that occurred.</param>
    </member>
    <member name="M:System.Net.Sockets.SocketException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.SocketException"></see> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> classes.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance that contains the information that is required to serialize the new <see cref="T:System.Net.Sockets.SocketException"></see> instance.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains the source of the serialized stream that is associated with the new <see cref="T:System.Net.Sockets.SocketException"></see> instance.</param>
    </member>
    <member name="P:System.Net.Sockets.SocketException.ErrorCode">
      <summary>Gets the error code that is associated with this exception.</summary>
      <returns>An integer error code that is associated with this exception.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketException.Message">
      <summary>Gets the error message that is associated with this exception.</summary>
      <returns>A string that contains the error message.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketException.SocketErrorCode">
      <summary>Gets the error code that is associated with this exception.</summary>
      <returns>An integer error code that is associated with this exception.</returns>
    </member>
    <member name="T:System.Net.Sockets.SocketFlags">
      <summary>Specifies socket send and receive behaviors.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Broadcast">
      <summary>Indicates a broadcast packet.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.ControlDataTruncated">
      <summary>Indicates that the control data did not fit into an internal 64-KB buffer and was truncated.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.DontRoute">
      <summary>Send without using routing tables.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.MaxIOVectorLength">
      <summary>Provides a standard value for the number of WSABUF structures that are used to send and receive data. This value is not used or supported on .NET Framework 4.5.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Multicast">
      <summary>Indicates a multicast packet.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.None">
      <summary>Use no flags for this call.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.OutOfBand">
      <summary>Process out-of-band data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Partial">
      <summary>Partial send or receive for message.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Peek">
      <summary>Peek at the incoming message.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Truncated">
      <summary>The message was too large to fit into the specified buffer and was truncated.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Sockets.SocketInformation">
      <summary>Encapsulates the information that is necessary to duplicate a <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
    </member>
    <member name="P:System.Net.Sockets.SocketInformation.Options">
      <summary>Gets or sets the options for a <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <returns>A <see cref="T:System.Net.Sockets.SocketInformationOptions"></see> instance.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketInformation.ProtocolInformation">
      <summary>Gets or sets the protocol information for a <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <returns>An array of type <see cref="T:System.Byte"></see>.</returns>
    </member>
    <member name="T:System.Net.Sockets.SocketInformationOptions">
      <summary>Describes states for a <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketInformationOptions.Connected">
      <summary>The <see cref="T:System.Net.Sockets.Socket"></see> is connected.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketInformationOptions.Listening">
      <summary>The <see cref="T:System.Net.Sockets.Socket"></see> is listening for new connections.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketInformationOptions.NonBlocking">
      <summary>The <see cref="T:System.Net.Sockets.Socket"></see> is nonblocking.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketInformationOptions.UseOnlyOverlappedIO">
      <summary>The <see cref="T:System.Net.Sockets.Socket"></see> uses overlapped I/O.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Sockets.SocketOptionLevel">
      <summary>Defines socket option levels for the <see cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)"></see> and <see cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)"></see> methods.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.IP">
      <summary><see cref="T:System.Net.Sockets.Socket"></see> options apply only to IP sockets.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.IPv6">
      <summary><see cref="T:System.Net.Sockets.Socket"></see> options apply only to IPv6 sockets.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.Socket">
      <summary><see cref="T:System.Net.Sockets.Socket"></see> options apply to all sockets.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.Tcp">
      <summary><see cref="T:System.Net.Sockets.Socket"></see> options apply only to TCP sockets.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.Udp">
      <summary><see cref="T:System.Net.Sockets.Socket"></see> options apply only to UDP sockets.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Sockets.SocketOptionName">
      <summary>Defines configuration option names.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.AcceptConnection">
      <summary>The socket is listening.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.AddMembership">
      <summary>Add an IP group membership.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.AddSourceMembership">
      <summary>Join a source group.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.BlockSource">
      <summary>Block data from a source.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Broadcast">
      <summary>Permit sending broadcast messages on the socket.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.BsdUrgent">
      <summary>Use urgent data as defined in RFC-1222. This option can be set only once; after it is set, it cannot be turned off.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ChecksumCoverage">
      <summary>Set or get the UDP checksum coverage.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Debug">
      <summary>Record debugging information.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DontFragment">
      <summary>Do not fragment IP datagrams.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DontLinger">
      <summary>Close the socket gracefully without lingering.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DontRoute">
      <summary>Do not route; send the packet directly to the interface addresses.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DropMembership">
      <summary>Drop an IP group membership.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DropSourceMembership">
      <summary>Drop a source group.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Error">
      <summary>Get the error status and clear.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ExclusiveAddressUse">
      <summary>Enables a socket to be bound for exclusive access.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Expedited">
      <summary>Use expedited data as defined in RFC-1222. This option can be set only once; after it is set, it cannot be turned off.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.HeaderIncluded">
      <summary>Indicates that the application provides the IP header for outgoing datagrams.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.HopLimit">
      <summary>Specifies the maximum number of router hops for an Internet Protocol version 6 (IPv6) packet. This is similar to Time to Live (TTL) for Internet Protocol version 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.IPOptions">
      <summary>Specifies the IP options to be inserted into outgoing datagrams.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel">
      <summary>Enables restriction of a IPv6 socket to a specified scope, such as addresses with the same link local or site local prefix.This socket option enables applications to place access restrictions on IPv6 sockets. Such restrictions enable an application running on a private LAN to simply and robustly harden itself against external attacks. This socket option widens or narrows the scope of a listening socket, enabling unrestricted access from public and private users when appropriate, or restricting access only to the same site, as required. This socket option has defined protection levels specified in the <see cref="T:System.Net.Sockets.IPProtectionLevel"></see> enumeration.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.IpTimeToLive">
      <summary>Set the IP header Time-to-Live field.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.IPv6Only">
      <summary>Indicates if a socket created for the AF_INET6 address family is restricted to IPv6 communications only. Sockets created for the AF_INET6 address family may be used for both IPv6 and IPv4 communications. Some applications may want to restrict their use of a socket created for the AF_INET6 address family to IPv6 communications only. When this value is non-zero (the default on Windows), a socket created for the AF_INET6 address family can be used to send and receive IPv6 packets only. When this value is zero, a socket created for the AF_INET6 address family can be used to send and receive packets to and from an IPv6 address or an IPv4 address. Note that the ability to interact with an IPv4 address requires the use of IPv4 mapped addresses. This socket option is supported on Windows Vista or later.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.KeepAlive">
      <summary>Use keep-alives.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Linger">
      <summary>Linger on close if unsent data is present.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MaxConnections">
      <summary>Not supported; will throw a <see cref="T:System.Net.Sockets.SocketException"></see> if used.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MulticastInterface">
      <summary>Set the interface for outgoing multicast packets.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MulticastLoopback">
      <summary>An IP multicast loopback.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MulticastTimeToLive">
      <summary>An IP multicast Time to Live.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.NoChecksum">
      <summary>Send UDP datagrams with checksum set to zero.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.NoDelay">
      <summary>Disables the Nagle algorithm for send coalescing.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.OutOfBandInline">
      <summary>Receives out-of-band data in the normal data stream.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.PacketInformation">
      <summary>Return information about received packets.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReceiveBuffer">
      <summary>Specifies the total per-socket buffer space reserved for receives. This is unrelated to the maximum message size or the size of a TCP window.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReceiveLowWater">
      <summary>Specifies the low water mark for <see cref="Overload:System.Net.Sockets.Socket.Receive"></see> operations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReceiveTimeout">
      <summary>Receive a time-out. This option applies only to synchronous methods; it has no effect on asynchronous methods such as the <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReuseAddress">
      <summary>Allows the socket to be bound to an address that is already in use.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReuseUnicastPort">
      <summary>Indicates that the system should defer ephemeral port allocation for outbound connections. This is equivalent to using the Winsock2 SO_REUSE_UNICASTPORT socket option.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.SendBuffer">
      <summary>Specifies the total per-socket buffer space reserved for sends. This is unrelated to the maximum message size or the size of a TCP window.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.SendLowWater">
      <summary>Specifies the low water mark for <see cref="Overload:System.Net.Sockets.Socket.Send"></see> operations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.SendTimeout">
      <summary>Send a time-out. This option applies only to synchronous methods; it has no effect on asynchronous methods such as the <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Type">
      <summary>Get the socket type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.TypeOfService">
      <summary>Change the IP header type of the service field.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.UnblockSource">
      <summary>Unblock a previously blocked source.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.UpdateAcceptContext">
      <summary>Updates an accepted socket's properties by using those of an existing socket. This is equivalent to using the Winsock2 SO_UPDATE_ACCEPT_CONTEXT socket option and is supported only on connection-oriented sockets.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.UpdateConnectContext">
      <summary>Updates a connected socket's properties by using those of an existing socket. This is equivalent to using the Winsock2 SO_UPDATE_CONNECT_CONTEXT socket option and is supported only on connection-oriented sockets.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.UseLoopback">
      <summary>Bypass hardware when possible.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Sockets.SocketReceiveFromResult">
      
    </member>
    <member name="F:System.Net.Sockets.SocketReceiveFromResult.ReceivedBytes">
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketReceiveFromResult.RemoteEndPoint">
      <returns></returns>
    </member>
    <member name="T:System.Net.Sockets.SocketReceiveMessageFromResult">
      
    </member>
    <member name="F:System.Net.Sockets.SocketReceiveMessageFromResult.PacketInformation">
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketReceiveMessageFromResult.ReceivedBytes">
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketReceiveMessageFromResult.RemoteEndPoint">
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketReceiveMessageFromResult.SocketFlags">
      <returns></returns>
    </member>
    <member name="T:System.Net.Sockets.SocketShutdown">
      <summary>Defines constants that are used by the <see cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)"></see> method.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Both">
      <summary>Disables a <see cref="T:System.Net.Sockets.Socket"></see> for both sending and receiving. This field is constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Receive">
      <summary>Disables a <see cref="T:System.Net.Sockets.Socket"></see> for receiving. This field is constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Send">
      <summary>Disables a <see cref="T:System.Net.Sockets.Socket"></see> for sending. This field is constant.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Sockets.SocketTaskExtensions">
      
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket)">
      <param name="socket"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket,System.Net.Sockets.Socket)">
      <param name="socket"></param>
      <param name="acceptSocket"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.EndPoint)">
      <param name="socket"></param>
      <param name="remoteEP"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress,System.Int32)">
      <param name="socket"></param>
      <param name="address"></param>
      <param name="port"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress[],System.Int32)">
      <param name="socket"></param>
      <param name="addresses"></param>
      <param name="port"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.String,System.Int32)">
      <param name="socket"></param>
      <param name="host"></param>
      <param name="port"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)">
      <param name="socket"></param>
      <param name="buffer"></param>
      <param name="socketFlags"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)">
      <param name="socket"></param>
      <param name="buffers"></param>
      <param name="socketFlags"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <param name="socket"></param>
      <param name="buffer"></param>
      <param name="socketFlags"></param>
      <param name="remoteEndPoint"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <param name="socket"></param>
      <param name="buffer"></param>
      <param name="socketFlags"></param>
      <param name="remoteEndPoint"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)">
      <param name="socket"></param>
      <param name="buffer"></param>
      <param name="socketFlags"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)">
      <param name="socket"></param>
      <param name="buffers"></param>
      <param name="socketFlags"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <param name="socket"></param>
      <param name="buffer"></param>
      <param name="socketFlags"></param>
      <param name="remoteEP"></param>
      <returns></returns>
    </member>
    <member name="T:System.Net.Sockets.SocketType">
      <summary>Specifies the type of socket that an instance of the <see cref="T:System.Net.Sockets.Socket"></see> class represents.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Dgram">
      <summary>Supports datagrams, which are connectionless, unreliable messages of a fixed (typically small) maximum length. Messages might be lost or duplicated and might arrive out of order. A <see cref="T:System.Net.Sockets.Socket"></see> of type <see cref="F:System.Net.Sockets.SocketType.Dgram"></see> requires no connection prior to sending and receiving data, and can communicate with multiple peers. <see cref="F:System.Net.Sockets.SocketType.Dgram"></see> uses the Datagram Protocol (<see cref="F:System.Net.Sockets.ProtocolType.Udp"></see>) and the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"></see><see cref="T:System.Net.Sockets.AddressFamily"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Raw">
      <summary>Supports access to the underlying transport protocol. Using the <see cref="T:System.Net.Sockets.SocketType"></see><see cref="F:System.Net.Sockets.SocketType.Raw"></see>, you can communicate using protocols like Internet Control Message Protocol (<see cref="F:System.Net.Sockets.ProtocolType.Icmp"></see>) and Internet Group Management Protocol (<see cref="F:System.Net.Sockets.ProtocolType.Igmp"></see>). Your application must provide a complete IP header when sending. Received datagrams return with the IP header and options intact.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Rdm">
      <summary>Supports connectionless, message-oriented, reliably delivered messages, and preserves message boundaries in data. Rdm (Reliably Delivered Messages) messages arrive unduplicated and in order. Furthermore, the sender is notified if messages are lost. If you initialize a Socket using <see cref="F:System.Net.Sockets.SocketType.Rdm"></see>, you do not require a remote host connection before sending and receiving data. With <see cref="F:System.Net.Sockets.SocketType.Rdm"></see>, you can communicate with multiple peers.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Seqpacket">
      <summary>Provides connection-oriented and reliable two-way transfer of ordered byte streams across a network. <see cref="F:System.Net.Sockets.SocketType.Seqpacket"></see> does not duplicate data, and it preserves boundaries within the data stream. A Socket of type <see cref="F:System.Net.Sockets.SocketType.Seqpacket"></see> communicates with a single peer and requires a remote host connection before communication can begin.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Stream">
      <summary>Supports reliable, two-way, connection-based byte streams without the duplication of data and without preservation of boundaries. A Socket of this type communicates with a single peer and requires a remote host connection before communication can begin. <see cref="F:System.Net.Sockets.SocketType.Stream"></see> uses the Transmission Control Protocol (<see cref="F:System.Net.Sockets.ProtocolType.Tcp"></see>) <see cref="T:System.Net.Sockets.ProtocolType"></see> and the InterNetwork<see cref="T:System.Net.Sockets.AddressFamily"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Unknown">
      <summary>Specifies an unknown Socket type.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Sockets.TcpClient">
      <summary>Provides client connections for TCP network services.</summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient"></see> class.</summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.#ctor(System.Net.IPEndPoint)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient"></see> class and binds it to the specified local endpoint.</summary>
      <param name="localEP">The <see cref="T:System.Net.IPEndPoint"></see> to which you bind the TCP <see cref="T:System.Net.Sockets.Socket"></see>.</param>
      <exception cref="T:System.ArgumentNullException">The  <paramref name="localEP">localEP</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient"></see> class with the specified family.</summary>
      <param name="family">The <see cref="P:System.Net.IPAddress.AddressFamily"></see> of the IP protocol.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="family">family</paramref> parameter is not equal to AddressFamily.InterNetwork   -or-   The <paramref name="family">family</paramref> parameter is not equal to AddressFamily.InterNetworkV6</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient"></see> class and connects to the specified port on the specified host.</summary>
      <param name="hostname">The DNS name of the remote host to which you intend to connect.</param>
      <param name="port">The port number of the remote host to which you intend to connect.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="hostname">hostname</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="port">port</paramref> parameter is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.Active">
      <summary>Gets or set a value that indicates whether a connection has been made.</summary>
      <returns>true if the connection has been made; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.Available">
      <summary>Gets the amount of data that has been received from the network and is available to be read.</summary>
      <returns>The number of bytes of data received from the network and available to be read.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by an <see cref="T:System.Net.IPAddress"></see> and a port number (<see cref="T:System.Int32"></see>).</summary>
      <param name="address">The <see cref="T:System.Net.IPAddress"></see> of the remote host.</param>
      <param name="port">The port number of the remote host.</param>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the connect operation. This object is passed to the requestCallback delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object that references the asynchronous connection.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by an <see cref="T:System.Net.IPAddress"></see> array and a port number (<see cref="T:System.Int32"></see>).</summary>
      <param name="addresses">At least one <see cref="T:System.Net.IPAddress"></see> that designates the remote hosts.</param>
      <param name="port">The port number of the remote hosts.</param>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the connect operation. This object is passed to the requestCallback delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object that references the asynchronous connection.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="addresses">addresses</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<see cref="T:System.String"></see>) and a port number (<see cref="T:System.Int32"></see>).</summary>
      <param name="host">The name of the remote host.</param>
      <param name="port">The port number of the remote host.</param>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the connect operation. This object is passed to the requestCallback delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object that references the asynchronous connection.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="host">host</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.Client">
      <summary>Gets or sets the underlying <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <returns>The underlying network <see cref="T:System.Net.Sockets.Socket"></see>.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Close">
      <summary>Disposes this <see cref="T:System.Net.Sockets.TcpClient"></see> instance and requests that the underlying TCP connection be closed.</summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPEndPoint)">
      <summary>Connects the client to a remote TCP host using the specified remote network endpoint.</summary>
      <param name="remoteEP">The <see cref="T:System.Net.IPEndPoint"></see> to which you intend to connect.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="remoteEp">remoteEp</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.TcpClient"></see> is closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress,System.Int32)">
      <summary>Connects the client to a remote TCP host using the specified IP address and port number.</summary>
      <param name="address">The <see cref="T:System.Net.IPAddress"></see> of the host to which you intend to connect.</param>
      <param name="port">The port number to which you intend to connect.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="port">port</paramref> is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
      <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.TcpClient"></see> is closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress[],System.Int32)">
      <summary>Connects the client to a remote TCP host using the specified IP addresses and port number.</summary>
      <param name="ipAddresses">The <see cref="T:System.Net.IPAddress"></see> array of the host to which you intend to connect.</param>
      <param name="port">The port number to which you intend to connect.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="ipAddresses">ipAddresses</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation.</exception>
      <exception cref="T:System.NotSupportedException">This method is valid for sockets that use the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"></see> flag or the <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"></see> flag.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)">
      <summary>Connects the client to the specified port on the specified host.</summary>
      <param name="hostname">The DNS name of the remote host to which you intend to connect.</param>
      <param name="port">The port number of the remote host to which you intend to connect.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="hostname">hostname</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="port">port</paramref> parameter is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
      <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.TcpClient"></see> is closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32)">
      <summary>Connects the client to the specified TCP port on the specified host as an asynchronous operation.</summary>
      <param name="host">The DNS name of the remote host to which you intend to connect.</param>
      <param name="port">The port number of the remote host to which you intend to connect.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see> The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="hostname">hostname</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="port">port</paramref> parameter is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
      <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.TcpClient"></see> is closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32)">
      <summary>Connects the client to a remote TCP host using the specified IP address and port number as an asynchronous operation.</summary>
      <param name="address">The <see cref="T:System.Net.IPAddress"></see> of the host to which you intend to connect.</param>
      <param name="port">The port number to which you intend to connect.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see> The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="port">port</paramref> is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
      <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.TcpClient"></see> is closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32)">
      <summary>Connects the client to a remote TCP host using the specified IP addresses and port number as an asynchronous operation.</summary>
      <param name="addresses">The <see cref="T:System.Net.IPAddress"></see> array of the host to which you intend to connect.</param>
      <param name="port">The port number to which you intend to connect.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see> The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="ipAddresses">ipAddresses</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation.</exception>
      <exception cref="T:System.NotSupportedException">This method is valid for sockets that use the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"></see> flag or the <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"></see> flag.</exception>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.Connected">
      <summary>Gets a value indicating whether the underlying <see cref="T:System.Net.Sockets.Socket"></see> for a <see cref="T:System.Net.Sockets.TcpClient"></see> is connected to a remote host.</summary>
      <returns>true if the <see cref="P:System.Net.Sockets.TcpClient.Client"></see> socket was connected to a remote resource as of the most recent operation; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Dispose">
      <summary>Releases the managed and unmanaged resources used by the <see cref="T:System.Net.Sockets.TcpClient"></see>.</summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.TcpClient"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">Set to true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)">
      <summary>Ends a pending asynchronous connection attempt.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> object returned by a call to <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect"></see>.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="asyncResult">asyncResult</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="asyncResult">asyncResult</paramref> parameter was not returned by a call to a <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect"></see> method.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)"></see> method was previously called for the asynchronous connection.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.ExclusiveAddressUse">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that specifies whether the <see cref="T:System.Net.Sockets.TcpClient"></see> allows only one client to use a port.</summary>
      <returns>true if the <see cref="T:System.Net.Sockets.TcpClient"></see> allows only one client to use a specific port; otherwise, false. The default is true for Windows Server 2003 and Windows XP Service Pack 2 and later, and false for all other versions.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the underlying socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Finalize">
      <summary>Frees resources used by the <see cref="T:System.Net.Sockets.TcpClient"></see> class.</summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.GetStream">
      <summary>Returns the <see cref="T:System.Net.Sockets.NetworkStream"></see> used to send and receive data.</summary>
      <returns>The underlying <see cref="T:System.Net.Sockets.NetworkStream"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.TcpClient"></see> is not connected to a remote host.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.TcpClient"></see> has been closed.</exception>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.LingerState">
      <summary>Gets or sets information about the linger state of the associated socket.</summary>
      <returns>A <see cref="T:System.Net.Sockets.LingerOption"></see>. By default, lingering is disabled.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.NoDelay">
      <summary>Gets or sets a value that disables a delay when send or receive buffers are not full.</summary>
      <returns>true if the delay is disabled, otherwise false. The default value is false.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.ReceiveBufferSize">
      <summary>Gets or sets the size of the receive buffer.</summary>
      <returns>The size of the receive buffer, in bytes. The default value is 8192 bytes.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when setting the buffer size.   -or-   In .NET Compact Framework applications, you cannot set this property. For a workaround, see the Platform Note in Remarks.</exception>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.ReceiveTimeout">
      <summary>Gets or sets the amount of time a <see cref="T:System.Net.Sockets.TcpClient"></see> will wait to receive data once a read operation is initiated.</summary>
      <returns>The time-out value of the connection in milliseconds. The default value is 0.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.SendBufferSize">
      <summary>Gets or sets the size of the send buffer.</summary>
      <returns>The size of the send buffer, in bytes. The default value is 8192 bytes.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.SendTimeout">
      <summary>Gets or sets the amount of time a <see cref="T:System.Net.Sockets.TcpClient"></see> will wait for a send operation to complete successfully.</summary>
      <returns>The send time-out value, in milliseconds. The default is 0.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.System#IDisposable#Dispose">
      
    </member>
    <member name="T:System.Net.Sockets.TcpListener">
      <summary>Listens for connections from TCP network clients.</summary>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener"></see> class that listens on the specified port.</summary>
      <param name="port">The port on which to listen for incoming connection attempts.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port">port</paramref> is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener"></see> class with the specified local endpoint.</summary>
      <param name="localEP">An <see cref="T:System.Net.IPEndPoint"></see> that represents the local endpoint to which to bind the listener <see cref="T:System.Net.Sockets.Socket"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="localEP">localEP</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener"></see> class that listens for incoming connection attempts on the specified local IP address and port number.</summary>
      <param name="localaddr">An <see cref="T:System.Net.IPAddress"></see> that represents the local IP address.</param>
      <param name="port">The port on which to listen for incoming connection attempts.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="localaddr">localaddr</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port">port</paramref> is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.AcceptSocket">
      <summary>Accepts a pending connection request.</summary>
      <returns>A <see cref="T:System.Net.Sockets.Socket"></see> used to send and receive data.</returns>
      <exception cref="T:System.InvalidOperationException">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start"></see>.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
      <summary>Accepts a pending connection request as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see> The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.Net.Sockets.Socket"></see> used to send and receive data.</returns>
      <exception cref="T:System.InvalidOperationException">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start"></see>.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
      <summary>Accepts a pending connection request.</summary>
      <returns>A <see cref="T:System.Net.Sockets.TcpClient"></see> used to send and receive data.</returns>
      <exception cref="T:System.InvalidOperationException">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start"></see>.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode"></see> property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
      <summary>Accepts a pending connection request as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see> The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.Net.Sockets.TcpClient"></see> used to send and receive data.</returns>
      <exception cref="T:System.InvalidOperationException">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start"></see>.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode"></see> property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</exception>
    </member>
    <member name="P:System.Net.Sockets.TcpListener.Active">
      <summary>Gets a value that indicates whether <see cref="T:System.Net.Sockets.TcpListener"></see> is actively listening for client connections.</summary>
      <returns>true if <see cref="T:System.Net.Sockets.TcpListener"></see> is actively listening; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
      <summary>Enables or disables Network Address Translation (NAT) traversal on a <see cref="T:System.Net.Sockets.TcpListener"></see> instance.</summary>
      <param name="allowed">A Boolean value that specifies whether to enable or disable NAT traversal.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)"></see> method was called after calling the <see cref="M:System.Net.Sockets.TcpListener.Start"></see> method</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to accept an incoming connection attempt.</summary>
      <param name="callback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object containing information about the accept operation. This object is passed to the callback delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.Socket"></see>.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred while attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to accept an incoming connection attempt.</summary>
      <param name="callback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object containing information about the accept operation. This object is passed to the callback delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.TcpClient"></see>.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred while attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Create(System.Int32)">
      <summary>Creates a new <see cref="T:System.Net.Sockets.TcpListener"></see> instance to listen on the specified port.</summary>
      <param name="port">The port on which to listen for incoming connection attempts.</param>
      <returns>Returns <see cref="T:System.Net.Sockets.TcpListener"></see>.   A new <see cref="T:System.Net.Sockets.TcpListener"></see> instance to listen on the specified port.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
      <summary>Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket"></see> to handle remote host communication.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> returned by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)"></see> method.</param>
      <returns>A <see cref="T:System.Net.Sockets.Socket"></see>.   The <see cref="T:System.Net.Sockets.Socket"></see> used to send and receive data.</returns>
      <exception cref="T:System.ObjectDisposedException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="asyncResult">asyncResult</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="asyncResult">asyncResult</paramref> parameter was not created by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)"></see> method.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)"></see> method was previously called.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred while attempting to access the <see cref="T:System.Net.Sockets.Socket"></see>.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
      <summary>Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.TcpClient"></see> to handle remote host communication.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> returned by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)"></see> method.</param>
      <returns>A <see cref="T:System.Net.Sockets.TcpClient"></see>.   The <see cref="T:System.Net.Sockets.TcpClient"></see> used to send and receive data.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that specifies whether the <see cref="T:System.Net.Sockets.TcpListener"></see> allows only one underlying socket to listen to a specific port.</summary>
      <returns>true if the <see cref="T:System.Net.Sockets.TcpListener"></see> allows only one <see cref="T:System.Net.Sockets.TcpListener"></see> to listen to a specific port; otherwise, false. . The default is true for Windows Server 2003 and Windows XP Service Pack 2 and later, and false for all other versions.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.TcpListener"></see> has been started. Call the <see cref="M:System.Net.Sockets.TcpListener.Stop"></see> method and then set the <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse"></see> property.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the underlying socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Finalize">
      
    </member>
    <member name="P:System.Net.Sockets.TcpListener.LocalEndpoint">
      <summary>Gets the underlying <see cref="T:System.Net.EndPoint"></see> of the current <see cref="T:System.Net.Sockets.TcpListener"></see>.</summary>
      <returns>The <see cref="T:System.Net.EndPoint"></see> to which the <see cref="T:System.Net.Sockets.Socket"></see> is bound.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Pending">
      <summary>Determines if there are pending connection requests.</summary>
      <returns>true if connections are pending; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start"></see>.</exception>
    </member>
    <member name="P:System.Net.Sockets.TcpListener.Server">
      <summary>Gets the underlying network <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <returns>The underlying <see cref="T:System.Net.Sockets.Socket"></see>.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Start">
      <summary>Starts listening for incoming connection requests.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode"></see> property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
      <summary>Starts listening for incoming connection requests with a maximum number of pending connection.</summary>
      <param name="backlog">The maximum length of the pending connections queue.</param>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred while accessing the socket.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="backlog">backlog</paramref> parameter is less than zero or exceeds the maximum number of permitted connections.</exception>
      <exception cref="T:System.InvalidOperationException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> is null.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Stop">
      <summary>Closes the listener.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode"></see> property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</exception>
    </member>
    <member name="T:System.Net.Sockets.TransmitFileOptions">
      <summary>The <see cref="T:System.Net.Sockets.TransmitFileOptions"></see> enumeration defines values used in file transfer requests.</summary>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.Disconnect">
      <summary>Start a transport-level disconnect after all the file data has been queued for transmission. When used with <see cref="F:System.Net.Sockets.TransmitFileOptions.ReuseSocket"></see>, these flags return the socket to a disconnected, reusable state after the file has been transmitted.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.ReuseSocket">
      <summary>The socket handle may be reused when the request completes. This flag is valid only if <see cref="F:System.Net.Sockets.TransmitFileOptions.Disconnect"></see> is also specified. When used with <see cref="F:System.Net.Sockets.TransmitFileOptions.Disconnect"></see>, these flags return the socket to a disconnected, reusable state after the file has been transmitted.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread">
      <summary>Use the default thread to process long file transfer requests.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.UseKernelApc">
      <summary>Use kernel asynchronous procedure calls (APCs) instead of worker threads to process long file transfer requests. Long requests are defined as requests that require more than a single read from the file or a cache; the request therefore depends on the size of the file and the specified length of the send packet.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.UseSystemThread">
      <summary>Use system threads to process long file transfer requests.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.WriteBehind">
      <summary>Complete the file transfer request immediately, without pending. If this flag is specified and the file transfer succeeds, the data has been accepted by the system but not necessarily acknowledged by the remote end. Do not use this flag with the <see cref="F:System.Net.Sockets.TransmitFileOptions.Disconnect"></see> and <see cref="F:System.Net.Sockets.TransmitFileOptions.ReuseSocket"></see> flags.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Sockets.UdpClient">
      <summary>Provides User Datagram Protocol (UDP) network services.</summary>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient"></see> class.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient"></see> class and binds it to the local port number provided.</summary>
      <param name="port">The local port number from which you intend to communicate.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="port">port</paramref> parameter is greater than <see cref="F:System.Net.IPEndPoint.MaxPort"></see> or less than <see cref="F:System.Net.IPEndPoint.MinPort"></see>.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient"></see> class and binds it to the specified local endpoint.</summary>
      <param name="localEP">An <see cref="T:System.Net.IPEndPoint"></see> that respresents the local endpoint to which you bind the UDP connection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="localEP">localEP</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient"></see> class.</summary>
      <param name="family">One of the <see cref="T:System.Net.Sockets.AddressFamily"></see> values that specifies the addressing scheme of the socket.</param>
      <exception cref="T:System.ArgumentException"><paramref name="family">family</paramref> is not <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"></see> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"></see>.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient"></see> class and binds it to the local port number provided.</summary>
      <param name="port">The port on which to listen for incoming connection attempts.</param>
      <param name="family">One of the <see cref="T:System.Net.Sockets.AddressFamily"></see> values that specifies the addressing scheme of the socket.</param>
      <exception cref="T:System.ArgumentException"><paramref name="family">family</paramref> is not <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"></see> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"></see>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port">port</paramref> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort"></see> or less than <see cref="F:System.Net.IPEndPoint.MinPort"></see>.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient"></see> class and establishes a default remote host.</summary>
      <param name="hostname">The name of the remote DNS host to which you intend to connect.</param>
      <param name="port">The remote port number to which you intend to connect.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostname">hostname</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port">port</paramref> is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.Active">
      <summary>Gets or sets a value indicating whether a default remote host has been established.</summary>
      <returns>true if a connection is active; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)">
      <summary>Enables or disables Network Address Translation (NAT) traversal on a <see cref="T:System.Net.Sockets.UdpClient"></see> instance.</summary>
      <param name="allowed">A Boolean value that specifies whether to enable or disable NAT traversal.</param>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.Available">
      <summary>Gets the amount of data received from the network that is available to read.</summary>
      <returns>The number of bytes of data received from the network.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred while attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)">
      <summary>Receives a datagram from a remote host asynchronously.</summary>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the requestCallback delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object that references the asynchronous receive.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Sends a datagram to a destination asynchronously. The destination is specified by the host name and port number.</summary>
      <param name="datagram">A <see cref="T:System.Byte"></see> array that contains the data to be sent.</param>
      <param name="bytes">The number of bytes to send.</param>
      <param name="hostname">The destination host.</param>
      <param name="port">The destination port number.</param>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the send operation. This object is passed to the requestCallback delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object that references the asynchronous send.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)">
      <summary>Sends a datagram to a remote host asynchronously. The destination was specified previously by a call to <see cref="Overload:System.Net.Sockets.UdpClient.Connect"></see>.</summary>
      <param name="datagram">A <see cref="T:System.Byte"></see> array that contains the data to be sent.</param>
      <param name="bytes">The number of bytes to send.</param>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the send operation. This object is passed to the requestCallback delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object that references the asynchronous send.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)">
      <summary>Sends a datagram to a destination asynchronously. The destination is specified by a <see cref="T:System.Net.EndPoint"></see>.</summary>
      <param name="datagram">A <see cref="T:System.Byte"></see> array that contains the data to be sent.</param>
      <param name="bytes">The number of bytes to send.</param>
      <param name="endPoint">The <see cref="T:System.Net.EndPoint"></see> that represents the destination for the data.</param>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the send operation. This object is passed to the requestCallback delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object that references the asynchronous send.</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.Client">
      <summary>Gets or sets the underlying network <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <returns>The underlying Network <see cref="T:System.Net.Sockets.Socket"></see>.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Close">
      <summary>Closes the UDP connection.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)">
      <summary>Establishes a default remote host using the specified network endpoint.</summary>
      <param name="endPoint">An <see cref="T:System.Net.IPEndPoint"></see> that specifies the network endpoint to which you intend to send data.</param>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="endPoint">endPoint</paramref> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpClient"></see> is closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)">
      <summary>Establishes a default remote host using the specified IP address and port number.</summary>
      <param name="addr">The <see cref="T:System.Net.IPAddress"></see> of the remote host to which you intend to send data.</param>
      <param name="port">The port number to which you intend send data.</param>
      <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpClient"></see> is closed.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="addr">addr</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port">port</paramref> is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)">
      <summary>Establishes a default remote host using the specified host name and port number.</summary>
      <param name="hostname">The DNS name of the remote host to which you intend send data.</param>
      <param name="port">The port number on the remote host to which you intend to send data.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpClient"></see> is closed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port">port</paramref> is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Dispose">
      <summary>Releases the managed and unmanaged resources used by the <see cref="T:System.Net.Sockets.UdpClient"></see>.</summary>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.UdpClient"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.DontFragment">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that specifies whether the <see cref="T:System.Net.Sockets.UdpClient"></see> allows Internet Protocol (IP) datagrams to be fragmented.</summary>
      <returns>true if the <see cref="T:System.Net.Sockets.UdpClient"></see> allows datagram fragmentation; otherwise, false. The default is true.</returns>
      <exception cref="T:System.NotSupportedException">This property can be set only for sockets that use the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"></see> flag or the <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"></see> flag.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)">
      <summary>Leaves a multicast group.</summary>
      <param name="multicastAddr">The <see cref="T:System.Net.IPAddress"></see> of the multicast group to leave.</param>
      <param name="ifindex">The local address of the multicast group to leave.</param>
      <exception cref="T:System.ObjectDisposedException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
      <exception cref="T:System.ArgumentException">The IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily"></see> value that defines the addressing scheme of the socket.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="multicastAddr">multicastAddr</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)">
      <summary>Leaves a multicast group.</summary>
      <param name="multicastAddr">The <see cref="T:System.Net.IPAddress"></see> of the multicast group to leave.</param>
      <exception cref="T:System.ObjectDisposedException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
      <exception cref="T:System.ArgumentException">The IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily"></see> value that defines the addressing scheme of the socket.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="multicastAddr">multicastAddr</paramref> is null.</exception>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.EnableBroadcast">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that specifies whether the <see cref="T:System.Net.Sockets.UdpClient"></see> may send or receive broadcast packets.</summary>
      <returns>true if the <see cref="T:System.Net.Sockets.UdpClient"></see> allows broadcast packets; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)">
      <summary>Ends a pending asynchronous receive.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> object returned by a call to <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)"></see>.</param>
      <param name="remoteEP">The specified remote endpoint.</param>
      <returns>If successful, the number of bytes received. If unsuccessful, this method returns 0.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not returned by a call to the <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)"></see> method.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)"></see> was previously called for the asynchronous read.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the underlying <see cref="T:System.Net.Sockets.Socket"></see>.</exception>
      <exception cref="T:System.ObjectDisposedException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)">
      <summary>Ends a pending asynchronous send.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> object returned by a call to <see cref="Overload:System.Net.Sockets.UdpClient.BeginSend"></see>.</param>
      <returns>If successful, the number of bytes sent to the <see cref="T:System.Net.Sockets.UdpClient"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"></see> method.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)"></see> was previously called for the asynchronous read.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the underlying socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.ExclusiveAddressUse">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that specifies whether the <see cref="T:System.Net.Sockets.UdpClient"></see> allows only one client to use a port.</summary>
      <returns>true if the <see cref="T:System.Net.Sockets.UdpClient"></see> allows only one client to use a specific port; otherwise, false. The default is true for Windows Server 2003 and Windows XP Service Pack 2 and later, and false for all other versions.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the underlying socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Finalize">
      
    </member>
    <member name="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)">
      <summary>Adds a <see cref="T:System.Net.Sockets.UdpClient"></see> to a multicast group.</summary>
      <param name="multicastAddr">The multicast <see cref="T:System.Net.IPAddress"></see> of the group you want to join.</param>
      <exception cref="T:System.ObjectDisposedException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
      <exception cref="T:System.ArgumentException">The IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily"></see> value that defines the addressing scheme of the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)">
      <summary>Adds a <see cref="T:System.Net.Sockets.UdpClient"></see> to a multicast group.</summary>
      <param name="ifindex">The interface index associated with the local IP address on which to join the multicast group.</param>
      <param name="multicastAddr">The multicast <see cref="T:System.Net.IPAddress"></see> of the group you want to join.</param>
      <exception cref="T:System.ObjectDisposedException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)">
      <summary>Adds a <see cref="T:System.Net.Sockets.UdpClient"></see> to a multicast group with the specified Time to Live (TTL).</summary>
      <param name="multicastAddr">The <see cref="T:System.Net.IPAddress"></see> of the multicast group to join.</param>
      <param name="timeToLive">The Time to Live (TTL), measured in router hops.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The TTL provided is not between 0 and 255</exception>
      <exception cref="T:System.ObjectDisposedException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="multicastAddr">multicastAddr</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily"></see> value that defines the addressing scheme of the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)">
      <summary>Adds a <see cref="T:System.Net.Sockets.UdpClient"></see> to a multicast group.</summary>
      <param name="multicastAddr">The multicast <see cref="T:System.Net.IPAddress"></see> of the group you want to join.</param>
      <param name="localAddress">The local <see cref="T:System.Net.IPAddress"></see>.</param>
      <exception cref="T:System.ObjectDisposedException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.MulticastLoopback">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that specifies whether outgoing multicast packets are delivered to the sending application.</summary>
      <returns>true if the <see cref="T:System.Net.Sockets.UdpClient"></see> receives outgoing multicast packets; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)">
      <summary>Returns a UDP datagram that was sent by a remote host.</summary>
      <param name="remoteEP">An <see cref="T:System.Net.IPEndPoint"></see> that represents the remote host from which the data was sent.</param>
      <returns>An array of type <see cref="T:System.Byte"></see> that contains datagram data.</returns>
      <exception cref="T:System.ObjectDisposedException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.ReceiveAsync">
      <summary>Returns a UDP datagram asynchronously that was sent by a remote host.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> has been closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)">
      <summary>Sends a UDP datagram to a remote host.</summary>
      <param name="dgram">An array of type <see cref="T:System.Byte"></see> that specifies the UDP datagram that you intend to send represented as an array of bytes.</param>
      <param name="bytes">The number of bytes in the datagram.</param>
      <returns>The number of bytes sent.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="dgram">dgram</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.UdpClient"></see> has already established a default remote host.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpClient"></see> is closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)">
      <summary>Sends a UDP datagram to the host at the specified remote endpoint.</summary>
      <param name="dgram">An array of type <see cref="T:System.Byte"></see> that specifies the UDP datagram that you intend to send, represented as an array of bytes.</param>
      <param name="bytes">The number of bytes in the datagram.</param>
      <param name="endPoint">An <see cref="T:System.Net.IPEndPoint"></see> that represents the host and port to which to send the datagram.</param>
      <returns>The number of bytes sent.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="dgram">dgram</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.UdpClient"></see> has already established a default remote host.</exception>
      <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpClient"></see> is closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)">
      <summary>Sends a UDP datagram to a specified port on a specified remote host.</summary>
      <param name="dgram">An array of type <see cref="T:System.Byte"></see> that specifies the UDP datagram that you intend to send represented as an array of bytes.</param>
      <param name="bytes">The number of bytes in the datagram.</param>
      <param name="hostname">The name of the remote host to which you intend to send the datagram.</param>
      <param name="port">The remote port number with which you intend to communicate.</param>
      <returns>The number of bytes sent.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="dgram">dgram</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.UdpClient"></see> has already established a default remote host.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpClient"></see> is closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)">
      <summary>Sends a UDP datagram asynchronously to a remote host.</summary>
      <param name="datagram">An array of type <see cref="T:System.Byte"></see> that specifies the UDP datagram that you intend to send represented as an array of bytes.</param>
      <param name="bytes">The number of bytes in the datagram.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="dgram">dgram</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.UdpClient"></see> has already established a default remote host.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpClient"></see> is closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)">
      <summary>Sends a UDP datagram asynchronously to a remote host.</summary>
      <param name="datagram">An array of type <see cref="T:System.Byte"></see> that specifies the UDP datagram that you intend to send represented as an array of bytes.</param>
      <param name="bytes">The number of bytes in the datagram.</param>
      <param name="endPoint">An <see cref="T:System.Net.IPEndPoint"></see> that represents the host and port to which to send the datagram.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="dgram">dgram</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.UdpClient"></see> has already established a default remote host.</exception>
      <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpClient"></see> is closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)">
      <summary>Sends a UDP datagram asynchronously to a remote host.</summary>
      <param name="datagram">An array of type <see cref="T:System.Byte"></see> that specifies the UDP datagram that you intend to send represented as an array of bytes.</param>
      <param name="bytes">The number of bytes in the datagram.</param>
      <param name="hostname">The name of the remote host to which you intend to send the datagram.</param>
      <param name="port">The remote port number with which you intend to communicate.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="dgram">dgram</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.UdpClient"></see> has already established a default remote host.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpClient"></see> is closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.Ttl">
      <summary>Gets or sets a value that specifies the Time to Live (TTL) value of Internet Protocol (IP) packets sent by the <see cref="T:System.Net.Sockets.UdpClient"></see>.</summary>
      <returns>The TTL value.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.System#IDisposable#Dispose">
      
    </member>
    <member name="T:System.Net.Sockets.UdpReceiveResult">
      <summary>Presents UDP receive result information from a call to the <see cref="M:System.Net.Sockets.UdpClient.ReceiveAsync"></see> method.</summary>
    </member>
    <member name="M:System.Net.Sockets.UdpReceiveResult.#ctor(System.Byte[],System.Net.IPEndPoint)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpReceiveResult"></see> class.</summary>
      <param name="buffer">A buffer for data to receive in the UDP packet.</param>
      <param name="remoteEndPoint">The remote endpoint of the UDP packet.</param>
    </member>
    <member name="P:System.Net.Sockets.UdpReceiveResult.Buffer">
      <summary>Gets a buffer with the data received in the UDP packet.</summary>
      <returns>Returns <see cref="T:System.Byte"></see>.   A <see cref="T:System.Byte"></see> array with the data received in the UDP packet.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpReceiveResult.Equals(System.Net.Sockets.UdpReceiveResult)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="other">The object to compare with this instance.</param>
      <returns>Returns <see cref="T:System.Boolean"></see>.  true if <paramref name="other">other</paramref> is an instance of <see cref="T:System.Net.Sockets.UdpReceiveResult"></see> and equals the value of the instance; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpReceiveResult.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>Returns <see cref="T:System.Boolean"></see>.  true if <paramref name="obj">obj</paramref> is an instance of <see cref="T:System.Net.Sockets.UdpReceiveResult"></see> and equals the value of the instance; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpReceiveResult.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>Returns <see cref="T:System.Int32"></see>.   The hash code.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpReceiveResult.op_Equality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)">
      <summary>Tests whether two specified <see cref="T:System.Net.Sockets.UdpReceiveResult"></see> instances are equivalent.</summary>
      <param name="left">The <see cref="T:System.Net.Sockets.UdpReceiveResult"></see> instance that is to the left of the equality operator.</param>
      <param name="right">The <see cref="T:System.Net.Sockets.UdpReceiveResult"></see> instance that is to the right of the equality operator.</param>
      <returns>Returns <see cref="T:System.Boolean"></see>.  true if <paramref name="left">left</paramref> and <paramref name="right">right</paramref> are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpReceiveResult.op_Inequality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)">
      <summary>Tests whether two specified <see cref="T:System.Net.Sockets.UdpReceiveResult"></see> instances are not equal.</summary>
      <param name="left">The <see cref="T:System.Net.Sockets.UdpReceiveResult"></see> instance that is to the left of the not equal operator.</param>
      <param name="right">The <see cref="T:System.Net.Sockets.UdpReceiveResult"></see> instance that is to the right of the not equal operator.</param>
      <returns>Returns <see cref="T:System.Boolean"></see>.  true if <paramref name="left">left</paramref> and <paramref name="right">right</paramref> are unequal; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpReceiveResult.RemoteEndPoint">
      <summary>Gets the remote endpoint from which the UDP packet was received.</summary>
      <returns>Returns <see cref="T:System.Net.IPEndPoint"></see>.   The remote endpoint from which the UDP packet was received.</returns>
    </member>
    <member name="T:System.Net.TransportContext">
      <summary>The <see cref="T:System.Net.TransportContext"></see> class provides additional context about the underlying transport layer.</summary>
    </member>
    <member name="M:System.Net.TransportContext.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Net.TransportContext"></see> class</summary>
    </member>
    <member name="M:System.Net.TransportContext.GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind)">
      <summary>Retrieves the requested channel binding.</summary>
      <param name="kind">The type of channel binding to retrieve.</param>
      <returns>The requested <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding"></see>, or null if the channel binding is not supported by the current transport or by the operating system.</returns>
      <exception cref="T:System.NotSupportedException"><paramref name="kind">kind</paramref> is must be <see cref="F:System.Security.Authentication.ExtendedProtection.ChannelBindingKind.Endpoint"></see> for use with the <see cref="T:System.Net.TransportContext"></see> retrieved from the <see cref="P:System.Net.HttpListenerRequest.TransportContext"></see> property.</exception>
    </member>
    <member name="M:System.Net.TransportContext.GetTlsTokenBindings">
      <summary>Gets the transport security layer token bindings.</summary>
      <returns>The transport security layer token bindings.</returns>
    </member>
    <member name="T:System.Net.TransportType">
      <summary>Defines transport types for the <see cref="T:System.Net.SocketPermission"></see> and <see cref="T:System.Net.Sockets.Socket"></see> classes.</summary>
    </member>
    <member name="F:System.Net.TransportType.All">
      <summary>All transport types.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.TransportType.Connectionless">
      <summary>The transport type is connectionless, such as UDP. Specifying this value has the same effect as specifying <see cref="F:System.Net.TransportType.Udp"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.TransportType.ConnectionOriented">
      <summary>The transport is connection oriented, such as TCP. Specifying this value has the same effect as specifying <see cref="F:System.Net.TransportType.Tcp"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.TransportType.Tcp">
      <summary>TCP transport.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.TransportType.Udp">
      <summary>UDP transport.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.UploadDataCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.WebClient.UploadDataCompleted"></see> event.</summary>
    </member>
    <member name="P:System.Net.UploadDataCompletedEventArgs.Result">
      <summary>Gets the server reply to a data upload operation started by calling an <see cref="Overload:System.Net.WebClient.UploadDataAsync"></see> method.</summary>
      <returns>A <see cref="T:System.Byte"></see> array containing the server reply.</returns>
    </member>
    <member name="T:System.Net.UploadDataCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Net.WebClient.UploadDataCompleted"></see> event of a <see cref="T:System.Net.WebClient"></see>.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Net.UploadDataCompletedEventArgs"></see> containing event data.</param>
    </member>
    <member name="T:System.Net.UploadFileCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.WebClient.UploadFileCompleted"></see> event.</summary>
    </member>
    <member name="P:System.Net.UploadFileCompletedEventArgs.Result">
      <summary>Gets the server reply to a data upload operation that is started by calling an <see cref="Overload:System.Net.WebClient.UploadFileAsync"></see> method.</summary>
      <returns>A <see cref="T:System.Byte"></see> array that contains the server reply.</returns>
    </member>
    <member name="T:System.Net.UploadFileCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Net.WebClient.UploadFileCompleted"></see> event of a <see cref="T:System.Net.WebClient"></see>.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Net.UploadFileCompletedEventArgs"></see> that contains event data.</param>
    </member>
    <member name="T:System.Net.UploadProgressChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.WebClient.UploadProgressChanged"></see> event of a <see cref="T:System.Net.WebClient"></see>.</summary>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.BytesReceived">
      <summary>Gets the number of bytes received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that indicates the number of bytes received.</returns>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.BytesSent">
      <summary>Gets the number of bytes sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that indicates the number of bytes sent.</returns>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.TotalBytesToReceive">
      <summary>Gets the total number of bytes in a <see cref="T:System.Net.WebClient"></see> data upload operation.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that indicates the number of bytes that will be received.</returns>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.TotalBytesToSend">
      <summary>Gets the total number of bytes to send.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that indicates the number of bytes that will be sent.</returns>
    </member>
    <member name="T:System.Net.UploadProgressChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Net.WebClient.UploadProgressChanged"></see> event of a <see cref="T:System.Net.WebClient"></see>.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Net.UploadProgressChangedEventArgs"></see> containing event data.</param>
    </member>
    <member name="T:System.Net.UploadStringCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.WebClient.UploadStringCompleted"></see> event.</summary>
    </member>
    <member name="P:System.Net.UploadStringCompletedEventArgs.Result">
      <summary>Gets the server reply to a string upload operation that is started by calling an <see cref="Overload:System.Net.WebClient.UploadStringAsync"></see> method.</summary>
      <returns>A <see cref="T:System.Byte"></see> array that contains the server reply.</returns>
    </member>
    <member name="T:System.Net.UploadStringCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Net.WebClient.UploadStringCompleted"></see> event of a <see cref="T:System.Net.WebClient"></see>.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Net.UploadStringCompletedEventArgs"></see> containing event data.</param>
    </member>
    <member name="T:System.Net.UploadValuesCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.WebClient.UploadValuesCompleted"></see> event.</summary>
    </member>
    <member name="P:System.Net.UploadValuesCompletedEventArgs.Result">
      <summary>Gets the server reply to a data upload operation started by calling an <see cref="Overload:System.Net.WebClient.UploadValuesAsync"></see> method.</summary>
      <returns>A <see cref="T:System.Byte"></see> array containing the server reply.</returns>
    </member>
    <member name="T:System.Net.UploadValuesCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Net.WebClient.UploadValuesCompleted"></see> event of a <see cref="T:System.Net.WebClient"></see>.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Net.UploadValuesCompletedEventArgs"></see> that contains event data.</param>
    </member>
    <member name="T:System.Net.WebClient">
      <summary>Provides common methods for sending data to and receiving data from a resource identified by a URI.</summary>
    </member>
    <member name="M:System.Net.WebClient.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebClient"></see> class.</summary>
    </member>
    <member name="P:System.Net.WebClient.AllowReadStreamBuffering">
      <summary>Gets or sets a value that indicates whether to buffer the data read from the Internet resource for a <see cref="T:System.Net.WebClient"></see> instance.</summary>
      <returns>Returns <see cref="T:System.Boolean"></see>.  true to enable buffering of the data received from the Internet resource; false to disable buffering. The default is true.</returns>
    </member>
    <member name="P:System.Net.WebClient.AllowWriteStreamBuffering">
      <summary>Gets or sets a value that indicates whether to buffer the data written to the Internet resource for a <see cref="T:System.Net.WebClient"></see> instance.</summary>
      <returns>Returns <see cref="T:System.Boolean"></see>.  true to enable buffering of the data written to the Internet resource; false to disable buffering. The default is true.</returns>
    </member>
    <member name="P:System.Net.WebClient.BaseAddress">
      <summary>Gets or sets the base URI for requests made by a <see cref="T:System.Net.WebClient"></see>.</summary>
      <returns>A <see cref="T:System.String"></see> containing the base URI for requests made by a <see cref="T:System.Net.WebClient"></see> or <see cref="F:System.String.Empty"></see> if no base address has been specified.</returns>
      <exception cref="T:System.ArgumentException"><see cref="P:System.Net.WebClient.BaseAddress"></see> is set to an invalid URI. The inner exception may contain information that will help you locate the error.</exception>
    </member>
    <member name="P:System.Net.WebClient.CachePolicy">
      <summary>Gets or sets the application's cache policy for any resources obtained by this WebClient instance using <see cref="T:System.Net.WebRequest"></see> objects.</summary>
      <returns>A <see cref="T:System.Net.Cache.RequestCachePolicy"></see> object that represents the application's caching requirements.</returns>
    </member>
    <member name="M:System.Net.WebClient.CancelAsync">
      <summary>Cancels a pending asynchronous operation.</summary>
    </member>
    <member name="P:System.Net.WebClient.Credentials">
      <summary>Gets or sets the network credentials that are sent to the host and used to authenticate the request.</summary>
      <returns>An <see cref="T:System.Net.ICredentials"></see> containing the authentication credentials for the request. The default is null.</returns>
    </member>
    <member name="M:System.Net.WebClient.DownloadData(System.String)">
      <summary>Downloads the resource as a <see cref="T:System.Byte"></see> array from the URI specified.</summary>
      <param name="address">The URI from which to download data.</param>
      <returns>A <see cref="T:System.Byte"></see> array containing the downloaded resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while downloading data.</exception>
      <exception cref="T:System.NotSupportedException">The method has been called simultaneously on multiple threads.</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadData(System.Uri)">
      <summary>Downloads the resource as a <see cref="T:System.Byte"></see> array from the URI specified.</summary>
      <param name="address">The URI represented by the <see cref="T:System.Uri"></see> object, from which to download data.</param>
      <returns>A <see cref="T:System.Byte"></see> array containing the downloaded resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadDataAsync(System.Uri)">
      <summary>Downloads the resource as a <see cref="T:System.Byte"></see> array from the URI specified as an asynchronous operation.</summary>
      <param name="address">A <see cref="T:System.Uri"></see> containing the URI to download.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while downloading the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadDataAsync(System.Uri,System.Object)">
      <summary>Downloads the resource as a <see cref="T:System.Byte"></see> array from the URI specified as an asynchronous operation.</summary>
      <param name="address">A <see cref="T:System.Uri"></see> containing the URI to download.</param>
      <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while downloading the resource.</exception>
    </member>
    <member name="E:System.Net.WebClient.DownloadDataCompleted">
      <summary>Occurs when an asynchronous data download operation completes.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Net.WebClient.DownloadDataTaskAsync(System.String)">
      <summary>Downloads the resource as a <see cref="T:System.Byte"></see> array from the URI specified as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to download.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.Byte"></see> array containing the downloaded resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while downloading the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadDataTaskAsync(System.Uri)">
      <summary>Downloads the resource as a <see cref="T:System.Byte"></see> array from the URI specified as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to download.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.Byte"></see> array containing the downloaded resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while downloading the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadFile(System.Uri,System.String)">
      <summary>Downloads the resource with the specified URI to a local file.</summary>
      <param name="address">The URI specified as a <see cref="T:System.String"></see>, from which to download data.</param>
      <param name="fileName">The name of the local file that is to receive the data.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="fileName">fileName</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="filename">filename</paramref> is null or <see cref="F:System.String.Empty"></see>.   -or-   The file does not exist.   -or-   An error occurred while downloading data.</exception>
      <exception cref="T:System.NotSupportedException">The method has been called simultaneously on multiple threads.</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadFile(System.String,System.String)">
      <summary>Downloads the resource with the specified URI to a local file.</summary>
      <param name="address">The URI from which to download data.</param>
      <param name="fileName">The name of the local file that is to receive the data.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="filename">filename</paramref> is null or <see cref="F:System.String.Empty"></see>.   -or-   The file does not exist.   -or- An error occurred while downloading data.</exception>
      <exception cref="T:System.NotSupportedException">The method has been called simultaneously on multiple threads.</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String)">
      <summary>Downloads, to a local file, the resource with the specified URI. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to download.</param>
      <param name="fileName">The name of the file to be placed on the local computer.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="fileName">fileName</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while downloading the resource.</exception>
      <exception cref="T:System.InvalidOperationException">The local file specified by <paramref name="fileName">fileName</paramref> is in use by another thread.</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String,System.Object)">
      <summary>Downloads, to a local file, the resource with the specified URI. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to download.</param>
      <param name="fileName">The name of the file to be placed on the local computer.</param>
      <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="fileName">fileName</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while downloading the resource.</exception>
      <exception cref="T:System.InvalidOperationException">The local file specified by <paramref name="fileName">fileName</paramref> is in use by another thread.</exception>
    </member>
    <member name="E:System.Net.WebClient.DownloadFileCompleted">
      <summary>Occurs when an asynchronous file download operation completes.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Net.WebClient.DownloadFileTaskAsync(System.String,System.String)">
      <summary>Downloads the specified resource to a local file as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to download.</param>
      <param name="fileName">The name of the file to be placed on the local computer.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see>.   The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="fileName">fileName</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while downloading the resource.</exception>
      <exception cref="T:System.InvalidOperationException">The local file specified by <paramref name="fileName">fileName</paramref> is in use by another thread.</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadFileTaskAsync(System.Uri,System.String)">
      <summary>Downloads the specified resource to a local file as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to download.</param>
      <param name="fileName">The name of the file to be placed on the local computer.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see>.   The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="fileName">fileName</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while downloading the resource.</exception>
      <exception cref="T:System.InvalidOperationException">The local file specified by <paramref name="fileName">fileName</paramref> is in use by another thread.</exception>
    </member>
    <member name="E:System.Net.WebClient.DownloadProgressChanged">
      <summary>Occurs when an asynchronous download operation successfully transfers some or all of the data.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Net.WebClient.DownloadString(System.String)">
      <summary>Downloads the requested resource as a <see cref="T:System.String"></see>. The resource to download is specified as a <see cref="T:System.String"></see> containing the URI.</summary>
      <param name="address">A <see cref="T:System.String"></see> containing the URI to download.</param>
      <returns>A <see cref="T:System.String"></see> containing the requested resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while downloading the resource.</exception>
      <exception cref="T:System.NotSupportedException">The method has been called simultaneously on multiple threads.</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadString(System.Uri)">
      <summary>Downloads the requested resource as a <see cref="T:System.String"></see>. The resource to download is specified as a <see cref="T:System.Uri"></see>.</summary>
      <param name="address">A <see cref="T:System.Uri"></see> object containing the URI to download.</param>
      <returns>A <see cref="T:System.String"></see> containing the requested resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while downloading the resource.</exception>
      <exception cref="T:System.NotSupportedException">The method has been called simultaneously on multiple threads.</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadStringAsync(System.Uri)">
      <summary>Downloads the resource specified as a <see cref="T:System.Uri"></see>. This method does not block the calling thread.</summary>
      <param name="address">A <see cref="T:System.Uri"></see> containing the URI to download.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while downloading the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)">
      <summary>Downloads the specified string to the specified resource. This method does not block the calling thread.</summary>
      <param name="address">A <see cref="T:System.Uri"></see> containing the URI to download.</param>
      <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while downloading the resource.</exception>
    </member>
    <member name="E:System.Net.WebClient.DownloadStringCompleted">
      <summary>Occurs when an asynchronous resource-download operation completes.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Net.WebClient.DownloadStringTaskAsync(System.String)">
      <summary>Downloads the resource as a <see cref="T:System.String"></see> from the URI specified as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to download.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.Byte"></see> array containing the downloaded resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while downloading the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadStringTaskAsync(System.Uri)">
      <summary>Downloads the resource as a <see cref="T:System.String"></see> from the URI specified as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to download.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.Byte"></see> array containing the downloaded resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while downloading the resource.</exception>
    </member>
    <member name="P:System.Net.WebClient.Encoding">
      <summary>Gets and sets the <see cref="T:System.Text.Encoding"></see> used to upload and download strings.</summary>
      <returns>A <see cref="T:System.Text.Encoding"></see> that is used to encode strings. The default value of this property is the encoding returned by <see cref="P:System.Text.Encoding.Default"></see>.</returns>
    </member>
    <member name="M:System.Net.WebClient.GetWebRequest(System.Uri)">
      <summary>Returns a <see cref="T:System.Net.WebRequest"></see> object for the specified resource.</summary>
      <param name="address">A <see cref="T:System.Uri"></see> that identifies the resource to request.</param>
      <returns>A new <see cref="T:System.Net.WebRequest"></see> object for the specified resource.</returns>
    </member>
    <member name="M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest)">
      <summary>Returns the <see cref="T:System.Net.WebResponse"></see> for the specified <see cref="T:System.Net.WebRequest"></see>.</summary>
      <param name="request">A <see cref="T:System.Net.WebRequest"></see> that is used to obtain the response.</param>
      <returns>A <see cref="T:System.Net.WebResponse"></see> containing the response for the specified <see cref="T:System.Net.WebRequest"></see>.</returns>
    </member>
    <member name="M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)">
      <summary>Returns the <see cref="T:System.Net.WebResponse"></see> for the specified <see cref="T:System.Net.WebRequest"></see> using the specified <see cref="T:System.IAsyncResult"></see>.</summary>
      <param name="request">A <see cref="T:System.Net.WebRequest"></see> that is used to obtain the response.</param>
      <param name="result">An <see cref="T:System.IAsyncResult"></see> object obtained from a previous call to <see cref="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see> .</param>
      <returns>A <see cref="T:System.Net.WebResponse"></see> containing the response for the specified <see cref="T:System.Net.WebRequest"></see>.</returns>
    </member>
    <member name="P:System.Net.WebClient.Headers">
      <summary>Gets or sets a collection of header name/value pairs associated with the request.</summary>
      <returns>A <see cref="T:System.Net.WebHeaderCollection"></see> containing header name/value pairs associated with this request.</returns>
    </member>
    <member name="P:System.Net.WebClient.IsBusy">
      <summary>Gets whether a Web request is in progress.</summary>
      <returns>true if the Web request is still in progress; otherwise false.</returns>
    </member>
    <member name="M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.WebClient.DownloadDataCompleted"></see> event.</summary>
      <param name="e">A <see cref="T:System.Net.DownloadDataCompletedEventArgs"></see> object that contains event data.</param>
    </member>
    <member name="M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.WebClient.DownloadFileCompleted"></see> event.</summary>
      <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"></see> object containing event data.</param>
    </member>
    <member name="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.WebClient.DownloadProgressChanged"></see> event.</summary>
      <param name="e">A <see cref="T:System.Net.DownloadProgressChangedEventArgs"></see> object containing event data.</param>
    </member>
    <member name="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.WebClient.DownloadStringCompleted"></see> event.</summary>
      <param name="e">A <see cref="T:System.Net.DownloadStringCompletedEventArgs"></see> object containing event data.</param>
    </member>
    <member name="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.WebClient.OpenReadCompleted"></see> event.</summary>
      <param name="e">A <see cref="T:System.Net.OpenReadCompletedEventArgs"></see> object containing event data.</param>
    </member>
    <member name="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.WebClient.OpenWriteCompleted"></see> event.</summary>
      <param name="e">A <see cref="T:System.Net.OpenWriteCompletedEventArgs"></see> object containing event data.</param>
    </member>
    <member name="M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.WebClient.UploadDataCompleted"></see> event.</summary>
      <param name="e">A <see cref="T:System.Net.UploadDataCompletedEventArgs"></see> object containing event data.</param>
    </member>
    <member name="M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.WebClient.UploadFileCompleted"></see> event.</summary>
      <param name="e">An <see cref="T:System.Net.UploadFileCompletedEventArgs"></see> object containing event data.</param>
    </member>
    <member name="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.WebClient.UploadProgressChanged"></see> event.</summary>
      <param name="e">An <see cref="T:System.Net.UploadProgressChangedEventArgs"></see> object containing event data.</param>
    </member>
    <member name="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.WebClient.UploadStringCompleted"></see> event.</summary>
      <param name="e">An <see cref="T:System.Net.UploadStringCompletedEventArgs"></see> object containing event data.</param>
    </member>
    <member name="M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.WebClient.UploadValuesCompleted"></see> event.</summary>
      <param name="e">A <see cref="T:System.Net.UploadValuesCompletedEventArgs"></see> object containing event data.</param>
    </member>
    <member name="M:System.Net.WebClient.OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.WebClient.WriteStreamClosed"></see> event.</summary>
      <param name="e">A <see cref="T:System.Net.WriteStreamClosedEventArgs"></see> object containing event data.</param>
    </member>
    <member name="M:System.Net.WebClient.OpenRead(System.String)">
      <summary>Opens a readable stream for the data downloaded from a resource with the URI specified as a <see cref="T:System.String"></see>.</summary>
      <param name="address">The URI specified as a <see cref="T:System.String"></see> from which to download data.</param>
      <returns>A <see cref="T:System.IO.Stream"></see> used to read data from a resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while downloading data.</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenRead(System.Uri)">
      <summary>Opens a readable stream for the data downloaded from a resource with the URI specified as a <see cref="T:System.Uri"></see></summary>
      <param name="address">The URI specified as a <see cref="T:System.Uri"></see> from which to download data.</param>
      <returns>A <see cref="T:System.IO.Stream"></see> used to read data from a resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while downloading data.</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenReadAsync(System.Uri)">
      <summary>Opens a readable stream containing the specified resource. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and address is invalid.   -or-   An error occurred while downloading the resource.   -or-   An error occurred while opening the stream.</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)">
      <summary>Opens a readable stream containing the specified resource. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to retrieve.</param>
      <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and address is invalid.   -or-   An error occurred while downloading the resource.   -or-   An error occurred while opening the stream.</exception>
    </member>
    <member name="E:System.Net.WebClient.OpenReadCompleted">
      <summary>Occurs when an asynchronous operation to open a stream containing a resource completes.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Net.WebClient.OpenReadTaskAsync(System.String)">
      <summary>Opens a readable stream containing the specified resource as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to retrieve.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.IO.Stream"></see> used to read data from a resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and address is invalid.   -or-   An error occurred while downloading the resource.   -or-   An error occurred while opening the stream.</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenReadTaskAsync(System.Uri)">
      <summary>Opens a readable stream containing the specified resource as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to retrieve.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.IO.Stream"></see> used to read data from a resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and address is invalid.   -or-   An error occurred while downloading the resource.   -or-   An error occurred while opening the stream.</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWrite(System.String)">
      <summary>Opens a stream for writing data to the specified resource.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <returns>A <see cref="T:System.IO.Stream"></see> used to write data to the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while opening the stream.</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWrite(System.Uri)">
      <summary>Opens a stream for writing data to the specified resource.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <returns>A <see cref="T:System.IO.Stream"></see> used to write data to the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while opening the stream.</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWrite(System.String,System.String)">
      <summary>Opens a stream for writing data to the specified resource, using the specified method.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name="method">The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <returns>A <see cref="T:System.IO.Stream"></see> used to write data to the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while opening the stream.</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWrite(System.Uri,System.String)">
      <summary>Opens a stream for writing data to the specified resource, by using the specified method.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name="method">The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <returns>A <see cref="T:System.IO.Stream"></see> used to write data to the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while opening the stream.</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String,System.Object)">
      <summary>Opens a stream for writing data to the specified resource, using the specified method. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name="method">The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while opening the stream.</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String)">
      <summary>Opens a stream for writing data to the specified resource. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name="method">The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteAsync(System.Uri)">
      <summary>Opens a stream for writing data to the specified resource. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
    </member>
    <member name="E:System.Net.WebClient.OpenWriteCompleted">
      <summary>Occurs when an asynchronous operation to open a stream to write data to a resource completes.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteTaskAsync(System.String)">
      <summary>Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.IO.Stream"></see> used to write data to the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while opening the stream.</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri)">
      <summary>Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.IO.Stream"></see> used to write data to the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while opening the stream.</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteTaskAsync(System.String,System.String)">
      <summary>Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name="method">The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.IO.Stream"></see> used to write data to the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while opening the stream.</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri,System.String)">
      <summary>Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name="method">The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.IO.Stream"></see> used to write data to the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while opening the stream.</exception>
    </member>
    <member name="P:System.Net.WebClient.Proxy">
      <summary>Gets or sets the proxy used by this <see cref="T:System.Net.WebClient"></see> object.</summary>
      <returns>An <see cref="T:System.Net.IWebProxy"></see> instance used to send requests.</returns>
      <exception cref="T:System.ArgumentNullException"><see cref="P:System.Net.WebClient.Proxy"></see> is set to null.</exception>
    </member>
    <member name="P:System.Net.WebClient.QueryString">
      <summary>Gets or sets a collection of query name/value pairs associated with the request.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection"></see> that contains query name/value pairs associated with the request. If no pairs are associated with the request, the value is an empty <see cref="T:System.Collections.Specialized.NameValueCollection"></see>.</returns>
    </member>
    <member name="P:System.Net.WebClient.ResponseHeaders">
      <summary>Gets a collection of header name/value pairs associated with the response.</summary>
      <returns>A <see cref="T:System.Net.WebHeaderCollection"></see> containing header name/value pairs associated with the response, or null if no response has been received.</returns>
    </member>
    <member name="M:System.Net.WebClient.UploadData(System.String,System.Byte[])">
      <summary>Uploads a data buffer to a resource identified by a URI.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name="data">The data buffer to send to the resource.</param>
      <returns>A <see cref="T:System.Byte"></see> array containing the body of the response from the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="data">data</paramref> is null.   -or-   An error occurred while sending the data.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadData(System.Uri,System.Byte[])">
      <summary>Uploads a data buffer to a resource identified by a URI.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name="data">The data buffer to send to the resource.</param>
      <returns>A <see cref="T:System.Byte"></see> array containing the body of the response from the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="data">data</paramref> is null.   -or-   An error occurred while sending the data.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadData(System.String,System.String,System.Byte[])">
      <summary>Uploads a data buffer to the specified resource, using the specified method.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name="method">The HTTP method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="data">The data buffer to send to the resource.</param>
      <returns>A <see cref="T:System.Byte"></see> array containing the body of the response from the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="data">data</paramref> is null.   -or-   An error occurred while uploading the data.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadData(System.Uri,System.String,System.Byte[])">
      <summary>Uploads a data buffer to the specified resource, using the specified method.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name="method">The HTTP method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="data">The data buffer to send to the resource.</param>
      <returns>A <see cref="T:System.Byte"></see> array containing the body of the response from the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="data">data</paramref> is null.   -or-   An error occurred while uploading the data.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[])">
      <summary>Uploads a data buffer to a resource identified by a URI, using the specified method. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name="method">The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="data">The data buffer to send to the resource.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while opening the stream.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)">
      <summary>Uploads a data buffer to a resource identified by a URI, using the specified method and identifying token.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name="method">The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="data">The data buffer to send to the resource.</param>
      <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while opening the stream.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.Byte[])">
      <summary>Uploads a data buffer to a resource identified by a URI, using the POST method. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name="data">The data buffer to send to the resource.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while opening the stream.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="E:System.Net.WebClient.UploadDataCompleted">
      <summary>Occurs when an asynchronous data-upload operation completes.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.Byte[])">
      <summary>Uploads a data buffer that contains a <see cref="T:System.Byte"></see> array to the URI specified as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name="data">The data buffer to send to the resource.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.Byte"></see> array containing the body of the response received from the resource when the data buffer was uploaded.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while opening the stream.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.Byte[])">
      <summary>Uploads a data buffer that contains a <see cref="T:System.Byte"></see> array to the URI specified as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name="data">The data buffer to send to the resource.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.Byte"></see> array containing the body of the response received from the resource when the data buffer was uploaded.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while opening the stream.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.String,System.Byte[])">
      <summary>Uploads a data buffer that contains a <see cref="T:System.Byte"></see> array to the URI specified as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name="method">The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="data">The data buffer to send to the resource.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.Byte"></see> array containing the body of the response received from the resource when the data buffer was uploaded.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while opening the stream.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.String,System.Byte[])">
      <summary>Uploads a data buffer that contains a <see cref="T:System.Byte"></see> array to the URI specified as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name="method">The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="data">The data buffer to send to the resource.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.Byte"></see> array containing the body of the response received from the resource when the data buffer was uploaded.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while opening the stream.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFile(System.String,System.String)">
      <summary>Uploads the specified local file to a resource with the specified URI.</summary>
      <param name="address">The URI of the resource to receive the file. For example, ftp://localhost/samplefile.txt.</param>
      <param name="fileName">The file to send to the resource. For example, &quot;samplefile.txt&quot;.</param>
      <returns>A <see cref="T:System.Byte"></see> array containing the body of the response from the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="fileName">fileName</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="fileName">fileName</paramref> is null, is <see cref="F:System.String.Empty"></see>, contains invalid characters, or does not exist.   -or-   An error occurred while uploading the file.   -or-   There was no response from the server hosting the resource.   -or-   The Content-type header begins with multipart.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFile(System.Uri,System.String)">
      <summary>Uploads the specified local file to a resource with the specified URI.</summary>
      <param name="address">The URI of the resource to receive the file. For example, ftp://localhost/samplefile.txt.</param>
      <param name="fileName">The file to send to the resource. For example, &quot;samplefile.txt&quot;.</param>
      <returns>A <see cref="T:System.Byte"></see> array containing the body of the response from the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="fileName">fileName</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="fileName">fileName</paramref> is null, is <see cref="F:System.String.Empty"></see>, contains invalid characters, or does not exist.   -or-   An error occurred while uploading the file.   -or-   There was no response from the server hosting the resource.   -or-   The Content-type header begins with multipart.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFile(System.String,System.String,System.String)">
      <summary>Uploads the specified local file to the specified resource, using the specified method.</summary>
      <param name="address">The URI of the resource to receive the file.</param>
      <param name="method">The method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="fileName">The file to send to the resource.</param>
      <returns>A <see cref="T:System.Byte"></see> array containing the body of the response from the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="fileName">fileName</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="fileName">fileName</paramref> is null, is <see cref="F:System.String.Empty"></see>, contains invalid characters, or does not exist.   -or-   An error occurred while uploading the file.   -or-   There was no response from the server hosting the resource.   -or-   The Content-type header begins with multipart.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFile(System.Uri,System.String,System.String)">
      <summary>Uploads the specified local file to the specified resource, using the specified method.</summary>
      <param name="address">The URI of the resource to receive the file.</param>
      <param name="method">The method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="fileName">The file to send to the resource.</param>
      <returns>A <see cref="T:System.Byte"></see> array containing the body of the response from the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="fileName">fileName</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="fileName">fileName</paramref> is null, is <see cref="F:System.String.Empty"></see>, contains invalid characters, or does not exist.   -or-   An error occurred while uploading the file.   -or-   There was no response from the server hosting the resource.   -or-   The Content-type header begins with multipart.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String)">
      <summary>Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
      <param name="fileName">The file to send to the resource.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="fileName">fileName</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="fileName">fileName</paramref> is null, is <see cref="F:System.String.Empty"></see>, contains invalid character, or the specified path to the file does not exist.   -or-   An error occurred while opening the stream.   -or-   There was no response from the server hosting the resource.   -or-   The Content-type header begins with multipart.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String)">
      <summary>Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
      <param name="method">The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="fileName">The file to send to the resource.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="fileName">fileName</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="fileName">fileName</paramref> is null, is <see cref="F:System.String.Empty"></see>, contains invalid character, or the specified path to the file does not exist.   -or-   An error occurred while opening the stream.   -or-   There was no response from the server hosting the resource.   -or-   The Content-type header begins with multipart.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String,System.Object)">
      <summary>Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
      <param name="method">The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="fileName">The file to send to the resource.</param>
      <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="fileName">fileName</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="fileName">fileName</paramref> is null, is <see cref="F:System.String.Empty"></see>, contains invalid character, or the specified path to the file does not exist.   -or-   An error occurred while opening the stream.   -or-   There was no response from the server hosting the resource.   -or-   The Content-type header begins with multipart.</exception>
    </member>
    <member name="E:System.Net.WebClient.UploadFileCompleted">
      <summary>Occurs when an asynchronous file-upload operation completes.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String,System.String)">
      <summary>Uploads the specified local file to a resource as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
      <param name="method">The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="fileName">The local file to send to the resource.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.Byte"></see> array containing the body of the response received from the resource when the file was uploaded.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="fileName">fileName</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="fileName">fileName</paramref> is null, is <see cref="F:System.String.Empty"></see>, contains invalid character, or the specified path to the file does not exist.   -or-   An error occurred while opening the stream.   -or-   There was no response from the server hosting the resource.   -or-   The Content-type header begins with multipart.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String,System.String)">
      <summary>Uploads the specified local file to a resource as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
      <param name="method">The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="fileName">The local file to send to the resource.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.Byte"></see> array containing the body of the response received from the resource when the file was uploaded.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="fileName">fileName</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="fileName">fileName</paramref> is null, is <see cref="F:System.String.Empty"></see>, contains invalid character, or the specified path to the file does not exist.   -or-   An error occurred while opening the stream.   -or-   There was no response from the server hosting the resource.   -or-   The Content-type header begins with multipart.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String)">
      <summary>Uploads the specified local file to a resource as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
      <param name="fileName">The local file to send to the resource.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.Byte"></see> array containing the body of the response received from the resource when the file was uploaded.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="fileName">fileName</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="fileName">fileName</paramref> is null, is <see cref="F:System.String.Empty"></see>, contains invalid character, or the specified path to the file does not exist.   -or-   An error occurred while opening the stream.   -or-   There was no response from the server hosting the resource.   -or-   The Content-type header begins with multipart.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String)">
      <summary>Uploads the specified local file to a resource as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
      <param name="fileName">The local file to send to the resource.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.Byte"></see> array containing the body of the response received from the resource when the file was uploaded.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="fileName">fileName</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="fileName">fileName</paramref> is null, is <see cref="F:System.String.Empty"></see>, contains invalid character, or the specified path to the file does not exist.   -or-   An error occurred while opening the stream.   -or-   There was no response from the server hosting the resource.   -or-   The Content-type header begins with multipart.</exception>
    </member>
    <member name="E:System.Net.WebClient.UploadProgressChanged">
      <summary>Occurs when an asynchronous upload operation successfully transfers some or all of the data.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Net.WebClient.UploadString(System.String,System.String)">
      <summary>Uploads the specified string to the specified resource, using the POST method.</summary>
      <param name="address">The URI of the resource to receive the string. For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
      <param name="data">The string to be uploaded.</param>
      <returns>A <see cref="T:System.String"></see> containing the response sent by the server.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadString(System.Uri,System.String)">
      <summary>Uploads the specified string to the specified resource, using the POST method.</summary>
      <param name="address">The URI of the resource to receive the string. For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
      <param name="data">The string to be uploaded.</param>
      <returns>A <see cref="T:System.String"></see> containing the response sent by the server.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadString(System.String,System.String,System.String)">
      <summary>Uploads the specified string to the specified resource, using the specified method.</summary>
      <param name="address">The URI of the resource to receive the string. This URI must identify a resource that can accept a request sent with the method method.</param>
      <param name="method">The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="data">The string to be uploaded.</param>
      <returns>A <see cref="T:System.String"></see> containing the response sent by the server.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   There was no response from the server hosting the resource.   -or-  <paramref name="method">method</paramref> cannot be used to send content.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadString(System.Uri,System.String,System.String)">
      <summary>Uploads the specified string to the specified resource, using the specified method.</summary>
      <param name="address">The URI of the resource to receive the string. This URI must identify a resource that can accept a request sent with the method method.</param>
      <param name="method">The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="data">The string to be uploaded.</param>
      <returns>A <see cref="T:System.String"></see> containing the response sent by the server.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   There was no response from the server hosting the resource.   -or-  <paramref name="method">method</paramref> cannot be used to send content.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String)">
      <summary>Uploads the specified string to the specified resource. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
      <param name="data">The string to be uploaded.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)">
      <summary>Uploads the specified string to the specified resource. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
      <param name="method">The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="data">The string to be uploaded.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="method">method</paramref> cannot be used to send content.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)">
      <summary>Uploads the specified string to the specified resource. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
      <param name="method">The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="data">The string to be uploaded.</param>
      <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="method">method</paramref> cannot be used to send content.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="E:System.Net.WebClient.UploadStringCompleted">
      <summary>Occurs when an asynchronous string-upload operation completes.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String,System.String)">
      <summary>Uploads the specified string to the specified resource as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
      <param name="method">The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="data">The string to be uploaded.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.String"></see> containing the response sent by the server.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="method">method</paramref> cannot be used to send content.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String,System.String)">
      <summary>Uploads the specified string to the specified resource as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
      <param name="method">The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="data">The string to be uploaded.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.String"></see> containing the response sent by the server.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="method">method</paramref> cannot be used to send content.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String)">
      <summary>Uploads the specified string to the specified resource as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
      <param name="data">The string to be uploaded.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.String"></see> containing the response sent by the server.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String)">
      <summary>Uploads the specified string to the specified resource as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
      <param name="data">The string to be uploaded.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.String"></see> containing the response sent by the server.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Uploads the specified name/value collection to the resource identified by the specified URI.</summary>
      <param name="address">The URI of the resource to receive the collection.</param>
      <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection"></see> to send to the resource.</param>
      <returns>A <see cref="T:System.Byte"></see> array containing the body of the response from the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="data">data</paramref> is null.   -or-   There was no response from the server hosting the resource.   -or-   An error occurred while opening the stream.   -or-   The Content-type header is not null or &quot;application/x-www-form-urlencoded&quot;.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)">
      <summary>Uploads the specified name/value collection to the resource identified by the specified URI.</summary>
      <param name="address">The URI of the resource to receive the collection.</param>
      <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection"></see> to send to the resource.</param>
      <returns>A <see cref="T:System.Byte"></see> array containing the body of the response from the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="data">data</paramref> is null.   -or-   There was no response from the server hosting the resource.   -or-   An error occurred while opening the stream.   -or-   The Content-type header is not null or &quot;application/x-www-form-urlencoded&quot;.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Uploads the specified name/value collection to the resource identified by the specified URI, using the specified method.</summary>
      <param name="address">The URI of the resource to receive the collection.</param>
      <param name="method">The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection"></see> to send to the resource.</param>
      <returns>A <see cref="T:System.Byte"></see> array containing the body of the response from the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="data">data</paramref> is null.   -or-   An error occurred while opening the stream.   -or-   There was no response from the server hosting the resource.   -or-   The Content-type header value is not null and is not application/x-www-form-urlencoded.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Uploads the specified name/value collection to the resource identified by the specified URI, using the specified method.</summary>
      <param name="address">The URI of the resource to receive the collection.</param>
      <param name="method">The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection"></see> to send to the resource.</param>
      <returns>A <see cref="T:System.Byte"></see> array containing the body of the response from the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="data">data</paramref> is null.   -or-   An error occurred while opening the stream.   -or-   There was no response from the server hosting the resource.   -or-   The Content-type header value is not null and is not application/x-www-form-urlencoded.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)">
      <summary>Uploads the data in the specified name/value collection to the resource identified by the specified URI. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to receive the collection. This URI must identify a resource that can accept a request sent with the default method.</param>
      <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection"></see> to send to the resource.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Uploads the data in the specified name/value collection to the resource identified by the specified URI, using the specified method. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to receive the collection. This URI must identify a resource that can accept a request sent with the method method.</param>
      <param name="method">The method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection"></see> to send to the resource.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   There was no response from the server hosting the resource.   -or-  <paramref name="method">method</paramref> cannot be used to send content.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)">
      <summary>Uploads the data in the specified name/value collection to the resource identified by the specified URI, using the specified method. This method does not block the calling thread, and allows the caller to pass an object to the method that is invoked when the operation completes.</summary>
      <param name="address">The URI of the resource to receive the collection. This URI must identify a resource that can accept a request sent with the method method.</param>
      <param name="method">The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection"></see> to send to the resource.</param>
      <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.   -or-   There was no response from the server hosting the resource.   -or-  <paramref name="method">method</paramref> cannot be used to send content.</exception>
    </member>
    <member name="E:System.Net.WebClient.UploadValuesCompleted">
      <summary>Occurs when an asynchronous upload of a name/value collection completes.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the collection.</param>
      <param name="method">The HTTP method used to send the collection to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection"></see> to send to the resource.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.Byte"></see> array containing the response sent by the server.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="method">method</paramref> cannot be used to send content.   -or-   There was no response from the server hosting the resource.   -or-   An error occurred while opening the stream.   -or-   The Content-type header is not null or &quot;application/x-www-form-urlencoded&quot;.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the collection.</param>
      <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection"></see> to send to the resource.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.Byte"></see> array containing the response sent by the server.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-   There was no response from the server hosting the resource.   -or-   An error occurred while opening the stream.   -or-   The Content-type header is not null or &quot;application/x-www-form-urlencoded&quot;.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.Collections.Specialized.NameValueCollection)">
      <summary>Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the collection.</param>
      <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection"></see> to send to the resource.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.Byte"></see> array containing the response sent by the server.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-   An error occurred while opening the stream.   -or-   There was no response from the server hosting the resource.   -or-   The Content-type header value is not null and is not application/x-www-form-urlencoded.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.</summary>
      <param name="address">The URI of the resource to receive the collection.</param>
      <param name="method">The HTTP method used to send the collection to the resource. If null, the default is POST for http and STOR for ftp.</param>
      <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection"></see> to send to the resource.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.Byte"></see> array containing the response sent by the server.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.   -or-   The <paramref name="data">data</paramref> parameter is null.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress"></see>, and <paramref name="address">address</paramref> is invalid.   -or-  <paramref name="method">method</paramref> cannot be used to send content.   -or-   There was no response from the server hosting the resource.   -or-   An error occurred while opening the stream.   -or-   The Content-type header is not null or &quot;application/x-www-form-urlencoded&quot;.</exception>
    </member>
    <member name="P:System.Net.WebClient.UseDefaultCredentials">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that controls whether the <see cref="P:System.Net.CredentialCache.DefaultCredentials"></see> are sent with requests.</summary>
      <returns>true if the default credentials are used; otherwise false. The default value is false.</returns>
    </member>
    <member name="E:System.Net.WebClient.WriteStreamClosed">
      <summary>Occurs when an asynchronous operation to write data to a resource using a write stream is closed.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.WebException">
      <summary>The exception that is thrown when an error occurs while accessing the network through a pluggable protocol.</summary>
    </member>
    <member name="M:System.Net.WebException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebException"></see> class.</summary>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebException"></see> class with the specified error message.</summary>
      <param name="message">The text of the error message.</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebException"></see> class from the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> instances.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that contains the information required to serialize the new <see cref="T:System.Net.WebException"></see>.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains the source of the serialized stream that is associated with the new <see cref="T:System.Net.WebException"></see>.</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebException"></see> class with the specified error message and nested exception.</summary>
      <param name="message">The text of the error message.</param>
      <param name="innerException">A nested exception.</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Net.WebExceptionStatus)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebException"></see> class with the specified error message and status.</summary>
      <param name="message">The text of the error message.</param>
      <param name="status">One of the <see cref="T:System.Net.WebExceptionStatus"></see> values.</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Exception,System.Net.WebExceptionStatus,System.Net.WebResponse)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebException"></see> class with the specified error message, nested exception, status, and response.</summary>
      <param name="message">The text of the error message.</param>
      <param name="innerException">A nested exception.</param>
      <param name="status">One of the <see cref="T:System.Net.WebExceptionStatus"></see> values.</param>
      <param name="response">A <see cref="T:System.Net.WebResponse"></see> instance that contains the response from the remote host.</param>
    </member>
    <member name="M:System.Net.WebException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance with the data needed to serialize the <see cref="T:System.Net.WebException"></see>.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to be used.</param>
      <param name="streamingContext">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> to be used.</param>
    </member>
    <member name="P:System.Net.WebException.Response">
      <summary>Gets the response that the remote host returned.</summary>
      <returns>If a response is available from the Internet resource, a <see cref="T:System.Net.WebResponse"></see> instance that contains the error response from an Internet resource; otherwise, null.</returns>
    </member>
    <member name="P:System.Net.WebException.Status">
      <summary>Gets the status of the response.</summary>
      <returns>One of the <see cref="T:System.Net.WebExceptionStatus"></see> values.</returns>
    </member>
    <member name="M:System.Net.WebException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Serializes this instance into the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object.</summary>
      <param name="serializationInfo">The object into which this <see cref="T:System.Net.WebException"></see> will be serialized.</param>
      <param name="streamingContext">The destination of the serialization.</param>
    </member>
    <member name="T:System.Net.WebExceptionStatus">
      <summary>Defines status codes for the <see cref="T:System.Net.WebException"></see> class.</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.CacheEntryNotFound">
      <summary>The specified cache entry was not found.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ConnectFailure">
      <summary>The remote service point could not be contacted at the transport level.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ConnectionClosed">
      <summary>The connection was prematurely closed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.KeepAliveFailure">
      <summary>The connection for a request that specifies the Keep-alive header was closed unexpectedly.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.MessageLengthLimitExceeded">
      <summary>A message was received that exceeded the specified limit when sending a request or receiving a response from the server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.NameResolutionFailure">
      <summary>The name resolver service could not resolve the host name.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Pending">
      <summary>An internal asynchronous request is pending.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.PipelineFailure">
      <summary>The request was a pipelined request and the connection was closed before the response was received.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ProtocolError">
      <summary>The response received from the server was complete but indicated a protocol-level error. For example, an HTTP protocol error such as 401 Access Denied would use this status.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ProxyNameResolutionFailure">
      <summary>The name resolver service could not resolve the proxy host name.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ReceiveFailure">
      <summary>A complete response was not received from the remote server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.RequestCanceled">
      <summary>The request was canceled, the <see cref="M:System.Net.WebRequest.Abort"></see> method was called, or an unclassifiable error occurred. This is the default value for <see cref="P:System.Net.WebException.Status"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.RequestProhibitedByCachePolicy">
      <summary>The request was not permitted by the cache policy. In general, this occurs when a request is not cacheable and the effective policy prohibits sending the request to the server. You might receive this status if a request method implies the presence of a request body, a request method requires direct interaction with the server, or a request contains a conditional header.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.RequestProhibitedByProxy">
      <summary>This request was not permitted by the proxy.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.SecureChannelFailure">
      <summary>An error occurred while establishing a connection using SSL.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.SendFailure">
      <summary>A complete request could not be sent to the remote server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ServerProtocolViolation">
      <summary>The server response was not a valid HTTP response.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Success">
      <summary>No error was encountered.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Timeout">
      <summary>No response was received during the time-out period for a request.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.TrustFailure">
      <summary>A server certificate could not be validated.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebExceptionStatus.UnknownError">
      <summary>An exception of unknown type has occurred.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.WebHeaderCollection">
      <summary>Contains protocol headers associated with a request or response.</summary>
    </member>
    <member name="M:System.Net.WebHeaderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebHeaderCollection"></see> class.</summary>
    </member>
    <member name="M:System.Net.WebHeaderCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebHeaderCollection"></see> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> classes.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> containing the information required to serialize the <see cref="T:System.Net.WebHeaderCollection"></see>.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> containing the source of the serialized stream associated with the new <see cref="T:System.Net.WebHeaderCollection"></see>.</param>
      <exception cref="T:System.ArgumentException"><paramref name="headerName">headerName</paramref> contains invalid characters.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="headerName">headerName</paramref> is a null reference or <see cref="F:System.String.Empty"></see>.</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Add(System.String)">
      <summary>Inserts the specified header into the collection.</summary>
      <param name="header">The header to add, with the name and value separated by a colon.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="header">header</paramref> is null or <see cref="F:System.String.Empty"></see>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="header">header</paramref> does not contain a colon (:) character.   The length of <paramref name="value">value</paramref> is greater than 65535.   -or-   The name part of <paramref name="header">header</paramref> is <see cref="F:System.String.Empty"></see> or contains invalid characters.   -or-  <paramref name="header">header</paramref> is a restricted header that should be set with a property.   -or-   The value part of <paramref name="header">header</paramref> contains invalid characters.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length the string after the colon (:) is greater than 65535.</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Add(System.Net.HttpRequestHeader,System.String)">
      <summary>Inserts the specified header with the specified value into the collection.</summary>
      <param name="header">The header to add to the collection.</param>
      <param name="value">The content of the header.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="value">value</paramref> is greater than 65535.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Net.WebHeaderCollection"></see> instance does not allow instances of <see cref="T:System.Net.HttpRequestHeader"></see>.</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Add(System.Net.HttpResponseHeader,System.String)">
      <summary>Inserts the specified header with the specified value into the collection.</summary>
      <param name="header">The header to add to the collection.</param>
      <param name="value">The content of the header.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="value">value</paramref> is greater than 65535.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Net.WebHeaderCollection"></see> instance does not allow instances of <see cref="T:System.Net.HttpResponseHeader"></see>.</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Add(System.String,System.String)">
      <summary>Inserts a header with the specified name and value into the collection.</summary>
      <param name="name">The header to add to the collection.</param>
      <param name="value">The content of the header.</param>
      <exception cref="T:System.ArgumentException"><paramref name="name">name</paramref> is null, <see cref="F:System.String.Empty"></see>, or contains invalid characters.   -or-  <paramref name="name">name</paramref> is a restricted header that must be set with a property setting.   -or-  <paramref name="value">value</paramref> contains invalid characters.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="value">value</paramref> is greater than 65535.</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.AddWithoutValidate(System.String,System.String)">
      <summary>Inserts a header into the collection without checking whether the header is on the restricted header list.</summary>
      <param name="headerName">The header to add to the collection.</param>
      <param name="headerValue">The content of the header.</param>
      <exception cref="T:System.ArgumentException"><paramref name="headerName">headerName</paramref> is null, <see cref="F:System.String.Empty"></see>, or contains invalid characters.   -or-  <paramref name="headerValue">headerValue</paramref> contains invalid characters.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="headerName">headerName</paramref> is not null and the length of <paramref name="headerValue">headerValue</paramref> is too long (greater than 65,535 characters).</exception>
    </member>
    <member name="P:System.Net.WebHeaderCollection.AllKeys">
      <summary>Gets all header names (keys) in the collection.</summary>
      <returns>An array of type <see cref="T:System.String"></see> containing all header names in a Web request.</returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Clear">
      <summary>Removes all headers from the collection.</summary>
    </member>
    <member name="P:System.Net.WebHeaderCollection.Count">
      <summary>Gets the number of headers in the collection.</summary>
      <returns>An <see cref="T:System.Int32"></see> indicating the number of headers in a request.</returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Get(System.Int32)">
      <summary>Gets the value of a particular header in the collection, specified by an index into the collection.</summary>
      <param name="index">The zero-based index of the key to get from the collection.</param>
      <returns>A <see cref="T:System.String"></see> containing the value of the specified header.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is negative.   -or-  <paramref name="index">index</paramref> exceeds the size of the collection.</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Get(System.String)">
      <summary>Gets the value of a particular header in the collection, specified by the name of the header.</summary>
      <param name="name">The name of the Web header.</param>
      <returns>A <see cref="T:System.String"></see> holding the value of the specified header.</returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the <see cref="T:System.Net.WebHeaderCollection"></see> instance.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> for the <see cref="T:System.Net.WebHeaderCollection"></see>.</returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.GetKey(System.Int32)">
      <summary>Gets the header name at the specified position in the collection.</summary>
      <param name="index">The zero-based index of the key to get from the collection.</param>
      <returns>A <see cref="T:System.String"></see> holding the header name.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is negative.   -or-  <paramref name="index">index</paramref> exceeds the size of the collection.</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that specifies the destination for this serialization.</param>
    </member>
    <member name="M:System.Net.WebHeaderCollection.GetValues(System.String)">
      <summary>Gets an array of header values stored in a header.</summary>
      <param name="header">The header to return.</param>
      <returns>An array of header strings.</returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.GetValues(System.Int32)">
      <summary>Gets an array of header values stored in the <paramref name="index">index</paramref> position of the header collection.</summary>
      <param name="index">The header index to return.</param>
      <returns>An array of header strings.</returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.IsRestricted(System.String)">
      <summary>Tests whether the specified HTTP header can be set for the request.</summary>
      <param name="headerName">The header to test.</param>
      <returns>true if the header is restricted; otherwise false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="headerName">headerName</paramref> is null or <see cref="F:System.String.Empty"></see>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="headerName">headerName</paramref> contains invalid characters.</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.IsRestricted(System.String,System.Boolean)">
      <summary>Tests whether the specified HTTP header can be set for the request or the response.</summary>
      <param name="headerName">The header to test.</param>
      <param name="response">Does the Framework test the response or the request?</param>
      <returns>true if the header is restricted; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="headerName">headerName</paramref> is null or <see cref="F:System.String.Empty"></see>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="headerName">headerName</paramref> contains invalid characters.</exception>
    </member>
    <member name="P:System.Net.WebHeaderCollection.Item(System.Net.HttpRequestHeader)">
      <summary>Gets or sets the specified request header.</summary>
      <param name="header">The request header value.</param>
      <returns>A <see cref="T:System.String"></see> instance containing the specified header value.</returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Net.WebHeaderCollection"></see> instance does not allow instances of <see cref="T:System.Net.HttpRequestHeader"></see>.</exception>
    </member>
    <member name="P:System.Net.WebHeaderCollection.Item(System.Net.HttpResponseHeader)">
      <summary>Gets or sets the specified response header.</summary>
      <param name="header">The response header value.</param>
      <returns>A <see cref="T:System.String"></see> instance containing the specified header.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="value">value</paramref> is greater than 65535.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Net.WebHeaderCollection"></see> instance does not allow instances of <see cref="T:System.Net.HttpResponseHeader"></see>.</exception>
    </member>
    <member name="P:System.Net.WebHeaderCollection.Keys">
      <summary>Gets the collection of header names (keys) in the collection.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></see> containing all header names in a Web request.</returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.OnDeserialization(System.Object)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface and raises the deserialization event when the deserialization is complete.</summary>
      <param name="sender">The source of the deserialization event.</param>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Remove(System.Net.HttpRequestHeader)">
      <summary>Removes the specified header from the collection.</summary>
      <param name="header">The <see cref="T:System.Net.HttpRequestHeader"></see> instance to remove from the collection.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Net.WebHeaderCollection"></see> instance does not allow instances of <see cref="T:System.Net.HttpRequestHeader"></see>.</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Remove(System.Net.HttpResponseHeader)">
      <summary>Removes the specified header from the collection.</summary>
      <param name="header">The <see cref="T:System.Net.HttpResponseHeader"></see> instance to remove from the collection.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Net.WebHeaderCollection"></see> instance does not allow instances of <see cref="T:System.Net.HttpResponseHeader"></see>.</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Remove(System.String)">
      <summary>Removes the specified header from the collection.</summary>
      <param name="name">The name of the header to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null<see cref="F:System.String.Empty"></see>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="name">name</paramref> is a restricted header.   -or-  <paramref name="name">name</paramref> contains invalid characters.</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Set(System.Net.HttpRequestHeader,System.String)">
      <summary>Sets the specified header to the specified value.</summary>
      <param name="header">The <see cref="T:System.Net.HttpRequestHeader"></see> value to set.</param>
      <param name="value">The content of the header to set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="value">value</paramref> is greater than 65535.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Net.WebHeaderCollection"></see> instance does not allow instances of <see cref="T:System.Net.HttpRequestHeader"></see>.</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Set(System.Net.HttpResponseHeader,System.String)">
      <summary>Sets the specified header to the specified value.</summary>
      <param name="header">The <see cref="T:System.Net.HttpResponseHeader"></see> value to set.</param>
      <param name="value">The content of the header to set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="value">value</paramref> is greater than 65535.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Net.WebHeaderCollection"></see> instance does not allow instances of <see cref="T:System.Net.HttpResponseHeader"></see>.</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Set(System.String,System.String)">
      <summary>Sets the specified header to the specified value.</summary>
      <param name="name">The header to set.</param>
      <param name="value">The content of the header to set.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null or <see cref="F:System.String.Empty"></see>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="value">value</paramref> is greater than 65535.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="name">name</paramref> is a restricted header.   -or-  <paramref name="name">name</paramref> or <paramref name="value">value</paramref> contain invalid characters.</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.ToByteArray">
      <summary>Converts the <see cref="T:System.Net.WebHeaderCollection"></see> to a byte array..</summary>
      <returns>A <see cref="T:System.Byte"></see> array holding the header collection.</returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.ToString">
      <summary>This method is obsolete.</summary>
      <returns>The <see cref="T:System.String"></see> representation of the collection.</returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Serializes this instance into the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object.</summary>
      <param name="serializationInfo">The object into which this <see cref="T:System.Net.WebHeaderCollection"></see> will be serialized.</param>
      <param name="streamingContext">The destination of the serialization.</param>
    </member>
    <member name="T:System.Net.WebPermission">
      <summary>Controls rights to access HTTP Internet resources.</summary>
    </member>
    <member name="M:System.Net.WebPermission.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Net.WebPermission"></see> class.</summary>
    </member>
    <member name="M:System.Net.WebPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Creates a new instance of the <see cref="T:System.Net.WebPermission"></see> class that passes all demands or fails all demands.</summary>
      <param name="state">A <see cref="T:System.Security.Permissions.PermissionState"></see> value.</param>
    </member>
    <member name="M:System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebPermission"></see> class with the specified access rights for the specified URI.</summary>
      <param name="access">A NetworkAccess value that indicates what kind of access to grant to the specified URI. <see cref="F:System.Net.NetworkAccess.Accept"></see> indicates that the application is allowed to accept connections from the Internet on a local resource. <see cref="F:System.Net.NetworkAccess.Connect"></see> indicates that the application is allowed to connect to specific Internet resources.</param>
      <param name="uriString">A URI string to which access rights are granted.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="uriString">uriString</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebPermission"></see> class with the specified access rights for the specified URI regular expression.</summary>
      <param name="access">A <see cref="T:System.Net.NetworkAccess"></see> value that indicates what kind of access to grant to the specified URI. <see cref="F:System.Net.NetworkAccess.Accept"></see> indicates that the application is allowed to accept connections from the Internet on a local resource. <see cref="F:System.Net.NetworkAccess.Connect"></see> indicates that the application is allowed to connect to specific Internet resources.</param>
      <param name="uriRegex">A regular expression that describes the URI to which access is to be granted.</param>
    </member>
    <member name="P:System.Net.WebPermission.AcceptList">
      <summary>This property returns an enumeration of a single accept permissions held by this <see cref="T:System.Net.WebPermission"></see>. The possible objects types contained in the returned enumeration are <see cref="T:System.String"></see> and <see cref="T:System.Text.RegularExpressions.Regex"></see>.</summary>
      <returns>The <see cref="T:System.Collections.IEnumerator"></see> interface that contains accept permissions.</returns>
    </member>
    <member name="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)">
      <summary>Adds the specified URI string with the specified access rights to the current <see cref="T:System.Net.WebPermission"></see>.</summary>
      <param name="access">A <see cref="T:System.Net.NetworkAccess"></see> that specifies the access rights that are granted to the URI.</param>
      <param name="uriString">A string that describes the URI to which access rights are granted.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="uriString">uriString</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)">
      <summary>Adds the specified URI with the specified access rights to the current <see cref="T:System.Net.WebPermission"></see>.</summary>
      <param name="access">A NetworkAccess that specifies the access rights that are granted to the URI.</param>
      <param name="uriRegex">A regular expression that describes the set of URIs to which access rights are granted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="uriRegex">uriRegex</paramref> parameter is null.</exception>
    </member>
    <member name="P:System.Net.WebPermission.ConnectList">
      <summary>This property returns an enumeration of a single connect permissions held by this <see cref="T:System.Net.WebPermission"></see>. The possible objects types contained in the returned enumeration are <see cref="T:System.String"></see> and <see cref="T:System.Text.RegularExpressions.Regex"></see>.</summary>
      <returns>The <see cref="T:System.Collections.IEnumerator"></see> interface that contains connect permissions.</returns>
    </member>
    <member name="M:System.Net.WebPermission.Copy">
      <summary>Creates a copy of a <see cref="T:System.Net.WebPermission"></see>.</summary>
      <returns>A new instance of the <see cref="T:System.Net.WebPermission"></see> class that has the same values as the original.</returns>
    </member>
    <member name="M:System.Net.WebPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a <see cref="T:System.Net.WebPermission"></see> from an XML encoding.</summary>
      <param name="securityElement">The XML encoding from which to reconstruct the <see cref="T:System.Net.WebPermission"></see>.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="securityElement">securityElement</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="securityElement">securityElement</paramref> is not a permission element for this type.</exception>
    </member>
    <member name="M:System.Net.WebPermission.Intersect(System.Security.IPermission)">
      <summary>Returns the logical intersection of two <see cref="T:System.Net.WebPermission"></see> instances.</summary>
      <param name="target">The <see cref="T:System.Net.WebPermission"></see> to compare with the current instance.</param>
      <returns>A new <see cref="T:System.Net.WebPermission"></see> that represents the intersection of the current instance and the <paramref name="target">target</paramref> parameter. If the intersection is empty, the method returns null.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not null or of type <see cref="T:System.Net.WebPermission"></see></exception>
    </member>
    <member name="M:System.Net.WebPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current <see cref="T:System.Net.WebPermission"></see> is a subset of the specified object.</summary>
      <param name="target">The <see cref="T:System.Net.WebPermission"></see> to compare to the current <see cref="T:System.Net.WebPermission"></see>.</param>
      <returns>true if the current instance is a subset of the <paramref name="target">target</paramref> parameter; otherwise, false. If the target is null, the method returns true for an empty current permission that is not unrestricted and false otherwise.</returns>
      <exception cref="T:System.ArgumentException">The target parameter is not an instance of <see cref="T:System.Net.WebPermission"></see>.</exception>
      <exception cref="T:System.NotSupportedException">The current instance contains a Regex-encoded right and there is not exactly the same right found in the target instance.</exception>
    </member>
    <member name="M:System.Net.WebPermission.IsUnrestricted">
      <summary>Checks the overall permission state of the <see cref="T:System.Net.WebPermission"></see>.</summary>
      <returns>true if the <see cref="T:System.Net.WebPermission"></see> was created with the <see cref="F:System.Security.Permissions.PermissionState.Unrestricted"></see><see cref="T:System.Security.Permissions.PermissionState"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.WebPermission.ToXml">
      <summary>Creates an XML encoding of a <see cref="T:System.Net.WebPermission"></see> and its current state.</summary>
      <returns>A <see cref="T:System.Security.SecurityElement"></see> that contains an XML-encoded representation of the <see cref="T:System.Net.WebPermission"></see>, including state information.</returns>
    </member>
    <member name="M:System.Net.WebPermission.Union(System.Security.IPermission)">
      <summary>Returns the logical union between two instances of the <see cref="T:System.Net.WebPermission"></see> class.</summary>
      <param name="target">The <see cref="T:System.Net.WebPermission"></see> to combine with the current <see cref="T:System.Net.WebPermission"></see>.</param>
      <returns>A <see cref="T:System.Net.WebPermission"></see> that represents the union of the current instance and the <paramref name="target">target</paramref> parameter. If either WebPermission is <see cref="F:System.Security.Permissions.PermissionState.Unrestricted"></see>, the method returns a <see cref="T:System.Net.WebPermission"></see> that is <see cref="F:System.Security.Permissions.PermissionState.Unrestricted"></see>. If the target is null, the method returns a copy of the current <see cref="T:System.Net.WebPermission"></see>.</returns>
      <exception cref="T:System.ArgumentException">target is not null or of type <see cref="T:System.Net.WebPermission"></see>.</exception>
    </member>
    <member name="T:System.Net.WebPermissionAttribute">
      <summary>Specifies permission to access Internet resources. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Net.WebPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebPermissionAttribute"></see> class with a value that specifies the security actions that can be performed on this class.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
      <exception cref="T:System.ArgumentException"><paramref name="action">action</paramref> is not a valid <see cref="T:System.Security.Permissions.SecurityAction"></see> value.</exception>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.Accept">
      <summary>Gets or sets the URI string accepted by the current <see cref="T:System.Net.WebPermissionAttribute"></see>.</summary>
      <returns>A string containing the URI accepted by the current <see cref="T:System.Net.WebPermissionAttribute"></see>.</returns>
      <exception cref="T:System.ArgumentException"><see cref="P:System.Net.WebPermissionAttribute.Accept"></see> is not null when you attempt to set the value. If you wish to specify more than one Accept URI, use an additional attribute declaration statement.</exception>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.AcceptPattern">
      <summary>Gets or sets a regular expression pattern that describes the URI accepted by the current <see cref="T:System.Net.WebPermissionAttribute"></see>.</summary>
      <returns>A string containing a regular expression pattern that describes the URI accepted by the current <see cref="T:System.Net.WebPermissionAttribute"></see>. This string must be escaped according to the rules for encoding a <see cref="T:System.Text.RegularExpressions.Regex"></see> constructor string.</returns>
      <exception cref="T:System.ArgumentException"><see cref="P:System.Net.WebPermissionAttribute.AcceptPattern"></see> is not null when you attempt to set the value. If you wish to specify more than one Accept URI, use an additional attribute declaration statement.</exception>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.Connect">
      <summary>Gets or sets the URI connection string controlled by the current <see cref="T:System.Net.WebPermissionAttribute"></see>.</summary>
      <returns>A string containing the URI connection controlled by the current <see cref="T:System.Net.WebPermissionAttribute"></see>.</returns>
      <exception cref="T:System.ArgumentException"><see cref="P:System.Net.WebPermissionAttribute.Connect"></see> is not null when you attempt to set the value. If you wish to specify more than one Connect URI, use an additional attribute declaration statement.</exception>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.ConnectPattern">
      <summary>Gets or sets a regular expression pattern that describes the URI connection controlled by the current <see cref="T:System.Net.WebPermissionAttribute"></see>.</summary>
      <returns>A string containing a regular expression pattern that describes the URI connection controlled by this <see cref="T:System.Net.WebPermissionAttribute"></see>.</returns>
      <exception cref="T:System.ArgumentException"><see cref="P:System.Net.WebPermissionAttribute.ConnectPattern"></see> is not null when you attempt to set the value. If you wish to specify more than one connect URI, use an additional attribute declaration statement.</exception>
    </member>
    <member name="M:System.Net.WebPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new instance of the <see cref="T:System.Net.WebPermission"></see> class.</summary>
      <returns>A <see cref="T:System.Net.WebPermission"></see> corresponding to the security declaration.</returns>
    </member>
    <member name="T:System.Net.WebProxy">
      <summary>Contains HTTP proxy settings for the <see cref="T:System.Net.WebRequest"></see> class.</summary>
    </member>
    <member name="M:System.Net.WebProxy.#ctor">
      <summary>Initializes an empty instance of the <see cref="T:System.Net.WebProxy"></see> class.</summary>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebProxy"></see> class with the specified URI.</summary>
      <param name="Address">The URI of the proxy server.</param>
      <exception cref="T:System.UriFormatException"><paramref name="Address">Address</paramref> is an invalid URI.</exception>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebProxy"></see> class from the specified <see cref="T:System.Uri"></see> instance.</summary>
      <param name="Address">A <see cref="T:System.Uri"></see> instance that contains the address of the proxy server.</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.Net.WebProxy"></see> class using previously serialized content.</summary>
      <param name="serializationInfo">The serialization data.</param>
      <param name="streamingContext">The context for the serialized data.</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebProxy"></see> class with the specified URI and bypass setting.</summary>
      <param name="Address">The URI of the proxy server.</param>
      <param name="BypassOnLocal">true to bypass the proxy for local addresses; otherwise, false.</param>
      <exception cref="T:System.UriFormatException"><paramref name="Address">Address</paramref> is an invalid URI.</exception>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebProxy"></see> class with the specified host and port number.</summary>
      <param name="Host">The name of the proxy host.</param>
      <param name="Port">The port number on Host to use.</param>
      <exception cref="T:System.UriFormatException">The URI formed by combining <paramref name="Host">Host</paramref> and <paramref name="Port">Port</paramref> is not a valid URI.</exception>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebProxy"></see> class with the <see cref="T:System.Uri"></see> instance and bypass setting.</summary>
      <param name="Address">A <see cref="T:System.Uri"></see> instance that contains the address of the proxy server.</param>
      <param name="BypassOnLocal">true to bypass the proxy for local addresses; otherwise, false.</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebProxy"></see> class with the specified URI, bypass setting, and list of URIs to bypass.</summary>
      <param name="Address">The URI of the proxy server.</param>
      <param name="BypassOnLocal">true to bypass the proxy for local addresses; otherwise, false.</param>
      <param name="BypassList">An array of regular expression strings that contain the URIs of the servers to bypass.</param>
      <exception cref="T:System.UriFormatException"><paramref name="Address">Address</paramref> is an invalid URI.</exception>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebProxy"></see> class with the specified <see cref="T:System.Uri"></see> instance, bypass setting, and list of URIs to bypass.</summary>
      <param name="Address">A <see cref="T:System.Uri"></see> instance that contains the address of the proxy server.</param>
      <param name="BypassOnLocal">true to bypass the proxy for local addresses; otherwise, false.</param>
      <param name="BypassList">An array of regular expression strings that contains the URIs of the servers to bypass.</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[],System.Net.ICredentials)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebProxy"></see> class with the specified URI, bypass setting, list of URIs to bypass, and credentials.</summary>
      <param name="Address">The URI of the proxy server.</param>
      <param name="BypassOnLocal">true to bypass the proxy for local addresses; otherwise, false.</param>
      <param name="BypassList">An array of regular expression strings that contains the URIs of the servers to bypass.</param>
      <param name="Credentials">An <see cref="T:System.Net.ICredentials"></see> instance to submit to the proxy server for authentication.</param>
      <exception cref="T:System.UriFormatException"><paramref name="Address">Address</paramref> is an invalid URI.</exception>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[],System.Net.ICredentials)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebProxy"></see> class with the specified <see cref="T:System.Uri"></see> instance, bypass setting, list of URIs to bypass, and credentials.</summary>
      <param name="Address">A <see cref="T:System.Uri"></see> instance that contains the address of the proxy server.</param>
      <param name="BypassOnLocal">true to bypass the proxy for local addresses; otherwise, false.</param>
      <param name="BypassList">An array of regular expression strings that contains the URIs of the servers to bypass.</param>
      <param name="Credentials">An <see cref="T:System.Net.ICredentials"></see> instance to submit to the proxy server for authentication.</param>
    </member>
    <member name="P:System.Net.WebProxy.Address">
      <summary>Gets or sets the address of the proxy server.</summary>
      <returns>A <see cref="T:System.Uri"></see> instance that contains the address of the proxy server.</returns>
    </member>
    <member name="P:System.Net.WebProxy.BypassArrayList">
      <summary>Gets a list of addresses that do not use the proxy server.</summary>
      <returns>An <see cref="T:System.Collections.ArrayList"></see> that contains a list of <see cref="P:System.Net.WebProxy.BypassList"></see> arrays that represents URIs that do not use the proxy server when accessed.</returns>
    </member>
    <member name="P:System.Net.WebProxy.BypassList">
      <summary>Gets or sets an array of addresses that do not use the proxy server.</summary>
      <returns>An array that contains a list of regular expressions that describe URIs that do not use the proxy server when accessed.</returns>
    </member>
    <member name="P:System.Net.WebProxy.BypassProxyOnLocal">
      <summary>Gets or sets a value that indicates whether to bypass the proxy server for local addresses.</summary>
      <returns>true to bypass the proxy server for local addresses; otherwise, false. The default value is false.</returns>
    </member>
    <member name="M:System.Net.WebProxy.CreateDefaultProxy">
      <returns></returns>
    </member>
    <member name="P:System.Net.WebProxy.Credentials">
      <summary>Gets or sets the credentials to submit to the proxy server for authentication.</summary>
      <returns>An <see cref="T:System.Net.ICredentials"></see> instance that contains the credentials to submit to the proxy server for authentication.</returns>
      <exception cref="T:System.InvalidOperationException">You attempted to set this property when the <see cref="P:System.Net.WebProxy.UseDefaultCredentials"></see> property was set to true.</exception>
    </member>
    <member name="M:System.Net.WebProxy.GetDefaultProxy">
      <summary>Reads the Internet Explorer nondynamic proxy settings.</summary>
      <returns>A <see cref="T:System.Net.WebProxy"></see> instance that contains the nondynamic proxy settings from Internet Explorer 5.5 and later.</returns>
    </member>
    <member name="M:System.Net.WebProxy.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data that is needed to serialize the target object.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that specifies the destination for this serialization.</param>
    </member>
    <member name="M:System.Net.WebProxy.GetProxy(System.Uri)">
      <summary>Returns the proxied URI for a request.</summary>
      <param name="destination">The <see cref="T:System.Uri"></see> instance of the requested Internet resource.</param>
      <returns>The <see cref="T:System.Uri"></see> instance of the Internet resource, if the resource is on the bypass list; otherwise, the <see cref="T:System.Uri"></see> instance of the proxy.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="destination">destination</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Net.WebProxy.IsBypassed(System.Uri)">
      <summary>Indicates whether to use the proxy server for the specified host.</summary>
      <param name="host">The <see cref="T:System.Uri"></see> instance of the host to check for proxy use.</param>
      <returns>true if the proxy server should not be used for <paramref name="host">host</paramref>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="host">host</paramref> parameter is null.</exception>
    </member>
    <member name="P:System.Net.WebProxy.UseDefaultCredentials">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that controls whether the <see cref="P:System.Net.CredentialCache.DefaultCredentials"></see> are sent with requests.</summary>
      <returns>true if the default credentials are used; otherwise, false. The default value is false.</returns>
      <exception cref="T:System.InvalidOperationException">You attempted to set this property when the <see cref="P:System.Net.WebProxy.Credentials"></see> property contains credentials other than the default credentials.</exception>
    </member>
    <member name="M:System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates the serialization data and context that are used by the system to serialize a <see cref="T:System.Net.WebProxy"></see> object.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object to populate with data.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> structure that indicates the destination for this serialization.</param>
    </member>
    <member name="T:System.Net.WebRequest">
      
    </member>
    <member name="M:System.Net.WebRequest.#ctor">
      
    </member>
    <member name="M:System.Net.WebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="serializationInfo"></param>
      <param name="streamingContext"></param>
    </member>
    <member name="M:System.Net.WebRequest.Abort">
      
    </member>
    <member name="P:System.Net.WebRequest.AuthenticationLevel">
      <returns></returns>
    </member>
    <member name="M:System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <param name="callback"></param>
      <param name="state"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <param name="callback"></param>
      <param name="state"></param>
      <returns></returns>
    </member>
    <member name="P:System.Net.WebRequest.CachePolicy">
      <returns></returns>
    </member>
    <member name="P:System.Net.WebRequest.ConnectionGroupName">
      <returns></returns>
    </member>
    <member name="P:System.Net.WebRequest.ContentLength">
      <returns></returns>
    </member>
    <member name="P:System.Net.WebRequest.ContentType">
      <returns></returns>
    </member>
    <member name="M:System.Net.WebRequest.Create(System.String)">
      <param name="requestUriString"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.WebRequest.Create(System.Uri)">
      <param name="requestUri"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.WebRequest.CreateDefault(System.Uri)">
      <param name="requestUri"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.WebRequest.CreateHttp(System.String)">
      <param name="requestUriString"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.WebRequest.CreateHttp(System.Uri)">
      <param name="requestUri"></param>
      <returns></returns>
    </member>
    <member name="P:System.Net.WebRequest.CreatorInstance">
      <returns></returns>
    </member>
    <member name="P:System.Net.WebRequest.Credentials">
      <returns></returns>
    </member>
    <member name="P:System.Net.WebRequest.DefaultCachePolicy">
      <returns></returns>
    </member>
    <member name="P:System.Net.WebRequest.DefaultWebProxy">
      <returns></returns>
    </member>
    <member name="M:System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)">
      <param name="asyncResult"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.WebRequest.EndGetResponse(System.IAsyncResult)">
      <param name="asyncResult"></param>
      <returns></returns>
    </member>
    <member name="M:System.Net.WebRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="serializationInfo"></param>
      <param name="streamingContext"></param>
    </member>
    <member name="M:System.Net.WebRequest.GetRequestStream">
      <returns></returns>
    </member>
    <member name="M:System.Net.WebRequest.GetRequestStreamAsync">
      <returns></returns>
    </member>
    <member name="M:System.Net.WebRequest.GetResponse">
      <returns></returns>
    </member>
    <member name="M:System.Net.WebRequest.GetResponseAsync">
      <returns></returns>
    </member>
    <member name="M:System.Net.WebRequest.GetSystemWebProxy">
      <returns></returns>
    </member>
    <member name="P:System.Net.WebRequest.Headers">
      <returns></returns>
    </member>
    <member name="P:System.Net.WebRequest.ImpersonationLevel">
      <returns></returns>
    </member>
    <member name="P:System.Net.WebRequest.Method">
      <returns></returns>
    </member>
    <member name="P:System.Net.WebRequest.PreAuthenticate">
      <returns></returns>
    </member>
    <member name="P:System.Net.WebRequest.Proxy">
      <returns></returns>
    </member>
    <member name="M:System.Net.WebRequest.RegisterPortableWebRequestCreator(System.Net.IWebRequestCreate)">
      <param name="creator"></param>
    </member>
    <member name="M:System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)">
      <param name="prefix"></param>
      <param name="creator"></param>
      <returns></returns>
    </member>
    <member name="P:System.Net.WebRequest.RequestUri">
      <returns></returns>
    </member>
    <member name="P:System.Net.WebRequest.Timeout">
      <returns></returns>
    </member>
    <member name="P:System.Net.WebRequest.UseDefaultCredentials">
      <returns></returns>
    </member>
    <member name="M:System.Net.WebRequest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="serializationInfo"></param>
      <param name="streamingContext"></param>
    </member>
    <member name="T:System.Net.WebRequestMethods.File">
      <summary>Represents the types of file protocol methods that can be used with a FILE request. This class cannot be inherited.</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.File.DownloadFile">
      <summary>Represents the FILE GET protocol method that is used to retrieve a file from a specified location.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebRequestMethods.File.UploadFile">
      <summary>Represents the FILE PUT protocol method that is used to copy a file to a specified location.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.WebRequestMethods.Ftp">
      <summary>Represents the types of FTP protocol methods that can be used with an FTP request. This class cannot be inherited.</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.AppendFile">
      <summary>Represents the FTP APPE protocol method that is used to append a file to an existing file on an FTP server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.DeleteFile">
      <summary>Represents the FTP DELE protocol method that is used to delete a file on an FTP server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.DownloadFile">
      <summary>Represents the FTP RETR protocol method that is used to download a file from an FTP server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.GetDateTimestamp">
      <summary>Represents the FTP MDTM protocol method that is used to retrieve the date-time stamp from a file on an FTP server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.GetFileSize">
      <summary>Represents the FTP SIZE protocol method that is used to retrieve the size of a file on an FTP server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.ListDirectory">
      <summary>Represents the FTP NLIST protocol method that gets a short listing of the files on an FTP server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.ListDirectoryDetails">
      <summary>Represents the FTP LIST protocol method that gets a detailed listing of the files on an FTP server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.MakeDirectory">
      <summary>Represents the FTP MKD protocol method creates a directory on an FTP server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.PrintWorkingDirectory">
      <summary>Represents the FTP PWD protocol method that prints the name of the current working directory.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.RemoveDirectory">
      <summary>Represents the FTP RMD protocol method that removes a directory.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.Rename">
      <summary>Represents the FTP RENAME protocol method that renames a directory.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.UploadFile">
      <summary>Represents the FTP STOR protocol method that uploads a file to an FTP server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.UploadFileWithUniqueName">
      <summary>Represents the FTP STOU protocol that uploads a file with a unique name to an FTP server.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.WebRequestMethods.Http">
      <summary>Represents the types of HTTP protocol methods that can be used with an HTTP request.</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Connect">
      <summary>Represents the HTTP CONNECT protocol method that is used with a proxy that can dynamically switch to tunneling, as in the case of SSL tunneling.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Get">
      <summary>Represents an HTTP GET protocol method.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Head">
      <summary>Represents an HTTP HEAD protocol method. The HEAD method is identical to GET except that the server only returns message-headers in the response, without a message-body.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.MkCol">
      <summary>Represents an HTTP MKCOL request that creates a new collection (such as a collection of pages) at the location specified by the request-Uniform Resource Identifier (URI).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Post">
      <summary>Represents an HTTP POST protocol method that is used to post a new entity as an addition to a URI.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Put">
      <summary>Represents an HTTP PUT protocol method that is used to replace an entity identified by a URI.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.WebRequestMethods">
      <summary>Container class for <see cref="T:System.Net.WebRequestMethods.Ftp"></see>, <see cref="T:System.Net.WebRequestMethods.File"></see>, and <see cref="T:System.Net.WebRequestMethods.Http"></see> classes. This class cannot be inherited</summary>
    </member>
    <member name="T:System.Net.WebResponse">
      <summary>Provides a response from a Uniform Resource Identifier (URI). This is an abstract class.</summary>
    </member>
    <member name="M:System.Net.WebResponse.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebResponse"></see> class.</summary>
    </member>
    <member name="M:System.Net.WebResponse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebResponse"></see> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> classes.</summary>
      <param name="serializationInfo">An instance of the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> class that contains the information required to serialize the new <see cref="T:System.Net.WebRequest"></see> instance.</param>
      <param name="streamingContext">An instance of the <see cref="T:System.Runtime.Serialization.StreamingContext"></see> class that indicates the source of the serialized stream that is associated with the new <see cref="T:System.Net.WebRequest"></see> instance.</param>
      <exception cref="T:System.NotSupportedException">Any attempt is made to access the constructor, when the constructor is not overridden in a descendant class.</exception>
    </member>
    <member name="M:System.Net.WebResponse.Close">
      <summary>When overridden by a descendant class, closes the response stream.</summary>
      <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class.</exception>
    </member>
    <member name="P:System.Net.WebResponse.ContentLength">
      <summary>When overridden in a descendant class, gets or sets the content length of data being received.</summary>
      <returns>The number of bytes returned from the Internet resource.</returns>
      <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class.</exception>
    </member>
    <member name="P:System.Net.WebResponse.ContentType">
      <summary>When overridden in a derived class, gets or sets the content type of the data being received.</summary>
      <returns>A string that contains the content type of the response.</returns>
      <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class.</exception>
    </member>
    <member name="M:System.Net.WebResponse.Dispose">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.WebResponse"></see> object.</summary>
    </member>
    <member name="M:System.Net.WebResponse.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.WebResponse"></see> object, and optionally disposes of the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.WebResponse.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data that is needed to serialize the target object.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that specifies the destination for this serialization.</param>
    </member>
    <member name="M:System.Net.WebResponse.GetResponseStream">
      <summary>When overridden in a descendant class, returns the data stream from the Internet resource.</summary>
      <returns>An instance of the <see cref="T:System.IO.Stream"></see> class for reading data from the Internet resource.</returns>
      <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class.</exception>
    </member>
    <member name="P:System.Net.WebResponse.Headers">
      <summary>When overridden in a derived class, gets a collection of header name-value pairs associated with this request.</summary>
      <returns>An instance of the <see cref="T:System.Net.WebHeaderCollection"></see> class that contains header values associated with this response.</returns>
      <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class.</exception>
    </member>
    <member name="P:System.Net.WebResponse.IsFromCache">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether this response was obtained from the cache.</summary>
      <returns>true if the response was taken from the cache; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.WebResponse.IsMutuallyAuthenticated">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether mutual authentication occurred.</summary>
      <returns>true if both client and server were authenticated; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.WebResponse.ResponseUri">
      <summary>When overridden in a derived class, gets the URI of the Internet resource that actually responded to the request.</summary>
      <returns>An instance of the <see cref="T:System.Uri"></see> class that contains the URI of the Internet resource that actually responded to the request.</returns>
      <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class.</exception>
    </member>
    <member name="P:System.Net.WebResponse.SupportsHeaders">
      <summary>Gets a value that indicates if headers are supported.</summary>
      <returns>Returns <see cref="T:System.Boolean"></see>.  true if headers are supported; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.WebResponse.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance with the data that is needed to serialize <see cref="T:System.Net.WebResponse"></see>.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that will hold the serialized data for the <see cref="T:System.Net.WebResponse"></see>.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains the destination of the serialized stream that is associated with the new <see cref="T:System.Net.WebResponse"></see>.</param>
    </member>
    <member name="T:System.Net.WebSockets.ClientWebSocket">
      <summary>Provides a client for connecting to WebSocket services.</summary>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Net.WebSockets.ClientWebSocket"></see> class.</summary>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.Abort">
      <summary>Aborts the connection and cancels any pending IO operations.</summary>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
      <summary>Close the <see cref="T:System.Net.WebSockets.ClientWebSocket"></see> instance as an asynchronous operation.</summary>
      <param name="closeStatus">The WebSocket close status.</param>
      <param name="statusDescription">A description of the close status.</param>
      <param name="cancellationToken">A cancellation token used to propagate notification that this  operation should be canceled.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see>.   The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
      <summary>Close the output for the <see cref="T:System.Net.WebSockets.ClientWebSocket"></see> instance as an asynchronous operation.</summary>
      <param name="closeStatus">The WebSocket close status.</param>
      <param name="statusDescription">A description of the close status.</param>
      <param name="cancellationToken">A cancellation token used to propagate notification that this  operation should be canceled.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see>.   The task object representing the asynchronous operation.</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocket.CloseStatus">
      <summary>Gets the reason why the close handshake was initiated on <see cref="T:System.Net.WebSockets.ClientWebSocket"></see> instance.</summary>
      <returns>Returns <see cref="T:System.Net.WebSockets.WebSocketCloseStatus"></see>.   The reason why the close handshake was initiated.</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocket.CloseStatusDescription">
      <summary>Gets a description of the reason why the <see cref="T:System.Net.WebSockets.ClientWebSocket"></see> instance was closed.</summary>
      <returns>Returns <see cref="T:System.String"></see>.   The description of the reason why the <see cref="T:System.Net.WebSockets.ClientWebSocket"></see> instance was closed.</returns>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
      <summary>Connect to a WebSocket server as an asynchronous operation.</summary>
      <param name="uri">The URI of the WebSocket server to connect to.</param>
      <param name="cancellationToken">A cancellation token used to propagate notification that the  operation should be canceled.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see>.   The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.Dispose">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.WebSockets.ClientWebSocket"></see> instance.</summary>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocket.Options">
      <summary>Gets the WebSocket options for the <see cref="T:System.Net.WebSockets.ClientWebSocket"></see> instance.</summary>
      <returns>Returns <see cref="T:System.Net.WebSockets.ClientWebSocketOptions"></see>.   The WebSocket options for the <see cref="T:System.Net.WebSockets.ClientWebSocket"></see> instance.</returns>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
      <summary>Receive data on <see cref="T:System.Net.WebSockets.ClientWebSocket"></see> as an asynchronous operation.</summary>
      <param name="buffer">The buffer to receive the response.</param>
      <param name="cancellationToken">A cancellation token used to propagate notification that this  operation should be canceled.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
      <summary>Send data on <see cref="T:System.Net.WebSockets.ClientWebSocket"></see> as an asynchronous operation.</summary>
      <param name="buffer">The buffer containing the message to be sent.</param>
      <param name="messageType">Specifies whether the buffer is clear text or in a binary format.</param>
      <param name="endOfMessage">Specifies whether this is the final asynchronous send. Set to true if this is the final send; false otherwise.</param>
      <param name="cancellationToken">A cancellation token used to propagate notification that this  operation should be canceled.</param>
      <returns>The task object representing the asynchronous operation.</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocket.State">
      <summary>Get the WebSocket state of the <see cref="T:System.Net.WebSockets.ClientWebSocket"></see> instance.</summary>
      <returns>Returns <see cref="T:System.Net.WebSockets.WebSocketState"></see>.   The WebSocket state of the <see cref="T:System.Net.WebSockets.ClientWebSocket"></see> instance.</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocket.SubProtocol">
      <summary>Gets the supported WebSocket sub-protocol for the <see cref="T:System.Net.WebSockets.ClientWebSocket"></see> instance.</summary>
      <returns>Returns <see cref="T:System.String"></see>.   The supported WebSocket sub-protocol.</returns>
    </member>
    <member name="T:System.Net.WebSockets.ClientWebSocketOptions">
      <summary>Options to use with a  <see cref="T:System.Net.WebSockets.ClientWebSocket"></see> object.</summary>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocketOptions.#ctor">
      
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocketOptions.AddSubProtocol(System.String)">
      <summary>Adds a sub-protocol to be negotiated during the WebSocket connection handshake.</summary>
      <param name="subProtocol">The WebSocket sub-protocol to add.</param>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocketOptions.ClientCertificates">
      <summary>Gets or sets a collection of client side certificates.</summary>
      <returns>Returns <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see>.   A collection of client side certificates.</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocketOptions.Cookies">
      <summary>Gets or sets the cookies associated with the request.</summary>
      <returns>Returns <see cref="T:System.Net.CookieContainer"></see>.   The cookies associated with the request.</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocketOptions.Credentials">
      <summary>Gets or sets the credential information for the client.</summary>
      <returns>Returns <see cref="T:System.Net.ICredentials"></see>.   The credential information for the client.</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocketOptions.KeepAliveInterval">
      <summary>Gets or sets the WebSocket protocol keep-alive interval in milliseconds.</summary>
      <returns>Returns <see cref="T:System.TimeSpan"></see>.   The WebSocket protocol keep-alive interval in milliseconds.</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocketOptions.Proxy">
      <summary>Gets or sets the proxy for WebSocket requests.</summary>
      <returns>Returns <see cref="T:System.Net.IWebProxy"></see>.   The proxy for WebSocket requests.</returns>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocketOptions.SetBuffer(System.Int32,System.Int32)">
      <summary>Sets the client buffer parameters.</summary>
      <param name="receiveBufferSize">The size, in bytes, of the client receive buffer.</param>
      <param name="sendBufferSize">The size, in bytes, of the client send buffer.</param>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocketOptions.SetBuffer(System.Int32,System.Int32,System.ArraySegment{System.Byte})">
      <summary>Sets client buffer parameters.</summary>
      <param name="receiveBufferSize">The size, in bytes, of the client receive buffer.</param>
      <param name="sendBufferSize">The size, in bytes, of the client send buffer.</param>
      <param name="buffer">The receive buffer to use.</param>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocketOptions.SetRequestHeader(System.String,System.String)">
      <summary>Creates a HTTP request header and its value.</summary>
      <param name="headerName">The name of the HTTP header.</param>
      <param name="headerValue">The value of the HTTP header.</param>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocketOptions.UseDefaultCredentials">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that indicates if default credentials should be used during WebSocket handshake.</summary>
      <returns>Returns <see cref="T:System.Boolean"></see>.  true if default credentials should be used during WebSocket handshake; otherwise false. The default is true.</returns>
    </member>
    <member name="T:System.Net.WebSockets.HttpListenerWebSocketContext">
      <summary>Provides access to information received by the <see cref="T:System.Net.HttpListener"></see> class when accepting WebSocket connections.</summary>
    </member>
    <member name="M:System.Net.WebSockets.HttpListenerWebSocketContext.#ctor">
      
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.CookieCollection">
      <summary>Gets the cookies received by the <see cref="T:System.Net.HttpListener"></see> object in the WebSocket opening handshake.</summary>
      <returns>Returns <see cref="T:System.Net.CookieCollection"></see>.   The cookies received by the <see cref="T:System.Net.HttpListener"></see> object.</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.Headers">
      <summary>Gets the HTTP headers received by the <see cref="T:System.Net.HttpListener"></see> object in the WebSocket opening handshake.</summary>
      <returns>Returns <see cref="T:System.Collections.Specialized.NameValueCollection"></see>.   The HTTP headers received by the <see cref="T:System.Net.HttpListener"></see> object.</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.IsAuthenticated">
      <summary>Gets a value that indicates if the WebSocket client is authenticated.</summary>
      <returns>Returns <see cref="T:System.Boolean"></see>.  true if the WebSocket client is authenticated; otherwise false.</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.IsLocal">
      <summary>Gets a value that indicates if the WebSocket client connected from the local machine.</summary>
      <returns>Returns <see cref="T:System.Boolean"></see>.  true if the WebSocket client connected from the local machine; otherwise false.</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.IsSecureConnection">
      <summary>Gets a value that indicates if the WebSocket connection is secured using Secure Sockets Layer (SSL).</summary>
      <returns>Returns <see cref="T:System.Boolean"></see>.  true if the WebSocket connection is secured using SSL; otherwise false.</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.Origin">
      <summary>Gets the value of the Origin HTTP header included in the WebSocket opening handshake.</summary>
      <returns>Returns <see cref="T:System.String"></see>.   The value of the Origin HTTP header.</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.RequestUri">
      <summary>Gets the URI requested by the WebSocket client.</summary>
      <returns>Returns <see cref="T:System.Uri"></see>.   The URI requested by the WebSocket client.</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketKey">
      <summary>Gets the value of the SecWebSocketKey HTTP header included in the WebSocket opening handshake.</summary>
      <returns>Returns <see cref="T:System.String"></see>.   The value of the SecWebSocketKey HTTP header.</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketProtocols">
      <summary>Gets the list of the Secure WebSocket protocols included in the WebSocket opening handshake.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"></see>.   The list of the Secure WebSocket protocols.</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketVersion">
      <summary>Gets the list of sub-protocols requested by the WebSocket client.</summary>
      <returns>Returns <see cref="T:System.String"></see>.   The list of sub-protocols requested by the WebSocket client.</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.User">
      <summary>Gets an object used to obtain identity, authentication information, and security roles for the WebSocket client.</summary>
      <returns>Returns <see cref="T:System.Security.Principal.IPrincipal"></see>.   The identity, authentication information, and security roles for the WebSocket client.</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.WebSocket">
      <summary>Gets the WebSocket instance used to send and receive data over the WebSocket connection.</summary>
      <returns>Returns <see cref="T:System.Net.WebSockets.WebSocket"></see>.   The WebSocket instance.</returns>
    </member>
    <member name="T:System.Net.WebSockets.WebSocket">
      <summary>The WebSocket class allows applications to send and receive data after the WebSocket upgrade has completed.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Net.WebSockets.WebSocket"></see> class.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.Abort">
      <summary>Aborts the WebSocket connection and cancels any pending IO operations.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
      <summary>Closes the WebSocket connection as an asynchronous operation using the close handshake defined in the <see cref="http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06">WebSocket protocol specification</see> section 7.</summary>
      <param name="closeStatus">Indicates the reason for closing the WebSocket connection.</param>
      <param name="statusDescription">Specifies a human readable explanation as to why the connection is closed.</param>
      <param name="cancellationToken">The token that can be used to propagate notification that operations should be canceled.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see>.   The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
      <summary>Initiates or completes the close handshake defined in the <see cref="http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06">WebSocket protocol specification section 7</see>.</summary>
      <param name="closeStatus">Indicates the reason for closing the WebSocket connection.</param>
      <param name="statusDescription">Allows applications to specify a human readable explanation as to why the connection is closed.</param>
      <param name="cancellationToken">The token that can be used to propagate notification that operations should be canceled.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see>.   The task object representing the asynchronous operation.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.CloseStatus">
      <summary>Indicates the reason why the remote endpoint initiated the close handshake.</summary>
      <returns>Returns <see cref="T:System.Net.WebSockets.WebSocketCloseStatus"></see>.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.CloseStatusDescription">
      <summary>Allows the remote endpoint to describe the reason why the connection was closed.</summary>
      <returns>Returns <see cref="T:System.String"></see>.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)">
      <summary>Create client buffers to use with this <see cref="T:System.Net.WebSockets.WebSocket"></see> instance.</summary>
      <param name="receiveBufferSize">The size, in bytes, of the client receive buffer.</param>
      <param name="sendBufferSize">The size, in bytes, of the send buffer.</param>
      <returns>Returns <see cref="T:System.ArraySegment`1"></see>.   An array with the client buffers.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})">
      <summary>This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.   Allows callers to create a client side WebSocket class which will use the WSPC for framing purposes.</summary>
      <param name="innerStream">The connection to be used for IO operations.</param>
      <param name="subProtocol">The subprotocol accepted by the client.</param>
      <param name="receiveBufferSize">The size in bytes of the client WebSocket receive buffer.</param>
      <param name="sendBufferSize">The size in bytes of the client WebSocket send buffer.</param>
      <param name="keepAliveInterval">Determines how regularly a frame is sent over the connection as a keep-alive. Applies only when the connection is idle.</param>
      <param name="useZeroMaskingKey">Indicates whether a random key or a static key (just zeros) should be used for the WebSocket masking.</param>
      <param name="internalBuffer">Will be used as the internal buffer in the WPC. The size has to be at least 2 * ReceiveBufferSize + SendBufferSize + 256 + 20 (16 on 32-bit).</param>
      <returns>Returns <see cref="T:System.Net.WebSockets.WebSocket"></see>.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)">
      <summary>Creates a WebSocket server buffer.</summary>
      <param name="receiveBufferSize">The size, in bytes, of the desired buffer.</param>
      <returns>Returns <see cref="T:System.ArraySegment`1"></see>.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval">
      <summary>Gets the default WebSocket protocol keep-alive interval in milliseconds.</summary>
      <returns>Returns <see cref="T:System.TimeSpan"></see>.   The default WebSocket protocol keep-alive interval in milliseconds. The typical value for this interval is 30 seconds.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.Dispose">
      <summary>Used to clean up unmanaged resources for ASP.NET and self-hosted implementations.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.IsApplicationTargeting45">
      <summary>Returns a value that indicates if the WebSocket instance is targeting .NET Framework 4.5.</summary>
      <returns>Returns <see cref="T:System.Boolean"></see>.  true if the <see cref="T:System.Net.WebSockets.WebSocket"></see> is targeting .NET Framework 4.5; otherwise false.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)">
      <summary>Returns a value that indicates if the state of the WebSocket instance is closed or aborted.</summary>
      <param name="state">The current state of the WebSocket.</param>
      <returns>Returns <see cref="T:System.Boolean"></see>.  true if the <see cref="T:System.Net.WebSockets.WebSocket"></see> is closed or aborted; otherwise false.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
      <summary>Receives data from the <see cref="T:System.Net.WebSockets.WebSocket"></see> connection asynchronously.</summary>
      <param name="buffer">References the application buffer that is the storage location for the received data.</param>
      <param name="cancellationToken">Propagates the notification that operations should be canceled.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns a <see cref="T:System.Byte"></see> array containing the received data.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.RegisterPrefixes">
      <summary>This API supports the .NET Framework infrastructure and is not intended to be used directly from your code. Allows callers to register prefixes for WebSocket requests (ws and wss).</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
      <summary>Sends data over the <see cref="T:System.Net.WebSockets.WebSocket"></see> connection asynchronously.</summary>
      <param name="buffer">The buffer to be sent over the connection.</param>
      <param name="messageType">Indicates whether the application is sending a binary or text message.</param>
      <param name="endOfMessage">Indicates whether the data in &quot;buffer&quot; is the last part of a message.</param>
      <param name="cancellationToken">The token that propagates the notification that operations should be canceled.</param>
      <returns>The task object representing the asynchronous operation.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.State">
      <summary>Returns the current state of the WebSocket connection.</summary>
      <returns>Returns <see cref="T:System.Net.WebSockets.WebSocketState"></see>.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.SubProtocol">
      <summary>The subprotocol that was negotiated during the opening handshake.</summary>
      <returns>Returns <see cref="T:System.String"></see>.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])">
      <summary>Verifies that the connection is in an expected state.</summary>
      <param name="state">The current state of the WebSocket to be tested against the list of valid states.</param>
      <param name="validStates">List of valid connection states.</param>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketCloseStatus">
      <summary>Represents well known WebSocket close codes as defined in <see cref="http://www.rfc-editor.org/rfc/rfc6455.txt">section 11.7</see> of the WebSocket protocol spec.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.Empty">
      <summary>No error specified.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.EndpointUnavailable">
      <summary>(1001) Indicates an endpoint is being removed. Either the server or client will become unavailable.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.InternalServerError">
      <summary>The connection will be closed by the server because of an error on the server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.InvalidMessageType">
      <summary>(1003) The client or server is terminating the connection because it cannot accept the data type it received.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.InvalidPayloadData">
      <summary>(1007) The client or server is terminating the connection because it has received data inconsistent with the message type.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.MandatoryExtension">
      <summary>(1010) The client is terminating the connection because it expected the server to negotiate an extension.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.MessageTooBig">
      <summary>(1004) Reserved for future use.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.NormalClosure">
      <summary>(1000) The connection has closed after the request was fulfilled.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.PolicyViolation">
      <summary>(1008) The connection will be closed because an endpoint has received a message that violates its policy.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.ProtocolError">
      <summary>(1002) The client or server is terminating the connection because of a protocol error.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketContext">
      <summary>Used for accessing the information in the WebSocket handshake.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketContext.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Net.WebSockets.WebSocketContext"></see> class.</summary>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.CookieCollection">
      <summary>The cookies that were passed to the server during the opening handshake.</summary>
      <returns>Returns <see cref="T:System.Net.CookieCollection"></see>.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.Headers">
      <summary>The HTTP headers that were sent to the server during the opening handshake.</summary>
      <returns>Returns <see cref="T:System.Collections.Specialized.NameValueCollection"></see>.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.IsAuthenticated">
      <summary>Whether the WebSocket client is authenticated.</summary>
      <returns>Returns <see cref="T:System.Boolean"></see>.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.IsLocal">
      <summary>Whether the WebSocket client connected from the local machine.</summary>
      <returns>Returns <see cref="T:System.Boolean"></see>.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.IsSecureConnection">
      <summary>Whether the WebSocket connection is secured using Secure Sockets Layer (SSL).</summary>
      <returns>Returns <see cref="T:System.Boolean"></see>.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.Origin">
      <summary>The value of the Origin HTTP header included in the opening handshake.</summary>
      <returns>Returns <see cref="T:System.String"></see>.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.RequestUri">
      <summary>The URI requested by the WebSocket client.</summary>
      <returns>Returns <see cref="T:System.Uri"></see>.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.SecWebSocketKey">
      <summary>The value of the SecWebSocketKey HTTP header included in the opening handshake.</summary>
      <returns>Returns <see cref="T:System.String"></see>.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.SecWebSocketProtocols">
      <summary>The value of the SecWebSocketKey HTTP header included in the opening handshake.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"></see>.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.SecWebSocketVersion">
      <summary>The list of subprotocols requested by the WebSocket client.</summary>
      <returns>Returns <see cref="T:System.String"></see>.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.User">
      <summary>An object used to obtain identity, authentication information, and security roles for the WebSocket client.</summary>
      <returns>Returns <see cref="T:System.Security.Principal.IPrincipal"></see>.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.WebSocket">
      <summary>The WebSocket instance used to interact (send/receive/close/etc) with the WebSocket connection.</summary>
      <returns>Returns <see cref="T:System.Net.WebSockets.WebSocket"></see>.</returns>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketError">
      <summary>Contains the list of possible WebSocket errors.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.ConnectionClosedPrematurely">
      <summary>Indicates that the connection was terminated unexpectedly.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.Faulted">
      <summary>Indicates a general error.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.HeaderError">
      <summary>Indicates an error occurred when parsing the HTTP headers during the opening handshake.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.InvalidMessageType">
      <summary>Indicates that a WebSocket frame with an unknown opcode was received.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.InvalidState">
      <summary>Indicates the WebSocket is an invalid state for the given operation (such as being closed or aborted).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.NativeError">
      <summary>Indicates that an unknown native error occurred.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.NotAWebSocket">
      <summary>Indicates that the incoming request was not a valid websocket request.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.Success">
      <summary>Indicates that there was no native error information for the exception.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.UnsupportedProtocol">
      <summary>Indicates that the client requested an unsupported WebSocket subprotocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.UnsupportedVersion">
      <summary>Indicates that the client requested an unsupported version of the WebSocket protocol.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketException">
      <summary>Represents an exception that occurred when performing an operation on a WebSocket connection.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Net.WebSockets.WebSocketException"></see> class.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Int32,System.String,System.Exception)">
      <summary>Creates an instance of the <see cref="T:System.Net.WebSockets.WebSocketException"></see> class.</summary>
      <param name="error">The error from the WebSocketError enumeration.</param>
      <param name="nativeError">The native error code for the exception.</param>
      <param name="message">The description of the error.</param>
      <param name="innerException">Indicates the previous exception that led to the current exception.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.String,System.Exception)">
      <summary>Creates an instance of the <see cref="T:System.Net.WebSockets.WebSocketException"></see> class.</summary>
      <param name="error">The error from the WebSocketError enumeration.</param>
      <param name="message">The description of the error.</param>
      <param name="innerException">Indicates the previous exception that led to the current exception.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Int32,System.String)">
      <summary>Creates an instance of the <see cref="T:System.Net.WebSockets.WebSocketException"></see> class.</summary>
      <param name="error">The error from the WebSocketError enumeration.</param>
      <param name="nativeError">The native error code for the exception.</param>
      <param name="message">The description of the error.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Int32,System.Exception)">
      <summary>Creates an instance of the <see cref="T:System.Net.WebSockets.WebSocketException"></see> class.</summary>
      <param name="error">The error from the WebSocketError enumeration.</param>
      <param name="nativeError">The native error code for the exception.</param>
      <param name="innerException">Indicates the previous exception that led to the current exception.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.String,System.Exception)">
      <summary>Creates an instance of the <see cref="T:System.Net.WebSockets.WebSocketException"></see> class.</summary>
      <param name="message">The description of the error.</param>
      <param name="innerException">Indicates the previous exception that led to the current exception.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Int32)">
      <summary>Creates an instance of the <see cref="T:System.Net.WebSockets.WebSocketException"></see> class.</summary>
      <param name="error">The error from the WebSocketError enumeration.</param>
      <param name="nativeError">The native error code for the exception.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.String)">
      <summary>Creates an instance of the <see cref="T:System.Net.WebSockets.WebSocketException"></see> class.</summary>
      <param name="error">The error from the WebSocketError enumeration.</param>
      <param name="message">The description of the error.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Int32,System.String)">
      <summary>Creates an instance of the <see cref="T:System.Net.WebSockets.WebSocketException"></see> class.</summary>
      <param name="nativeError">The native error code for the exception.</param>
      <param name="message">The description of the error.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Int32,System.Exception)">
      <summary>Creates an instance of the <see cref="T:System.Net.WebSockets.WebSocketException"></see> class.</summary>
      <param name="nativeError">The native error code for the exception.</param>
      <param name="innerException">Indicates the previous exception that led to the current exception.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.String)">
      <summary>Creates an instance of the <see cref="T:System.Net.WebSockets.WebSocketException"></see> class.</summary>
      <param name="message">The description of the error.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError)">
      <summary>Creates an instance of the <see cref="T:System.Net.WebSockets.WebSocketException"></see> class.</summary>
      <param name="error">The error from the WebSocketError enumeration.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Int32)">
      <summary>Creates an instance of the <see cref="T:System.Net.WebSockets.WebSocketException"></see> class.</summary>
      <param name="nativeError">The native error code for the exception.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Exception)">
      <summary>Creates an instance of the <see cref="T:System.Net.WebSockets.WebSocketException"></see> class.</summary>
      <param name="error">The error from the WebSocketError enumeration.</param>
      <param name="innerException">Indicates the previous exception that led to the current exception.</param>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketException.ErrorCode">
      <summary>The native error code for the exception that occurred.</summary>
      <returns>Returns <see cref="T:System.Int32"></see>.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the SerializationInfo object with the file name and line number where the exception occurred.</summary>
      <param name="info">A SerializationInfo object.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketException.WebSocketErrorCode">
      <summary>Returns a WebSocketError indicating the type of error that occurred.</summary>
      <returns>Returns <see cref="T:System.Net.WebSockets.WebSocketError"></see>.</returns>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketMessageType">
      <summary>Indicates the message type.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketMessageType.Binary">
      <summary>The message is in binary format.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketMessageType.Close">
      <summary>A receive has completed because a close message was received.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketMessageType.Text">
      <summary>The message is clear text.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketReceiveResult">
      <summary>An instance of this class represents the result of performing a single ReceiveAsync operation on a WebSocket.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketReceiveResult.#ctor(System.Int32,System.Net.WebSockets.WebSocketMessageType,System.Boolean)">
      <summary>Creates an instance of the <see cref="T:System.Net.WebSockets.WebSocketReceiveResult"></see> class.</summary>
      <param name="count">The number of bytes received.</param>
      <param name="messageType">The type of message that was received.</param>
      <param name="endOfMessage">Indicates whether this is the final message.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketReceiveResult.#ctor(System.Int32,System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Nullable{System.Net.WebSockets.WebSocketCloseStatus},System.String)">
      <summary>Creates an instance of the <see cref="T:System.Net.WebSockets.WebSocketReceiveResult"></see> class.</summary>
      <param name="count">The number of bytes received.</param>
      <param name="messageType">The type of message that was received.</param>
      <param name="endOfMessage">Indicates whether this is the final message.</param>
      <param name="closeStatus">Indicates the <see cref="T:System.Net.WebSockets.WebSocketCloseStatus"></see> of the connection.</param>
      <param name="closeStatusDescription">The description of closeStatus.</param>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.CloseStatus">
      <summary>Indicates the reason why the remote endpoint initiated the close handshake.</summary>
      <returns>Returns <see cref="T:System.Net.WebSockets.WebSocketCloseStatus"></see>.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.CloseStatusDescription">
      <summary>Returns the optional description that describes why the close handshake has been initiated by the remote endpoint.</summary>
      <returns>Returns <see cref="T:System.String"></see>.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.Count">
      <summary>Indicates the number of bytes that the WebSocket received.</summary>
      <returns>Returns <see cref="T:System.Int32"></see>.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.EndOfMessage">
      <summary>Indicates whether the message has been received completely.</summary>
      <returns>Returns <see cref="T:System.Boolean"></see>.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.MessageType">
      <summary>Indicates whether the current message is a UTF-8 message or a binary message.</summary>
      <returns>Returns <see cref="T:System.Net.WebSockets.WebSocketMessageType"></see>.</returns>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketState">
      <summary>Defines the different states a WebSockets instance can be in.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.Aborted">
      <summary>Reserved for future use.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.Closed">
      <summary>Indicates the WebSocket close handshake completed gracefully.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.CloseReceived">
      <summary>A close message was received from the remote endpoint.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.CloseSent">
      <summary>A close message was sent to the remote endpoint.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.Connecting">
      <summary>The connection is negotiating the handshake with the remote endpoint.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.None">
      <summary>Reserved for future use.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.Open">
      <summary>The initial state after the HTTP handshake has been completed.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Permissions.ResourcePermissionBase">
      <summary>Allows control of code access security permissions.</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.ResourcePermissionBase"></see> class.</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.ResourcePermissionBase"></see> class with the specified level of access to resources at creation.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="state">state</paramref> parameter is not a valid value of <see cref="T:System.Security.Permissions.PermissionState"></see>.</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.AddPermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)">
      <summary>Adds a permission entry to the permission.</summary>
      <param name="entry">The <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry"></see> to add.</param>
      <exception cref="T:System.ArgumentNullException">The specified <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry"></see> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The number of elements in the <see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath"></see> property is not equal to the number of elements in the <see cref="P:System.Security.Permissions.ResourcePermissionBase.TagNames"></see> property.   -or-   The <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry"></see> is already included in the permission.</exception>
    </member>
    <member name="F:System.Security.Permissions.ResourcePermissionBase.Any">
      <summary>Specifies the character to be used to represent the any wildcard character.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Clear">
      <summary>Clears the permission of the added permission entries.</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Copy">
      <summary>Creates and returns an identical copy of the current permission object.</summary>
      <returns>A copy of the current permission object.</returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="securityElement">The XML encoding to use to reconstruct the security object.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="securityElement">securityElement</paramref> parameter is not a valid permission element.   -or-   The version number of the <paramref name="securityElement">securityElement</paramref> parameter is not supported.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="securityElement">securityElement</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.GetPermissionEntries">
      <summary>Returns an array of the <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry"></see> objects added to this permission.</summary>
      <returns>An array of <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry"></see> objects that were added to this permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission object that is the intersection of the current permission object and a target permission object.</summary>
      <param name="target">A permission object of the same type as the current permission object.</param>
      <returns>A new permission object that represents the intersection of the current object and the specified target. This object is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException">The target permission object is not of the same type as the current permission object.</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission object is a subset of the specified permission.</summary>
      <param name="target">A permission object that is to be tested for the subset relationship.</param>
      <returns>true if the current permission object is a subset of the specified permission object; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.IsUnrestricted">
      <summary>Gets a value indicating whether the permission is unrestricted.</summary>
      <returns>true if permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="F:System.Security.Permissions.ResourcePermissionBase.Local">
      <summary>Specifies the character to be used to represent a local reference.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBase.PermissionAccessType">
      <summary>Gets or sets an enumeration value that describes the types of access that you are giving the resource.</summary>
      <returns>An enumeration value that is derived from <see cref="T:System.Type"></see> and describes the types of access that you are giving the resource.</returns>
      <exception cref="T:System.ArgumentNullException">The property value is null.</exception>
      <exception cref="T:System.ArgumentException">The property value is not an enumeration value.</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.RemovePermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)">
      <summary>Removes a permission entry from the permission.</summary>
      <param name="entry">The <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry"></see> to remove.</param>
      <exception cref="T:System.ArgumentNullException">The specified <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry"></see> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The number of elements in the <see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath"></see> property is not equal to the number of elements in the <see cref="P:System.Security.Permissions.ResourcePermissionBase.TagNames"></see> property.   -or-   The <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry"></see> is not in the permission.</exception>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBase.TagNames">
      <summary>Gets or sets an array of strings that identify the resource you are protecting.</summary>
      <returns>An array of strings that identify the resource you are trying to protect.</returns>
      <exception cref="T:System.ArgumentNullException">The property value is null.</exception>
      <exception cref="T:System.ArgumentException">The length of the array is 0.</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.ToXml">
      <summary>Creates and returns an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Union(System.Security.IPermission)">
      <summary>Creates a permission object that combines the current permission object and the target permission object.</summary>
      <param name="target">A permission object to combine with the current permission object. It must be of the same type as the current permission object.</param>
      <returns>A new permission object that represents the union of the current permission object and the specified permission object.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> permission object is not of the same type as the current permission object.</exception>
    </member>
    <member name="T:System.Security.Permissions.ResourcePermissionBaseEntry">
      <summary>Defines the smallest unit of a code access security permission set.</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBaseEntry.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry"></see> class.</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBaseEntry.#ctor(System.Int32,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry"></see> class with the specified permission access and permission access path.</summary>
      <param name="permissionAccess">The integer representation of the permission access level enumeration value. The <see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccess"></see> property is set to this value.</param>
      <param name="permissionAccessPath">The array of strings that identify the resource you are protecting. The <see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath"></see> property is set to this value.</param>
      <exception cref="T:System.ArgumentNullException">The specified <paramref name="permissionAccessPath">permissionAccessPath</paramref> is null.</exception>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccess">
      <summary>Gets an integer representation of the access level enumeration value.</summary>
      <returns>The access level enumeration value.</returns>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath">
      <summary>Gets an array of strings that identify the resource you are protecting.</summary>
      <returns>An array of strings that identify the resource you are protecting.</returns>
    </member>
    <member name="T:System.Security.Permissions.StorePermission">
      <summary>Controls access to stores containing X.509 certificates. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.StorePermission"></see> class with either fully restricted or unrestricted permission state.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException"><paramref name="state">state</paramref> is not a valid <see cref="T:System.Security.Permissions.PermissionState"></see> value.</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.#ctor(System.Security.Permissions.StorePermissionFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.StorePermission"></see> class with the specified access.</summary>
      <param name="flag"></param>
      <exception cref="T:System.ArgumentException"><paramref name="flags">flags</paramref> is not a valid combination of <see cref="T:System.Security.Permissions.StorePermissionFlags"></see> values.</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermission.Flags">
      <summary>Gets or sets the type of <see cref="T:System.Security.Cryptography.X509Certificates.X509Store"></see> access allowed by the current permission.</summary>
      <returns>A bitwise combination of the <see cref="T:System.Security.Permissions.StorePermissionFlags"></see> values.</returns>
      <exception cref="T:System.ArgumentException">An attempt is made to set this property to an invalid value. See <see cref="T:System.Security.Permissions.StorePermissionFlags"></see> for the valid values.</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="securityElement"></param>
      <exception cref="T:System.ArgumentNullException"><paramref name="e">e</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="e">e</paramref> is not a valid permission element.   -or-   The version number in <paramref name="e">e</paramref> is not valid.</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> s not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission to test for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>true if the current permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>A <see cref="T:System.Security.SecurityElement"></see> that contains an XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not null and is not of the same type as the current permission.</exception>
    </member>
    <member name="T:System.Security.Permissions.StorePermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.StorePermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.StorePermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.StorePermissionAttribute"></see> class with the specified security action.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.AddToStore">
      <summary>Gets or sets a value indicating whether the code is permitted to add to a store.</summary>
      <returns>true if the ability to add to a store is allowed; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.StorePermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.Permissions.StorePermission"></see>.</summary>
      <returns>A <see cref="T:System.Security.Permissions.StorePermission"></see> that corresponds to the attribute.</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.CreateStore">
      <summary>Gets or sets a value indicating whether the code is permitted to create a store.</summary>
      <returns>true if the ability to create a store is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.DeleteStore">
      <summary>Gets or sets a value indicating whether the code is permitted to delete a store.</summary>
      <returns>true if the ability to delete a store is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.EnumerateCertificates">
      <summary>Gets or sets a value indicating whether the code is permitted to enumerate the certificates in a store.</summary>
      <returns>true if the ability to enumerate certificates is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.EnumerateStores">
      <summary>Gets or sets a value indicating whether the code is permitted to enumerate stores.</summary>
      <returns>true if the ability to enumerate stores is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.Flags">
      <summary>Gets or sets the store permissions.</summary>
      <returns>A bitwise combination of the <see cref="T:System.Security.Permissions.StorePermissionFlags"></see> values. The default is <see cref="F:System.Security.Permissions.StorePermissionFlags.NoFlags"></see>.</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.OpenStore">
      <summary>Gets or sets a value indicating whether the code is permitted to open a store.</summary>
      <returns>true if the ability to open a store is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.RemoveFromStore">
      <summary>Gets or sets a value indicating whether the code is permitted to remove a certificate from a store.</summary>
      <returns>true if the ability to remove a certificate from a store is allowed; otherwise, false.</returns>
    </member>
    <member name="T:System.Security.Permissions.StorePermissionFlags">
      <summary>Specifies the permitted access to X.509 certificate stores.</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.AddToStore">
      <summary>The ability to add a certificate to a store.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.AllFlags">
      <summary>The ability to perform all certificate and store operations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.CreateStore">
      <summary>The ability to create a new store.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.DeleteStore">
      <summary>The ability to delete a store.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.EnumerateCertificates">
      <summary>The ability to enumerate the certificates in a store.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.EnumerateStores">
      <summary>The ability to enumerate the stores on a computer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.NoFlags">
      <summary>Permission is not given to perform any certificate or store operations.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.OpenStore">
      <summary>The ability to open a store.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.RemoveFromStore">
      <summary>The ability to remove a certificate from a store.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Permissions.TypeDescriptorPermission">
      <summary>Defines partial-trust access to the <see cref="T:System.ComponentModel.TypeDescriptor"></see> class.</summary>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.TypeDescriptorPermission"></see> class.</summary>
      <param name="state">The <see cref="T:System.Security.Permissions.PermissionState"></see> to request. Only <see cref="F:System.Security.Permissions.PermissionState.Unrestricted"></see> and <see cref="F:System.Security.Permissions.PermissionState.None"></see> are valid.</param>
      <exception cref="T:System.ArgumentException"><paramref name="state">state</paramref> is not a valid permission state. Only <see cref="F:System.Security.Permissions.PermissionState.Unrestricted"></see> and <see cref="F:System.Security.Permissions.PermissionState.None"></see> are valid.</exception>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.#ctor(System.Security.Permissions.TypeDescriptorPermissionFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.TypeDescriptorPermission"></see> class with the specified permission flags.</summary>
      <param name="flag">The permission flags to request.</param>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.Copy">
      <summary>When implemented by a derived class, creates and returns an identical copy of the current permission object.</summary>
      <returns>A copy of the current permission object.</returns>
    </member>
    <member name="P:System.Security.Permissions.TypeDescriptorPermission.Flags">
      <summary>Gets or sets the <see cref="T:System.Security.Permissions.TypeDescriptorPermissionFlags"></see> for the type descriptor.</summary>
      <returns>The <see cref="T:System.Security.Permissions.TypeDescriptorPermissionFlags"></see> for the type descriptor.</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.FromXml(System.Security.SecurityElement)">
      <summary>When overridden in a derived class, reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="securityElement">The XML encoding to use to reconstruct the security object.</param>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.Intersect(System.Security.IPermission)">
      <summary>When implemented by a derived class, creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>When implemented by a derived class, determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.IsUnrestricted">
      <summary>Gets a value that indicates whether the type descriptor may be called from partially trusted code.</summary>
      <returns>true if the <see cref="P:System.Security.Permissions.TypeDescriptorPermission.Flags"></see> property is set to <see cref="F:System.Security.Permissions.TypeDescriptorPermissionFlags.RestrictedRegistrationAccess"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.ToXml">
      <summary>When overridden in a derived class, creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.Union(System.Security.IPermission)">
      <summary>When overridden in a derived class, creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
    </member>
    <member name="T:System.Security.Permissions.TypeDescriptorPermissionAttribute">
      <summary>Determines the permission flags that apply to a <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</summary>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.TypeDescriptorPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermissionAttribute.CreatePermission">
      <summary>When overridden in a derived class, creates a permission object that can then be serialized into binary form and persistently stored along with the <see cref="T:System.Security.Permissions.SecurityAction"></see> in an assembly's metadata.</summary>
      <returns>A serializable permission object.</returns>
    </member>
    <member name="P:System.Security.Permissions.TypeDescriptorPermissionAttribute.Flags">
      <summary>Gets or sets the <see cref="T:System.Security.Permissions.TypeDescriptorPermissionFlags"></see> for the <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</summary>
      <returns>The <see cref="T:System.Security.Permissions.TypeDescriptorPermissionFlags"></see> for the <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</returns>
    </member>
    <member name="P:System.Security.Permissions.TypeDescriptorPermissionAttribute.RestrictedRegistrationAccess">
      <summary>Gets or sets a value that indicates whether the type descriptor can be accessed from partial trust.</summary>
      <returns>true if the type descriptor can be accessed from partial trust; otherwise, false.</returns>
    </member>
    <member name="T:System.Security.Permissions.TypeDescriptorPermissionFlags">
      <summary>Defines permission settings for type descriptors.</summary>
    </member>
    <member name="F:System.Security.Permissions.TypeDescriptorPermissionFlags.NoFlags">
      <summary>No permission flags are set on the type descriptor.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Permissions.TypeDescriptorPermissionFlags.RestrictedRegistrationAccess">
      <summary>The type descriptor may be called from partially trusted code.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Forms.Application.ThreadException"></see> event.</summary>
    </member>
    <member name="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadExceptionEventArgs"></see> class.</summary>
      <param name="t">The <see cref="T:System.Exception"></see> that occurred.</param>
    </member>
    <member name="P:System.Threading.ThreadExceptionEventArgs.Exception">
      <summary>Gets the <see cref="T:System.Exception"></see> that occurred.</summary>
      <returns>The <see cref="T:System.Exception"></see> that occurred.</returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Forms.Application.ThreadException"></see> event of an <see cref="T:System.Windows.Forms.Application"></see>.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Threading.ThreadExceptionEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.Collections.Concurrent.BlockingCollection`1">
      <summary>Provides blocking and bounding capabilities for thread-safe collections that implement <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"></see>.</summary>
      <typeparam name="T">The type of elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> class without an upper-bound.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> class without an upper-bound and using the provided <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"></see> as its underlying data store.</summary>
      <param name="collection">The collection to use as the underlying data store.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collection">collection</paramref> argument is null.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> class with the specified upper-bound.</summary>
      <param name="boundedCapacity">The bounded size of the collection.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="boundedCapacity">boundedCapacity</paramref> is not a positive value.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> class with the specified upper-bound and using the provided <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"></see> as its underlying data store.</summary>
      <param name="collection">The collection to use as the underlying data store.</param>
      <param name="boundedCapacity">The bounded size of the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collection">collection</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="boundedCapacity">boundedCapacity</paramref> is not a positive value.</exception>
      <exception cref="T:System.ArgumentException">The supplied <paramref name="collection">collection</paramref> contains more values than is permitted by <paramref name="boundedCapacity">boundedCapacity</paramref>.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Add(`0)">
      <summary>Adds the item to the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see>.</summary>
      <param name="item">The item to be added to the collection. The value can be a null reference.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been marked as complete with regards to additions.   -or-   The underlying collection didn't accept the item.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)">
      <summary>Adds the item to the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see>.</summary>
      <param name="item">The item to be added to the collection. The value can be a null reference.</param>
      <param name="cancellationToken">A cancellation token to observe.</param>
      <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"></see> is canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed or the <see cref="T:System.Threading.CancellationTokenSource"></see> that owns <paramref name="cancellationToken">cancellationToken</paramref> has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been marked as complete with regards to additions.   -or-   The underlying collection didn't accept the item.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)">
      <summary>Adds the specified item to any one of the specified <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances.</summary>
      <param name="collections">The array of collections.</param>
      <param name="item">The item to be added to one of the collections.</param>
      <returns>The index of the collection in the <paramref name="collections">collections</paramref> array to which the item was added.</returns>
      <exception cref="T:System.ObjectDisposedException">At least one of the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collections">collections</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The count of <paramref name="collections">collections</paramref> is greater than the maximum size of 62 for STA and 63 for MTA.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="collections">collections</paramref> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.</exception>
      <exception cref="T:System.InvalidOperationException">At least one underlying collection didn't accept the item.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)">
      <summary>Adds the specified item to any one of the specified <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances.</summary>
      <param name="collections">The array of collections.</param>
      <param name="item">The item to be added to one of the collections.</param>
      <param name="cancellationToken">A cancellation token to observe.</param>
      <returns>The index of the collection in the <paramref name="collections">collections</paramref> array to which the item was added.</returns>
      <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"></see> is canceled.</exception>
      <exception cref="T:System.InvalidOperationException">At least one underlying collection didn't accept the item.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collections">collections</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The count of <paramref name="collections">collections</paramref> is greater than the maximum size of 62 for STA and 63 for MTA.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="collections">collections</paramref> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.</exception>
      <exception cref="T:System.ObjectDisposedException">At least one of the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances has been disposed, or the <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has been disposed.</exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity">
      <summary>Gets the bounded capacity of this <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instance.</summary>
      <returns>The bounded capacity of this collection, or int.MaxValue if no bound was supplied.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding">
      <summary>Marks the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances as not accepting any more additions.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies all of the items in the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instance to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instance. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array">array</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> argument is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="index">index</paramref> argument is equal to or greater than the length of the <paramref name="array">array</paramref>.   The destination array is too small to hold all of the BlockingCcollection elements.   The array rank doesn't match.   The array type is incompatible with the type of the BlockingCollection elements.</exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.Count">
      <summary>Gets the number of items contained in the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see>.</summary>
      <returns>The number of items contained in the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see>.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> class.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)">
      <summary>Releases resources used by the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instance.</summary>
      <param name="disposing">Whether being disposed explicitly (true) or due to a finalizer (false).</param>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)">
      <summary>Provides a consuming <see cref="T:System.Collections.Generic.IEnumerable`1"></see> for items in the collection.</summary>
      <param name="cancellationToken">A cancellation token to observe.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that removes and returns items from the collection.</returns>
      <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"></see> is canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed or the <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has been disposed</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable">
      <summary>Provides a consuming <see cref="T:System.Collections.Generic.IEnumerator`1"></see> for items in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that removes and returns items from the collection.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted">
      <summary>Gets whether this <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been marked as complete for adding.</summary>
      <returns>Whether this collection has been marked as complete for adding.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.IsCompleted">
      <summary>Gets whether this <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been marked as complete for adding and is empty.</summary>
      <returns>Whether this collection has been marked as complete for adding and is empty.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Take">
      <summary>Removes  an item from the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see>.</summary>
      <returns>The item removed from the collection.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The underlying collection was modified outside of this <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instance, or the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> is empty and the collection has been marked as complete for adding.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)">
      <summary>Removes an item from the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see>.</summary>
      <param name="cancellationToken">Object that can be used to cancel the take operation.</param>
      <returns>The item removed from the collection.</returns>
      <exception cref="T:System.OperationCanceledException">The <see cref="T:System.Threading.CancellationToken"></see> is canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed or the <see cref="T:System.Threading.CancellationTokenSource"></see> that created the token was canceled.</exception>
      <exception cref="T:System.InvalidOperationException">The underlying collection was modified outside of this <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instance or the BlockingCollection is marked as complete for adding, or the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> is empty.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)">
      <summary>Takes an item from any one of the specified <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances.</summary>
      <param name="collections">The array of collections.</param>
      <param name="item">The item removed from one of the collections.</param>
      <returns>The index of the collection in the <paramref name="collections">collections</paramref> array from which the item was removed.</returns>
      <exception cref="T:System.ObjectDisposedException">At least one of the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collections">collections</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The count of <paramref name="collections">collections</paramref> is greater than the maximum size of 62 for STA and 63 for MTA.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="collections">collections</paramref> argument is a 0-length array or contains a null element or <see cref="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding"></see> has been called on the collection.</exception>
      <exception cref="T:System.InvalidOperationException">At least one of the underlying collections was modified outside of its <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instance.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)">
      <summary>Takes an item from any one of the specified <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances while observing the specified cancellation token.</summary>
      <param name="collections">The array of collections.</param>
      <param name="item">The item removed from one of the collections.</param>
      <param name="cancellationToken">A cancellation token to observe.</param>
      <returns>The index of the collection in the <paramref name="collections">collections</paramref> array from which the item was removed.</returns>
      <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"></see> is canceled.</exception>
      <exception cref="T:System.InvalidOperationException">At least one of the underlying collections was modified outside of its <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instance.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collections">collections</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The count of <paramref name="collections">collections</paramref> is greater than the maximum size of 62 for STA and 63 for MTA.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="collections">collections</paramref> argument is a 0-length array or contains a null element, or <see cref="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding"></see> has been called on the collection.</exception>
      <exception cref="T:System.ObjectDisposedException">At least one of the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances has been disposed.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.ToArray">
      <summary>Copies the items from the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instance into a new array.</summary>
      <returns>An array containing copies of the elements of the collection.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)">
      <summary>Tries to add the specified item to the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> within the specified time period.</summary>
      <param name="item">The item to be added to the collection.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"></see> (-1) to wait indefinitely.</param>
      <returns>true if the <paramref name="item">item</paramref> could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <see cref="T:System.InvalidOperationException"></see> is thrown.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout">millisecondsTimeout</paramref> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been marked as complete with regards to additions.   -or-   The underlying collection didn't accept the item.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)">
      <summary>Tries to add the specified item to the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> within the specified time period, while observing a cancellation token.</summary>
      <param name="item">The item to be added to the collection.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"></see> (-1) to wait indefinitely.</param>
      <param name="cancellationToken">A cancellation token to observe.</param>
      <returns>true if the <paramref name="item">item</paramref> could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <see cref="T:System.InvalidOperationException"></see> is thrown.</returns>
      <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"></see> is canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed or the underlying <see cref="T:System.Threading.CancellationTokenSource"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout">millisecondsTimeout</paramref> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been marked as complete with regards to additions.   -or-   The underlying collection didn't accept the item.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)">
      <summary>Tries to add the specified item to the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see>.</summary>
      <param name="item">The item to be added to the collection.</param>
      <returns>true if <paramref name="item">item</paramref> could be added; otherwise false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <see cref="T:System.InvalidOperationException"></see> is thrown.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been marked as complete with regards to additions.   -or-   The underlying collection didn't accept the item.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)">
      <summary>Tries to add the specified item to the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see>.</summary>
      <param name="item">The item to be added to the collection.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan"></see> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"></see> that represents -1 milliseconds to wait indefinitely.</param>
      <returns>true if the <paramref name="item">item</paramref> could be added to the collection within the specified time span; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue"></see>.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been marked as complete with regards to additions.   -or-   The underlying collection didn't accept the item.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)">
      <summary>Tries to add the specified item to any one of the specified <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances.</summary>
      <param name="collections">The array of collections.</param>
      <param name="item">The item to be added to one of the collections.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"></see> (-1) to wait indefinitely.</param>
      <param name="cancellationToken">A cancellation token to observe.</param>
      <returns>The index of the collection in the <paramref name="collections">collections</paramref> array to which the item was added, or -1 if the item could not be added.</returns>
      <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"></see> is canceled.</exception>
      <exception cref="T:System.InvalidOperationException">At least one underlying collection didn't accept the item.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collections">collections</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout">millisecondsTimeout</paramref> is a negative number other than -1, which represents an infinite time-out.   -or-   The count of <paramref name="collections">collections</paramref> is greater than the maximum size of 62 for STA and 63 for MTA.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="collections">collections</paramref> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.</exception>
      <exception cref="T:System.ObjectDisposedException">At least one of the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances has been disposed.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)">
      <summary>Tries to add the specified item to any one of the specified <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances while observing the specified cancellation token.</summary>
      <param name="collections">The array of collections.</param>
      <param name="item">The item to be added to one of the collections.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan"></see> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"></see> that represents -1 milliseconds to wait indefinitely.</param>
      <returns>The index of the collection in the <paramref name="collections">collections</paramref> array to which the item was added, or -1 if the item could not be added.</returns>
      <exception cref="T:System.ObjectDisposedException">At least one of the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances or the <see cref="T:System.Threading.CancellationTokenSource"></see> that created <paramref name="cancellationToken">cancellationToken</paramref> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collections">collections</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue"></see>.   -or-   The count of <paramref name="collections">collections</paramref> is greater than the maximum size of 62 for STA and 63 for MTA.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="collections">collections</paramref> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.</exception>
      <exception cref="T:System.InvalidOperationException">At least one underlying collection didn't accept the item.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)">
      <summary>Tries to add the specified item to any one of the specified <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances.</summary>
      <param name="collections">The array of collections.</param>
      <param name="item">The item to be added to one of the collections.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"></see> (-1) to wait indefinitely.</param>
      <returns>The index of the collection in the <paramref name="collections">collections</paramref> array to which the item was added, or -1 if the item could not be added.</returns>
      <exception cref="T:System.ObjectDisposedException">At least one of the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collections">collections</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout">millisecondsTimeout</paramref> is a negative number other than -1, which represents an infinite time-out.   -or-   The count of <paramref name="collections">collections</paramref> is greater than the maximum size of 62 for STA and 63 for MTA.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="collections">collections</paramref> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.</exception>
      <exception cref="T:System.InvalidOperationException">At least one underlying collection didn't accept the item.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)">
      <summary>Tries to add the specified item to any one of the specified <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances.</summary>
      <param name="collections">The array of collections.</param>
      <param name="item">The item to be added to one of the collections.</param>
      <returns>The index of the collection in the <paramref name="collections">collections</paramref> array to which the item was added, or -1 if the item could not be added.</returns>
      <exception cref="T:System.ObjectDisposedException">At least one of the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collections">collections</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The count of <paramref name="collections">collections</paramref> is greater than the maximum size of 62 for STA and 63 for MTA.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="collections">collections</paramref> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.</exception>
      <exception cref="T:System.InvalidOperationException">At least one underlying collection didn't accept the item.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)">
      <summary>Tries to remove an item from the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see>.</summary>
      <param name="item">The item to be removed from the collection.</param>
      <returns>true if an item could be removed; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The underlying collection was modified outside of this <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instance.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)">
      <summary>Tries to remove an item from the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> in the specified time period.</summary>
      <param name="item">The item to be removed from the collection.</param>
      <param name="timeout">An object that represents the number of milliseconds to wait, or an object that represents -1 milliseconds to wait indefinitely.</param>
      <returns>true if an item could be removed from the collection within the specified  time; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is a negative number other than -1 milliseconds, which represents an infinite time-out.   -or-  <paramref name="timeout">timeout</paramref> is greater than <see cref="F:System.Int32.MaxValue"></see>.</exception>
      <exception cref="T:System.InvalidOperationException">The underlying collection was modified outside of this <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instance.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)">
      <summary>Tries to remove an item from the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> in the specified time period while observing a cancellation token.</summary>
      <param name="item">The item to be removed from the collection.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"></see> (-1) to wait indefinitely.</param>
      <param name="cancellationToken">A cancellation token to observe.</param>
      <returns>true if an item could be removed from the collection within the specified  time; otherwise, false.</returns>
      <exception cref="T:System.OperationCanceledException">The <see cref="T:System.Threading.CancellationToken"></see> has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed or the underlying <see cref="T:System.Threading.CancellationTokenSource"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout">millisecondsTimeout</paramref> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.InvalidOperationException">The underlying collection was modified outside this <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instance.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)">
      <summary>Tries to remove an item from the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> in the specified time period.</summary>
      <param name="item">The item to be removed from the collection.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"></see> (-1) to wait indefinitely.</param>
      <returns>true if an item could be removed from the collection within the specified  time; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout">millisecondsTimeout</paramref> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.InvalidOperationException">The underlying collection was modified outside of this <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instance.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)">
      <summary>Tries to remove an item from any one of the specified <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances.</summary>
      <param name="collections">The array of collections.</param>
      <param name="item">The item removed from one of the collections.</param>
      <returns>The index of the collection in the <paramref name="collections">collections</paramref> array from which the item was removed, or -1 if an item could not be removed.</returns>
      <exception cref="T:System.ObjectDisposedException">At least one of the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collections">collections</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The count of <paramref name="collections">collections</paramref> is greater than the maximum size of 62 for STA and 63 for MTA.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="collections">collections</paramref> argument is a 0-length array or contains a null element.</exception>
      <exception cref="T:System.InvalidOperationException">At least one of the underlying collections was modified outside of its <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instance.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)">
      <summary>Tries to remove an item from any one of the specified <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances.</summary>
      <param name="collections">The array of collections.</param>
      <param name="item">The item removed from one of the collections.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"></see> (-1) to wait indefinitely.</param>
      <returns>The index of the collection in the <paramref name="collections">collections</paramref> array from which the item was removed, or -1 if an item could not be removed.</returns>
      <exception cref="T:System.ObjectDisposedException">At least one of the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collections">collections</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout">millisecondsTimeout</paramref> is a negative number other than -1, which represents an infinite time-out.   -or-   The count of <paramref name="collections">collections</paramref> is greater than the maximum size of 62 for STA and 63 for MTA.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="collections">collections</paramref> argument is a 0-length array or contains a null element.</exception>
      <exception cref="T:System.InvalidOperationException">At least one of the underlying collections was modified outside of its <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instance.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)">
      <summary>Tries to remove an item from any one of the specified <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances.</summary>
      <param name="collections">The array of collections.</param>
      <param name="item">The item removed from one of the collections.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"></see> (-1) to wait indefinitely.</param>
      <param name="cancellationToken">A cancellation token to observe.</param>
      <returns>The index of the collection in the <paramref name="collections">collections</paramref> array from which the item was removed, or -1 if an item could not be removed.</returns>
      <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"></see> is canceled.</exception>
      <exception cref="T:System.InvalidOperationException">At least one of the underlying collections was modified outside of its <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instance.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collections">collections</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout">millisecondsTimeout</paramref> is a negative number other than -1, which represents an infinite time-out.   -or-   The count of <paramref name="collections">collections</paramref> is greater than the maximum size of 62 for STA and 63 for MTA.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="collections">collections</paramref> argument is a 0-length array or contains a null element.</exception>
      <exception cref="T:System.ObjectDisposedException">At least one of the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances has been disposed.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)">
      <summary>Tries to remove an item from any one of the specified <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances.</summary>
      <param name="collections">The array of collections.</param>
      <param name="item">The item removed from one of the collections.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan"></see> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"></see> that represents -1 milliseconds to wait indefinitely.</param>
      <returns>The index of the collection in the <paramref name="collections">collections</paramref> array from which the item was removed, or -1 if an item could not be removed.</returns>
      <exception cref="T:System.ObjectDisposedException">At least one of the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instances has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collections">collections</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue"></see>.   -or-   The count of <paramref name="collections">collections</paramref> is greater than the maximum size of 62 for STA and 63 for MTA.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="collections">collections</paramref> argument is a 0-length array or contains a null element.</exception>
      <exception cref="T:System.InvalidOperationException">At least one of the underlying collections was modified outside of its <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instance.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Provides an <see cref="T:System.Collections.Generic.IEnumerator`1"></see> for items in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"></see> for the items in the collection.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies all of the items in the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instance to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> instance. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array">array</paramref> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> argument is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="index">index</paramref> argument is equal to or greater than the length of the <paramref name="array">array</paramref>, the array is multidimensional, or the type parameter for the collection cannot be cast automatically to the type of the destination array.</exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized.</summary>
      <returns>always returns false.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>. This property is not supported.</summary>
      <returns>returns null.</returns>
      <exception cref="T:System.NotSupportedException">The SyncRoot property is not supported.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Provides an <see cref="T:System.Collections.IEnumerator"></see> for items in the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> for the items in the collection.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"></see> has been disposed.</exception>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentBag`1">
      <summary>Represents a thread-safe, unordered collection of objects.</summary>
      <typeparam name="T">The type of the elements to be stored in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see> class.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see> class that contains elements copied from the specified collection.</summary>
      <param name="collection">The collection whose elements are copied to the new <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="collection">collection</paramref> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.Add(`0)">
      <summary>Adds an object to the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see>.</summary>
      <param name="item">The object to be added to the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see>. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see> elements to an existing one-dimensional <see cref="T:System.Array"></see>, starting at the specified array index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="index">index</paramref> is equal to or greater than the length of the <paramref name="array">array</paramref> -or- the number of elements in the source <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see>.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see>.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see>.</summary>
      <returns>An enumerator for the contents of the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see>.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.IsEmpty">
      <summary>Gets a value that indicates whether the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see> is empty.</summary>
      <returns>true if the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see> is empty; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.ToArray">
      <summary>Copies the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see> elements to a new array.</summary>
      <returns>A new array containing a snapshot of elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see>.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.TryPeek(`0@)">
      <summary>Attempts to return an object from the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see> without removing it.</summary>
      <param name="result">When this method returns, result contains an object from the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see> or the default value of T if the operation failed.</param>
      <returns>true if and object was returned successfully; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.TryTake(`0@)">
      <summary>Attempts to remove and return an object from the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see>.</summary>
      <param name="result">When this method returns, result contains the object removed from the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see> or the default value of T if the bag is empty.</param>
      <returns>true if an object was removed successfully; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
      <summary>Attempts to add an object to the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see>.</summary>
      <param name="item">The object to be added to the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see>. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
      <returns>Always returns true</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional. -or- <paramref name="array">array</paramref> does not have zero-based indexing. -or- <paramref name="index">index</paramref> is equal to or greater than the length of the <paramref name="array">array</paramref> -or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>. -or- The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized with the SyncRoot.</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized with the SyncRoot; otherwise, false. For <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see>, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>. This property is not supported.</summary>
      <returns>Returns null  (Nothing in Visual Basic).</returns>
      <exception cref="T:System.NotSupportedException">The SyncRoot property is not supported.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see>.</summary>
      <returns>An enumerator for the contents of the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"></see>.</returns>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary>Encapsulates zero or more components.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Container"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary>Adds the specified <see cref="T:System.ComponentModel.Component"></see> to the <see cref="T:System.ComponentModel.Container"></see>. The component is unnamed.</summary>
      <param name="component">The component to add.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary>Adds the specified <see cref="T:System.ComponentModel.Component"></see> to the <see cref="T:System.ComponentModel.Container"></see> and assigns it a name.</summary>
      <param name="component">The component to add.</param>
      <param name="name">The unique, case-insensitive name to assign to the component.   -or-  null, which leaves the component unnamed.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="name">name</paramref> is not unique.</exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary>Gets all the components in the <see cref="T:System.ComponentModel.Container"></see>.</summary>
      <returns>A collection that contains the components in the <see cref="T:System.ComponentModel.Container"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>Creates a site <see cref="T:System.ComponentModel.ISite"></see> for the given <see cref="T:System.ComponentModel.IComponent"></see> and assigns the given name to the site.</summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent"></see> to create a site for.</param>
      <param name="name">The name to assign to component, or null to skip the name assignment.</param>
      <returns>The newly created site.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.ComponentModel.Container"></see>.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Container"></see>, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the <see cref="T:System.ComponentModel.Container"></see> is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary>Gets the service object of the specified type, if it is available.</summary>
      <param name="service">The <see cref="T:System.Type"></see> of the service to retrieve.</param>
      <returns>An <see cref="T:System.Object"></see> implementing the requested service, or null if the service cannot be resolved.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary>Removes a component from the <see cref="T:System.ComponentModel.Container"></see>.</summary>
      <param name="component">The component to remove.</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary>Removes a component from the <see cref="T:System.ComponentModel.Container"></see> without setting <see cref="P:System.ComponentModel.IComponent.Site"></see> to null.</summary>
      <param name="component">The component to remove.</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary>Determines whether the component name is unique for this container.</summary>
      <param name="component">The named component.</param>
      <param name="name">The component name to validate.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="component">component</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="name">name</paramref> is not unique.</exception>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary>Provides a base class for the container filter service.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ContainerFilterService"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary>Filters the component collection.</summary>
      <param name="components">The component collection to filter.</param>
      <returns>A <see cref="T:System.ComponentModel.ComponentCollection"></see> that represents a modified collection.</returns>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary>Provides a type converter to convert <see cref="T:System.Globalization.CultureInfo"></see> objects to and from various other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CultureInfoConverter"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value indicating whether this converter can convert an object in the given source type to a <see cref="T:System.Globalization.CultureInfo"></see> using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you wish to convert to.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified value object to a <see cref="T:System.Globalization.CultureInfo"></see>.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see> that specifies the culture to which to convert.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> specifies a culture that is not valid.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified destination type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see> that specifies the culture to which to convert.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value to.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary>Retrieves the name of the specified culture.</summary>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see> that specifies the culture to get the name for.</param>
      <returns>The name of the specified culture.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a collection of standard values for a <see cref="T:System.Globalization.CultureInfo"></see> object using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> containing a standard set of valid values, or null if the data type does not support a standard set of values.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a value indicating whether the list of standard values returned from <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"></see> is an exhaustive list.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>false because the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> returned from <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"></see> is not an exhaustive list of possible values (that is, other values are possible). This method never returns true.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true because <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"></see> should be called to find a common set of values the object supports. This method never returns false.</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary>Represents a collection of <see cref="T:System.ComponentModel.EventDescriptor"></see> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> class with the given array of <see cref="T:System.ComponentModel.EventDescriptor"></see> objects.</summary>
      <param name="events">An array of type <see cref="T:System.ComponentModel.EventDescriptor"></see> that provides the events for this collection.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> class with the given array of <see cref="T:System.ComponentModel.EventDescriptor"></see> objects. The collection is optionally read-only.</summary>
      <param name="events">An array of type <see cref="T:System.ComponentModel.EventDescriptor"></see> that provides the events for this collection.</param>
      <param name="readOnly">true to specify a read-only collection; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary>Adds an <see cref="T:System.ComponentModel.EventDescriptor"></see> to the end of the collection.</summary>
      <param name="value">An <see cref="T:System.ComponentModel.EventDescriptor"></see> to add to the collection.</param>
      <returns>The position of the <see cref="T:System.ComponentModel.EventDescriptor"></see> within the collection.</returns>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary>Removes all objects from the collection.</summary>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary>Returns whether the collection contains the given <see cref="T:System.ComponentModel.EventDescriptor"></see>.</summary>
      <param name="value">The <see cref="T:System.ComponentModel.EventDescriptor"></see> to find within the collection.</param>
      <returns>true if the collection contains the <paramref name="value">value</paramref> parameter given; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary>Gets the number of event descriptors in the collection.</summary>
      <returns>The number of event descriptors in the collection.</returns>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary>Specifies an empty collection to use, rather than creating a new one with no items. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>Gets the description of the event with the specified name in the collection.</summary>
      <param name="name">The name of the event to get from the collection.</param>
      <param name="ignoreCase">true if you want to ignore the case of the event; otherwise, false.</param>
      <returns>The <see cref="T:System.ComponentModel.EventDescriptor"></see> with the specified name, or null if the event does not exist.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary>Gets an enumerator for this <see cref="T:System.ComponentModel.EventDescriptorCollection"></see>.</summary>
      <returns>An enumerator that implements <see cref="T:System.Collections.IEnumerator"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary>Returns the index of the given <see cref="T:System.ComponentModel.EventDescriptor"></see>.</summary>
      <param name="value">The <see cref="T:System.ComponentModel.EventDescriptor"></see> to find within the collection.</param>
      <returns>The index of the given <see cref="T:System.ComponentModel.EventDescriptor"></see> within the collection.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary>Inserts an <see cref="T:System.ComponentModel.EventDescriptor"></see> to the collection at a specified index.</summary>
      <param name="index">The index within the collection in which to insert the value parameter.</param>
      <param name="value">An <see cref="T:System.ComponentModel.EventDescriptor"></see> to insert into the collection.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>Sorts the members of this <see cref="T:System.ComponentModel.EventDescriptorCollection"></see>, using the specified <see cref="T:System.Collections.IComparer"></see>.</summary>
      <param name="sorter">A comparer to use to sort the <see cref="T:System.ComponentModel.EventDescriptor"></see> objects in this collection.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary>Sorts the members of this <see cref="T:System.ComponentModel.EventDescriptorCollection"></see>. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.</summary>
      <param name="names">An array of strings describing the order in which to sort the <see cref="T:System.ComponentModel.EventDescriptor"></see> objects in this collection.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary>Gets or sets the event with the specified index number.</summary>
      <param name="index">The zero-based index number of the <see cref="T:System.ComponentModel.EventDescriptor"></see> to get or set.</param>
      <returns>The <see cref="T:System.ComponentModel.EventDescriptor"></see> with the specified index number.</returns>
      <exception cref="T:System.IndexOutOfRangeException"><paramref name="index">index</paramref> is not a valid index for <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)"></see>.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary>Gets or sets the event with the specified name.</summary>
      <param name="name">The name of the <see cref="T:System.ComponentModel.EventDescriptor"></see> to get or set.</param>
      <returns>The <see cref="T:System.ComponentModel.EventDescriptor"></see> with the specified name, or null if the event does not exist.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary>Removes the specified <see cref="T:System.ComponentModel.EventDescriptor"></see> from the collection.</summary>
      <param name="value">The <see cref="T:System.ComponentModel.EventDescriptor"></see> to remove from the collection.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.ComponentModel.EventDescriptor"></see> at the specified index from the collection.</summary>
      <param name="index">The index of the <see cref="T:System.ComponentModel.EventDescriptor"></see> to remove.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>Sorts the members of this <see cref="T:System.ComponentModel.EventDescriptorCollection"></see>, given a specified sort order and an <see cref="T:System.Collections.IComparer"></see>.</summary>
      <param name="names">An array of strings describing the order in which to sort the <see cref="T:System.ComponentModel.EventDescriptor"></see> objects in the collection.</param>
      <param name="comparer">An <see cref="T:System.Collections.IComparer"></see> to use to sort the <see cref="T:System.ComponentModel.EventDescriptor"></see> objects in this collection.</param>
      <returns>The new <see cref="T:System.ComponentModel.EventDescriptorCollection"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary>Sorts the members of this <see cref="T:System.ComponentModel.EventDescriptorCollection"></see>, given a specified sort order.</summary>
      <param name="names">An array of strings describing the order in which to sort the <see cref="T:System.ComponentModel.EventDescriptor"></see> objects in the collection.</param>
      <returns>The new <see cref="T:System.ComponentModel.EventDescriptorCollection"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary>Sorts the members of this <see cref="T:System.ComponentModel.EventDescriptorCollection"></see>, using the default sort for this collection, which is usually alphabetical.</summary>
      <returns>The new <see cref="T:System.ComponentModel.EventDescriptorCollection"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>Sorts the members of this <see cref="T:System.ComponentModel.EventDescriptorCollection"></see>, using the specified <see cref="T:System.Collections.IComparer"></see>.</summary>
      <param name="comparer">An <see cref="T:System.Collections.IComparer"></see> to use to sort the <see cref="T:System.ComponentModel.EventDescriptor"></see> objects in this collection.</param>
      <returns>The new <see cref="T:System.ComponentModel.EventDescriptorCollection"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the collection to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from collection. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary>Gets the number of elements contained in the collection.</summary>
      <returns>The number of elements contained in the collection.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the collection is synchronized.</summary>
      <returns>true if access to the collection is synchronized; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the collection.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to add to the collection.</param>
      <returns>The position into which the new element was inserted.</returns>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary>Removes all the items from the collection.</summary>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the collection contains a specific value.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the collection.</param>
      <returns>true if the <see cref="T:System.Object"></see> is found in the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the collection.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the collection.</param>
      <returns>The index of <paramref name="value">value</paramref> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the collection at the specified index.</summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">The <see cref="T:System.Object"></see> to insert into the collection.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the collection has a fixed size.</summary>
      <returns>true if the collection has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
      <exception cref="T:System.IndexOutOfRangeException"><paramref name="index">index</paramref> is less than 0.   -or-  <paramref name="index">index</paramref> is equal to or greater than <see cref="P:System.ComponentModel.EventDescriptorCollection.Count"></see>.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the collection.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to remove from the collection.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes the item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="T:System.ComponentModel.EventHandlerList">
      <summary>Provides a simple list of delegates. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EventHandlerList"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.AddHandler(System.Object,System.Delegate)">
      <summary>Adds a delegate to the list.</summary>
      <param name="key">The object that owns the event.</param>
      <param name="value">The delegate to add to the list.</param>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.AddHandlers(System.ComponentModel.EventHandlerList)">
      <summary>Adds a list of delegates to the current list.</summary>
      <param name="listToAddFrom">The list to add.</param>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.Dispose">
      <summary>Disposes the delegate list.</summary>
    </member>
    <member name="P:System.ComponentModel.EventHandlerList.Item(System.Object)">
      <summary>Gets or sets the delegate for the specified object.</summary>
      <param name="key">An object to find in the list.</param>
      <returns>The delegate for the specified key, or null if a delegate does not exist.</returns>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.RemoveHandler(System.Object,System.Delegate)">
      <summary>Removes a delegate from the list.</summary>
      <param name="key">The object that owns the event.</param>
      <param name="value">The delegate to remove from the list.</param>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary>Provides a type converter to convert expandable objects to and from various other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ExpandableObjectConverter"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Gets a collection of properties for the type of object specified by the value parameter.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="value">An <see cref="T:System.Object"></see> that specifies the type of object to get the properties for.</param>
      <param name="attributes">An array of type <see cref="T:System.Attribute"></see> that will be used as a filter.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties that are exposed for the component, or null if there are no properties.</returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a value indicating whether this object supports properties using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"></see> should be called to find the properties of this object. This method never returns false.</returns>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary>Specifies a property that is offered by an extender provider. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">An <see cref="T:System.Object"></see> to compare with this instance or a null reference (Nothing in Visual Basic).</param>
      <returns>true if <paramref name="obj">obj</paramref> equals the type and value of this instance; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary>Gets the property that is being provided.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> encapsulating the property that is being provided.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary>Provides an indication whether the value of this instance is the default value for the derived class.</summary>
      <returns>true if this instance is the default attribute for the class; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary>Gets the extender provider that is providing the property.</summary>
      <returns>The <see cref="T:System.ComponentModel.IExtenderProvider"></see> that is providing the property.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary>Gets the type of object that can receive the property.</summary>
      <returns>A <see cref="T:System.Type"></see> describing the type of object that can receive the property.</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary>Provides a type converter to convert <see cref="T:System.Guid"></see> objects to and from various other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.GuidConverter"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value indicating whether this converter can convert an object in the given source type to a GUID object using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you wish to convert to.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to a GUID object.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given object to another type.</summary>
      <param name="context">A formatter context.</param>
      <param name="culture">The culture into which value will be converted.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>The converted object.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary>Provides data for events that can be handled completely in an event handler.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.HandledEventArgs"></see> class with a default <see cref="P:System.ComponentModel.HandledEventArgs.Handled"></see> property value of false.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.HandledEventArgs"></see> class with the specified default value for the <see cref="P:System.ComponentModel.HandledEventArgs.Handled"></see> property.</summary>
      <param name="defaultHandledValue">The default value for the <see cref="P:System.ComponentModel.HandledEventArgs.Handled"></see> property.</param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary>Gets or sets a value that indicates whether the event handler has completely handled the event or whether the system should continue its own processing.</summary>
      <returns>true if the event has been completely handled; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary>Represents a method that can handle events which may or may not require further processing after the event handler has returned.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.HandledEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary>Provides the features required to support both complex and simple scenarios when binding to a data source.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>Adds the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to the indexes used for searching.</summary>
      <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to add to the indexes used for searching.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary>Adds a new item to the list.</summary>
      <returns>The item added to the list.</returns>
      <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.AllowNew"></see> is false.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary>Gets whether you can update items in the list.</summary>
      <returns>true if you can update the items in the list; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary>Gets whether you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew"></see>.</summary>
      <returns>true if you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew"></see>; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary>Gets whether you can remove items from the list, using <see cref="M:System.Collections.IList.Remove(System.Object)"></see> or <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"></see>.</summary>
      <returns>true if you can remove items from the list; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>Sorts the list based on a <see cref="T:System.ComponentModel.PropertyDescriptor"></see> and a <see cref="T:System.ComponentModel.ListSortDirection"></see>.</summary>
      <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to sort by.</param>
      <param name="direction">One of the <see cref="T:System.ComponentModel.ListSortDirection"></see> values.</param>
      <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting"></see> is false.</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Returns the index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor"></see>.</summary>
      <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to search on.</param>
      <param name="key">The value of the property parameter to search for.</param>
      <returns>The index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor"></see>.</returns>
      <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSearching"></see> is false.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary>Gets whether the items in the list are sorted.</summary>
      <returns>true if <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)"></see> has been called and <see cref="M:System.ComponentModel.IBindingList.RemoveSort"></see> has not been called; otherwise, false.</returns>
      <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting"></see> is false.</exception>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary>Occurs when the list changes or an item in the list changes.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>Removes the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> from the indexes used for searching.</summary>
      <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to remove from the indexes used for searching.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary>Removes any sort applied using <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)"></see>.</summary>
      <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting"></see> is false.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary>Gets the direction of the sort.</summary>
      <returns>One of the <see cref="T:System.ComponentModel.ListSortDirection"></see> values.</returns>
      <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting"></see> is false.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary>Gets the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that is being used for sorting.</summary>
      <returns>The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that is being used for sorting.</returns>
      <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting"></see> is false.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary>Gets whether a <see cref="E:System.ComponentModel.IBindingList.ListChanged"></see> event is raised when the list changes or an item in the list changes.</summary>
      <returns>true if a <see cref="E:System.ComponentModel.IBindingList.ListChanged"></see> event is raised when the list changes or when an item changes; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary>Gets whether the list supports searching using the <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)"></see> method.</summary>
      <returns>true if the list supports searching using the <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)"></see> method; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary>Gets whether the list supports sorting.</summary>
      <returns>true if the list supports sorting; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary>Extends the <see cref="T:System.ComponentModel.IBindingList"></see> interface by providing advanced sorting and filtering capabilities.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>Sorts the data source based on the given <see cref="T:System.ComponentModel.ListSortDescriptionCollection"></see>.</summary>
      <param name="sorts">The <see cref="T:System.ComponentModel.ListSortDescriptionCollection"></see> containing the sorts to apply to the data source.</param>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary>Gets or sets the filter to be used to exclude items from the collection of items returned by the data source</summary>
      <returns>The string used to filter items out in the item collection returned by the data source.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary>Removes the current filter applied to the data source.</summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary>Gets the collection of sort descriptions currently applied to the data source.</summary>
      <returns>The <see cref="T:System.ComponentModel.ListSortDescriptionCollection"></see> currently applied to the data source.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary>Gets a value indicating whether the data source supports advanced sorting.</summary>
      <returns>true if the data source supports advanced sorting; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary>Gets a value indicating whether the data source supports filtering.</summary>
      <returns>true if the data source supports filtering; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary>Adds transactional capability when adding a new item to a collection.</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary>Discards a pending new item from the collection.</summary>
      <param name="itemIndex">The index of the item that was previously added to the collection.</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary>Commits a pending new item to the collection.</summary>
      <param name="itemIndex">The index of the item that was previously added to the collection.</param>
    </member>
    <member name="T:System.ComponentModel.IChangeTracking">
      <summary>Defines the mechanism for querying the object for changes and resetting of the changed status.</summary>
    </member>
    <member name="M:System.ComponentModel.IChangeTracking.AcceptChanges">
      <summary>Resets the object’s state to unchanged by accepting the modifications.</summary>
    </member>
    <member name="P:System.ComponentModel.IChangeTracking.IsChanged">
      <summary>Gets the object's changed status.</summary>
      <returns>true if the object’s content has changed since the last call to <see cref="M:System.ComponentModel.IChangeTracking.AcceptChanges"></see>; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary>Provides a top-level mapping layer between a COM object and a <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary>Gets the attributes for the specified component.</summary>
      <param name="component">The component to get attributes for.</param>
      <returns>A collection of attributes for <paramref name="component">component</paramref>.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary>Gets the class name for the specified component.</summary>
      <param name="component">The component to get the class name for.</param>
      <returns>The name of the class that corresponds with <paramref name="component">component</paramref>.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary>Gets the type converter for the specified component.</summary>
      <param name="component">The component to get the <see cref="T:System.ComponentModel.TypeConverter"></see> for.</param>
      <returns>The <see cref="T:System.ComponentModel.TypeConverter"></see> for <paramref name="component">component</paramref>.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary>Gets the default event for the specified component.</summary>
      <param name="component">The component to get the default event for.</param>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptor"></see> that represents <paramref name="component">component</paramref>'s default event.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary>Gets the default property for the specified component.</summary>
      <param name="component">The component to get the default property for.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that represents <paramref name="component">component</paramref>'s default property.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary>Gets the editor for the specified component.</summary>
      <param name="component">The component to get the editor for.</param>
      <param name="baseEditorType">The base type of the editor for component.</param>
      <returns>The editor for <paramref name="component">component</paramref>.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary>Gets the events for the specified component.</summary>
      <param name="component">The component to get events for.</param>
      <returns>A collection of event descriptors for <paramref name="component">component</paramref>.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary>Gets the events with the specified attributes for the specified component.</summary>
      <param name="component">The component to get events for.</param>
      <param name="attributes">The attributes used to filter events.</param>
      <returns>A collection of event descriptors for <paramref name="component">component</paramref>.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary>Gets the name of the specified component.</summary>
      <param name="component">The component to get the name of.</param>
      <returns>The name of <paramref name="component">component</paramref>.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary>Gets the properties with the specified attributes for the specified component.</summary>
      <param name="component">The component to get events for.</param>
      <param name="attributes">The attributes used to filter properties.</param>
      <returns>A collection of property descriptors for <paramref name="component">component</paramref>.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary>Gets the value of the property that has the specified dispatch identifier.</summary>
      <param name="component">The object to which the property belongs.</param>
      <param name="dispid">The dispatch identifier.</param>
      <param name="success">A <see cref="T:System.Boolean"></see>, passed by reference, that represents whether the property was retrieved.</param>
      <returns>The value of the property that has the specified dispatch identifier.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary>Gets the value of the property that has the specified name.</summary>
      <param name="component">The object to which the property belongs.</param>
      <param name="propertyName">The name of the property.</param>
      <param name="success">A <see cref="T:System.Boolean"></see>, passed by reference, that represents whether the property was retrieved.</param>
      <returns>The value of the property that has the specified name.</returns>
    </member>
    <member name="T:System.ComponentModel.IComponent">
      <summary>Provides functionality required by all components.</summary>
    </member>
    <member name="E:System.ComponentModel.IComponent.Disposed">
      <summary>Represents the method that handles the <see cref="E:System.ComponentModel.IComponent.Disposed"></see> event of a component.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.IComponent.Site">
      <summary>Gets or sets the <see cref="T:System.ComponentModel.ISite"></see> associated with the <see cref="T:System.ComponentModel.IComponent"></see>.</summary>
      <returns>The <see cref="T:System.ComponentModel.ISite"></see> object associated with the component; or null, if the component does not have a site.</returns>
    </member>
    <member name="T:System.ComponentModel.IContainer">
      <summary>Provides functionality for containers. Containers are objects that logically contain zero or more components.</summary>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent)">
      <summary>Adds the specified <see cref="T:System.ComponentModel.IComponent"></see> to the <see cref="T:System.ComponentModel.IContainer"></see> at the end of the list.</summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent"></see> to add.</param>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent,System.String)">
      <summary>Adds the specified <see cref="T:System.ComponentModel.IComponent"></see> to the <see cref="T:System.ComponentModel.IContainer"></see> at the end of the list, and assigns a name to the component.</summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent"></see> to add.</param>
      <param name="name">The unique, case-insensitive name to assign to the component.   -or-  null that leaves the component unnamed.</param>
    </member>
    <member name="P:System.ComponentModel.IContainer.Components">
      <summary>Gets all the components in the <see cref="T:System.ComponentModel.IContainer"></see>.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.IComponent"></see> objects that represents all the components in the <see cref="T:System.ComponentModel.IContainer"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.IContainer.Remove(System.ComponentModel.IComponent)">
      <summary>Removes a component from the <see cref="T:System.ComponentModel.IContainer"></see>.</summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent"></see> to remove.</param>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary>Provides an interface that supplies dynamic custom type information for an object.</summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary>Returns a collection of custom attributes for this instance of a component.</summary>
      <returns>An <see cref="T:System.ComponentModel.AttributeCollection"></see> containing the attributes for this object.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary>Returns the class name of this instance of a component.</summary>
      <returns>The class name of the object, or null if the class does not have a name.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary>Returns the name of this instance of a component.</summary>
      <returns>The name of the object, or null if the object does not have a name.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary>Returns a type converter for this instance of a component.</summary>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter"></see> that is the converter for this object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter"></see> for this object.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary>Returns the default event for this instance of a component.</summary>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptor"></see> that represents the default event for this object, or null if this object does not have events.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary>Returns the default property for this instance of a component.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that represents the default property for this object, or null if this object does not have properties.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary>Returns an editor of the specified type for this instance of a component.</summary>
      <param name="editorBaseType">A <see cref="T:System.Type"></see> that represents the editor for this object.</param>
      <returns>An <see cref="T:System.Object"></see> of the specified type that is the editor for this object, or null if the editor cannot be found.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary>Returns the events for this instance of a component.</summary>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> that represents the events for this component instance.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>Returns the events for this instance of a component using the specified attribute array as a filter.</summary>
      <param name="attributes">An array of type <see cref="T:System.Attribute"></see> that is used as a filter.</param>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> that represents the filtered events for this component instance.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary>Returns the properties for this instance of a component.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> that represents the properties for this component instance.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>Returns the properties for this instance of a component using the attribute array as a filter.</summary>
      <param name="attributes">An array of type <see cref="T:System.Attribute"></see> that is used as a filter.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> that represents the filtered properties for this component instance.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Returns an object that contains the property described by the specified property descriptor.</summary>
      <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that represents the property whose owner is to be found.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the owner of the specified property.</returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary>Provides the functionality to offer custom error information that a user interface can bind to.</summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary>Gets an error message indicating what is wrong with this object.</summary>
      <returns>An error message indicating what is wrong with this object. The default is an empty string (&quot;&quot;).</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary>Gets the error message for the property with the given name.</summary>
      <param name="columnName">The name of the property whose error message to get.</param>
      <returns>The error message for the property. The default is an empty string (&quot;&quot;).</returns>
    </member>
    <member name="T:System.ComponentModel.IEditableObject">
      <summary>Provides functionality to commit or rollback changes to an object that is used as a data source.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.BeginEdit">
      <summary>Begins an edit on an object.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.CancelEdit">
      <summary>Discards changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit"></see> call.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.EndEdit">
      <summary>Pushes changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit"></see> or <see cref="M:System.ComponentModel.IBindingList.AddNew"></see> call into the underlying object.</summary>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary>Defines the interface for extending properties to other components in a container.</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary>Specifies whether this object can provide its extender properties to the specified object.</summary>
      <param name="extendee">The <see cref="T:System.Object"></see> to receive the extender properties.</param>
      <returns>true if this object can provide extender properties to the specified object; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary>Provides an interface to facilitate the retrieval of the builder's name and to display the builder.</summary>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary>Gets a localized name.</summary>
      <returns>A localized name.</returns>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary>Shows the builder.</summary>
      <param name="language">The language service that is calling the builder.</param>
      <param name="value">The expression being edited.</param>
      <param name="newValue">The new value.</param>
      <returns>true if the value should be replaced with <paramref name="newValue">newValue</paramref>; otherwise, false (if the user cancels, for example).</returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary>Provides functionality to an object to return a list that can be bound to a data source.</summary>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary>Gets a value indicating whether the collection is a collection of <see cref="T:System.Collections.IList"></see> objects.</summary>
      <returns>true if the collection is a collection of <see cref="T:System.Collections.IList"></see> objects; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary>Returns an <see cref="T:System.Collections.IList"></see> that can be bound to a data source from an object that does not implement an <see cref="T:System.Collections.IList"></see> itself.</summary>
      <returns>An <see cref="T:System.Collections.IList"></see> that can be bound to a data source from the object.</returns>
    </member>
    <member name="T:System.ComponentModel.ImmutableObjectAttribute">
      <summary>Specifies that an object has no subproperties capable of being edited. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ImmutableObjectAttribute"></see> class.</summary>
      <param name="immutable">true if the object is immutable; otherwise, false.</param>
    </member>
    <member name="F:System.ComponentModel.ImmutableObjectAttribute.Default">
      <summary>Represents the default value for <see cref="T:System.ComponentModel.ImmutableObjectAttribute"></see>.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">An <see cref="T:System.Object"></see> to compare with this instance or a null reference (Nothing in Visual Basic).</param>
      <returns>true if <paramref name="obj">obj</paramref> equals the type and value of this instance; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.ImmutableObjectAttribute"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.ImmutableObjectAttribute.Immutable">
      <summary>Gets whether the object is immutable.</summary>
      <returns>true if the object is immutable; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.IsDefaultAttribute">
      <summary>Indicates whether the value of this instance is the default value.</summary>
      <returns>true if this instance is the default attribute for the class; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.ImmutableObjectAttribute.No">
      <summary>Specifies that an object has at least one editable subproperty. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.ImmutableObjectAttribute.Yes">
      <summary>Specifies that an object has no subproperties that can be edited. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary>Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary>Gets the owning component for the nested container.</summary>
      <returns>The <see cref="T:System.ComponentModel.IComponent"></see> that owns the nested container.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary>Provides the ability to retrieve the full nested name of a component.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary>Gets the full name of the component in this site.</summary>
      <returns>The full name of the component in this site.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary>Indicates whether the component associated with this attribute has been inherited from a base class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.InheritanceAttribute"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.InheritanceAttribute"></see> class with the specified inheritance level.</summary>
      <param name="inheritanceLevel">An <see cref="T:System.ComponentModel.InheritanceLevel"></see> that indicates the level of inheritance to set this attribute to.</param>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary>Specifies that the default value for <see cref="T:System.ComponentModel.InheritanceAttribute"></see> is <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited"></see>. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary>Override to test for equality.</summary>
      <param name="value">The object to test.</param>
      <returns>true if the object is the same; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary>Returns the hashcode for this object.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.InheritanceAttribute"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary>Gets or sets the current inheritance level stored in this attribute.</summary>
      <returns>The <see cref="T:System.ComponentModel.InheritanceLevel"></see> stored in this attribute.</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary>Specifies that the component is inherited. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary>Specifies that the component is inherited and is read-only. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary>Gets a value indicating whether the current value of the attribute is the default value for the attribute.</summary>
      <returns>true if the current value of the attribute is the default; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary>Specifies that the component is not inherited. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary>Converts this attribute to a string.</summary>
      <returns>A string that represents this <see cref="T:System.ComponentModel.InheritanceAttribute"></see>.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary>Defines identifiers for types of inheritance levels.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary>The object is inherited.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary>The object is inherited, but has read-only access.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary>The object is not inherited.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Configuration.IPersistComponentSettings">
      <summary>Defines standard functionality for controls or libraries that store and retrieve application settings.</summary>
    </member>
    <member name="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings">
      <summary>Reads the control's application settings into their corresponding properties and updates the control's state.</summary>
    </member>
    <member name="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings">
      <summary>Resets the control's application settings properties to their default values.</summary>
    </member>
    <member name="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings">
      <summary>Persists the control's application settings properties.</summary>
    </member>
    <member name="P:System.Configuration.IPersistComponentSettings.SaveSettings">
      <summary>Gets or sets a value indicating whether the control should automatically persist its application settings properties.</summary>
      <returns>true if the control should automatically persist its state; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.IPersistComponentSettings.SettingsKey">
      <summary>Gets or sets the value of the application settings key for the current instance of the control.</summary>
      <returns>A <see cref="T:System.String"></see> containing the settings key for the current instance of the control.</returns>
    </member>
    <member name="T:System.Configuration.IriParsingElement">
      <summary>Provides the configuration setting for International Resource Identifier (IRI) processing in the <see cref="T:System.Uri"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.IriParsingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.IriParsingElement"></see> class.</summary>
    </member>
    <member name="P:System.Configuration.IriParsingElement.Enabled">
      <summary>Gets or sets the value of the <see cref="T:System.Configuration.IriParsingElement"></see> configuration setting.</summary>
      <returns>A Boolean that indicates if International Resource Identifier (IRI) processing is enabled.</returns>
    </member>
    <member name="M:System.Configuration.IriParsingElement.Equals(System.Object)">
      <param name="o"></param>
      <returns></returns>
    </member>
    <member name="M:System.Configuration.IriParsingElement.GetHashCode">
      <returns></returns>
    </member>
    <member name="T:System.Configuration.ISettingsProviderService">
      <summary>Provides an interface for defining an alternate application settings provider.</summary>
    </member>
    <member name="M:System.Configuration.ISettingsProviderService.GetSettingsProvider(System.Configuration.SettingsProperty)">
      <summary>Returns the settings provider compatible with the specified settings property.</summary>
      <param name="property">The <see cref="T:System.Configuration.SettingsProperty"></see> that requires serialization.</param>
      <returns>If found, the <see cref="T:System.Configuration.SettingsProvider"></see> that can persist the specified settings property; otherwise, null.</returns>
    </member>
    <member name="T:System.Configuration.LocalFileSettingsProvider">
      <summary>Provides persistence for application settings classes.</summary>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.LocalFileSettingsProvider"></see> class.</summary>
    </member>
    <member name="P:System.Configuration.LocalFileSettingsProvider.ApplicationName">
      <summary>Gets or sets the name of the currently running application.</summary>
      <returns>A string that contains the application's display name.</returns>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)">
      <summary>Returns the value of the named settings property for the previous version of the same application.</summary>
      <param name="context">A <see cref="T:System.Configuration.SettingsContext"></see> that describes where the application settings property is used.</param>
      <param name="property">The <see cref="T:System.Configuration.SettingsProperty"></see> whose value is to be returned.</param>
      <returns>A <see cref="T:System.Configuration.SettingsPropertyValue"></see> representing the application setting if found; otherwise, null.</returns>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
      <summary>Returns the collection of setting property values for the specified application instance and settings property group.</summary>
      <param name="context">A <see cref="T:System.Configuration.SettingsContext"></see> describing the current application usage.</param>
      <param name="properties">A <see cref="T:System.Configuration.SettingsPropertyCollection"></see> containing the settings property group whose values are to be retrieved.</param>
      <returns>A <see cref="T:System.Configuration.SettingsPropertyValueCollection"></see> containing the values for the specified settings property group.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">A user-scoped setting was encountered but the current configuration only supports application-scoped settings.</exception>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes the provider.</summary>
      <param name="name">The friendly name of the provider.</param>
      <param name="values">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)">
      <summary>Resets all application settings properties associated with the specified application to their default values.</summary>
      <param name="context">A <see cref="T:System.Configuration.SettingsContext"></see> describing the current application usage.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">A user-scoped setting was encountered but the current configuration only supports application-scoped settings.</exception>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
      <summary>Sets the values of the specified group of property settings.</summary>
      <param name="context">A <see cref="T:System.Configuration.SettingsContext"></see> describing the current application usage.</param>
      <param name="values">A <see cref="T:System.Configuration.SettingsPropertyValueCollection"></see> representing the group of property settings to set.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">A user-scoped setting was encountered but the current configuration only supports application-scoped settings.   -or-   There was a general failure saving the settings to the configuration file.</exception>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
      <summary>Attempts to migrate previous user-scoped settings from a previous version of the same application.</summary>
      <param name="context">A <see cref="T:System.Configuration.SettingsContext"></see> describing the current application usage.</param>
      <param name="properties">A <see cref="T:System.Configuration.SettingsPropertyCollection"></see> containing the settings property group whose values are to be retrieved.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">A user-scoped setting was encountered but the current configuration only supports application-scoped settings.   -or-   The previous version of the configuration file could not be accessed.</exception>
    </member>
    <member name="T:System.Configuration.NameValueFileSectionHandler">
      <summary>Provides access to a configuration file. This type supports the .NET Framework configuration infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:System.Configuration.NameValueFileSectionHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.NameValueFileSectionHandler"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.NameValueFileSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>Creates a new configuration handler and adds it to the section-handler collection based on the specified parameters.</summary>
      <param name="parent">The parent object.</param>
      <param name="configContext">The configuration context object.</param>
      <param name="section">The section XML node.</param>
      <returns>A configuration object.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The file specified in the file attribute of <paramref name="section">section</paramref> exists but cannot be loaded.   - or -   The name attribute of <paramref name="section">section</paramref> does not match the root element of the file specified in the file attribute.</exception>
    </member>
    <member name="T:System.Configuration.NameValueSectionHandler">
      <summary>Provides name/value-pair configuration information from a configuration section.</summary>
    </member>
    <member name="M:System.Configuration.NameValueSectionHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.NameValueSectionHandler"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.NameValueSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>Creates a new configuration handler and adds it to the section-handler collection based on the specified parameters.</summary>
      <param name="parent">Parent object.</param>
      <param name="context">Configuration context object.</param>
      <param name="section">Section XML node.</param>
      <returns>A configuration object.</returns>
    </member>
    <member name="P:System.Configuration.NameValueSectionHandler.KeyAttributeName">
      <summary>Gets the XML attribute name to use as the key in a key/value pair.</summary>
      <returns>A <see cref="T:System.String"></see> value containing the name of the key attribute.</returns>
    </member>
    <member name="P:System.Configuration.NameValueSectionHandler.ValueAttributeName">
      <summary>Gets the XML attribute name to use as the value in a key/value pair.</summary>
      <returns>A <see cref="T:System.String"></see> value containing the name of the value attribute.</returns>
    </member>
    <member name="T:System.Configuration.NoSettingsVersionUpgradeAttribute">
      <summary>Specifies that a settings provider should disable any logic that gets invoked when an application upgrade is detected. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.NoSettingsVersionUpgradeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.NoSettingsVersionUpgradeAttribute"></see> class.</summary>
    </member>
    <member name="T:System.Diagnostics.CorrelationManager">
      <summary>Correlates traces that are part of a logical transaction.</summary>
    </member>
    <member name="P:System.Diagnostics.CorrelationManager.ActivityId">
      <summary>Gets or sets the identity for a global activity.</summary>
      <returns>A <see cref="T:System.Guid"></see> structure that identifies the global activity.</returns>
    </member>
    <member name="P:System.Diagnostics.CorrelationManager.LogicalOperationStack">
      <summary>Gets the logical operation stack from the call context.</summary>
      <returns>A <see cref="T:System.Collections.Stack"></see> object that represents the logical operation stack for the call context.</returns>
    </member>
    <member name="M:System.Diagnostics.CorrelationManager.StartLogicalOperation">
      <summary>Starts a logical operation on a thread.</summary>
    </member>
    <member name="M:System.Diagnostics.CorrelationManager.StartLogicalOperation(System.Object)">
      <summary>Starts a logical operation with the specified identity on a thread.</summary>
      <param name="operationId">An object identifying the operation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="operationId">operationId</paramref> parameter is null.</exception>
    </member>
    <member name="M:System.Diagnostics.CorrelationManager.StopLogicalOperation">
      <summary>Stops the current logical operation.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Diagnostics.CorrelationManager.LogicalOperationStack"></see> property is an empty stack.</exception>
    </member>
    <member name="T:System.Diagnostics.CounterSample">
      <summary>Defines a structure that holds the raw data for a performance counter.</summary>
    </member>
    <member name="M:System.Diagnostics.CounterSample.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CounterSample"></see> structure and sets the <see cref="P:System.Diagnostics.CounterSample.CounterTimeStamp"></see> property to 0 (zero).</summary>
      <param name="rawValue">The numeric value associated with the performance counter sample.</param>
      <param name="baseValue">An optional, base raw value for the counter, to use only if the sample is based on multiple counters.</param>
      <param name="counterFrequency">The frequency with which the counter is read.</param>
      <param name="systemFrequency">The frequency with which the system reads from the counter.</param>
      <param name="timeStamp">The raw time stamp.</param>
      <param name="timeStamp100nSec">The raw, high-fidelity time stamp.</param>
      <param name="counterType">A <see cref="T:System.Diagnostics.PerformanceCounterType"></see> object that indicates the type of the counter for which this sample is a snapshot.</param>
    </member>
    <member name="M:System.Diagnostics.CounterSample.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CounterSample"></see> structure and sets the <see cref="P:System.Diagnostics.CounterSample.CounterTimeStamp"></see> property to the value that is passed in.</summary>
      <param name="rawValue">The numeric value associated with the performance counter sample.</param>
      <param name="baseValue">An optional, base raw value for the counter, to use only if the sample is based on multiple counters.</param>
      <param name="counterFrequency">The frequency with which the counter is read.</param>
      <param name="systemFrequency">The frequency with which the system reads from the counter.</param>
      <param name="timeStamp">The raw time stamp.</param>
      <param name="timeStamp100nSec">The raw, high-fidelity time stamp.</param>
      <param name="counterType">A <see cref="T:System.Diagnostics.PerformanceCounterType"></see> object that indicates the type of the counter for which this sample is a snapshot.</param>
      <param name="counterTimeStamp">The time at which the sample was taken.</param>
    </member>
    <member name="P:System.Diagnostics.CounterSample.BaseValue">
      <summary>Gets an optional, base raw value for the counter.</summary>
      <returns>The base raw value, which is used only if the sample is based on multiple counters.</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample)">
      <summary>Calculates the performance data of the counter, using a single sample point. This method is generally used for uncalculated performance counter types.</summary>
      <param name="counterSample">The <see cref="T:System.Diagnostics.CounterSample"></see> structure to use as a base point for calculating performance data.</param>
      <returns>The calculated performance value.</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>Calculates the performance data of the counter, using two sample points. This method is generally used for calculated performance counter types, such as averages.</summary>
      <param name="counterSample">The <see cref="T:System.Diagnostics.CounterSample"></see> structure to use as a base point for calculating performance data.</param>
      <param name="nextCounterSample">The <see cref="T:System.Diagnostics.CounterSample"></see> structure to use as an ending point for calculating performance data.</param>
      <returns>The calculated performance value.</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.CounterFrequency">
      <summary>Gets the raw counter frequency.</summary>
      <returns>The frequency with which the counter is read.</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.CounterTimeStamp">
      <summary>Gets the counter's time stamp.</summary>
      <returns>The time at which the sample was taken.</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.CounterType">
      <summary>Gets the performance counter type.</summary>
      <returns>A <see cref="T:System.Diagnostics.PerformanceCounterType"></see> object that indicates the type of the counter for which this sample is a snapshot.</returns>
    </member>
    <member name="F:System.Diagnostics.CounterSample.Empty">
      <summary>Defines an empty, uninitialized performance counter sample of type NumberOfItems32.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Equals(System.Diagnostics.CounterSample)">
      <summary>Indicates whether the specified <see cref="T:System.Diagnostics.CounterSample"></see> structure is equal to the current <see cref="T:System.Diagnostics.CounterSample"></see> structure.</summary>
      <param name="sample"></param>
      <returns>true if <paramref name="other">other</paramref> is equal to the current instance; otherwise, false.</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Equals(System.Object)">
      <summary>Indicates whether the specified structure is a <see cref="T:System.Diagnostics.CounterSample"></see> structure and is identical to the current <see cref="T:System.Diagnostics.CounterSample"></see> structure.</summary>
      <param name="o"></param>
      <returns>true if <paramref name="obj">obj</paramref> is a <see cref="T:System.Diagnostics.CounterSample"></see> structure and is identical to the current instance; otherwise, false.</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.GetHashCode">
      <summary>Gets a hash code for the current counter sample.</summary>
      <returns>A hash code for the current counter sample.</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.op_Equality(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Diagnostics.CounterSample"></see> structures are equal.</summary>
      <param name="a"></param>
      <param name="b"></param>
      <returns>true if <paramref name="a">a</paramref> and <paramref name="b">b</paramref> are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.op_Inequality(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Diagnostics.CounterSample"></see> structures are not equal.</summary>
      <param name="a"></param>
      <param name="b"></param>
      <returns>true if <paramref name="a">a</paramref> and <paramref name="b">b</paramref> are not equal; otherwise, false</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.RawValue">
      <summary>Gets the raw value of the counter.</summary>
      <returns>The numeric value that is associated with the performance counter sample.</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.SystemFrequency">
      <summary>Gets the raw system frequency.</summary>
      <returns>The frequency with which the system reads from the counter.</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.TimeStamp">
      <summary>Gets the raw time stamp.</summary>
      <returns>The system time stamp.</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.TimeStamp100nSec">
      <summary>Gets the raw, high-fidelity time stamp.</summary>
      <returns>The system time stamp, represented within 0.1 millisecond.</returns>
    </member>
    <member name="T:System.Diagnostics.DataReceivedEventArgs">
      <summary>Provides data for the <see cref="E:System.Diagnostics.Process.OutputDataReceived"></see> and <see cref="E:System.Diagnostics.Process.ErrorDataReceived"></see> events.</summary>
    </member>
    <member name="P:System.Diagnostics.DataReceivedEventArgs.Data">
      <summary>Gets the line of characters that was written to a redirected <see cref="T:System.Diagnostics.Process"></see> output stream.</summary>
      <returns>The line that was written by an associated <see cref="T:System.Diagnostics.Process"></see> to its redirected <see cref="P:System.Diagnostics.Process.StandardOutput"></see> or <see cref="P:System.Diagnostics.Process.StandardError"></see> stream.</returns>
    </member>
    <member name="T:System.Diagnostics.DataReceivedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Diagnostics.Process.OutputDataReceived"></see> event or <see cref="E:System.Diagnostics.Process.ErrorDataReceived"></see> event of a <see cref="T:System.Diagnostics.Process"></see>.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Diagnostics.DataReceivedEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.Diagnostics.Debug">
      <summary>Provides a set of methods and properties that help debug your code.</summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean)">
      <summary>Checks for a condition; if the condition is false, displays a message box that shows the call stack.</summary>
      <param name="condition">The conditional expression to evaluate. If the condition is true, a failure message is not sent and the message box is not displayed.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)">
      <summary>Checks for a condition; if the condition is false, outputs a specified message and displays a message box that shows the call stack.</summary>
      <param name="condition">The conditional expression to evaluate. If the condition is true, the specified message is not sent and the message box is not displayed.</param>
      <param name="message">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)">
      <summary>Checks for a condition; if the condition is false, outputs two specified messages and displays a message box that shows the call stack.</summary>
      <param name="condition">The conditional expression to evaluate. If the condition is true, the specified messages are not sent and the message box is not displayed.</param>
      <param name="message">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection.</param>
      <param name="detailMessage">The detailed message to send to the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])">
      <summary>Checks for a condition; if the condition is false, outputs two messages (simple and formatted) and displays a message box that shows the call stack.</summary>
      <param name="condition">The conditional expression to evaluate. If the condition is true, the specified messages are not sent and the message box is not displayed.</param>
      <param name="message">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection.</param>
      <param name="detailMessageFormat">The composite format string to send to the <see cref="P:System.Diagnostics.Trace.Listeners"></see> collection. This message contains text intermixed with zero or more format items, which correspond to objects in the args array.</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
    </member>
    <member name="P:System.Diagnostics.Debug.AutoFlush">
      <summary>Gets or sets a value indicating whether <see cref="M:System.Diagnostics.Debug.Flush"></see> should be called on the <see cref="P:System.Diagnostics.Debug.Listeners"></see> after every write.</summary>
      <returns>true if <see cref="M:System.Diagnostics.Debug.Flush"></see> is called on the <see cref="P:System.Diagnostics.Debug.Listeners"></see> after every write; otherwise, false.</returns>
    </member>
    <member name="M:System.Diagnostics.Debug.Close">
      <summary>Flushes the output buffer and then calls the Close method on each of the <see cref="P:System.Diagnostics.Debug.Listeners"></see>.</summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Fail(System.String)">
      <summary>Emits the specified error message.</summary>
      <param name="message">A message to emit.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Fail(System.String,System.String)">
      <summary>Emits an error message and a detailed error message.</summary>
      <param name="message">A message to emit.</param>
      <param name="detailMessage">A detailed message to emit.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Flush">
      <summary>Flushes the output buffer and causes buffered data to write to the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection.</summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Indent">
      <summary>Increases the current <see cref="P:System.Diagnostics.Debug.IndentLevel"></see> by one.</summary>
    </member>
    <member name="P:System.Diagnostics.Debug.IndentLevel">
      <summary>Gets or sets the indent level.</summary>
      <returns>The indent level. The default is 0.</returns>
    </member>
    <member name="P:System.Diagnostics.Debug.IndentSize">
      <summary>Gets or sets the number of spaces in an indent.</summary>
      <returns>The number of spaces in an indent. The default is four.</returns>
    </member>
    <member name="P:System.Diagnostics.Debug.Listeners">
      <summary>Gets the collection of listeners that is monitoring the debug output.</summary>
      <returns>A <see cref="T:System.Diagnostics.TraceListenerCollection"></see> representing a collection of type <see cref="T:System.Diagnostics.TraceListener"></see> that monitors the debug output.</returns>
    </member>
    <member name="M:System.Diagnostics.Debug.Print(System.String)">
      <summary>Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection.</summary>
      <param name="message">The message to write.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Print(System.String,System.Object[])">
      <summary>Writes a formatted string followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection.</summary>
      <param name="format">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the args array.</param>
      <param name="args">An object array containing zero or more objects to format.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="format">format</paramref> is null.</exception>
      <exception cref="T:System.FormatException"><paramref name="format">format</paramref> is invalid.   -or-   The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.</exception>
    </member>
    <member name="M:System.Diagnostics.Debug.Unindent">
      <summary>Decreases the current <see cref="P:System.Diagnostics.Debug.IndentLevel"></see> by one.</summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Write(System.String,System.String)">
      <summary>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection.</summary>
      <param name="message">A message to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Write(System.Object,System.String)">
      <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection.</summary>
      <param name="value">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners"></see>.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Write(System.Object)">
      <summary>Writes the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection.</summary>
      <param name="value">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners"></see>.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Write(System.String)">
      <summary>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection.</summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object)">
      <summary>Writes the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection if a condition is true.</summary>
      <param name="condition">The conditional expression to evaluate. If the condition is true, the value is written to the trace listeners in the collection.</param>
      <param name="value">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners"></see>.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)">
      <summary>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection if a condition is true.</summary>
      <param name="condition">The conditional expression to evaluate. If the condition is true, the message is written to the trace listeners in the collection.</param>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object,System.String)">
      <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection if a condition is true.</summary>
      <param name="condition">The conditional expression to evaluate. If the condition is true, the category name and value are written to the trace listeners in the collection.</param>
      <param name="value">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners"></see>.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String,System.String)">
      <summary>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection if a condition is true.</summary>
      <param name="condition">The conditional expression to evaluate. If the condition is true, the category name and message are written to the trace listeners in the collection.</param>
      <param name="message">A message to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.Object)">
      <summary>Writes the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection.</summary>
      <param name="value">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners"></see>.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String)">
      <summary>Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection.</summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.Object,System.String)">
      <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection.</summary>
      <param name="value">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners"></see>.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])">
      <summary>Writes a formatted message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection.</summary>
      <param name="format">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the args array.</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String,System.String)">
      <summary>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection.</summary>
      <param name="message">A message to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object,System.String)">
      <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection if a condition is true.</summary>
      <param name="condition">The conditional expression to evaluate. If the condition is true, the category name and value are written to the trace listeners in the collection.</param>
      <param name="value">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners"></see>.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object)">
      <summary>Writes the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection if a condition is true.</summary>
      <param name="condition">The conditional expression to evaluate. If the condition is true, the value is written to the trace listeners in the collection.</param>
      <param name="value">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners"></see>.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)">
      <summary>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection if a condition is true.</summary>
      <param name="condition">The conditional expression to evaluate. If the condition is true, the message is written to the trace listeners in the collection.</param>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String,System.String)">
      <summary>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners"></see> collection if a condition is true.</summary>
      <param name="condition">true to cause a message to be written; otherwise, false.</param>
      <param name="message">A message to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="T:System.Diagnostics.DefaultTraceListener">
      <summary>Provides the default output methods and behavior for tracing.</summary>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DefaultTraceListener"></see> class with &quot;Default&quot; as its <see cref="P:System.Diagnostics.TraceListener.Name"></see> property value.</summary>
    </member>
    <member name="P:System.Diagnostics.DefaultTraceListener.AssertUiEnabled">
      <summary>Gets or sets a value indicating whether the application is running in user-interface mode.</summary>
      <returns>true if user-interface mode is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.Fail(System.String)">
      <summary>Emits or displays a message and a stack trace for an assertion that always fails.</summary>
      <param name="message">The message to emit or display.</param>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.Fail(System.String,System.String)">
      <summary>Emits or displays detailed messages and a stack trace for an assertion that always fails.</summary>
      <param name="message">The message to emit or display.</param>
      <param name="detailMessage">The detailed message to emit or display.</param>
    </member>
    <member name="P:System.Diagnostics.DefaultTraceListener.LogFileName">
      <summary>Gets or sets the name of a log file to write trace or debug messages to.</summary>
      <returns>The name of a log file to write trace or debug messages to.</returns>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.Write(System.String)">
      <summary>Writes the output to the OutputDebugString function and to the <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)"></see> method.</summary>
      <param name="message">The message to write to OutputDebugString and <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)"></see>.</param>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.WriteLine(System.String)">
      <summary>Writes the output to the OutputDebugString function and to the <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)"></see> method, followed by a carriage return and line feed (\r\n).</summary>
      <param name="message">The message to write to OutputDebugString and <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)"></see>.</param>
    </member>
    <member name="T:System.Diagnostics.DelimitedListTraceListener">
      <summary>Directs tracing or debugging output to a text writer, such as a stream writer, or to a stream, such as a file stream.</summary>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DelimitedListTraceListener"></see> class that writes to the specified output stream.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream"></see> to receive the output.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.TextWriter)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DelimitedListTraceListener"></see> class that writes to the specified text writer.</summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter"></see> to receive the output.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="writer">writer</paramref> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DelimitedListTraceListener"></see> class that writes to the specified file.</summary>
      <param name="fileName">The name of the file to receive the output.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="fileName">fileName</paramref> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.Stream,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DelimitedListTraceListener"></see> class that writes to the specified output stream and has the specified name.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream"></see> to receive the output.</param>
      <param name="name">The name of the new instance of the trace listener.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="stream">stream</paramref> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.TextWriter,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DelimitedListTraceListener"></see> class that writes to the specified text writer and has the specified name.</summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter"></see> to receive the output.</param>
      <param name="name">The name of the new instance of the trace listener.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="writer">writer</paramref> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DelimitedListTraceListener"></see> class that writes to the specified file and has the specified name.</summary>
      <param name="fileName">The name of the file to receive the output.</param>
      <param name="name">The name of the new instance of the trace listener.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="fileName">fileName</paramref> is null.</exception>
    </member>
    <member name="P:System.Diagnostics.DelimitedListTraceListener.Delimiter">
      <summary>Gets or sets the delimiter for the delimited list.</summary>
      <returns>The delimiter for the delimited list.</returns>
      <exception cref="T:System.ArgumentNullException"><see cref="P:System.Diagnostics.DelimitedListTraceListener.Delimiter"></see> is set to null.</exception>
      <exception cref="T:System.ArgumentException"><see cref="P:System.Diagnostics.DelimitedListTraceListener.Delimiter"></see> is set to an empty string (&quot;&quot;).</exception>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.GetSupportedAttributes">
      <summary>Returns the custom configuration file attribute supported by the delimited trace listener.</summary>
      <returns>A string array that contains the single value &quot;delimiter&quot;.</returns>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>Writes trace information, a data object, and event information to the output file or stream.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"></see> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"></see> values specifying the type of event that has caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="data">A data object to write to the output file or stream.</param>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>Writes trace information, an array of data objects, and event information to the output file or stream.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"></see> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"></see> values specifying the type of event that has caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="data">An array of data objects to write to the output file or stream.</param>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>Writes trace information, a message, and event information to the output file or stream.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"></see> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"></see> values specifying the type of event that has caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="message">The trace message to write to the output file or stream.</param>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>Writes trace information, a formatted array of objects, and event information to the output file or stream.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"></see> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"></see> values specifying the type of event that has caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="format">A format string that contains zero or more format items that correspond to objects in the args array.</param>
      <param name="args">An array containing zero or more objects to format.</param>
    </member>
    <member name="T:System.Net.Cache.HttpCacheAgeControl">
      <summary>Specifies the meaning of time values that control caching behavior for resources obtained using <see cref="T:System.Net.HttpWebRequest"></see> objects.</summary>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MaxAge">
      <summary>Content can be taken from the cache until it is older than the age specified with this value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MaxAgeAndMaxStale">
      <summary><see cref="P:System.Net.Cache.HttpRequestCachePolicy.MaxAge"></see> and <see cref="P:System.Net.Cache.HttpRequestCachePolicy.MaxStale"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MaxAgeAndMinFresh">
      <summary><see cref="P:System.Net.Cache.HttpRequestCachePolicy.MaxAge"></see> and <see cref="P:System.Net.Cache.HttpRequestCachePolicy.MinFresh"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MaxStale">
      <summary>Content can be taken from the cache after it has expired, until the time specified with this value elapses.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MinFresh">
      <summary>Content can be taken from the cache if the time remaining before expiration is greater than or equal to the time specified with this value.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.None">
      <summary>For internal use only. The Framework will throw an <see cref="T:System.ArgumentException"></see> if you try to use this member.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Cache.HttpRequestCacheLevel">
      <summary>Specifies caching behavior for resources obtained using the Hypertext Transfer protocol (HTTP).</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.BypassCache">
      <summary>Satisfies a request by using the server. No entries are taken from caches, added to caches, or removed from caches between the client and server. No entries are taken from caches, added to caches, or removed from caches between the client and server. This is the default cache behavior specified in the machine configuration file that ships with the .NET Framework.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.CacheIfAvailable">
      <summary>Satisfies a request for a resource from the cache if the resource is available; otherwise, sends a request for a resource to the server. If the requested item is available in any cache between the client and the server, the request might be satisfied by the intermediate cache.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.CacheOnly">
      <summary>Satisfies a request using the locally cached resource; does not send a request for an item that is not in the cache. When this cache policy level is specified, a <see cref="T:System.Net.WebException"></see> exception is thrown if the item is not in the client cache.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.CacheOrNextCacheOnly">
      <summary>Satisfies a request for a resource either from the local computer's cache or a remote cache on the local area network. If the request cannot be satisfied, a <see cref="T:System.Net.WebException"></see> exception is thrown. In the HTTP caching protocol, this is achieved using the only-if-cached cache control directive.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.Default">
      <summary>Satisfies a request for a resource either by using the cached copy of the resource or by sending a request for the resource to the server. The action taken is determined by the current cache policy and the age of the content in the cache. This is the cache level that should be used by most applications.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.NoCacheNoStore">
      <summary>Never satisfies a request by using resources from the cache and does not cache resources. If the resource is present in the local cache, it is removed. This policy level indicates to intermediate caches that they should remove the resource. In the HTTP caching protocol, this is achieved using the no-cache cache control directive.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.Refresh">
      <summary>Satisfies a request by using the server or a cache other than the local cache. Before the request can be satisfied by an intermediate cache, that cache must revalidate its cached entry with the server. In the HTTP caching protocol, this is achieved using the max-age = 0 cache control directive and the no-cache Pragma header.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.Reload">
      <summary>Satisfies a request by using the server. The response might be saved in the cache. In the HTTP caching protocol, this is achieved using the no-cache cache control directive and the no-cache Pragma header.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.Revalidate">
      <summary>Compares the copy of the resource in the cache with the copy on the server. If the copy on the server is newer, it is used to satisfy the request and replaces the copy in the cache. If the copy in the cache is the same as the server copy, the cached copy is used. In the HTTP caching protocol, this is achieved using a conditional request.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Cache.HttpRequestCachePolicy">
      <summary>Defines an application's caching requirements for resources obtained by using <see cref="T:System.Net.HttpWebRequest"></see> objects.</summary>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Cache.HttpRequestCachePolicy"></see> class.</summary>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Cache.HttpRequestCachePolicy"></see> class using the specified cache synchronization date.</summary>
      <param name="cacheSyncDate">A <see cref="T:System.DateTime"></see> object that specifies the time when resources stored in the cache must be revalidated.</param>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.Net.Cache.HttpRequestCacheLevel)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Cache.HttpRequestCachePolicy"></see> class using the specified cache policy.</summary>
      <param name="level">An <see cref="T:System.Net.Cache.HttpRequestCacheLevel"></see> value.</param>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.Net.Cache.HttpCacheAgeControl,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Cache.HttpRequestCachePolicy"></see> class using the specified age control and time values.</summary>
      <param name="cacheAgeControl">One of the following <see cref="T:System.Net.Cache.HttpCacheAgeControl"></see> enumeration values: <see cref="F:System.Net.Cache.HttpCacheAgeControl.MaxAge"></see>, <see cref="F:System.Net.Cache.HttpCacheAgeControl.MaxStale"></see>, or <see cref="F:System.Net.Cache.HttpCacheAgeControl.MinFresh"></see>.</param>
      <param name="ageOrFreshOrStale">A <see cref="T:System.TimeSpan"></see> value that specifies an amount of time.</param>
      <exception cref="T:System.ArgumentException">The value specified for the <paramref name="cacheAgeControl">cacheAgeControl</paramref> parameter cannot be used with this constructor.</exception>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.Net.Cache.HttpCacheAgeControl,System.TimeSpan,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Cache.HttpRequestCachePolicy"></see> class using the specified maximum age, age control value, and time value.</summary>
      <param name="cacheAgeControl">An <see cref="T:System.Net.Cache.HttpCacheAgeControl"></see> value.</param>
      <param name="maxAge">A <see cref="T:System.TimeSpan"></see> value that specifies the maximum age for resources.</param>
      <param name="freshOrStale">A <see cref="T:System.TimeSpan"></see> value that specifies an amount of time.</param>
      <exception cref="T:System.ArgumentException">The value specified for the <paramref name="cacheAgeControl">cacheAgeControl</paramref> parameter is not valid.</exception>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.Net.Cache.HttpCacheAgeControl,System.TimeSpan,System.TimeSpan,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Cache.HttpRequestCachePolicy"></see> class using the specified maximum age, age control value, time value, and cache synchronization date.</summary>
      <param name="cacheAgeControl">An <see cref="T:System.Net.Cache.HttpCacheAgeControl"></see> value.</param>
      <param name="maxAge">A <see cref="T:System.TimeSpan"></see> value that specifies the maximum age for resources.</param>
      <param name="freshOrStale">A <see cref="T:System.TimeSpan"></see> value that specifies an amount of time.</param>
      <param name="cacheSyncDate">A <see cref="T:System.DateTime"></see> object that specifies the time when resources stored in the cache must be revalidated.</param>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.CacheSyncDate">
      <summary>Gets the cache synchronization date for this instance.</summary>
      <returns>A <see cref="T:System.DateTime"></see> value set to the date specified when this instance was created. If no date was specified, this property's value is <see cref="F:System.DateTime.MinValue"></see>.</returns>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.Level">
      <summary>Gets the <see cref="T:System.Net.Cache.HttpRequestCacheLevel"></see> value that was specified when this instance was created.</summary>
      <returns>A <see cref="T:System.Net.Cache.HttpRequestCacheLevel"></see> value that specifies the cache behavior for resources that were obtained using <see cref="T:System.Net.HttpWebRequest"></see> objects.</returns>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.MaxAge">
      <summary>Gets the maximum age permitted for a resource returned from the cache.</summary>
      <returns>A <see cref="T:System.TimeSpan"></see> value that is set to the maximum age value specified when this instance was created. If no date was specified, this property's value is <see cref="F:System.DateTime.MinValue"></see>.</returns>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.MaxStale">
      <summary>Gets the maximum staleness value that is permitted for a resource returned from the cache.</summary>
      <returns>A <see cref="T:System.TimeSpan"></see> value that is set to the maximum staleness value specified when this instance was created. If no date was specified, this property's value is <see cref="F:System.DateTime.MinValue"></see>.</returns>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.MinFresh">
      <summary>Gets the minimum freshness that is permitted for a resource returned from the cache.</summary>
      <returns>A <see cref="T:System.TimeSpan"></see> value that specifies the minimum freshness specified when this instance was created. If no date was specified, this property's value is <see cref="F:System.DateTime.MinValue"></see>.</returns>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.ToString">
      <summary>Returns a string representation of this instance.</summary>
      <returns>A <see cref="T:System.String"></see> value that contains the property values for this instance.</returns>
    </member>
    <member name="T:System.Net.Cache.RequestCacheLevel">
      <summary>Specifies caching behavior for resources obtained using <see cref="T:System.Net.WebRequest"></see> and its derived classes.</summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.BypassCache">
      <summary>Satisfies a request by using the server. No entries are taken from caches, added to caches, or removed from caches between the client and server. This is the default cache behavior specified in the machine configuration file that ships with the .NET Framework.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.CacheIfAvailable">
      <summary>Satisfies a request for a resource from the cache, if the resource is available; otherwise, sends a request for a resource to the server. If the requested item is available in any cache between the client and the server, the request might be satisfied by the intermediate cache.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.CacheOnly">
      <summary>Satisfies a request using the locally cached resource; does not send a request for an item that is not in the cache. When this cache policy level is specified, a <see cref="T:System.Net.WebException"></see> exception is thrown if the item is not in the client cache.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.Default">
      <summary>Satisfies a request for a resource either by using the cached copy of the resource or by sending a request for the resource to the server. The action taken is determined by the current cache policy and the age of the content in the cache. This is the cache level that should be used by most applications.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.NoCacheNoStore">
      <summary>Never satisfies a request by using resources from the cache and does not cache resources. If the resource is present in the local cache, it is removed. This policy level indicates to intermediate caches that they should remove the resource. In the HTTP caching protocol, this is achieved using the no-cache cache control directive.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.Reload">
      <summary>Satisfies a request by using the server. The response might be saved in the cache. In the HTTP caching protocol, this is achieved using the no-cache cache control directive and the no-cache Pragma header.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.Revalidate">
      <summary>Satisfies a request by using the cached copy of the resource if the timestamp is the same as the timestamp of the resource on the server; otherwise, the resource is downloaded from the server, presented to the caller, and stored in the cache.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Cache.RequestCachePolicy">
      <summary>Defines an application's caching requirements for resources obtained by using <see cref="T:System.Net.WebRequest"></see> objects.</summary>
    </member>
    <member name="M:System.Net.Cache.RequestCachePolicy.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Cache.RequestCachePolicy"></see> class.</summary>
    </member>
    <member name="M:System.Net.Cache.RequestCachePolicy.#ctor(System.Net.Cache.RequestCacheLevel)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Cache.RequestCachePolicy"></see> class. using the specified cache policy.</summary>
      <param name="level">A <see cref="T:System.Net.Cache.RequestCacheLevel"></see> that specifies the cache behavior for resources obtained using <see cref="T:System.Net.WebRequest"></see> objects.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">level is not a valid <see cref="T:System.Net.Cache.RequestCacheLevel"></see>.value.</exception>
    </member>
    <member name="P:System.Net.Cache.RequestCachePolicy.Level">
      <summary>Gets the <see cref="T:System.Net.Cache.RequestCacheLevel"></see> value specified when this instance was constructed.</summary>
      <returns>A <see cref="T:System.Net.Cache.RequestCacheLevel"></see> value that specifies the cache behavior for resources obtained using <see cref="T:System.Net.WebRequest"></see> objects.</returns>
    </member>
    <member name="M:System.Net.Cache.RequestCachePolicy.ToString">
      <summary>Returns a string representation of this instance.</summary>
      <returns>A <see cref="T:System.String"></see> containing the <see cref="P:System.Net.Cache.RequestCachePolicy.Level"></see> for this instance.</returns>
    </member>
    <member name="T:System.Net.Cookie">
      <summary>Provides a set of properties and methods that are used to manage cookies. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Net.Cookie.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Cookie"></see> class.</summary>
    </member>
    <member name="M:System.Net.Cookie.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Cookie"></see> class with a specified <see cref="P:System.Net.Cookie.Name"></see> and <see cref="P:System.Net.Cookie.Value"></see>.</summary>
      <param name="name">The name of a <see cref="T:System.Net.Cookie"></see>. The following characters must not be used inside name: equal sign, semicolon, comma, newline (\n), return (\r), tab (\t), and space character. The dollar sign character (&quot;$&quot;) cannot be the first character.</param>
      <param name="value">The value of a <see cref="T:System.Net.Cookie"></see>. The following characters must not be used inside value: semicolon, comma.</param>
      <exception cref="T:System.Net.CookieException">The <paramref name="name">name</paramref> parameter is null.   -or-   The <paramref name="name">name</paramref> parameter is of zero length.   -or-   The <paramref name="name">name</paramref> parameter contains an invalid character.   -or-   The <paramref name="value">value</paramref> parameter is null .   -or -   The <paramref name="value">value</paramref> parameter contains a string not enclosed in quotes that contains an invalid character.</exception>
    </member>
    <member name="M:System.Net.Cookie.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Cookie"></see> class with a specified <see cref="P:System.Net.Cookie.Name"></see>, <see cref="P:System.Net.Cookie.Value"></see>, and <see cref="P:System.Net.Cookie.Path"></see>.</summary>
      <param name="name">The name of a <see cref="T:System.Net.Cookie"></see>. The following characters must not be used inside name: equal sign, semicolon, comma, newline (\n), return (\r), tab (\t), and space character. The dollar sign character (&quot;$&quot;) cannot be the first character.</param>
      <param name="value">The value of a <see cref="T:System.Net.Cookie"></see>. The following characters must not be used inside value: semicolon, comma.</param>
      <param name="path">The subset of URIs on the origin server to which this <see cref="T:System.Net.Cookie"></see> applies. The default value is &quot;/&quot;.</param>
      <exception cref="T:System.Net.CookieException">The <paramref name="name">name</paramref> parameter is null.   -or-   The <paramref name="name">name</paramref> parameter is of zero length.   -or-   The <paramref name="name">name</paramref> parameter contains an invalid character.   -or-   The <paramref name="value">value</paramref> parameter is null .   -or -   The <paramref name="value">value</paramref> parameter contains a string not enclosed in quotes that contains an invalid character.</exception>
    </member>
    <member name="M:System.Net.Cookie.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Cookie"></see> class with a specified <see cref="P:System.Net.Cookie.Name"></see>, <see cref="P:System.Net.Cookie.Value"></see>, <see cref="P:System.Net.Cookie.Path"></see>, and <see cref="P:System.Net.Cookie.Domain"></see>.</summary>
      <param name="name">The name of a <see cref="T:System.Net.Cookie"></see>. The following characters must not be used inside name: equal sign, semicolon, comma, newline (\n), return (\r), tab (\t), and space character. The dollar sign character (&quot;$&quot;) cannot be the first character.</param>
      <param name="value">The value of a <see cref="T:System.Net.Cookie"></see> object. The following characters must not be used inside value: semicolon, comma.</param>
      <param name="path">The subset of URIs on the origin server to which this <see cref="T:System.Net.Cookie"></see> applies. The default value is &quot;/&quot;.</param>
      <param name="domain">The optional internet domain for which this <see cref="T:System.Net.Cookie"></see> is valid. The default value is the host this <see cref="T:System.Net.Cookie"></see> has been received from.</param>
      <exception cref="T:System.Net.CookieException">The <paramref name="name">name</paramref> parameter is null.   -or-   The <paramref name="name">name</paramref> parameter is of zero length.   -or-   The <paramref name="name">name</paramref> parameter contains an invalid character.   -or-   The <paramref name="value">value</paramref> parameter is null .   -or -   The <paramref name="value">value</paramref> parameter contains a string not enclosed in quotes that contains an invalid character.</exception>
    </member>
    <member name="P:System.Net.Cookie.Comment">
      <summary>Gets or sets a comment that the server can add to a <see cref="T:System.Net.Cookie"></see>.</summary>
      <returns>An optional comment to document intended usage for this <see cref="T:System.Net.Cookie"></see>.</returns>
    </member>
    <member name="P:System.Net.Cookie.CommentUri">
      <summary>Gets or sets a URI comment that the server can provide with a <see cref="T:System.Net.Cookie"></see>.</summary>
      <returns>An optional comment that represents the intended usage of the URI reference for this <see cref="T:System.Net.Cookie"></see>. The value must conform to URI format.</returns>
    </member>
    <member name="P:System.Net.Cookie.Discard">
      <summary>Gets or sets the discard flag set by the server.</summary>
      <returns>true if the client is to discard the <see cref="T:System.Net.Cookie"></see> at the end of the current session; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Net.Cookie.Domain">
      <summary>Gets or sets the URI for which the <see cref="T:System.Net.Cookie"></see> is valid.</summary>
      <returns>The URI for which the <see cref="T:System.Net.Cookie"></see> is valid.</returns>
    </member>
    <member name="M:System.Net.Cookie.Equals(System.Object)">
      <summary>Overrides the <see cref="M:System.Object.Equals(System.Object)"></see> method.</summary>
      <param name="comparand">A reference to a <see cref="T:System.Net.Cookie"></see>.</param>
      <returns>Returns true if the <see cref="T:System.Net.Cookie"></see> is equal to <paramref name="comparand">comparand</paramref>. Two <see cref="T:System.Net.Cookie"></see> instances are equal if their <see cref="P:System.Net.Cookie.Name"></see>, <see cref="P:System.Net.Cookie.Value"></see>, <see cref="P:System.Net.Cookie.Path"></see>, <see cref="P:System.Net.Cookie.Domain"></see>, and <see cref="P:System.Net.Cookie.Version"></see> properties are equal. <see cref="P:System.Net.Cookie.Name"></see> and <see cref="P:System.Net.Cookie.Domain"></see> string comparisons are case-insensitive.</returns>
    </member>
    <member name="P:System.Net.Cookie.Expired">
      <summary>Gets or sets the current state of the <see cref="T:System.Net.Cookie"></see>.</summary>
      <returns>true if the <see cref="T:System.Net.Cookie"></see> has expired; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Net.Cookie.Expires">
      <summary>Gets or sets the expiration date and time for the <see cref="T:System.Net.Cookie"></see> as a <see cref="T:System.DateTime"></see>.</summary>
      <returns>The expiration date and time for the <see cref="T:System.Net.Cookie"></see> as a <see cref="T:System.DateTime"></see> instance.</returns>
    </member>
    <member name="M:System.Net.Cookie.GetHashCode">
      <summary>Overrides the <see cref="M:System.Object.GetHashCode"></see> method.</summary>
      <returns>The 32-bit signed integer hash code for this instance.</returns>
    </member>
    <member name="P:System.Net.Cookie.HttpOnly">
      <summary>Determines whether a page script or other active content can access this cookie.</summary>
      <returns>Boolean value that determines whether a page script or other active content can access this cookie.</returns>
    </member>
    <member name="P:System.Net.Cookie.Name">
      <summary>Gets or sets the name for the <see cref="T:System.Net.Cookie"></see>.</summary>
      <returns>The name for the <see cref="T:System.Net.Cookie"></see>.</returns>
      <exception cref="T:System.Net.CookieException">The value specified for a set operation is null or the empty string   - or -   The value specified for a set operation contained an illegal character. The following characters must not be used inside the <see cref="P:System.Net.Cookie.Name"></see> property: equal sign, semicolon, comma, newline (\n), return (\r), tab (\t), and space character. The dollar sign character (&quot;$&quot;) cannot be the first character.</exception>
    </member>
    <member name="P:System.Net.Cookie.Path">
      <summary>Gets or sets the URIs to which the <see cref="T:System.Net.Cookie"></see> applies.</summary>
      <returns>The URIs to which the <see cref="T:System.Net.Cookie"></see> applies.</returns>
    </member>
    <member name="P:System.Net.Cookie.Port">
      <summary>Gets or sets a list of TCP ports that the <see cref="T:System.Net.Cookie"></see> applies to.</summary>
      <returns>The list of TCP ports that the <see cref="T:System.Net.Cookie"></see> applies to.</returns>
      <exception cref="T:System.Net.CookieException">The value specified for a set operation could not be parsed or is not enclosed in double quotes.</exception>
    </member>
    <member name="P:System.Net.Cookie.Secure">
      <summary>Gets or sets the security level of a <see cref="T:System.Net.Cookie"></see>.</summary>
      <returns>true if the client is only to return the cookie in subsequent requests if those requests use Secure Hypertext Transfer Protocol (HTTPS); otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Net.Cookie.TimeStamp">
      <summary>Gets the time when the cookie was issued as a <see cref="T:System.DateTime"></see>.</summary>
      <returns>The time when the cookie was issued as a <see cref="T:System.DateTime"></see>.</returns>
    </member>
    <member name="M:System.Net.Cookie.ToString">
      <summary>Overrides the <see cref="M:System.Object.ToString"></see> method.</summary>
      <returns>Returns a string representation of this <see cref="T:System.Net.Cookie"></see> object that is suitable for including in a HTTP Cookie: request header.</returns>
    </member>
    <member name="P:System.Net.Cookie.Value">
      <summary>Gets or sets the <see cref="P:System.Net.Cookie.Value"></see> for the <see cref="T:System.Net.Cookie"></see>.</summary>
      <returns>The <see cref="P:System.Net.Cookie.Value"></see> for the <see cref="T:System.Net.Cookie"></see>.</returns>
    </member>
    <member name="P:System.Net.Cookie.Version">
      <summary>Gets or sets the version of HTTP state maintenance to which the cookie conforms.</summary>
      <returns>The version of HTTP state maintenance to which the cookie conforms.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a version is not allowed.</exception>
    </member>
    <member name="T:System.Net.CookieCollection">
      <summary>Provides a collection container for instances of the <see cref="T:System.Net.Cookie"></see> class.</summary>
    </member>
    <member name="M:System.Net.CookieCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.CookieCollection"></see> class.</summary>
    </member>
    <member name="M:System.Net.CookieCollection.Add(System.Net.Cookie)">
      <summary>Adds a <see cref="T:System.Net.Cookie"></see> to a <see cref="T:System.Net.CookieCollection"></see>.</summary>
      <param name="cookie">The <see cref="T:System.Net.Cookie"></see> to be added to a <see cref="T:System.Net.CookieCollection"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="cookie">cookie</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.CookieCollection.Add(System.Net.CookieCollection)">
      <summary>Adds the contents of a <see cref="T:System.Net.CookieCollection"></see> to the current instance.</summary>
      <param name="cookies">The <see cref="T:System.Net.CookieCollection"></see> to be added.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="cookies">cookies</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.CookieCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of a <see cref="T:System.Net.CookieCollection"></see> to an instance of the <see cref="T:System.Array"></see> class, starting at a particular index.</summary>
      <param name="array">The target <see cref="T:System.Array"></see> to which the <see cref="T:System.Net.CookieCollection"></see> will be copied.</param>
      <param name="index">The zero-based index in the target <see cref="T:System.Array"></see> where copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-   The number of elements in this <see cref="T:System.Net.CookieCollection"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The elements in this <see cref="T:System.Net.CookieCollection"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="M:System.Net.CookieCollection.CopyTo(System.Net.Cookie[],System.Int32)">
      <summary>Copies the elements of this <see cref="T:System.Net.CookieCollection"></see> to a <see cref="T:System.Net.Cookie"></see> array starting at the specified index of the target array.</summary>
      <param name="array">The target <see cref="T:System.Net.Cookie"></see> array to which the <see cref="T:System.Net.CookieCollection"></see> will be copied.</param>
      <param name="index">The zero-based index in the target <see cref="T:System.Array"></see> where copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-   The number of elements in this <see cref="T:System.Net.CookieCollection"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The elements in this <see cref="T:System.Net.CookieCollection"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Net.CookieCollection.Count">
      <summary>Gets the number of cookies contained in a <see cref="T:System.Net.CookieCollection"></see>.</summary>
      <returns>The number of cookies contained in a <see cref="T:System.Net.CookieCollection"></see>.</returns>
    </member>
    <member name="M:System.Net.CookieCollection.GetEnumerator">
      <summary>Gets an enumerator that can iterate through a <see cref="T:System.Net.CookieCollection"></see>.</summary>
      <returns>An instance of an implementation of an <see cref="T:System.Collections.IEnumerator"></see> interface that can iterate through a <see cref="T:System.Net.CookieCollection"></see>.</returns>
    </member>
    <member name="P:System.Net.CookieCollection.IsReadOnly">
      <summary>Gets a value that indicates whether a <see cref="T:System.Net.CookieCollection"></see> is read-only.</summary>
      <returns>true if this is a read-only <see cref="T:System.Net.CookieCollection"></see>; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Net.CookieCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to a <see cref="T:System.Net.CookieCollection"></see> is thread safe.</summary>
      <returns>true if access to the <see cref="T:System.Net.CookieCollection"></see> is thread safe; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Net.CookieCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Net.Cookie"></see> with a specific index from a <see cref="T:System.Net.CookieCollection"></see>.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.Net.Cookie"></see> to be found.</param>
      <returns>A <see cref="T:System.Net.Cookie"></see> with a specific index from a <see cref="T:System.Net.CookieCollection"></see>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than 0 or <paramref name="index">index</paramref> is greater than or equal to <see cref="P:System.Net.CookieCollection.Count"></see>.</exception>
    </member>
    <member name="P:System.Net.CookieCollection.Item(System.String)">
      <summary>Gets the <see cref="T:System.Net.Cookie"></see> with a specific name from a <see cref="T:System.Net.CookieCollection"></see>.</summary>
      <param name="name">The name of the <see cref="T:System.Net.Cookie"></see> to be found.</param>
      <returns>The <see cref="T:System.Net.Cookie"></see> with a specific name from a <see cref="T:System.Net.CookieCollection"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="name">name</paramref> is null.</exception>
    </member>
    <member name="P:System.Net.CookieCollection.SyncRoot">
      <summary>Gets an object to synchronize access to the <see cref="T:System.Net.CookieCollection"></see>.</summary>
      <returns>An object to synchronize access to the <see cref="T:System.Net.CookieCollection"></see>.</returns>
    </member>
    <member name="T:System.Net.CookieContainer">
      <summary>Provides a container for a collection of <see cref="T:System.Net.CookieCollection"></see> objects.</summary>
    </member>
    <member name="M:System.Net.CookieContainer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.CookieContainer"></see> class.</summary>
    </member>
    <member name="M:System.Net.CookieContainer.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.CookieContainer"></see> class with a specified value for the number of <see cref="T:System.Net.Cookie"></see> instances that the container can hold.</summary>
      <param name="capacity">The number of <see cref="T:System.Net.Cookie"></see> instances that the <see cref="T:System.Net.CookieContainer"></see> can hold.</param>
      <exception cref="T:System.ArgumentException"><paramref name="capacity">capacity</paramref> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.Net.CookieContainer.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.CookieContainer"></see> class with specific properties.</summary>
      <param name="capacity">The number of <see cref="T:System.Net.Cookie"></see> instances that the <see cref="T:System.Net.CookieContainer"></see> can hold.</param>
      <param name="perDomainCapacity">The number of <see cref="T:System.Net.Cookie"></see> instances per domain.</param>
      <param name="maxCookieSize">The maximum size in bytes for any single <see cref="T:System.Net.Cookie"></see> in a <see cref="T:System.Net.CookieContainer"></see>.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="perDomainCapacity">perDomainCapacity</paramref> is not equal to <see cref="F:System.Int32.MaxValue"></see>.   and  <paramref name="(perDomainCapacity">(perDomainCapacity</paramref> is less than or equal to zero or <paramref name="perDomainCapacity">perDomainCapacity</paramref> is greater than <paramref name="capacity)">capacity)</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="maxCookieSize">maxCookieSize</paramref> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Net.Cookie)">
      <summary>Adds a <see cref="T:System.Net.Cookie"></see> to a <see cref="T:System.Net.CookieContainer"></see>. This method uses the domain from the <see cref="T:System.Net.Cookie"></see> to determine which domain collection to associate the <see cref="T:System.Net.Cookie"></see> with.</summary>
      <param name="cookie">The <see cref="T:System.Net.Cookie"></see> to be added to the <see cref="T:System.Net.CookieContainer"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="cookie">cookie</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The domain for <paramref name="cookie">cookie</paramref> is null or the empty string (&quot;&quot;).</exception>
      <exception cref="T:System.Net.CookieException"><paramref name="cookie">cookie</paramref> is larger than <paramref name="maxCookieSize">maxCookieSize</paramref>.   -or-   the domain for <paramref name="cookie">cookie</paramref> is not a valid URI.</exception>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Net.CookieCollection)">
      <summary>Adds the contents of a <see cref="T:System.Net.CookieCollection"></see> to the <see cref="T:System.Net.CookieContainer"></see>.</summary>
      <param name="cookies">The <see cref="T:System.Net.CookieCollection"></see> to be added to the <see cref="T:System.Net.CookieContainer"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="cookies">cookies</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Uri,System.Net.Cookie)">
      <summary>Adds a <see cref="T:System.Net.Cookie"></see> to the <see cref="T:System.Net.CookieContainer"></see> for a particular URI.</summary>
      <param name="uri">The URI of the <see cref="T:System.Net.Cookie"></see> to be added to the <see cref="T:System.Net.CookieContainer"></see>.</param>
      <param name="cookie">The <see cref="T:System.Net.Cookie"></see> to be added to the <see cref="T:System.Net.CookieContainer"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="uri">uri</paramref> is null or <paramref name="cookie">cookie</paramref> is null.</exception>
      <exception cref="T:System.Net.CookieException"><paramref name="cookie">cookie</paramref> is larger than <paramref name="maxCookieSize">maxCookieSize</paramref>.   -or-   The domain for <paramref name="cookie">cookie</paramref> is not a valid URI.</exception>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Uri,System.Net.CookieCollection)">
      <summary>Adds the contents of a <see cref="T:System.Net.CookieCollection"></see> to the <see cref="T:System.Net.CookieContainer"></see> for a particular URI.</summary>
      <param name="uri">The URI of the <see cref="T:System.Net.CookieCollection"></see> to be added to the <see cref="T:System.Net.CookieContainer"></see>.</param>
      <param name="cookies">The <see cref="T:System.Net.CookieCollection"></see> to be added to the <see cref="T:System.Net.CookieContainer"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="cookies">cookies</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The domain for one of the cookies in <paramref name="cookies">cookies</paramref> is null.</exception>
      <exception cref="T:System.Net.CookieException">One of the cookies in <paramref name="cookies">cookies</paramref> contains an invalid domain.</exception>
    </member>
    <member name="P:System.Net.CookieContainer.Capacity">
      <summary>Gets and sets the number of <see cref="T:System.Net.Cookie"></see> instances that a <see cref="T:System.Net.CookieContainer"></see> can hold.</summary>
      <returns>The number of <see cref="T:System.Net.Cookie"></see> instances that a <see cref="T:System.Net.CookieContainer"></see> can hold. This is a hard limit and cannot be exceeded by adding a <see cref="T:System.Net.Cookie"></see>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Capacity">Capacity</paramref> is less than or equal to zero or (value is less than <see cref="P:System.Net.CookieContainer.PerDomainCapacity"></see> and <see cref="P:System.Net.CookieContainer.PerDomainCapacity"></see> is not equal to <see cref="F:System.Int32.MaxValue"></see>).</exception>
    </member>
    <member name="P:System.Net.CookieContainer.Count">
      <summary>Gets the number of <see cref="T:System.Net.Cookie"></see> instances that a <see cref="T:System.Net.CookieContainer"></see> currently holds.</summary>
      <returns>The number of <see cref="T:System.Net.Cookie"></see> instances that a <see cref="T:System.Net.CookieContainer"></see> currently holds. This is the total of <see cref="T:System.Net.Cookie"></see> instances in all domains.</returns>
    </member>
    <member name="F:System.Net.CookieContainer.DefaultCookieLengthLimit">
      <summary>Represents the default maximum size, in bytes, of the <see cref="T:System.Net.Cookie"></see> instances that the <see cref="T:System.Net.CookieContainer"></see> can hold. This field is constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.CookieContainer.DefaultCookieLimit">
      <summary>Represents the default maximum number of <see cref="T:System.Net.Cookie"></see> instances that the <see cref="T:System.Net.CookieContainer"></see> can hold. This field is constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.CookieContainer.DefaultPerDomainCookieLimit">
      <summary>Represents the default maximum number of <see cref="T:System.Net.Cookie"></see> instances that the <see cref="T:System.Net.CookieContainer"></see> can reference per domain. This field is constant.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Net.CookieContainer.GetCookieHeader(System.Uri)">
      <summary>Gets the HTTP cookie header that contains the HTTP cookies that represent the <see cref="T:System.Net.Cookie"></see> instances that are associated with a specific URI.</summary>
      <param name="uri">The URI of the <see cref="T:System.Net.Cookie"></see> instances desired.</param>
      <returns>An HTTP cookie header, with strings representing <see cref="T:System.Net.Cookie"></see> instances delimited by semicolons.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="uri">uri</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.CookieContainer.GetCookies(System.Uri)">
      <summary>Gets a <see cref="T:System.Net.CookieCollection"></see> that contains the <see cref="T:System.Net.Cookie"></see> instances that are associated with a specific URI.</summary>
      <param name="uri">The URI of the <see cref="T:System.Net.Cookie"></see> instances desired.</param>
      <returns>A <see cref="T:System.Net.CookieCollection"></see> that contains the <see cref="T:System.Net.Cookie"></see> instances that are associated with a specific URI.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="uri">uri</paramref> is null.</exception>
    </member>
    <member name="P:System.Net.CookieContainer.MaxCookieSize">
      <summary>Represents the maximum allowed length of a <see cref="T:System.Net.Cookie"></see>.</summary>
      <returns>The maximum allowed length, in bytes, of a <see cref="T:System.Net.Cookie"></see>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="MaxCookieSize">MaxCookieSize</paramref> is less than or equal to zero.</exception>
    </member>
    <member name="P:System.Net.CookieContainer.PerDomainCapacity">
      <summary>Gets and sets the number of <see cref="T:System.Net.Cookie"></see> instances that a <see cref="T:System.Net.CookieContainer"></see> can hold per domain.</summary>
      <returns>The number of <see cref="T:System.Net.Cookie"></see> instances that are allowed per domain.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="PerDomainCapacity">PerDomainCapacity</paramref> is less than or equal to zero.   -or-  <paramref name="(PerDomainCapacity">(PerDomainCapacity</paramref> is greater than the maximum allowable number of cookies instances, 300, and is not equal to <see cref="F:System.Int32.MaxValue"></see>).</exception>
    </member>
    <member name="M:System.Net.CookieContainer.SetCookies(System.Uri,System.String)">
      <summary>Adds <see cref="T:System.Net.Cookie"></see> instances for one or more cookies from an HTTP cookie header to the <see cref="T:System.Net.CookieContainer"></see> for a specific URI.</summary>
      <param name="uri">The URI of the <see cref="T:System.Net.CookieCollection"></see>.</param>
      <param name="cookieHeader">The contents of an HTTP set-cookie header as returned by a HTTP server, with <see cref="T:System.Net.Cookie"></see> instances delimited by commas.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="cookieHeader">cookieHeader</paramref> is null.</exception>
      <exception cref="T:System.Net.CookieException">One of the cookies is invalid.   -or-   An error occurred while adding one of the cookies to the container.</exception>
    </member>
    <member name="T:System.Net.CookieException">
      <summary>The exception that is thrown when an error is made adding a <see cref="T:System.Net.Cookie"></see> to a <see cref="T:System.Net.CookieContainer"></see>.</summary>
    </member>
    <member name="M:System.Net.CookieException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.CookieException"></see> class.</summary>
    </member>
    <member name="M:System.Net.CookieException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.CookieException"></see> class with specific values of <paramref name="serializationInfo">serializationInfo</paramref> and <paramref name="streamingContext">streamingContext</paramref>.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to be used.</param>
      <param name="streamingContext">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> to be used.</param>
    </member>
    <member name="M:System.Net.CookieException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance with the data needed to serialize the <see cref="T:System.Net.CookieException"></see>.</summary>
      <param name="serializationInfo">The object that holds the serialized object data. The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
      <param name="streamingContext">The contextual information about the source or destination. A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that specifies the destination for this serialization.</param>
    </member>
    <member name="M:System.Net.CookieException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance with the data needed to serialize the <see cref="T:System.Net.CookieException"></see>.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to be used.</param>
      <param name="streamingContext">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> to be used.</param>
    </member>
    <member name="T:System.Net.CredentialCache">
      <summary>Provides storage for multiple credentials.</summary>
    </member>
    <member name="M:System.Net.CredentialCache.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Net.CredentialCache"></see> class.</summary>
    </member>
    <member name="M:System.Net.CredentialCache.Add(System.Uri,System.String,System.Net.NetworkCredential)">
      <summary>Adds a <see cref="T:System.Net.NetworkCredential"></see> instance to the credential cache for use with protocols other than SMTP and associates it with a Uniform Resource Identifier (URI) prefix and authentication protocol.</summary>
      <param name="uriPrefix">A <see cref="T:System.Uri"></see> that specifies the URI prefix of the resources that the credential grants access to.</param>
      <param name="authType">The authentication scheme used by the resource named in uriPrefix.</param>
      <param name="cred">The <see cref="T:System.Net.NetworkCredential"></see> to add to the credential cache.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="uriPrefix">uriPrefix</paramref> is null.   -or-  <paramref name="authType">authType</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The same credentials are added more than once.</exception>
    </member>
    <member name="M:System.Net.CredentialCache.Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)">
      <summary>Adds a <see cref="T:System.Net.NetworkCredential"></see> instance for use with SMTP to the credential cache and associates it with a host computer, port, and authentication protocol. Credentials added using this method are valid for SMTP only. This method does not work for HTTP or FTP requests.</summary>
      <param name="host">A <see cref="T:System.String"></see> that identifies the host computer.</param>
      <param name="port">A <see cref="T:System.Int32"></see> that specifies the port to connect to on host.</param>
      <param name="authenticationType">A <see cref="T:System.String"></see> that identifies the authentication scheme used when connecting to host using cred.</param>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> to add to the credential cache.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="host">host</paramref> is null.   -or-  <paramref name="authType">authType</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="authType">authType</paramref> not an accepted value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port">port</paramref> is less than zero.</exception>
    </member>
    <member name="P:System.Net.CredentialCache.DefaultCredentials">
      <summary>Gets the system credentials of the application.</summary>
      <returns>An <see cref="T:System.Net.ICredentials"></see> that represents the system credentials of the application.</returns>
    </member>
    <member name="P:System.Net.CredentialCache.DefaultNetworkCredentials">
      <summary>Gets the network credentials of the current security context.</summary>
      <returns>An <see cref="T:System.Net.NetworkCredential"></see> that represents the network credentials of the current user or application.</returns>
    </member>
    <member name="M:System.Net.CredentialCache.GetCredential(System.Uri,System.String)">
      <summary>Returns the <see cref="T:System.Net.NetworkCredential"></see> instance associated with the specified Uniform Resource Identifier (URI) and authentication type.</summary>
      <param name="uriPrefix">A <see cref="T:System.Uri"></see> that specifies the URI prefix of the resources that the credential grants access to.</param>
      <param name="authType">The authentication scheme used by the resource named in uriPrefix.</param>
      <returns>A <see cref="T:System.Net.NetworkCredential"></see> or, if there is no matching credential in the cache, null.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="uriPrefix">uriPrefix</paramref> or <paramref name="authType">authType</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.CredentialCache.GetCredential(System.String,System.Int32,System.String)">
      <summary>Returns the <see cref="T:System.Net.NetworkCredential"></see> instance associated with the specified host, port, and authentication protocol.</summary>
      <param name="host">A <see cref="T:System.String"></see> that identifies the host computer.</param>
      <param name="port">A <see cref="T:System.Int32"></see> that specifies the port to connect to on host.</param>
      <param name="authenticationType">A <see cref="T:System.String"></see> that identifies the authentication scheme used when connecting to host.</param>
      <returns>A <see cref="T:System.Net.NetworkCredential"></see> or, if there is no matching credential in the cache, null.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="host">host</paramref> is null.   -or-  <paramref name="authType">authType</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="authType">authType</paramref> not an accepted value.   -or-  <paramref name="host">host</paramref> is equal to the empty string (&quot;&quot;).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port">port</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Net.CredentialCache.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the <see cref="T:System.Net.CredentialCache"></see> instance.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> for the <see cref="T:System.Net.CredentialCache"></see>.</returns>
    </member>
    <member name="M:System.Net.CredentialCache.Remove(System.Uri,System.String)">
      <summary>Deletes a <see cref="T:System.Net.NetworkCredential"></see> instance from the cache if it is associated with the specified Uniform Resource Identifier (URI) prefix and authentication protocol.</summary>
      <param name="uriPrefix">A <see cref="T:System.Uri"></see> that specifies the URI prefix of the resources that the credential is used for.</param>
      <param name="authType">The authentication scheme used by the host named in uriPrefix.</param>
    </member>
    <member name="M:System.Net.CredentialCache.Remove(System.String,System.Int32,System.String)">
      <summary>Deletes a <see cref="T:System.Net.NetworkCredential"></see> instance from the cache if it is associated with the specified host, port, and authentication protocol.</summary>
      <param name="host">A <see cref="T:System.String"></see> that identifies the host computer.</param>
      <param name="port">A <see cref="T:System.Int32"></see> that specifies the port to connect to on host.</param>
      <param name="authenticationType">A <see cref="T:System.String"></see> that identifies the authentication scheme used when connecting to host.</param>
    </member>
    <member name="T:System.Net.DecompressionMethods">
      <summary>Represents the file compression and decompression encoding format to be used to compress the data received in response to an <see cref="T:System.Net.HttpWebRequest"></see>.</summary>
    </member>
    <member name="F:System.Net.DecompressionMethods.Deflate">
      <summary>Use the deflate compression-decompression algorithm.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.DecompressionMethods.GZip">
      <summary>Use the gZip compression-decompression algorithm.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.DecompressionMethods.None">
      <summary>Do not use compression.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Dns">
      <summary>Provides simple domain name resolution functionality.</summary>
    </member>
    <member name="M:System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)">
      <summary>Asynchronously returns the Internet Protocol (IP) addresses for the specified host.</summary>
      <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the operation. This object is passed to the requestCallback delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> instance that references the asynchronous request.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is greater than 255 characters.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="hostNameOrAddress">hostNameOrAddress</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is an invalid IP address.</exception>
    </member>
    <member name="M:System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request for <see cref="T:System.Net.IPHostEntry"></see> information about the specified DNS host name.</summary>
      <param name="hostName">The DNS name of the host.</param>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="stateObject">A user-defined object that contains information about the operation. This object is passed to the requestCallback delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> instance that references the asynchronous request.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostName">hostName</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error was encountered executing the DNS query.</exception>
    </member>
    <member name="M:System.Net.Dns.BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)">
      <summary>Asynchronously resolves an IP address to an <see cref="T:System.Net.IPHostEntry"></see> instance.</summary>
      <param name="address">The IP address to resolve.</param>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="stateObject">A user-defined object that contains information about the operation. This object is passed to the requestCallback delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> instance that references the asynchronous request.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="address">address</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="address">address</paramref> is an invalid IP address.</exception>
    </member>
    <member name="M:System.Net.Dns.BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)">
      <summary>Asynchronously resolves a host name or IP address to an <see cref="T:System.Net.IPHostEntry"></see> instance.</summary>
      <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="stateObject">A user-defined object that contains information about the operation. This object is passed to the requestCallback delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> instance that references the asynchronous request.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is greater than 255 characters.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="hostNameOrAddress">hostNameOrAddress</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is an invalid IP address.</exception>
    </member>
    <member name="M:System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request to resolve a DNS host name or IP address to an <see cref="T:System.Net.IPAddress"></see> instance.</summary>
      <param name="hostName">The DNS name of the host.</param>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the operation is complete.</param>
      <param name="stateObject">A user-defined object that contains information about the operation. This object is passed to the requestCallback delegate when the operation is complete.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> instance that references the asynchronous request.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostName">hostName</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">The caller does not have permission to access DNS information.</exception>
    </member>
    <member name="M:System.Net.Dns.EndGetHostAddresses(System.IAsyncResult)">
      <summary>Ends an asynchronous request for DNS information.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> instance returned by a call to the <see cref="M:System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)"></see> method.</param>
      <returns>An array of type <see cref="T:System.Net.IPAddress"></see> that holds the IP addresses for the host specified by the <paramref name="hostNameOrAddress">hostNameOrAddress</paramref> parameter of <see cref="M:System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)"></see>.</returns>
    </member>
    <member name="M:System.Net.Dns.EndGetHostByName(System.IAsyncResult)">
      <summary>Ends an asynchronous request for DNS information.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> instance that is returned by a call to the <see cref="M:System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)"></see> method.</param>
      <returns>An <see cref="T:System.Net.IPHostEntry"></see> object that contains DNS information about a host.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Dns.EndGetHostEntry(System.IAsyncResult)">
      <summary>Ends an asynchronous request for DNS information.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> instance returned by a call to an <see cref="Overload:System.Net.Dns.BeginGetHostEntry"></see> method.</param>
      <returns>An <see cref="T:System.Net.IPHostEntry"></see> instance that contains address information about the host.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Dns.EndResolve(System.IAsyncResult)">
      <summary>Ends an asynchronous request for DNS information.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> instance that is returned by a call to the <see cref="M:System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)"></see> method.</param>
      <returns>An <see cref="T:System.Net.IPHostEntry"></see> object that contains DNS information about a host.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostAddresses(System.String)">
      <summary>Returns the Internet Protocol (IP) addresses for the specified host.</summary>
      <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
      <returns>An array of type <see cref="T:System.Net.IPAddress"></see> that holds the IP addresses for the host that is specified by the <paramref name="hostNameOrAddress">hostNameOrAddress</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is greater than 255 characters.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="hostNameOrAddress">hostNameOrAddress</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is an invalid IP address.</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostAddressesAsync(System.String)">
      <summary>Returns the Internet Protocol (IP) addresses for the specified host as an asynchronous operation.</summary>
      <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns an array of type <see cref="T:System.Net.IPAddress"></see> that holds the IP addresses for the host that is specified by the <paramref name="hostNameOrAddress">hostNameOrAddress</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is greater than 255 characters.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="hostNameOrAddress">hostNameOrAddress</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is an invalid IP address.</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostByAddress(System.Net.IPAddress)">
      <summary>Creates an <see cref="T:System.Net.IPHostEntry"></see> instance from the specified <see cref="T:System.Net.IPAddress"></see>.</summary>
      <param name="address">An <see cref="T:System.Net.IPAddress"></see>.</param>
      <returns>An <see cref="T:System.Net.IPHostEntry"></see>.   An <see cref="T:System.Net.IPHostEntry"></see> instance.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="address">address</paramref>.</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostByAddress(System.String)">
      <summary>Creates an <see cref="T:System.Net.IPHostEntry"></see> instance from an IP address.</summary>
      <param name="address">An IP address.</param>
      <returns>An <see cref="T:System.Net.IPHostEntry"></see> instance.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="address">address</paramref>.</exception>
      <exception cref="T:System.FormatException"><paramref name="address">address</paramref> is not a valid IP address.</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostByName(System.String)">
      <summary>Gets the DNS information for the specified DNS host name.</summary>
      <param name="hostName">The DNS name of the host.</param>
      <returns>An <see cref="T:System.Net.IPHostEntry"></see> object that contains host information for the address specified in <paramref name="hostName">hostName</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostName">hostName</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="hostName">hostName</paramref> is greater than 255 characters.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="hostName">hostName</paramref>.</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostEntry(System.Net.IPAddress)">
      <summary>Resolves an IP address to an <see cref="T:System.Net.IPHostEntry"></see> instance.</summary>
      <param name="address">An IP address.</param>
      <returns>An <see cref="T:System.Net.IPHostEntry"></see> instance that contains address information about the host specified in <paramref name="address">address</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="address">address</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="address">address</paramref> is an invalid IP address.</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostEntry(System.String)">
      <summary>Resolves a host name or IP address to an <see cref="T:System.Net.IPHostEntry"></see> instance.</summary>
      <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
      <returns>An <see cref="T:System.Net.IPHostEntry"></see> instance that contains address information about the host specified in <paramref name="hostNameOrAddress">hostNameOrAddress</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="hostNameOrAddress">hostNameOrAddress</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="hostNameOrAddress">hostNameOrAddress</paramref> parameter is greater than 255 characters.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error was encountered when resolving the <paramref name="hostNameOrAddress">hostNameOrAddress</paramref> parameter.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="hostNameOrAddress">hostNameOrAddress</paramref> parameter is an invalid IP address.</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)">
      <summary>Resolves an IP address to an <see cref="T:System.Net.IPHostEntry"></see> instance as an asynchronous operation.</summary>
      <param name="address">An IP address.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns an <see cref="T:System.Net.IPHostEntry"></see> instance that contains address information about the host specified in <paramref name="address">address</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="address">address</paramref>.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="address">address</paramref> is an invalid IP address.</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostEntryAsync(System.String)">
      <summary>Resolves a host name or IP address to an <see cref="T:System.Net.IPHostEntry"></see> instance as an asynchronous operation.</summary>
      <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"></see> property on the task object returns an <see cref="T:System.Net.IPHostEntry"></see> instance that contains address information about the host specified in <paramref name="hostNameOrAddress">hostNameOrAddress</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="hostNameOrAddress">hostNameOrAddress</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="hostNameOrAddress">hostNameOrAddress</paramref> parameter is greater than 255 characters.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error was encountered when resolving the <paramref name="hostNameOrAddress">hostNameOrAddress</paramref> parameter.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="hostNameOrAddress">hostNameOrAddress</paramref> parameter is an invalid IP address.</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostName">
      <summary>Gets the host name of the local computer.</summary>
      <returns>A string that contains the DNS host name of the local computer.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving the local host name.</exception>
    </member>
    <member name="M:System.Net.Dns.Resolve(System.String)">
      <summary>Resolves a DNS host name or IP address to an <see cref="T:System.Net.IPHostEntry"></see> instance.</summary>
      <param name="hostName">A DNS-style host name or IP address.</param>
      <returns>An <see cref="T:System.Net.IPHostEntry"></see> instance that contains address information about the host specified in <paramref name="hostName">hostName</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostName">hostName</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="hostName">hostName</paramref> is greater than 255 characters.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="hostName">hostName</paramref>.</exception>
    </member>
    <member name="T:System.Net.DnsEndPoint">
      <summary>Represents a network endpoint as a host name or a string representation of an IP address and a port number.</summary>
    </member>
    <member name="M:System.Net.DnsEndPoint.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.DnsEndPoint"></see> class with the host name or string representation of an IP address and a port number.</summary>
      <param name="host">The host name or a string representation of the IP address.</param>
      <param name="port">The port number associated with the address, or 0 to specify any available port. port is in host order.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="host">host</paramref> parameter contains an empty string.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="host">host</paramref> parameter is a null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port">port</paramref> is less than <see cref="F:System.Net.IPEndPoint.MinPort"></see>.   -or-  <paramref name="port">port</paramref> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort"></see>.</exception>
    </member>
    <member name="M:System.Net.DnsEndPoint.#ctor(System.String,System.Int32,System.Net.Sockets.AddressFamily)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.DnsEndPoint"></see> class with the host name or string representation of an IP address, a port number, and an address family.</summary>
      <param name="host">The host name or a string representation of the IP address.</param>
      <param name="port">The port number associated with the address, or 0 to specify any available port. port is in host order.</param>
      <param name="addressFamily">One of the <see cref="T:System.Net.Sockets.AddressFamily"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="host">host</paramref> parameter contains an empty string.   -or-  <paramref name="addressFamily">addressFamily</paramref> is <see cref="F:System.Net.Sockets.AddressFamily.Unknown"></see>.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="host">host</paramref> parameter is a null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port">port</paramref> is less than <see cref="F:System.Net.IPEndPoint.MinPort"></see>.   -or-  <paramref name="port">port</paramref> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort"></see>.</exception>
    </member>
    <member name="P:System.Net.DnsEndPoint.AddressFamily">
      <summary>Gets the Internet Protocol (IP) address family.</summary>
      <returns>One of the <see cref="T:System.Net.Sockets.AddressFamily"></see> values.</returns>
    </member>
    <member name="M:System.Net.DnsEndPoint.Equals(System.Object)">
      <summary>Compares two <see cref="T:System.Net.DnsEndPoint"></see> objects.</summary>
      <param name="comparand">A <see cref="T:System.Net.DnsEndPoint"></see> instance to compare to the current instance.</param>
      <returns>true if the two <see cref="T:System.Net.DnsEndPoint"></see> instances are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.DnsEndPoint.GetHashCode">
      <summary>Returns a hash value for a <see cref="T:System.Net.DnsEndPoint"></see>.</summary>
      <returns>An integer hash value for the <see cref="T:System.Net.DnsEndPoint"></see>.</returns>
    </member>
    <member name="P:System.Net.DnsEndPoint.Host">
      <summary>Gets the host name or string representation of the Internet Protocol (IP) address of the host.</summary>
      <returns>A host name or string representation of an IP address.</returns>
    </member>
    <member name="P:System.Net.DnsEndPoint.Port">
      <summary>Gets the port number of the <see cref="T:System.Net.DnsEndPoint"></see>.</summary>
      <returns>An integer value in the range 0 to 0xffff indicating the port number of the <see cref="T:System.Net.DnsEndPoint"></see>.</returns>
    </member>
    <member name="M:System.Net.DnsEndPoint.ToString">
      <summary>Returns the host name or string representation of the IP address and port number of the <see cref="T:System.Net.DnsEndPoint"></see>.</summary>
      <returns>A string containing the address family, host name or IP address string, and the port number of the specified <see cref="T:System.Net.DnsEndPoint"></see>.</returns>
    </member>
    <member name="T:System.Net.DnsPermission">
      <summary>Controls rights to access Domain Name System (DNS) servers on the network.</summary>
    </member>
    <member name="M:System.Net.DnsPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Creates a new instance of the <see cref="T:System.Net.DnsPermission"></see> class that either allows unrestricted DNS access or disallows DNS access.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
      <exception cref="T:System.ArgumentException"><paramref name="state">state</paramref> is not a valid <see cref="T:System.Security.Permissions.PermissionState"></see> value.</exception>
    </member>
    <member name="M:System.Net.DnsPermission.Copy">
      <summary>Creates an identical copy of the current permission instance.</summary>
      <returns>A new instance of the <see cref="T:System.Net.DnsPermission"></see> class that is an identical copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.DnsPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a <see cref="T:System.Net.DnsPermission"></see> instance from an XML encoding.</summary>
      <param name="securityElement">The XML encoding to use to reconstruct the <see cref="T:System.Net.DnsPermission"></see> instance.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="securityElement">securityElement</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="securityElement">securityElement</paramref> is not a <see cref="T:System.Net.DnsPermission"></see> element.</exception>
    </member>
    <member name="M:System.Net.DnsPermission.Intersect(System.Security.IPermission)">
      <summary>Creates a permission instance that is the intersection of the current permission instance and the specified permission instance.</summary>
      <param name="target">The <see cref="T:System.Net.DnsPermission"></see> instance to intersect with the current instance.</param>
      <returns>A <see cref="T:System.Net.DnsPermission"></see> instance that represents the intersection of the current <see cref="T:System.Net.DnsPermission"></see> instance with the specified <see cref="T:System.Net.DnsPermission"></see> instance, or null if the intersection is empty. If both the current instance and <paramref name="target">target</paramref> are unrestricted, this method returns a new <see cref="T:System.Net.DnsPermission"></see> instance that is unrestricted; otherwise, it returns null.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is neither a <see cref="T:System.Net.DnsPermission"></see> nor null.</exception>
    </member>
    <member name="M:System.Net.DnsPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission instance is a subset of the specified permission instance.</summary>
      <param name="target">The second <see cref="T:System.Net.DnsPermission"></see> instance to be tested for the subset relationship.</param>
      <returns>false if the current instance is unrestricted and <paramref name="target">target</paramref> is either null or unrestricted; otherwise, true.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is neither a <see cref="T:System.Net.DnsPermission"></see> nor null.</exception>
    </member>
    <member name="M:System.Net.DnsPermission.IsUnrestricted">
      <summary>Checks the overall permission state of the object.</summary>
      <returns>true if the <see cref="T:System.Net.DnsPermission"></see> instance was created with <see cref="F:System.Security.Permissions.PermissionState.Unrestricted"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.DnsPermission.ToXml">
      <summary>Creates an XML encoding of a <see cref="T:System.Net.DnsPermission"></see> instance and its current state.</summary>
      <returns>A <see cref="T:System.Security.SecurityElement"></see> instance that contains an XML-encoded representation of the security object, including state information.</returns>
    </member>
    <member name="M:System.Net.DnsPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission instance that is the union of the current permission instance and the specified permission instance.</summary>
      <param name="target">The <see cref="T:System.Net.DnsPermission"></see> instance to combine with the current instance.</param>
      <returns>A <see cref="T:System.Net.DnsPermission"></see> instance that represents the union of the current <see cref="T:System.Net.DnsPermission"></see> instance with the specified <see cref="T:System.Net.DnsPermission"></see> instance. If <paramref name="target">target</paramref> is null, this method returns a copy of the current instance. If the current instance or <paramref name="target">target</paramref> is unrestricted, this method returns a <see cref="T:System.Net.DnsPermission"></see> instance that is unrestricted; otherwise, it returns a <see cref="T:System.Net.DnsPermission"></see> instance that is restricted.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is neither a <see cref="T:System.Net.DnsPermission"></see> nor null.</exception>
    </member>
    <member name="T:System.Net.DnsPermissionAttribute">
      <summary>Specifies permission to request information from Domain Name Servers.</summary>
    </member>
    <member name="M:System.Net.DnsPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.DnsPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see> value.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="action">action</paramref> parameter is not a valid <see cref="T:System.Security.Permissions.SecurityAction"></see>.</exception>
    </member>
    <member name="M:System.Net.DnsPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new instance of the <see cref="T:System.Net.DnsPermission"></see> class.</summary>
      <returns>A <see cref="T:System.Net.DnsPermission"></see> that corresponds to the security declaration.</returns>
    </member>
    <member name="T:System.Net.DownloadDataCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.WebClient.DownloadDataCompleted"></see> event.</summary>
    </member>
    <member name="P:System.Net.DownloadDataCompletedEventArgs.Result">
      <summary>Gets the data that is downloaded by a <see cref="Overload:System.Net.WebClient.DownloadDataAsync"></see> method.</summary>
      <returns>A <see cref="T:System.Byte"></see> array that contains the downloaded data.</returns>
    </member>
    <member name="T:System.Net.DownloadDataCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Net.WebClient.DownloadDataCompleted"></see> event of a <see cref="T:System.Net.WebClient"></see>.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Net.DownloadDataCompletedEventArgs"></see> containing event data.</param>
    </member>
    <member name="T:System.Net.DownloadProgressChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.WebClient.DownloadProgressChanged"></see> event of a <see cref="T:System.Net.WebClient"></see>.</summary>
    </member>
    <member name="P:System.Net.DownloadProgressChangedEventArgs.BytesReceived">
      <summary>Gets the number of bytes received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that indicates the number of bytes received.</returns>
    </member>
    <member name="P:System.Net.DownloadProgressChangedEventArgs.TotalBytesToReceive">
      <summary>Gets the total number of bytes in a <see cref="T:System.Net.WebClient"></see> data download operation.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that indicates the number of bytes that will be received.</returns>
    </member>
    <member name="T:System.Net.DownloadProgressChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Net.WebClient.DownloadProgressChanged"></see> event of a <see cref="T:System.Net.WebClient"></see>.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Net.DownloadProgressChangedEventArgs"></see> containing event data.</param>
    </member>
    <member name="T:System.Net.DownloadStringCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.WebClient.DownloadStringCompleted"></see> event.</summary>
    </member>
    <member name="P:System.Net.DownloadStringCompletedEventArgs.Result">
      <summary>Gets the data that is downloaded by a <see cref="Overload:System.Net.WebClient.DownloadStringAsync"></see> method.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the downloaded data.</returns>
    </member>
    <member name="T:System.Net.DownloadStringCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Net.WebClient.DownloadStringCompleted"></see> event of a <see cref="T:System.Net.WebClient"></see>.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Net.DownloadStringCompletedEventArgs"></see> that contains event data.</param>
    </member>
    <member name="T:System.Net.EndPoint">
      <summary>Identifies a network address. This is an abstract class.</summary>
    </member>
    <member name="M:System.Net.EndPoint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.EndPoint"></see> class.</summary>
    </member>
    <member name="P:System.Net.EndPoint.AddressFamily">
      <summary>Gets the address family to which the endpoint belongs.</summary>
      <returns>One of the <see cref="T:System.Net.Sockets.AddressFamily"></see> values.</returns>
      <exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property when the property is not overridden in a descendant class.</exception>
    </member>
    <member name="M:System.Net.EndPoint.Create(System.Net.SocketAddress)">
      <summary>Creates an <see cref="T:System.Net.EndPoint"></see> instance from a <see cref="T:System.Net.SocketAddress"></see> instance.</summary>
      <param name="socketAddress">The socket address that serves as the endpoint for a connection.</param>
      <returns>A new <see cref="T:System.Net.EndPoint"></see> instance that is initialized from the specified <see cref="T:System.Net.SocketAddress"></see> instance.</returns>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class.</exception>
    </member>
    <member name="M:System.Net.EndPoint.Serialize">
      <summary>Serializes endpoint information into a <see cref="T:System.Net.SocketAddress"></see> instance.</summary>
      <returns>A <see cref="T:System.Net.SocketAddress"></see> instance that contains the endpoint information.</returns>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class.</exception>
    </member>
    <member name="T:System.Net.EndpointPermission">
      <summary>Defines an endpoint that is authorized by a <see cref="T:System.Net.SocketPermission"></see> instance.</summary>
    </member>
    <member name="M:System.Net.EndpointPermission.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to the current Object.</summary>
      <param name="obj">The <see cref="T:System.Object"></see> to compare with the current Object.</param>
      <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.EndpointPermission.GetHashCode">
      <summary>Serves as a hash function for a particular type.</summary>
      <returns>A hash code for the current <see cref="T:System.Object"></see>.</returns>
    </member>
    <member name="P:System.Net.EndpointPermission.Hostname">
      <summary>Gets the DNS host name or IP address of the server that is associated with this endpoint.</summary>
      <returns>A string that contains the DNS host name or IP address of the server.</returns>
    </member>
    <member name="P:System.Net.EndpointPermission.Port">
      <summary>Gets the network port number that is associated with this endpoint.</summary>
      <returns>The network port number that is associated with this request, or <see cref="F:System.Net.SocketPermission.AllPorts"></see>.</returns>
    </member>
    <member name="M:System.Net.EndpointPermission.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.EndpointPermission"></see> instance.</summary>
      <returns>A string that represents the current <see cref="T:System.Net.EndpointPermission"></see> instance.</returns>
    </member>
    <member name="P:System.Net.EndpointPermission.Transport">
      <summary>Gets the transport type that is associated with this endpoint.</summary>
      <returns>One of the <see cref="T:System.Net.TransportType"></see> values.</returns>
    </member>
    <member name="T:System.Net.FileWebRequest">
      <summary>Provides a file system implementation of the <see cref="T:System.Net.WebRequest"></see> class.</summary>
    </member>
    <member name="M:System.Net.FileWebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.FileWebRequest"></see> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> classes.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that contains the information that is required to serialize the new <see cref="T:System.Net.FileWebRequest"></see> object.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object that contains the source of the serialized stream that is associated with the new <see cref="T:System.Net.FileWebRequest"></see> object.</param>
    </member>
    <member name="M:System.Net.FileWebRequest.Abort">
      <summary>Cancels a request to an Internet resource.</summary>
    </member>
    <member name="M:System.Net.FileWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request for a <see cref="T:System.IO.Stream"></see> object to use to write data.</summary>
      <param name="callback">The <see cref="T:System.AsyncCallback"></see> delegate.</param>
      <param name="state">An object that contains state information for this request.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous request.</returns>
      <exception cref="T:System.Net.ProtocolViolationException">The <see cref="P:System.Net.FileWebRequest.Method"></see> property is GET and the application writes to the stream.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is being used by a previous call to <see cref="M:System.Net.FileWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see>.</exception>
      <exception cref="T:System.ApplicationException">No write stream is available.</exception>
      <exception cref="T:System.Net.WebException">The <see cref="T:System.Net.FileWebRequest"></see> was aborted.</exception>
    </member>
    <member name="M:System.Net.FileWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request for a file system resource.</summary>
      <param name="callback">The <see cref="T:System.AsyncCallback"></see> delegate.</param>
      <param name="state">An object that contains state information for this request.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous request.</returns>
      <exception cref="T:System.InvalidOperationException">The stream is already in use by a previous call to <see cref="M:System.Net.FileWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see>.</exception>
      <exception cref="T:System.Net.WebException">The <see cref="T:System.Net.FileWebRequest"></see> was aborted.</exception>
    </member>
    <member name="P:System.Net.FileWebRequest.ConnectionGroupName">
      <summary>Gets or sets the name of the connection group for the request. This property is reserved for future use.</summary>
      <returns>The name of the connection group for the request.</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.ContentLength">
      <summary>Gets or sets the content length of the data being sent.</summary>
      <returns>The number of bytes of request data being sent.</returns>
      <exception cref="T:System.ArgumentException"><see cref="P:System.Net.FileWebRequest.ContentLength"></see> is less than 0.</exception>
    </member>
    <member name="P:System.Net.FileWebRequest.ContentType">
      <summary>Gets or sets the content type of the data being sent. This property is reserved for future use.</summary>
      <returns>The content type of the data being sent.</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.Credentials">
      <summary>Gets or sets the credentials that are associated with this request. This property is reserved for future use.</summary>
      <returns>An <see cref="T:System.Net.ICredentials"></see> that contains the authentication credentials that are associated with this request. The default is null.</returns>
    </member>
    <member name="M:System.Net.FileWebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>Ends an asynchronous request for a <see cref="T:System.IO.Stream"></see> instance that the application uses to write data.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> that references the pending request for a stream.</param>
      <returns>A <see cref="T:System.IO.Stream"></see> object that the application uses to write data.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.FileWebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>Ends an asynchronous request for a file system resource.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> that references the pending request for a response.</param>
      <returns>A <see cref="T:System.Net.WebResponse"></see> that contains the response from the file system resource.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.FileWebRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that specifies the destination for this serialization.</param>
    </member>
    <member name="M:System.Net.FileWebRequest.GetRequestStream">
      <summary>Returns a <see cref="T:System.IO.Stream"></see> object for writing data to the file system resource.</summary>
      <returns>A <see cref="T:System.IO.Stream"></see> for writing data to the file system resource.</returns>
      <exception cref="T:System.Net.WebException">The request times out.</exception>
    </member>
    <member name="M:System.Net.FileWebRequest.GetResponse">
      <summary>Returns a response to a file system request.</summary>
      <returns>A <see cref="T:System.Net.WebResponse"></see> that contains the response from the file system resource.</returns>
      <exception cref="T:System.Net.WebException">The request timed out.</exception>
    </member>
    <member name="P:System.Net.FileWebRequest.Headers">
      <summary>Gets a collection of the name/value pairs that are associated with the request. This property is reserved for future use.</summary>
      <returns>A <see cref="T:System.Net.WebHeaderCollection"></see> that contains header name/value pairs associated with this request.</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.Method">
      <summary>Gets or sets the protocol method used for the request. This property is reserved for future use.</summary>
      <returns>The protocol method to use in this request.</returns>
      <exception cref="T:System.ArgumentException">The method is invalid.   - or -   The method is not supported.   - or -   Multiple methods were specified.</exception>
    </member>
    <member name="P:System.Net.FileWebRequest.PreAuthenticate">
      <summary>Gets or sets a value that indicates whether to preauthenticate a request. This property is reserved for future use.</summary>
      <returns>true to preauthenticate; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.Proxy">
      <summary>Gets or sets the network proxy to use for this request. This property is reserved for future use.</summary>
      <returns>An <see cref="T:System.Net.IWebProxy"></see> that indicates the network proxy to use for this request.</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.RequestUri">
      <summary>Gets the Uniform Resource Identifier (URI) of the request.</summary>
      <returns>A <see cref="T:System.Uri"></see> that contains the URI of the request.</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.Timeout">
      <summary>Gets or sets the length of time until the request times out.</summary>
      <returns>The time, in milliseconds, until the request times out, or the value <see cref="F:System.Threading.Timeout.Infinite"></see> to indicate that the request does not time out.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than or equal to zero and is not <see cref="F:System.Threading.Timeout.Infinite"></see>.</exception>
    </member>
    <member name="P:System.Net.FileWebRequest.UseDefaultCredentials">
      <summary>Always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <returns>Always throws a <see cref="T:System.NotSupportedException"></see>.</returns>
      <exception cref="T:System.NotSupportedException">Default credentials are not supported for file Uniform Resource Identifiers (URIs).</exception>
    </member>
    <member name="M:System.Net.FileWebRequest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object with the required data to serialize the <see cref="T:System.Net.FileWebRequest"></see>.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized data for the <see cref="T:System.Net.FileWebRequest"></see>.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains the destination of the serialized stream that is associated with the new <see cref="T:System.Net.FileWebRequest"></see>.</param>
    </member>
    <member name="T:System.Net.WebUtility">
      <summary>Provides methods for encoding and decoding URLs when processing Web requests.</summary>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String)">
      <summary>Converts a string that has been HTML-encoded for HTTP transmission into a decoded string.</summary>
      <param name="value">The string to decode.</param>
      <returns>A decoded string.</returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String,System.IO.TextWriter)">
      <summary>Converts a string that has been HTML-encoded into a decoded string, and sends the decoded string to a <see cref="T:System.IO.TextWriter"></see> output stream.</summary>
      <param name="value">The string to decode.</param>
      <param name="output">A <see cref="T:System.IO.TextWriter"></see> stream of output.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="output">output</paramref> parameter cannot be null if the <paramref name="value">value</paramref> parameter is not null.</exception>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String)">
      <summary>Converts a string to an HTML-encoded string.</summary>
      <param name="value">The string to encode.</param>
      <returns>An encoded string.</returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String,System.IO.TextWriter)">
      <summary>Converts a string into an HTML-encoded string, and returns the output as a <see cref="T:System.IO.TextWriter"></see> stream of output.</summary>
      <param name="value">The string to encode.</param>
      <param name="output">A <see cref="T:System.IO.TextWriter"></see> output stream.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="output">output</paramref> parameter cannot be null if the <paramref name="value">value</paramref> parameter is not null.</exception>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecode(System.String)">
      <summary>Converts a string that has been encoded for transmission in a URL into a decoded string.</summary>
      <param name="encodedValue">A URL-encoded string to decode.</param>
      <returns>Returns <see cref="T:System.String"></see>.   A decoded string.</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Converts an encoded byte array that has been encoded for transmission in a URL into a decoded byte array.</summary>
      <param name="encodedValue">A URL-encoded <see cref="T:System.Byte"></see> array to decode.</param>
      <param name="offset">The offset, in bytes, from the start of the <see cref="T:System.Byte"></see> array to decode.</param>
      <param name="count">The count, in bytes, to decode from the <see cref="T:System.Byte"></see> array.</param>
      <returns>Returns <see cref="T:System.Byte"></see>.   A decoded <see cref="T:System.Byte"></see> array.</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncode(System.String)">
      <summary>Converts a text string into a URL-encoded string.</summary>
      <param name="value">The text to URL-encode.</param>
      <returns>Returns <see cref="T:System.String"></see>.   A URL-encoded string.</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Converts a byte array into a URL-encoded byte array.</summary>
      <param name="value">The <see cref="T:System.Byte"></see> array to URL-encode.</param>
      <param name="offset">The offset, in bytes, from the start of the <see cref="T:System.Byte"></see> array to encode.</param>
      <param name="count">The count, in bytes, to encode from the <see cref="T:System.Byte"></see> array.</param>
      <returns>Returns <see cref="T:System.Byte"></see>.   An encoded <see cref="T:System.Byte"></see> array.</returns>
    </member>
    <member name="T:System.Net.WriteStreamClosedEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.WebClient.WriteStreamClosed"></see> event.</summary>
    </member>
    <member name="M:System.Net.WriteStreamClosedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WriteStreamClosedEventArgs"></see> class.</summary>
    </member>
    <member name="P:System.Net.WriteStreamClosedEventArgs.Error">
      <summary>Gets the error value when a write stream is closed.</summary>
      <returns>Returns <see cref="T:System.Exception"></see>.</returns>
    </member>
    <member name="T:System.Net.WriteStreamClosedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Net.WebClient.WriteStreamClosed"></see> event of a <see cref="T:System.Net.WebClient"></see>.</summary>
      <param name="sender"></param>
      <param name="e"></param>
    </member>
    <member name="T:System.NetPipeStyleUriParser">
      <summary>A parser based on the NetPipe scheme for the &quot;Indigo&quot; system.</summary>
    </member>
    <member name="M:System.NetPipeStyleUriParser.#ctor">
      <summary>Create a parser based on the NetPipe scheme for the &quot;Indigo&quot; system.</summary>
    </member>
    <member name="T:System.NetTcpStyleUriParser">
      <summary>A parser based on the NetTcp scheme for the &quot;Indigo&quot; system.</summary>
    </member>
    <member name="M:System.NetTcpStyleUriParser.#ctor">
      <summary>Create a parser based on the NetTcp scheme for the &quot;Indigo&quot; system.</summary>
    </member>
    <member name="T:System.NewsStyleUriParser">
      <summary>A customizable parser based on the news scheme using the Network News Transfer Protocol (NNTP).</summary>
    </member>
    <member name="M:System.NewsStyleUriParser.#ctor">
      <summary>Create a customizable parser based on the news scheme using the Network News Transfer Protocol (NNTP).</summary>
    </member>
    <member name="T:System.Security.Cryptography.Oid">
      <summary>Represents a cryptographic object identifier. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Oid.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Oid"></see> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Oid.#ctor(System.Security.Cryptography.Oid)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Oid"></see> class using the specified <see cref="T:System.Security.Cryptography.Oid"></see> object.</summary>
      <param name="oid">The object identifier information to use to create the new object identifier.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="oid">oid</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Oid.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Oid"></see> class using a string value of an <see cref="T:System.Security.Cryptography.Oid"></see> object.</summary>
      <param name="oid">An object identifier.</param>
    </member>
    <member name="M:System.Security.Cryptography.Oid.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Oid"></see> class using the specified value and friendly name.</summary>
      <param name="value">The dotted number of the identifier.</param>
      <param name="friendlyName">The friendly name of the identifier.</param>
    </member>
    <member name="P:System.Security.Cryptography.Oid.FriendlyName">
      <summary>Gets or sets the friendly name of the identifier.</summary>
      <returns>The friendly name of the identifier.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Oid.FromFriendlyName(System.String,System.Security.Cryptography.OidGroup)">
      <summary>Creates an <see cref="T:System.Security.Cryptography.Oid"></see> object from an OID friendly name by searching the specified group.</summary>
      <param name="friendlyName">The friendly name of the identifier.</param>
      <param name="group">The group to search in.</param>
      <returns>An object that represents the specified OID.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="friendlyName">friendlyName</paramref> is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The OID was not found.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Oid.FromOidValue(System.String,System.Security.Cryptography.OidGroup)">
      <summary>Creates an <see cref="T:System.Security.Cryptography.Oid"></see> object by using the specified OID value and group.</summary>
      <param name="oidValue">The OID value.</param>
      <param name="group">The group to search in.</param>
      <returns>A new instance of an <see cref="T:System.Security.Cryptography.Oid"></see> object.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="oidValue">oidValue</paramref> is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The friendly name for the OID value was not found.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Oid.Value">
      <summary>Gets or sets the dotted number of the identifier.</summary>
      <returns>The dotted number of the identifier.</returns>
    </member>
    <member name="T:System.Security.Cryptography.OidCollection">
      <summary>Represents a collection of <see cref="T:System.Security.Cryptography.Oid"></see> objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.OidCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.OidCollection"></see> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.OidCollection.Add(System.Security.Cryptography.Oid)">
      <summary>Adds an <see cref="T:System.Security.Cryptography.Oid"></see> object to the <see cref="T:System.Security.Cryptography.OidCollection"></see> object.</summary>
      <param name="oid">The <see cref="T:System.Security.Cryptography.Oid"></see> object to add to the collection.</param>
      <returns>The index of the added <see cref="T:System.Security.Cryptography.Oid"></see> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.OidCollection.CopyTo(System.Security.Cryptography.Oid[],System.Int32)">
      <summary>Copies the <see cref="T:System.Security.Cryptography.OidCollection"></see> object into an array.</summary>
      <param name="array">The array to copy the <see cref="T:System.Security.Cryptography.OidCollection"></see> object into.</param>
      <param name="index">The location where the copy operation starts.</param>
    </member>
    <member name="P:System.Security.Cryptography.OidCollection.Count">
      <summary>Gets the number of <see cref="T:System.Security.Cryptography.Oid"></see> objects in a collection.</summary>
      <returns>The number of <see cref="T:System.Security.Cryptography.Oid"></see> objects in a collection.</returns>
    </member>
    <member name="M:System.Security.Cryptography.OidCollection.GetEnumerator">
      <summary>Returns an <see cref="T:System.Security.Cryptography.OidEnumerator"></see> object that can be used to navigate the <see cref="T:System.Security.Cryptography.OidCollection"></see> object.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.OidEnumerator"></see> object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.OidCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to the <see cref="T:System.Security.Cryptography.OidCollection"></see> object is thread safe.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.Security.Cryptography.OidCollection.Item(System.Int32)">
      <summary>Gets an <see cref="T:System.Security.Cryptography.Oid"></see> object from the <see cref="T:System.Security.Cryptography.OidCollection"></see> object.</summary>
      <param name="index">The location of the <see cref="T:System.Security.Cryptography.Oid"></see> object in the collection.</param>
      <returns>An <see cref="T:System.Security.Cryptography.Oid"></see> object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.OidCollection.Item(System.String)">
      <summary>Gets the first <see cref="T:System.Security.Cryptography.Oid"></see> object that contains a value of the <see cref="P:System.Security.Cryptography.Oid.Value"></see> property or a value of the <see cref="P:System.Security.Cryptography.Oid.FriendlyName"></see> property that matches the specified string value from the <see cref="T:System.Security.Cryptography.OidCollection"></see> object.</summary>
      <param name="oid">A string that represents a <see cref="P:System.Security.Cryptography.Oid.Value"></see> property or a <see cref="P:System.Security.Cryptography.Oid.FriendlyName"></see> property.</param>
      <returns>An <see cref="T:System.Security.Cryptography.Oid"></see> object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.OidCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Security.Cryptography.OidCollection"></see> object.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Security.Cryptography.OidCollection"></see> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.OidCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the <see cref="T:System.Security.Cryptography.OidCollection"></see> object into an array.</summary>
      <param name="array">The array to copy the <see cref="T:System.Security.Cryptography.OidCollection"></see> object to.</param>
      <param name="index">The location where the copy operation starts.</param>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> cannot be a multidimensional array.   -or-   The length of <paramref name="array">array</paramref> is an invalid offset length.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="index">index</paramref> is out range.</exception>
    </member>
    <member name="M:System.Security.Cryptography.OidCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an <see cref="T:System.Security.Cryptography.OidEnumerator"></see> object that can be used to navigate the <see cref="T:System.Security.Cryptography.OidCollection"></see> object.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.OidEnumerator"></see> object that can be used to navigate the collection.</returns>
    </member>
    <member name="T:System.Security.Cryptography.OidEnumerator">
      <summary>Provides the ability to navigate through an <see cref="T:System.Security.Cryptography.OidCollection"></see> object. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Security.Cryptography.OidEnumerator.Current">
      <summary>Gets the current <see cref="T:System.Security.Cryptography.Oid"></see> object in an <see cref="T:System.Security.Cryptography.OidCollection"></see> object.</summary>
      <returns>The current <see cref="T:System.Security.Cryptography.Oid"></see> object in the collection.</returns>
    </member>
    <member name="M:System.Security.Cryptography.OidEnumerator.MoveNext">
      <summary>Advances to the next <see cref="T:System.Security.Cryptography.Oid"></see> object in an <see cref="T:System.Security.Cryptography.OidCollection"></see> object.</summary>
      <returns>true, if the enumerator was successfully advanced to the next element; false, if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="M:System.Security.Cryptography.OidEnumerator.Reset">
      <summary>Sets an enumerator to its initial position.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Security.Cryptography.OidEnumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the current <see cref="T:System.Security.Cryptography.Oid"></see> object in an <see cref="T:System.Security.Cryptography.OidCollection"></see> object.</summary>
      <returns>The current <see cref="T:System.Security.Cryptography.Oid"></see> object.</returns>
    </member>
    <member name="T:System.Security.Cryptography.OidGroup">
      <summary>Identifies Windows cryptographic object identifier (OID) groups.</summary>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.All">
      <summary>All the groups.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.Attribute">
      <summary>The Windows group that is represented by CRYPT_RDN_ATTR_OID_GROUP_ID.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.EncryptionAlgorithm">
      <summary>The Windows group that is represented by CRYPT_ENCRYPT_ALG_OID_GROUP_ID.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.EnhancedKeyUsage">
      <summary>The Windows group that is represented by CRYPT_ENHKEY_USAGE_OID_GROUP_ID.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.ExtensionOrAttribute">
      <summary>The Windows group that is represented by CRYPT_EXT_OR_ATTR_OID_GROUP_ID.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.HashAlgorithm">
      <summary>The Windows group that is represented by CRYPT_HASH_ALG_OID_GROUP_ID.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.KeyDerivationFunction">
      <summary>The Windows group that is represented by CRYPT_KDF_OID_GROUP_ID.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.Policy">
      <summary>The Windows group that is represented by CRYPT_POLICY_OID_GROUP_ID.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.PublicKeyAlgorithm">
      <summary>The Windows group that is represented by CRYPT_PUBKEY_ALG_OID_GROUP_ID.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.SignatureAlgorithm">
      <summary>The Windows group that is represented by CRYPT_SIGN_ALG_OID_GROUP_ID.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.Template">
      <summary>The Windows group that is represented by CRYPT_TEMPLATE_OID_GROUP_ID.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary>Provides data for the <see cref="E:System.Timers.Timer.Elapsed"></see> event.</summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary>Gets the date/time when the <see cref="E:System.Timers.Timer.Elapsed"></see> event was raised.</summary>
      <returns>The time the <see cref="E:System.Timers.Timer.Elapsed"></see> event was raised.</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Timers.Timer.Elapsed"></see> event of a <see cref="T:System.Timers.Timer"></see>.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An <see cref="T:System.Timers.ElapsedEventArgs"></see> object that contains the event data.</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary>Generates an event after a set interval, with an option to generate recurring events.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Timers.Timer"></see> class, and sets all the properties to their initial values.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Timers.Timer"></see> class, and sets the <see cref="P:System.Timers.Timer.Interval"></see> property to the specified number of milliseconds.</summary>
      <param name="interval">The time, in milliseconds, between events. The value must be greater than zero and less than or equal to <see cref="F:System.Int32.MaxValue"></see>.</param>
      <exception cref="T:System.ArgumentException">The value of the <paramref name="interval">interval</paramref> parameter is less than or equal to zero, or greater than <see cref="F:System.Int32.MaxValue"></see>.</exception>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary>Gets or sets a Boolean indicating whether the <see cref="T:System.Timers.Timer"></see> should raise the <see cref="E:System.Timers.Timer.Elapsed"></see> event only once (false) or repeatedly (true).</summary>
      <returns>true if the <see cref="T:System.Timers.Timer"></see> should raise the <see cref="E:System.Timers.Timer.Elapsed"></see> event each time the interval elapses; false if it should raise the <see cref="E:System.Timers.Timer.Elapsed"></see> event only once, after the first time the interval elapses. The default is true.</returns>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary>Begins the run-time initialization of a <see cref="T:System.Timers.Timer"></see> that is used on a form or by another component.</summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary>Releases the resources used by the <see cref="T:System.Timers.Timer"></see>.</summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary>Releases all resources used by the current <see cref="T:System.Timers.Timer"></see>.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary>Occurs when the interval elapses.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary>Gets or sets a value indicating whether the <see cref="T:System.Timers.Timer"></see> should raise the <see cref="E:System.Timers.Timer.Elapsed"></see> event.</summary>
      <returns>true if the <see cref="T:System.Timers.Timer"></see> should raise the <see cref="E:System.Timers.Timer.Elapsed"></see> event; otherwise, false. The default is false.</returns>
      <exception cref="T:System.ObjectDisposedException">This property cannot be set because the timer has been disposed.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Timers.Timer.Interval"></see> property was set to a value greater than <see cref="F:System.Int32.MaxValue"></see> before the timer was enabled.</exception>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary>Ends the run-time initialization of a <see cref="T:System.Timers.Timer"></see> that is used on a form or by another component.</summary>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary>Gets or sets the interval, expressed in milliseconds, at which to raise the <see cref="E:System.Timers.Timer.Elapsed"></see> event.</summary>
      <returns>The time, in milliseconds, between <see cref="E:System.Timers.Timer.Elapsed"></see> events. The value must be greater than zero, and less than or equal to <see cref="F:System.Int32.MaxValue"></see>. The default is 100 milliseconds.</returns>
      <exception cref="T:System.ArgumentException">The interval is less than or equal to zero.   -or-   The interval is greater than <see cref="F:System.Int32.MaxValue"></see>, and the timer is currently enabled. (If the timer is not currently enabled, no exception is thrown until it becomes enabled.)</exception>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary>Gets or sets the site that binds the <see cref="T:System.Timers.Timer"></see> to its container in design mode.</summary>
      <returns>An <see cref="T:System.ComponentModel.ISite"></see> interface representing the site that binds the <see cref="T:System.Timers.Timer"></see> object to its container.</returns>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary>Starts raising the <see cref="E:System.Timers.Timer.Elapsed"></see> event by setting <see cref="P:System.Timers.Timer.Enabled"></see> to true.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="T:System.Timers.Timer"></see> is created with an interval equal to or greater than <see cref="F:System.Int32.MaxValue"></see> + 1, or set to an interval less than zero.</exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary>Stops raising the <see cref="E:System.Timers.Timer.Elapsed"></see> event by setting <see cref="P:System.Timers.Timer.Enabled"></see> to false.</summary>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary>Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.</summary>
      <returns>The <see cref="T:System.ComponentModel.ISynchronizeInvoke"></see> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed. The default is null.</returns>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary>Sets the description that visual designers can display when referencing an event, extender, or property.</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Timers.TimersDescriptionAttribute"></see> class.</summary>
      <param name="description">The description to use.</param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary>Gets the description that visual designers can display when referencing an event, extender, or property.</summary>
      <returns>The description for the event, extender, or property.</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeProcessHandle">
      <summary>Provides a managed wrapper for a process handle.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeProcessHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeProcessHandle"></see> class from the specified handle, indicating whether to release the handle during the finalization phase.</summary>
      <param name="existingHandle">The handle to be wrapped.</param>
      <param name="ownsHandle">true to reliably let <see cref="T:Microsoft.Win32.SafeHandles.SafeProcessHandle"></see> release the handle during the finalization phase; otherwise, false.</param>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeX509ChainHandle">
      <summary>Provides a wrapper class that represents the handle of an X.509 chain object. For more information, see <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain"></see>.</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary>Represents a code expression. This is a base class for other code expression objects that is never instantiated.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeExpression"></see> class.</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary>Represents a collection of <see cref="T:System.CodeDom.CodeExpression"></see> objects.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeExpressionCollection"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeExpressionCollection"></see> class containing the specified array of <see cref="T:System.CodeDom.CodeExpression"></see> objects.</summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeExpression"></see> objects with which to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException">One or more objects in the array are null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeExpressionCollection"></see> class containing the elements of the specified source collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeExpressionCollection"></see> with which to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary>Adds the specified <see cref="T:System.CodeDom.CodeExpression"></see> object to the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeExpression"></see> object to add.</param>
      <returns>The index at which the new element was inserted.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary>Copies the elements of the specified array to the end of the collection.</summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeExpression"></see> that contains the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary>Copies the contents of another <see cref="T:System.CodeDom.CodeExpressionCollection"></see> object to the end of the collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeExpressionCollection"></see> that contains the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary>Gets a value that indicates whether the collection contains the specified <see cref="T:System.CodeDom.CodeExpression"></see> object.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeExpression"></see> object to locate in the collection.</param>
      <returns>true if the collection contains the specified object; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary>Copies the collection objects to a one-dimensional <see cref="T:System.Array"></see> instance beginning at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the values copied from the collection.</param>
      <param name="index">The index of the array at which to begin inserting.</param>
      <exception cref="T:System.ArgumentException">The destination array is multidimensional.   -or-   The number of elements in the <see cref="T:System.CodeDom.CodeExpressionCollection"></see> is greater than the available space between the index of the target array specified by the <paramref name="index">index</paramref> parameter and the end of the target array.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array">array</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is less than the target array's minimum index.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary>Gets the index of the specified <see cref="T:System.CodeDom.CodeExpression"></see> object in the collection, if it exists in the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeExpression"></see> object to locate in the collection.</param>
      <returns>The index of the specified object, if found, in the collection; otherwise, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary>Inserts the specified <see cref="T:System.CodeDom.CodeExpression"></see> object into the collection at the specified index.</summary>
      <param name="index">The zero-based index where the specified object should be inserted.</param>
      <param name="value">The <see cref="T:System.CodeDom.CodeExpression"></see> object to insert.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.CodeDom.CodeExpression"></see> object at the specified index in the collection.</summary>
      <param name="index">The zero-based index of the collection to access.</param>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> object at each valid index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary>Removes the specified <see cref="T:System.CodeDom.CodeExpression"></see> object from the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeExpression"></see> object to remove from the collection.</param>
      <exception cref="T:System.ArgumentException">The specified object is not found in the collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary>Represents a statement that consists of a single expression.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeExpressionStatement"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeExpressionStatement"></see> class by using the specified expression.</summary>
      <param name="expression">A <see cref="T:System.CodeDom.CodeExpression"></see> for the statement.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary>Gets or sets the expression for the statement.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the expression for the statement.</returns>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary>Represents a reference to a field.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeFieldReferenceExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeFieldReferenceExpression"></see> class using the specified target object and field name.</summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the object that contains the field.</param>
      <param name="fieldName">The name of the field.</param>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary>Gets or sets the name of the field to reference.</summary>
      <returns>A string containing the field name.</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary>Gets or sets the object that contains the field to reference.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the object that contains the field to reference.</returns>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary>Represents a goto statement.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeGotoStatement"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeGotoStatement"></see> class using the specified label name.</summary>
      <param name="label">The name of the label at which to continue program execution.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="Label">Label</paramref> is null.</exception>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary>Gets or sets the name of the label at which to continue program execution.</summary>
      <returns>A string that indicates the name of the label at which to continue program execution.</returns>
      <exception cref="T:System.ArgumentNullException">The label cannot be set because <paramref name="value">value</paramref> is null or an empty string.</exception>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary>Represents a reference to an indexer property of an object.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeIndexerExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeIndexerExpression"></see> class using the specified target object and index.</summary>
      <param name="targetObject">The target object.</param>
      <param name="indices">The index or indexes of the indexer expression.</param>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary>Gets the collection of indexes of the indexer expression.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpressionCollection"></see> that indicates the index or indexes of the indexer expression.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary>Gets or sets the target object that can be indexed.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the indexer object.</returns>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary>Represents a for statement, or a loop through a block of statements, using a test expression as a condition for continuing to loop.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeIterationStatement"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeIterationStatement"></see> class using the specified parameters.</summary>
      <param name="initStatement">A <see cref="T:System.CodeDom.CodeStatement"></see> containing the loop initialization statement.</param>
      <param name="testExpression">A <see cref="T:System.CodeDom.CodeExpression"></see> containing the expression to test for exit condition.</param>
      <param name="incrementStatement">A <see cref="T:System.CodeDom.CodeStatement"></see> containing the per-cycle increment statement.</param>
      <param name="statements">An array of type <see cref="T:System.CodeDom.CodeStatement"></see> containing the statements within the loop.</param>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary>Gets or sets the statement that is called after each loop cycle.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeStatement"></see> that indicates the per cycle increment statement.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary>Gets or sets the loop initialization statement.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeStatement"></see> that indicates the loop initialization statement.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary>Gets the collection of statements to be executed within the loop.</summary>
      <returns>An array of type <see cref="T:System.CodeDom.CodeStatement"></see> that indicates the statements within the loop.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary>Gets or sets the expression to test as the condition that continues the loop.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the expression to test.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary>Represents a labeled statement or a stand-alone label.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeLabeledStatement"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeLabeledStatement"></see> class using the specified label name.</summary>
      <param name="label">The name of the label.</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeLabeledStatement"></see> class using the specified label name and statement.</summary>
      <param name="label">The name of the label.</param>
      <param name="statement">The <see cref="T:System.CodeDom.CodeStatement"></see> to associate with the label.</param>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary>Gets or sets the name of the label.</summary>
      <returns>The name of the label.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary>Gets or sets the optional associated statement.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeStatement"></see> that indicates the statement associated with the label.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary>Represents a specific location within a specific file.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeLinePragma"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeLinePragma"></see> class.</summary>
      <param name="fileName">The file name of the associated file.</param>
      <param name="lineNumber">The line number to store a reference to.</param>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary>Gets or sets the name of the associated file.</summary>
      <returns>The file name of the associated file.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary>Gets or sets the line number of the associated reference.</summary>
      <returns>The line number.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary>Represents a declaration for an event of a type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMemberEvent"></see> class.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary>Gets or sets the data type that the member event implements.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReferenceCollection"></see> that indicates the data type or types that the member event implements.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary>Gets or sets the privately implemented data type, if any.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the data type that the event privately implements.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary>Gets or sets the data type of the delegate type that handles the event.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the delegate type that handles the event.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary>Represents a declaration for a field of a type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMemberField"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMemberField"></see> class using the specified field type and field name.</summary>
      <param name="type">An object that indicates the type of the field.</param>
      <param name="name">The name of the field.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMemberField"></see> class using the specified field type and field name.</summary>
      <param name="type">The type of the field.</param>
      <param name="name">The name of the field.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMemberField"></see> class using the specified field type and field name.</summary>
      <param name="type">The type of the field.</param>
      <param name="name">The name of the field.</param>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary>Gets or sets the initialization expression for the field.</summary>
      <returns>The initialization expression for the field.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary>Gets or sets the type of the field.</summary>
      <returns>The type of the field.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary>Represents a declaration for a method of a type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberMethod.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMemberMethod"></see> class.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary>Gets the data types of the interfaces implemented by this method, unless it is a private method implementation, which is indicated by the <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType"></see> property.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReferenceCollection"></see> that indicates the interfaces implemented by this method.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary>Gets the parameter declarations for the method.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"></see> that indicates the method parameters.</returns>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary>An event that will be raised the first time the <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes"></see> collection is accessed.</summary>
      <returns></returns>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary>An event that will be raised the first time the <see cref="P:System.CodeDom.CodeMemberMethod.Parameters"></see> collection is accessed.</summary>
      <returns></returns>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary>An event that will be raised the first time the <see cref="P:System.CodeDom.CodeMemberMethod.Statements"></see> collection is accessed.</summary>
      <returns></returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary>Gets or sets the data type of the interface this method, if private, implements a method of, if any.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the data type of the interface with the method that the private method whose declaration is represented by this <see cref="T:System.CodeDom.CodeMemberMethod"></see> implements.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary>Gets or sets the data type of the return value of the method.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the data type of the value returned by the method.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary>Gets the custom attributes of the return type of the method.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"></see> that indicates the custom attributes.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary>Gets the statements within the method.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeStatementCollection"></see> that indicates the statements within the method.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.TypeParameters">
      <summary>Gets the type parameters for the current generic method.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeParameterCollection"></see> that contains the type parameters for the generic method.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary>Represents a declaration for a property of a type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberProperty.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMemberProperty"></see> class.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary>Gets the collection of get statements for the property.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeStatementCollection"></see> that contains the get statements for the member property.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary>Gets or sets a value indicating whether the property has a get method accessor.</summary>
      <returns>true if the Count property of the <see cref="P:System.CodeDom.CodeMemberProperty.GetStatements"></see> collection is non-zero, or if the value of this property has been set to true; otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary>Gets or sets a value indicating whether the property has a set method accessor.</summary>
      <returns>true if the <see cref="P:System.Collections.CollectionBase.Count"></see> property of the <see cref="P:System.CodeDom.CodeMemberProperty.SetStatements"></see> collection is non-zero; otherwise, false.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary>Gets the data types of any interfaces that the property implements.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReferenceCollection"></see> that indicates the data types the property implements.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary>Gets the collection of declaration expressions for the property.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"></see> that indicates the declaration expressions for the property.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary>Gets or sets the data type of the interface, if any, this property, if private, implements.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the data type of the interface, if any, the property, if private, implements.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary>Gets the collection of set statements for the property.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeStatementCollection"></see> that contains the set statements for the member property.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary>Gets or sets the data type of the property.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the data type of the property.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary>Represents an expression that invokes a method.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMethodInvokeExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMethodInvokeExpression"></see> class using the specified method and parameters.</summary>
      <param name="method">A <see cref="T:System.CodeDom.CodeMethodReferenceExpression"></see> that indicates the method to invoke.</param>
      <param name="parameters">An array of <see cref="T:System.CodeDom.CodeExpression"></see> objects that indicate the parameters with which to invoke the method.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMethodInvokeExpression"></see> class using the specified target object, method name, and parameters.</summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the target object with the method to invoke.</param>
      <param name="methodName">The name of the method to invoke.</param>
      <param name="parameters">An array of <see cref="T:System.CodeDom.CodeExpression"></see> objects that indicate the parameters to call the method with.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary>Gets or sets the method to invoke.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeMethodReferenceExpression"></see> that indicates the method to invoke.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary>Gets the parameters to invoke the method with.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpressionCollection"></see> that indicates the parameters to invoke the method with.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary>Represents a reference to a method.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMethodReferenceExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMethodReferenceExpression"></see> class using the specified target object and method name.</summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the object to target.</param>
      <param name="methodName">The name of the method to call.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMethodReferenceExpression"></see> class using the specified target object, method name, and generic type arguments.</summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the object to target.</param>
      <param name="methodName">The name of the method to call.</param>
      <param name="typeParameters">An array of <see cref="T:System.CodeDom.CodeTypeReference"></see> values that specify the <see cref="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments"></see> for this <see cref="T:System.CodeDom.CodeMethodReferenceExpression"></see>.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary>Gets or sets the name of the method to reference.</summary>
      <returns>The name of the method to reference.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary>Gets or sets the expression that indicates the method to reference.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that represents the method to reference.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments">
      <summary>Gets the type arguments for the current generic method reference expression.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReferenceCollection"></see> containing the type arguments for the current code <see cref="T:System.CodeDom.CodeMethodReferenceExpression"></see>.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary>Represents a return value statement.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMethodReturnStatement"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMethodReturnStatement"></see> class using the specified expression.</summary>
      <param name="expression">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the return value.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary>Gets or sets the return value.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the value to return for the return statement, or null if the statement is part of a subroutine.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary>Represents a namespace declaration.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeNamespace"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeNamespace"></see> class using the specified name.</summary>
      <param name="name">The name of the namespace being declared.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary>Gets the comments for the namespace.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeCommentStatementCollection"></see> that indicates the comments for the namespace.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary>Gets the collection of namespace import directives used by the namespace.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeNamespaceImportCollection"></see> that indicates the namespace import directives used by the namespace.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary>Gets or sets the name of the namespace.</summary>
      <returns>The name of the namespace.</returns>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary>An event that will be raised the first time the <see cref="P:System.CodeDom.CodeNamespace.Comments"></see> collection is accessed.</summary>
      <returns></returns>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary>An event that will be raised the first time the <see cref="P:System.CodeDom.CodeNamespace.Imports"></see> collection is accessed.</summary>
      <returns></returns>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary>An event that will be raised the first time the <see cref="P:System.CodeDom.CodeNamespace.Types"></see> collection is accessed.</summary>
      <returns></returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary>Gets the collection of types that the namespace contains.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"></see> that indicates the types contained in the namespace.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary>Represents a collection of <see cref="T:System.CodeDom.CodeNamespace"></see> objects.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeNamespaceCollection"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeNamespaceCollection"></see> class that contains the specified array of <see cref="T:System.CodeDom.CodeNamespace"></see> objects.</summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeNamespace"></see> objects with which to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException">One or more objects in the array are null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeNamespaceCollection"></see> class that contains the elements of the specified source collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeNamespaceCollection"></see> with which to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary>Adds the specified <see cref="T:System.CodeDom.CodeNamespace"></see> object to the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeNamespace"></see> to add.</param>
      <returns>The index at which the new element was inserted.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary>Copies the elements of the specified <see cref="T:System.CodeDom.CodeNamespace"></see> array to the end of the collection.</summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeNamespace"></see> that contains the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary>Adds the contents of the specified <see cref="T:System.CodeDom.CodeNamespaceCollection"></see> object to the end of the collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeNamespaceCollection"></see> that contains the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary>Gets a value that indicates whether the collection contains the specified <see cref="T:System.CodeDom.CodeNamespace"></see> object.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeNamespace"></see> to search for in the collection.</param>
      <returns>true if the <see cref="T:System.CodeDom.CodeNamespace"></see> is contained in the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary>Copies the collection objects to a one-dimensional <see cref="T:System.Array"></see> instance, starting at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the values copied from the collection.</param>
      <param name="index">The index of the array at which to begin inserting.</param>
      <exception cref="T:System.ArgumentException">The destination array is multidimensional.   -or-   The number of elements in the <see cref="T:System.CodeDom.CodeNamespaceCollection"></see> is greater than the available space between the index of the target array specified by the <paramref name="index">index</paramref> parameter and the end of the target array.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array">array</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is less than the target array's minimum index.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary>Gets the index of the specified <see cref="T:System.CodeDom.CodeNamespace"></see> object in the <see cref="T:System.CodeDom.CodeNamespaceCollection"></see>, if it exists in the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeNamespace"></see> to locate.</param>
      <returns>The index of the specified <see cref="T:System.CodeDom.CodeNamespace"></see>, if it is found, in the collection; otherwise, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary>Inserts the specified <see cref="T:System.CodeDom.CodeNamespace"></see> object into the collection at the specified index.</summary>
      <param name="index">The zero-based index where the new item should be inserted.</param>
      <param name="value">The <see cref="T:System.CodeDom.CodeNamespace"></see> to insert.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.CodeDom.CodeNamespaceCollection"></see> object at the specified index in the collection.</summary>
      <param name="index">The index of the collection to access.</param>
      <returns>A <see cref="T:System.CodeDom.CodeNamespace"></see> at each valid index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary>Removes the specified <see cref="T:System.CodeDom.CodeNamespace"></see> object from the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeNamespace"></see> to remove from the collection.</param>
      <exception cref="T:System.ArgumentException">The specified object is not found in the collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary>Represents a namespace import directive that indicates a namespace to use.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeNamespaceImport"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeNamespaceImport"></see> class using the specified namespace to import.</summary>
      <param name="nameSpace">The name of the namespace to import.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary>Gets or sets the line and file the statement occurs on.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeLinePragma"></see> that indicates the context of the statement.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary>Gets or sets the namespace to import.</summary>
      <returns>The name of the namespace to import.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary>Represents a collection of <see cref="T:System.CodeDom.CodeNamespaceImport"></see> objects.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeNamespaceImportCollection"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary>Adds a <see cref="T:System.CodeDom.CodeNamespaceImport"></see> object to the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeNamespaceImport"></see> object to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary>Adds a set of <see cref="T:System.CodeDom.CodeNamespaceImport"></see> objects to the collection.</summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeNamespaceImport"></see> that contains the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary>Clears the collection of members.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary>Gets the number of namespaces in the collection.</summary>
      <returns>The number of namespaces in the collection.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary>Gets an enumerator that enumerates the collection members.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that indicates the collection members.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.CodeDom.CodeNamespaceImport"></see> object at the specified index in the collection.</summary>
      <param name="index">The index of the collection to access.</param>
      <returns>A <see cref="T:System.CodeDom.CodeNamespaceImport"></see> object at each valid index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from the <see cref="T:System.Collections.ICollection"></see>. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false. This property always returns false.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.  This property always returns null.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can iterate through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adds an object to the <see cref="T:System.Collections.IList"></see>.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>.</param>
      <returns>The position at which the new element was inserted.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.IList"></see>.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList"></see> contains a specific value.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
      <returns>true if the value is in the list; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList"></see>.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
      <returns>The index of <paramref name="value">value</paramref> if it is found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item in the <see cref="T:System.Collections.IList"></see> at the specified position.</summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">The <see cref="T:System.Object"></see> to insert into the <see cref="T:System.Collections.IList"></see>.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IList"></see> has a fixed size; otherwise, false.  This property always returns false.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IList"></see> is read-only; otherwise, false.  This property always returns false.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"></see>.</summary>
      <param name="value">The <see cref="T:System.Object"></see> to remove from the <see cref="T:System.Collections.IList"></see>.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.Collections.IList"></see>.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary>Provides a common base class for most Code Document Object Model (CodeDOM) objects.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeObject"></see> class.</summary>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary>Gets the user-definable data for the current object.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary"></see> containing user data for the current object.</returns>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary>Represents an expression that creates a new instance of a type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeObjectCreateExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeObjectCreateExpression"></see> class using the specified type and parameters.</summary>
      <param name="createType">A <see cref="T:System.CodeDom.CodeTypeReference"></see> that indicates the data type of the object to create.</param>
      <param name="parameters">An array of <see cref="T:System.CodeDom.CodeExpression"></see> objects that indicates the parameters to use to create the object.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeObjectCreateExpression"></see> class using the specified type and parameters.</summary>
      <param name="createType">The name of the data type of object to create.</param>
      <param name="parameters">An array of <see cref="T:System.CodeDom.CodeExpression"></see> objects that indicates the parameters to use to create the object.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeObjectCreateExpression"></see> class using the specified type and parameters.</summary>
      <param name="createType">The data type of the object to create.</param>
      <param name="parameters">An array of <see cref="T:System.CodeDom.CodeExpression"></see> objects that indicates the parameters to use to create the object.</param>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary>Gets or sets the data type of the object to create.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> to the data type of the object to create.</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary>Gets or sets the parameters to use in creating the object.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpressionCollection"></see> that indicates the parameters to use when creating the object.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary>Represents a parameter declaration for a method, property, or constructor.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see> class using the specified parameter type and name.</summary>
      <param name="type">An object that indicates the type of the parameter to declare.</param>
      <param name="name">The name of the parameter to declare.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see> class using the specified parameter type and name.</summary>
      <param name="type">The type of the parameter to declare.</param>
      <param name="name">The name of the parameter to declare.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see> class using the specified parameter type and name.</summary>
      <param name="type">The type of the parameter to declare.</param>
      <param name="name">The name of the parameter to declare.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary>Gets or sets the custom attributes for the parameter declaration.</summary>
      <returns>An object that indicates the custom attributes.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary>Gets or sets the direction of the field.</summary>
      <returns>An object that indicates the direction of the field.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary>Gets or sets the name of the parameter.</summary>
      <returns>The name of the parameter.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary>Gets or sets the type of the parameter.</summary>
      <returns>The type of the parameter.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary>Represents a collection of <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see> objects.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"></see> class containing the specified array of <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see> objects.</summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see> objects with which to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException">one or more objects in the array are null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"></see> class containing the elements of the specified source collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"></see> with which to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Adds the specified <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see> to the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see> to add.</param>
      <returns>The index at which the new element was inserted.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>Copies the elements of the specified array to the end of the collection.</summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see> containing the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>Adds the contents of another <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"></see> to the end of the collection.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"></see> containing the objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Gets a value indicating whether the collection contains the specified <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see>.</summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see> to search for in the collection.</param>
      <returns>true if the collection contains the specified object; otherwise, false.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary>Copies the collection objects to a one-dimensional <see cref="T:System.Array"></see> instance beginning at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the values copied from the collection.</param>
      <param name="index">The index of the array at which to begin inserting.</param>
      <exception cref="T:System.ArgumentException">The destination array is multidimensional.   -or-   The number of elements in the <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"></see> is greater than the available space between the index of the target array specified by the <paramref name="index">index</paramref> parameter and the end of the target array.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array">array</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is less than the target array's minimum index.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Gets the index in the collection of the specified <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see>, if it exists in the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see> to locate in the collection.</param>
      <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Inserts the specified <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see> into the collection at the specified index.</summary>
      <param name="index">The zero-based index where the specified object should be inserted.</param>
      <param name="value">The <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see> to insert.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see> at the specified index in the collection.</summary>
      <param name="index">The index of the collection to access.</param>
      <returns>A <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see> at each valid index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index">index</paramref> parameter is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Removes the specified <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see> from the collection.</summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"></see> to remove from the collection.</param>
      <exception cref="T:System.ArgumentException">The specified object is not found in the collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary>Represents a primitive data type value.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodePrimitiveExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodePrimitiveExpression"></see> class using the specified object.</summary>
      <param name="value">The object to represent.</param>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary>Gets or sets the primitive data type to represent.</summary>
      <returns>The primitive data type instance to represent the value of.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary>Represents a reference to the value of a property.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodePropertyReferenceExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodePropertyReferenceExpression"></see> class using the specified target object and property name.</summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the object that contains the property to reference.</param>
      <param name="propertyName">The name of the property to reference.</param>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary>Gets or sets the name of the property to reference.</summary>
      <returns>The name of the property to reference.</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary>Gets or sets the object that contains the property to reference.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the object that contains the property to reference.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary>Represents the value argument of a property set method call within a property set method.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression"></see> class.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionDirective">
      <summary>Specifies the name and mode for a code region.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeRegionDirective"></see> class with default values.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor(System.CodeDom.CodeRegionMode,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeRegionDirective"></see> class, specifying its mode and name.</summary>
      <param name="regionMode">One of the <see cref="T:System.CodeDom.CodeRegionMode"></see> values.</param>
      <param name="regionText">The name for the region.</param>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionMode">
      <summary>Gets or sets the mode for the region directive.</summary>
      <returns>One of the <see cref="T:System.CodeDom.CodeRegionMode"></see> values. The default is <see cref="F:System.CodeDom.CodeRegionMode.None"></see>.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionText">
      <summary>Gets or sets the name of the region.</summary>
      <returns>The name of the region.</returns>
    </member>
    <member name="T:System.CodeDom.CodeRegionMode">
      <summary>Specifies the start or end of a code region.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.End">
      <summary>End of the region.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.None">
      <summary>Not used.</summary>
      <returns></returns>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.Start">
      <summary>Start of the region.</summary>
      <returns></returns>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary>Represents a statement that removes an event handler.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeRemoveEventStatement"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeRemoveEventStatement"></see> class with the specified event and event handler.</summary>
      <param name="eventRef">A <see cref="T:System.CodeDom.CodeEventReferenceExpression"></see> that indicates the event to detach the event handler from.</param>
      <param name="listener">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the event handler to remove.</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeRemoveEventStatement"></see> class using the specified target object, event name, and event handler.</summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the object that contains the event.</param>
      <param name="eventName">The name of the event.</param>
      <param name="listener">A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the event handler to remove.</param>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary>Gets or sets the event to remove a listener from.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeEventReferenceExpression"></see> that indicates the event to remove a listener from.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary>Gets or sets the event handler to remove.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression"></see> that indicates the event handler to remove.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary>Represents a literal code fragment that can be compiled.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetCompileUnit"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetCompileUnit"></see> class.</summary>
      <param name="value">The literal code fragment to represent.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary>Gets or sets the line and file information about where the code is located in a source code document.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeLinePragma"></see> that indicates the position of the code fragment.</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary>Gets or sets the literal code fragment to represent.</summary>
      <returns>The literal code fragment.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary>Represents a literal expression.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetExpression"></see> class.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetExpression"></see> class using the specified literal expression.</summary>
      <param name="value">The literal expression to represent.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary>Gets or sets the literal string of code.</summary>
      <returns>The literal string.</returns>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary>Specifies whether a member is typically used for binding. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.BindableAttribute"></see> class with a Boolean value.</summary>
      <param name="bindable">true to use property for binding; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.BindableAttribute"></see> class with one of the <see cref="T:System.ComponentModel.BindableSupport"></see> values.</summary>
      <param name="flags">One of the <see cref="T:System.ComponentModel.BindableSupport"></see> values.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.BindableAttribute"></see> class.</summary>
      <param name="bindable">true to use property for binding; otherwise, false.</param>
      <param name="direction">One of the <see cref="T:System.ComponentModel.BindingDirection"></see> values.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.BindableAttribute"></see> class.</summary>
      <param name="flags">One of the <see cref="T:System.ComponentModel.BindableSupport"></see> values.</param>
      <param name="direction">One of the <see cref="T:System.ComponentModel.BindingDirection"></see> values.</param>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary>Gets a value indicating that a property is typically used for binding.</summary>
      <returns>true if the property is typically used for binding; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary>Specifies the default value for the <see cref="T:System.ComponentModel.BindableAttribute"></see>, which is <see cref="F:System.ComponentModel.BindableAttribute.No"></see>. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary>Gets a value indicating the direction or directions of this property's data binding.</summary>
      <returns>The direction of this property’s data binding.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:System.ComponentModel.BindableAttribute"></see> objects are equal.</summary>
      <param name="obj">The object to compare.</param>
      <returns>true if the specified <see cref="T:System.ComponentModel.BindableAttribute"></see> is equal to the current <see cref="T:System.ComponentModel.BindableAttribute"></see>; false if it is not equal.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary>Serves as a hash function for the <see cref="T:System.ComponentModel.BindableAttribute"></see> class.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.BindableAttribute"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary>Determines if this attribute is the default.</summary>
      <returns>true if the attribute is the default value for this attribute class; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary>Specifies that a property is not typically used for binding. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary>Specifies that a property is typically used for binding. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary>Specifies values to indicate whether a property can be bound to a data element or another property.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary>The property is set to the default.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary>The property is not bindable at design time.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary>The property is bindable at design time.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary>Specifies whether the template can be bound one way or two ways.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary>The template can only accept property values. Used with a generic <see cref="T:System.Web.UI.ITemplate"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary>The template can accept and expose property values. Used with an <see cref="T:System.Web.UI.IBindableTemplate"></see>.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary>Provides a generic collection that supports data binding.</summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.BindingList`1"></see> class using default values.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.BindingList`1"></see> class with the specified list.</summary>
      <param name="list">An <see cref="T:System.Collections.Generic.IList`1"></see> of items to be contained in the <see cref="T:System.ComponentModel.BindingList`1"></see>.</param>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary>Occurs before an item is added to the list.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary>Adds a new item to the collection.</summary>
      <returns>The item added to the list.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Forms.BindingSource.AllowNew"></see> property is set to false.   -or-   A public default constructor could not be found for the current item type.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary>Adds a new item to the end of the collection.</summary>
      <returns>The item that was added to the collection.</returns>
      <exception cref="T:System.InvalidCastException">The new item is not the same type as the objects contained in the <see cref="T:System.ComponentModel.BindingList`1"></see>.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary>Gets or sets a value indicating whether items in the list can be edited.</summary>
      <returns>true if list items can be edited; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary>Gets or sets a value indicating whether you can add items to the list using the <see cref="M:System.ComponentModel.BindingList`1.AddNew"></see> method.</summary>
      <returns>true if you can add items to the list with the <see cref="M:System.ComponentModel.BindingList`1.AddNew"></see> method; otherwise, false. The default depends on the underlying type contained in the list.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary>Gets or sets a value indicating whether you can remove items from the collection.</summary>
      <returns>true if you can remove items from the list with the <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)"></see> method otherwise, false. The default is true.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>Sorts the items if overridden in a derived class; otherwise, throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <param name="prop">A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that specifies the property to sort on.</param>
      <param name="direction">One of the <see cref="T:System.ComponentModel.ListSortDirection"></see> values.</param>
      <exception cref="T:System.NotSupportedException">Method is not overridden in a derived class.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary>Discards a pending new item.</summary>
      <param name="itemIndex">The index of the of the new item to be added</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary>Removes all elements from the collection.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary>Commits a pending new item to the collection.</summary>
      <param name="itemIndex">The index of the new item to be added.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Searches for the index of the item that has the specified property descriptor with the specified value, if searching is implemented in a derived class; otherwise, a <see cref="T:System.NotSupportedException"></see>.</summary>
      <param name="prop">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to search for.</param>
      <param name="key">The value of property to match.</param>
      <returns>The zero-based index of the item that matches the property descriptor and contains the specified value.</returns>
      <exception cref="T:System.NotSupportedException"><see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)"></see> is not overridden in a derived class.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary>Inserts the specified item in the list at the specified index.</summary>
      <param name="index">The zero-based index where the item is to be inserted.</param>
      <param name="item">The item to insert in the list.</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary>Gets a value indicating whether the list is sorted.</summary>
      <returns>true if the list is sorted; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary>Occurs when the list or an item in the list changes.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.BindingList`1.AddingNew"></see> event.</summary>
      <param name="e">An <see cref="T:System.ComponentModel.AddingNewEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.BindingList`1.ListChanged"></see> event.</summary>
      <param name="e">A <see cref="T:System.ComponentModel.ListChangedEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary>Gets or sets a value indicating whether adding or removing items within the list raises <see cref="E:System.ComponentModel.BindingList`1.ListChanged"></see> events.</summary>
      <returns>true if adding or removing items raises <see cref="E:System.ComponentModel.BindingList`1.ListChanged"></see> events; otherwise, false. The default is true.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary>Removes the item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.NotSupportedException">You are removing a newly added item and <see cref="P:System.ComponentModel.IBindingList.AllowRemove"></see> is set to false.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary>Removes any sort applied with <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)"></see> if sorting is implemented in a derived class; otherwise, raises <see cref="T:System.NotSupportedException"></see>.</summary>
      <exception cref="T:System.NotSupportedException">Method is not overridden in a derived class.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary>Raises a <see cref="E:System.ComponentModel.BindingList`1.ListChanged"></see> event of type <see cref="F:System.ComponentModel.ListChangedType.Reset"></see>.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary>Raises a <see cref="E:System.ComponentModel.BindingList`1.ListChanged"></see> event of type <see cref="F:System.ComponentModel.ListChangedType.ItemChanged"></see> for the item at the specified position.</summary>
      <param name="position">A zero-based index of the item to be reset.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary>Replaces the item at the specified index with the specified item.</summary>
      <param name="index">The zero-based index of the item to replace.</param>
      <param name="item">The new value for the item at the specified index. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"></see>.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary>Gets the direction the list is sorted.</summary>
      <returns>One of the <see cref="T:System.ComponentModel.ListSortDirection"></see> values. The default is <see cref="F:System.ComponentModel.ListSortDirection.Ascending"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary>Gets the property descriptor that is used for sorting the list if sorting is implemented in a derived class; otherwise, returns null.</summary>
      <returns>The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> used for sorting the list.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary>Gets a value indicating whether <see cref="E:System.ComponentModel.BindingList`1.ListChanged"></see> events are enabled.</summary>
      <returns>true if <see cref="E:System.ComponentModel.BindingList`1.ListChanged"></see> events are supported; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary>Gets a value indicating whether the list supports searching.</summary>
      <returns>true if the list supports searching; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary>Gets a value indicating whether the list supports sorting.</summary>
      <returns>true if the list supports sorting; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>For a description of this member, see <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)"></see>.</summary>
      <param name="prop">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to add as a search criteria.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary>Adds a new item to the list. For more information, see <see cref="M:System.ComponentModel.IBindingList.AddNew"></see>.</summary>
      <returns>The item added to the list.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary>Gets a value indicating whether items in the list can be edited.</summary>
      <returns>true if list items can be edited; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary>Gets a value indicating whether new items can be added to the list using the <see cref="M:System.ComponentModel.BindingList`1.AddNew"></see> method.</summary>
      <returns>true if you can add items to the list with the <see cref="M:System.ComponentModel.BindingList`1.AddNew"></see> method; otherwise, false. The default depends on the underlying type contained in the list.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary>Gets a value indicating whether items can be removed from the list.</summary>
      <returns>true if you can remove items from the list with the <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)"></see> method; otherwise, false. The default is true.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>Sorts the list based on a <see cref="T:System.ComponentModel.PropertyDescriptor"></see> and a <see cref="T:System.ComponentModel.ListSortDirection"></see>. For a complete description of this member, see <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)"></see>.</summary>
      <param name="prop">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to sort by.</param>
      <param name="direction">One of the <see cref="T:System.ComponentModel.ListSortDirection"></see> values.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)"></see>.</summary>
      <param name="prop">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to search on.</param>
      <param name="key">The value of the property parameter to search for.</param>
      <returns>The index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor"></see> .</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary>For a description of this member, see <see cref="P:System.ComponentModel.IBindingList.IsSorted"></see>.</summary>
      <returns>true if <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)"></see> has been called and <see cref="M:System.ComponentModel.IBindingList.RemoveSort"></see> has not been called; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>For a description of this member, see <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)"></see>.</summary>
      <param name="prop">A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to remove from the indexes used for searching.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary>For a description of this member, see <see cref="M:System.ComponentModel.IBindingList.RemoveSort"></see></summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary>For a description of this member, see <see cref="P:System.ComponentModel.IBindingList.SortDirection"></see>.</summary>
      <returns>One of the <see cref="T:System.ComponentModel.ListSortDirection"></see> values.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary>For a description of this member, see <see cref="P:System.ComponentModel.IBindingList.SortProperty"></see>.</summary>
      <returns>The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that is being used for sorting.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>For a description of this member, see <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification"></see>.</summary>
      <returns>true if a <see cref="E:System.ComponentModel.IBindingList.ListChanged"></see> event is raised when the list changes or when an item changes; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>For a description of this member, see <see cref="P:System.ComponentModel.IBindingList.SupportsSearching"></see>.</summary>
      <returns>true if the list supports searching using the <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)"></see> method; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>For a description of this member, see <see cref="P:System.ComponentModel.IBindingList.SupportsSorting"></see>.</summary>
      <returns>true if the list supports sorting; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary>Gets a value indicating whether item property value changes raise <see cref="E:System.ComponentModel.BindingList`1.ListChanged"></see> events of type <see cref="F:System.ComponentModel.ListChangedType.ItemChanged"></see>. This member cannot be overridden in a derived class.</summary>
      <returns>true if the list type implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"></see>, otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary>Provides a type converter to convert <see cref="T:System.Boolean"></see> objects to and from various other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.BooleanConverter"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value indicating whether this converter can convert an object in the given source type to a Boolean object using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from.</param>
      <returns>true if this object can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given value object to a Boolean object.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see> that specifies the culture to which to convert.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a valid value for the target type.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a collection of standard values for the Boolean data type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> that holds a standard set of valid values.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a value indicating whether the list of standard values returned from the <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"></see> method is an exclusive list.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true because the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> returned from <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"></see> is an exhaustive list of possible values. This method never returns false.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a value indicating whether this object supports a standard set of values that can be picked from a list.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true because <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"></see> can be called to find a common set of values the object supports. This method never returns false.</returns>
    </member>
    <member name="T:System.ComponentModel.BrowsableAttribute">
      <summary>Specifies whether a property or event should be displayed in a Properties window.</summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.BrowsableAttribute"></see> class.</summary>
      <param name="browsable">true if a property or event can be modified at design time; otherwise, false. The default is true.</param>
    </member>
    <member name="P:System.ComponentModel.BrowsableAttribute.Browsable">
      <summary>Gets a value indicating whether an object is browsable.</summary>
      <returns>true if the object is browsable; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Default">
      <summary>Specifies the default value for the <see cref="T:System.ComponentModel.BrowsableAttribute"></see>, which is <see cref="F:System.ComponentModel.BrowsableAttribute.Yes"></see>. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">Another object to compare to.</param>
      <returns>true if <paramref name="obj">obj</paramref> is equal to this instance; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.IsDefaultAttribute">
      <summary>Determines if this attribute is the default.</summary>
      <returns>true if the attribute is the default value for this attribute class; otherwise, false.</returns>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.No">
      <summary>Specifies that a property or event cannot be modified at design time. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Yes">
      <summary>Specifies that a property or event can be modified at design time. This static field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary>Provides a type converter to convert 8-bit unsigned integer objects to and from various other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ByteConverter"></see> class.</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventArgs">
      <summary>Provides data for a cancelable event.</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CancelEventArgs"></see> class with the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"></see> property set to false.</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CancelEventArgs"></see> class with the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"></see> property set to the given value.</summary>
      <param name="cancel">true to cancel the event; otherwise, false.</param>
    </member>
    <member name="P:System.ComponentModel.CancelEventArgs.Cancel">
      <summary>Gets or sets a value indicating whether the event should be canceled.</summary>
      <returns>true if the event should be canceled; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary>Represents the method that handles a cancelable event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.CategoryAttribute">
      <summary>Specifies the name of the category in which to group the property or event when displayed in a <see cref="T:System.Windows.Forms.PropertyGrid"></see> control set to Categorized mode.</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CategoryAttribute"></see> class using the category name Default.</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CategoryAttribute"></see> class using the specified category name.</summary>
      <param name="category">The name of the category.</param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Action">
      <summary>Gets a <see cref="T:System.ComponentModel.CategoryAttribute"></see> representing the Action category.</summary>
      <returns>A <see cref="T:System.ComponentModel.CategoryAttribute"></see> for the action category.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Appearance">
      <summary>Gets a <see cref="T:System.ComponentModel.CategoryAttribute"></see> representing the Appearance category.</summary>
      <returns>A <see cref="T:System.ComponentModel.CategoryAttribute"></see> for the appearance category.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Asynchronous">
      <summary>Gets a <see cref="T:System.ComponentModel.CategoryAttribute"></see> representing the Asynchronous category.</summary>
      <returns>A <see cref="T:System.ComponentModel.CategoryAttribute"></see> for the asynchronous category.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Behavior">
      <summary>Gets a <see cref="T:System.ComponentModel.CategoryAttribute"></see> representing the Behavior category.</summary>
      <returns>A <see cref="T:System.ComponentModel.CategoryAttribute"></see> for the behavior category.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Category">
      <summary>Gets the name of the category for the property or event that this attribute is applied to.</summary>
      <returns>The name of the category for the property or event that this attribute is applied to.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Data">
      <summary>Gets a <see cref="T:System.ComponentModel.CategoryAttribute"></see> representing the Data category.</summary>
      <returns>A <see cref="T:System.ComponentModel.CategoryAttribute"></see> for the data category.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Default">
      <summary>Gets a <see cref="T:System.ComponentModel.CategoryAttribute"></see> representing the Default category.</summary>
      <returns>A <see cref="T:System.ComponentModel.CategoryAttribute"></see> for the default category.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Design">
      <summary>Gets a <see cref="T:System.ComponentModel.CategoryAttribute"></see> representing the Design category.</summary>
      <returns>A <see cref="T:System.ComponentModel.CategoryAttribute"></see> for the design category.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.DragDrop">
      <summary>Gets a <see cref="T:System.ComponentModel.CategoryAttribute"></see> representing the DragDrop category.</summary>
      <returns>A <see cref="T:System.ComponentModel.CategoryAttribute"></see> for the drag-and-drop category.</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.Equals(System.Object)">
      <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.CategoryAttribute"></see>..</summary>
      <param name="obj">The object to test the value equality of.</param>
      <returns>true if the value of the given object is equal to that of the current; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Focus">
      <summary>Gets a <see cref="T:System.ComponentModel.CategoryAttribute"></see> representing the Focus category.</summary>
      <returns>A <see cref="T:System.ComponentModel.CategoryAttribute"></see> for the focus category.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Format">
      <summary>Gets a <see cref="T:System.ComponentModel.CategoryAttribute"></see> representing the Format category.</summary>
      <returns>A <see cref="T:System.ComponentModel.CategoryAttribute"></see> for the format category.</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetHashCode">
      <summary>Returns the hash code for this attribute.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)">
      <summary>Looks up the localized name of the specified category.</summary>
      <param name="value">The identifer for the category to look up.</param>
      <returns>The localized name of the category, or null if a localized name does not exist.</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.IsDefaultAttribute">
      <summary>Determines if this attribute is the default.</summary>
      <returns>true if the attribute is the default value for this attribute class; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Key">
      <summary>Gets a <see cref="T:System.ComponentModel.CategoryAttribute"></see> representing the Key category.</summary>
      <returns>A <see cref="T:System.ComponentModel.CategoryAttribute"></see> for the key category.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Layout">
      <summary>Gets a <see cref="T:System.ComponentModel.CategoryAttribute"></see> representing the Layout category.</summary>
      <returns>A <see cref="T:System.ComponentModel.CategoryAttribute"></see> for the layout category.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Mouse">
      <summary>Gets a <see cref="T:System.ComponentModel.CategoryAttribute"></see> representing the Mouse category.</summary>
      <returns>A <see cref="T:System.ComponentModel.CategoryAttribute"></see> for the mouse category.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.WindowStyle">
      <summary>Gets a <see cref="T:System.ComponentModel.CategoryAttribute"></see> representing the WindowStyle category.</summary>
      <returns>A <see cref="T:System.ComponentModel.CategoryAttribute"></see> for the window style category.</returns>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary>Provides a type converter to convert Unicode character objects to and from various other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CharConverter"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value indicating whether this converter can convert an object in the given source type to a Unicode character object using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to a Unicode character object.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">The culture into which value will be converted.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a valid value for the target type.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to a Unicode character object using the arguments.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">The culture into which value will be converted.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value to.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary>Specifies how the collection is changed.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary>Specifies that an element was added to the collection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary>Specifies that the entire collection has changed. This is caused by using methods that manipulate the entire collection, such as <see cref="M:System.Collections.CollectionBase.Clear"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary>Specifies that an element was removed from the collection.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary>Provides data for the <see cref="E:System.Data.DataColumnCollection.CollectionChanged"></see> event.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CollectionChangeEventArgs"></see> class.</summary>
      <param name="action">One of the <see cref="T:System.ComponentModel.CollectionChangeAction"></see> values that specifies how the collection changed.</param>
      <param name="element">An <see cref="T:System.Object"></see> that specifies the instance of the collection where the change occurred.</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary>Gets an action that specifies how the collection changed.</summary>
      <returns>One of the <see cref="T:System.ComponentModel.CollectionChangeAction"></see> values.</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary>Gets the instance of the collection with the change.</summary>
      <returns>An <see cref="T:System.Object"></see> that represents the instance of the collection with the change, or null if you refresh the collection.</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Data.DataColumnCollection.CollectionChanged"></see> event raised when adding elements to or removing elements from a collection.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.CollectionChangeEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary>Provides a type converter to convert collection objects to and from various other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CollectionConverter"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified destination type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">The culture to which value will be converted.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert. This parameter must inherit from <see cref="T:System.Collections.ICollection"></see>.</param>
      <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value to.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Gets a collection of properties for the type of array specified by the value parameter using the specified context and attributes.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="value">An <see cref="T:System.Object"></see> that specifies the type of array to get the properties for.</param>
      <param name="attributes">An array of type <see cref="T:System.Attribute"></see> that will be used as a filter.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties that are exposed for this data type, or null if there are no properties. This method always returns null.</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a value indicating whether this object supports properties.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>false because <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])"></see> should not be called to find the properties of this object. This method never returns true.</returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary>Specifies the data source and data member properties for a component that supports complex data binding. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"></see> class using no parameters.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"></see> class using the specified data source.</summary>
      <param name="dataSource">The name of the property to be used as the data source.</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"></see> class using the specified data source and data member.</summary>
      <param name="dataSource">The name of the property to be used as the data source.</param>
      <param name="dataMember">The name of the property to be used as the source for data.</param>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary>Gets the name of the data member property for the component to which the <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"></see> is bound.</summary>
      <returns>The name of the data member property for the component to which <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"></see> is bound</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary>Gets the name of the data source property for the component to which the <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"></see> is bound.</summary>
      <returns>The name of the data source property for the component to which <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"></see> is bound.</returns>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary>Represents the default value for the <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"></see> class.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"></see> instance.</summary>
      <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"></see> instance</param>
      <returns>true if the object is equal to the current instance; otherwise, false, indicating they are not equal.</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="T:System.ComponentModel.Component">
      <summary>Provides the base implementation for the <see cref="T:System.ComponentModel.IComponent"></see> interface and enables object sharing between applications.</summary>
    </member>
    <member name="M:System.ComponentModel.Component.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Component"></see> class.</summary>
    </member>
    <member name="P:System.ComponentModel.Component.CanRaiseEvents">
      <summary>Gets a value indicating whether the component can raise an event.</summary>
      <returns>true if the component can raise events; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ComponentModel.Component.Container">
      <summary>Gets the <see cref="T:System.ComponentModel.IContainer"></see> that contains the <see cref="T:System.ComponentModel.Component"></see>.</summary>
      <returns>The <see cref="T:System.ComponentModel.IContainer"></see> that contains the <see cref="T:System.ComponentModel.Component"></see>, if any, or null if the <see cref="T:System.ComponentModel.Component"></see> is not encapsulated in an <see cref="T:System.ComponentModel.IContainer"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.Component.DesignMode">
      <summary>Gets a value that indicates whether the <see cref="T:System.ComponentModel.Component"></see> is currently in design mode.</summary>
      <returns>true if the <see cref="T:System.ComponentModel.Component"></see> is in design mode; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.Component.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.ComponentModel.Component"></see>.</summary>
    </member>
    <member name="M:System.ComponentModel.Component.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Component"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="E:System.ComponentModel.Component.Disposed">
      <summary>Occurs when the component is disposed by a call to the <see cref="M:System.ComponentModel.Component.Dispose"></see> method.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.Component.Events">
      <summary>Gets the list of event handlers that are attached to this <see cref="T:System.ComponentModel.Component"></see>.</summary>
      <returns>An <see cref="T:System.ComponentModel.EventHandlerList"></see> that provides the delegates for this component.</returns>
    </member>
    <member name="M:System.ComponentModel.Component.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the <see cref="T:System.ComponentModel.Component"></see> is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.ComponentModel.Component.GetService(System.Type)">
      <summary>Returns an object that represents a service provided by the <see cref="T:System.ComponentModel.Component"></see> or by its <see cref="T:System.ComponentModel.Container"></see>.</summary>
      <param name="service">A service provided by the <see cref="T:System.ComponentModel.Component"></see>.</param>
      <returns>An <see cref="T:System.Object"></see> that represents a service provided by the <see cref="T:System.ComponentModel.Component"></see>, or null if the <see cref="T:System.ComponentModel.Component"></see> does not provide the specified service.</returns>
    </member>
    <member name="P:System.ComponentModel.Component.Site">
      <summary>Gets or sets the <see cref="T:System.ComponentModel.ISite"></see> of the <see cref="T:System.ComponentModel.Component"></see>.</summary>
      <returns>The <see cref="T:System.ComponentModel.ISite"></see> associated with the <see cref="T:System.ComponentModel.Component"></see>, or null if the <see cref="T:System.ComponentModel.Component"></see> is not encapsulated in an <see cref="T:System.ComponentModel.IContainer"></see>, the <see cref="T:System.ComponentModel.Component"></see> does not have an <see cref="T:System.ComponentModel.ISite"></see> associated with it, or the <see cref="T:System.ComponentModel.Component"></see> is removed from its <see cref="T:System.ComponentModel.IContainer"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.Component.ToString">
      <summary>Returns a <see cref="T:System.String"></see> containing the name of the <see cref="T:System.ComponentModel.Component"></see>, if any. This method should not be overridden.</summary>
      <returns>A <see cref="T:System.String"></see> containing the name of the <see cref="T:System.ComponentModel.Component"></see>, if any, or null if the <see cref="T:System.ComponentModel.Component"></see> is unnamed.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentCollection">
      <summary>Provides a read-only container for a collection of <see cref="T:System.ComponentModel.IComponent"></see> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentCollection.#ctor(System.ComponentModel.IComponent[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ComponentCollection"></see> class using the specified array of components.</summary>
      <param name="components">An array of <see cref="T:System.ComponentModel.IComponent"></see> objects to initialize the collection with.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentCollection.CopyTo(System.ComponentModel.IComponent[],System.Int32)">
      <summary>Copies the entire collection to an array, starting writing at the specified array index.</summary>
      <param name="array">An <see cref="T:System.ComponentModel.IComponent"></see> array to copy the objects in the collection to.</param>
      <param name="index">The index of the array at which copying to should begin.</param>
    </member>
    <member name="P:System.ComponentModel.ComponentCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.ComponentModel.Component"></see> in the collection at the specified collection index.</summary>
      <param name="index">The collection index of the <see cref="T:System.ComponentModel.Component"></see> to get.</param>
      <returns>The <see cref="T:System.ComponentModel.IComponent"></see> at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If the specified index is not within the index range of the collection.</exception>
    </member>
    <member name="P:System.ComponentModel.ComponentCollection.Item(System.String)">
      <summary>Gets any component in the collection matching the specified name.</summary>
      <param name="name">The name of the <see cref="T:System.ComponentModel.IComponent"></see> to get.</param>
      <returns>A component with a name matching the name specified by the <paramref name="name">name</paramref> parameter, or null if the named component cannot be found in the collection.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary>Provides a type converter to convert components to and from various other representations.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ComponentConverter"></see> class.</summary>
      <param name="type">A <see cref="T:System.Type"></see> that represents the type to associate with this component converter.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Gets a collection of properties for the type of component specified by the value parameter.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="value">An <see cref="T:System.Object"></see> that specifies the type of component to get the properties for.</param>
      <param name="attributes">An array of type <see cref="T:System.Attribute"></see> that will be used as a filter.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties that are exposed for the component, or null if there are no properties.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a value indicating whether this object supports properties using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <returns>true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"></see> should be called to find the properties of this object. This method never returns false.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary>Provides the base class for a custom component editor.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ComponentEditor"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary>Edits the component and returns a value indicating whether the component was modified.</summary>
      <param name="component">The component to be edited.</param>
      <returns>true if the component was modified; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Edits the component and returns a value indicating whether the component was modified based upon a given context.</summary>
      <param name="context">An optional context object that can be used to obtain further information about the edit.</param>
      <param name="component">The component to be edited.</param>
      <returns>true if the component was modified; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary>Provides simple functionality for enumerating resources for a component or object. The <see cref="T:System.ComponentModel.ComponentResourceManager"></see> class is a <see cref="T:System.Resources.ResourceManager"></see>.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ComponentResourceManager"></see> class with default values.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary>Creates a <see cref="T:System.ComponentModel.ComponentResourceManager"></see> that looks up resources in satellite assemblies based on information from the specified <see cref="T:System.Type"></see>.</summary>
      <param name="t">A <see cref="T:System.Type"></see> from which the <see cref="T:System.ComponentModel.ComponentResourceManager"></see> derives all information for finding resource files.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary>Applies a resource's value to the corresponding property of the object.</summary>
      <param name="value">An <see cref="T:System.Object"></see> that contains the property value to be applied.</param>
      <param name="objectName">A <see cref="T:System.String"></see> that contains the name of the object to look up in the resources.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> or <paramref name="objectName">objectName</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>Applies a resource's value to the corresponding property of the object.</summary>
      <param name="value">An <see cref="T:System.Object"></see> that contains the property value to be applied.</param>
      <param name="objectName">A <see cref="T:System.String"></see> that contains the name of the object to look up in the resources.</param>
      <param name="culture">The culture for which to apply resources.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> or <paramref name="objectName">objectName</paramref> is null.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary>Provides a base class for getting and setting option values for a designer.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerOptionService"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary>Creates a new <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"></see> with the given name and adds it to the given parent.</summary>
      <param name="parent">The parent designer option collection. All collections have a parent except the root object collection.</param>
      <param name="name">The name of this collection.</param>
      <param name="value">The object providing properties for this collection. Can be null if the collection should not provide any properties.</param>
      <returns>A new <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"></see> with the given name.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="parent">parent</paramref> or <paramref name="name">name</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="name">name</paramref> is an empty string.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary>Gets the options collection for this service.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"></see> populated with available designer options.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>Populates a <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"></see>.</summary>
      <param name="options">The collection to populate.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary>Shows the options dialog box for the given object.</summary>
      <param name="options">The options collection containing the object to be invoked.</param>
      <param name="optionObject">The actual options object.</param>
      <returns>true if the dialog box is shown; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary>Gets the value of an option defined in this package.</summary>
      <param name="pageName">The page to which the option is bound.</param>
      <param name="valueName">The name of the option value.</param>
      <returns>The value of the option named <paramref name="valueName">valueName</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="pageName">pageName</paramref> or <paramref name="valueName">valueName</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary>Sets the value of an option defined in this package.</summary>
      <param name="pageName">The page to which the option is bound</param>
      <param name="valueName">The name of the option value.</param>
      <param name="value">The value of the option.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="pageName">pageName</paramref> or <paramref name="valueName">valueName</paramref> is null.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary>Provides a way to group a series of design-time actions to improve performance and enable most types of changes to be undone.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerTransaction"></see> class with no description.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerTransaction"></see> class using the specified transaction description.</summary>
      <param name="description">A description for this transaction.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary>Cancels the transaction and attempts to roll back the changes made by the events of the transaction.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary>Gets a value indicating whether the transaction was canceled.</summary>
      <returns>true if the transaction was canceled; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary>Commits this transaction.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary>Gets a value indicating whether the transaction was committed.</summary>
      <returns>true if the transaction was committed; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary>Gets a description for the transaction.</summary>
      <returns>A description for the transaction.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Design.DesignerTransaction"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary>Releases the resources associated with this object. This override commits this transaction if it was not already committed.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary>Raises the Cancel event.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary>Performs the actual work of committing a transaction.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary>Releases all resources used by the <see cref="T:System.ComponentModel.Design.DesignerTransaction"></see>.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed"></see> and <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing"></see> events.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs"></see> class, using the specified value that indicates whether the designer called <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit"></see> on the transaction.</summary>
      <param name="commit">A value indicating whether the transaction was committed.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs"></see> class.</summary>
      <param name="commit">A value indicating whether the transaction was committed.</param>
      <param name="lastTransaction">true if this is the last transaction to close; otherwise, false.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary>Gets a value indicating whether this is the last transaction to close.</summary>
      <returns>true, if this is the last transaction to close; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary>Indicates whether the designer called <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit"></see> on the transaction.</summary>
      <returns>true if the designer called <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit"></see> on the transaction; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed"></see> and <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing"></see> events of a designer.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary>Represents a verb that can be invoked from a designer.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> class.</summary>
      <param name="text">The text of the menu command that is shown to the user.</param>
      <param name="handler">The event handler that performs the actions of the verb.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> class.</summary>
      <param name="text">The text of the menu command that is shown to the user.</param>
      <param name="handler">The event handler that performs the actions of the verb.</param>
      <param name="startCommandID">The starting command ID for this verb. By default, the designer architecture sets aside a range of command IDs for verbs. You can override this by providing a custom command ID.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary>Gets or sets the description of the menu item for the verb.</summary>
      <returns>A string describing the menu item.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary>Gets the text description for the verb command on the menu.</summary>
      <returns>A description for the verb command.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary>Overrides <see cref="M:System.Object.ToString"></see>.</summary>
      <returns>The verb's text, or an empty string (&quot;&quot;) if the text field is empty.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary>Represents a collection of <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerVerbCollection"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerVerbCollection"></see> class using the specified array of <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> objects.</summary>
      <param name="value">A <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> array that indicates the verbs to contain within the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary>Adds the specified <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> to the collection.</summary>
      <param name="value">The <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> to add to the collection.</param>
      <returns>The index in the collection at which the verb was added.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary>Adds the specified set of designer verbs to the collection.</summary>
      <param name="value">An array of <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary>Adds the specified collection of designer verbs to the collection.</summary>
      <param name="value">A <see cref="T:System.ComponentModel.Design.DesignerVerbCollection"></see> to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="value">value</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary>Gets a value indicating whether the specified <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> exists in the collection.</summary>
      <param name="value">The <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> to search for in the collection.</param>
      <returns>true if the specified object exists in the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary>Copies the collection members to the specified <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> array beginning at the specified destination index.</summary>
      <param name="array">The array to copy collection members to.</param>
      <param name="index">The destination index to begin copying to.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary>Gets the index of the specified <see cref="T:System.ComponentModel.Design.DesignerVerb"></see>.</summary>
      <param name="value">The <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> whose index to get in the collection.</param>
      <returns>The index of the specified object if it is found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary>Inserts the specified <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> at the specified index.</summary>
      <param name="index">The index in the collection at which to insert the verb.</param>
      <param name="value">The <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> to insert in the collection.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> at the specified index.</summary>
      <param name="index">The index at which to get or set the <see cref="T:System.ComponentModel.Design.DesignerVerb"></see>.</param>
      <returns>A <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> at each valid index in the collection.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>Raises the Clear event.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>Raises the Insert event.</summary>
      <param name="index">The index at which to insert an item.</param>
      <param name="value">The object to insert.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>Raises the Remove event.</summary>
      <param name="index">The index at which to remove the item.</param>
      <param name="value">The object to remove.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>Raises the Set event.</summary>
      <param name="index">The index at which to set the item.</param>
      <param name="oldValue">The old object.</param>
      <param name="newValue">The new object.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary>Raises the Validate event.</summary>
      <param name="value">The object to validate.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary>Removes the specified <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> from the collection.</summary>
      <param name="value">The <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> to remove from the collection.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary>Represents a design-time license context that can support a license provider at design time.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>Gets a saved license key.</summary>
      <param name="type">The type of the license key.</param>
      <param name="resourceAssembly">The assembly to get the key from.</param>
      <returns>The saved license key that matches the specified type.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>Sets a saved license key.</summary>
      <param name="type">The type of the license key.</param>
      <param name="key">The license key.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary>Gets the license usage mode.</summary>
      <returns>A <see cref="T:System.ComponentModel.LicenseUsageMode"></see> indicating the licensing mode for the context.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary>Provides support for design-time license context serialization.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary>Serializes the licenses within the specified design-time license context using the specified key and output stream.</summary>
      <param name="o">The stream to output to.</param>
      <param name="cryptoKey">The key to use for encryption.</param>
      <param name="context">A <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext"></see> indicating the license context.</param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary>Defines identifiers that indicate information about the context in which a request for Help information originated.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary>A general context.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary>A selection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary>A tool window selection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary>A window.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary>Specifies the context keyword for a class or member. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute"></see> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute"></see> class.</summary>
      <param name="keyword">The Help keyword value.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="keyword">keyword</paramref> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute"></see> class from the given type.</summary>
      <param name="t">The type from which the Help keyword will be taken.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="t">t</paramref> is null.</exception>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary>Represents the default value for <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute"></see>. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute"></see> instances are equal.</summary>
      <param name="obj">The <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute"></see> to compare with the current <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute"></see>.</param>
      <returns>true if the specified <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute"></see> is equal to the current <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary>Gets the Help keyword supplied by this attribute.</summary>
      <returns>The Help keyword supplied by this attribute.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary>Determines whether the Help keyword is null.</summary>
      <returns>true if the Help keyword is null; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary>Defines identifiers that indicate the type of a Help keyword.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary>A keyword that F1 was pressed to request help about.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary>A filter keyword.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary>A general keyword.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary>Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged"></see> or <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging"></see> event.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary>Occurs when a component has been added.</summary>
      <returns></returns>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary>Occurs when a component is in the process of being added.</summary>
      <returns></returns>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary>Occurs when a component has been changed.</summary>
      <returns></returns>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary>Occurs when a component is in the process of being changed.</summary>
      <returns></returns>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary>Occurs when a component has been removed.</summary>
      <returns></returns>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary>Occurs when a component is in the process of being removed.</summary>
      <returns></returns>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary>Occurs when a component is renamed.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>Announces to the component change service that a particular component has changed.</summary>
      <param name="component">The component that has changed.</param>
      <param name="member">The member that has changed. This is null if this change is not related to a single member.</param>
      <param name="oldValue">The old value of the member. This is valid only if the member is not null.</param>
      <param name="newValue">The new value of the member. This is valid only if the member is not null.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Announces to the component change service that a particular component is changing.</summary>
      <param name="component">The component that is about to change.</param>
      <param name="member">The member that is changing. This is null if this change is not related to a single member.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary>Enables enumeration of components at design time.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary>Gets the list of available component types.</summary>
      <param name="designerHost">The designer host providing design-time services. Can be null.</param>
      <param name="baseType">The base type specifying the components to retrieve. Can be null.</param>
      <returns>The list of available component types.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary>Provides a set of recommended default values during component creation.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary>Restores an instance of a component to its default state.</summary>
      <param name="defaultValues">A dictionary of default property values, which are name/value pairs, with which to reset the component's state.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>Initializes a new component using a set of recommended values.</summary>
      <param name="defaultValues">A dictionary of default property values, which are name/value pairs, with which to initialize the component's state.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary>Provides the basic framework for building a custom designer.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary>Gets the base component that this designer is designing.</summary>
      <returns>An <see cref="T:System.ComponentModel.IComponent"></see> indicating the base component that this designer is designing.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary>Performs the default action for this designer.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>Initializes the designer with the specified component.</summary>
      <param name="component">The component to associate with this designer.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary>Gets a collection of the design-time verbs supported by the designer.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.DesignerVerbCollection"></see> that contains the verbs supported by the designer, or null if the component has no verbs.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary>Provides event notifications when root designers are added and removed, when a selected component changes, and when the current root designer changes.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary>Gets the root designer for the currently active document.</summary>
      <returns>The currently active document, or null if there is no active document.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary>Occurs when the current root designer changes.</summary>
      <returns></returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary>Occurs when a root designer is created.</summary>
      <returns></returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary>Occurs when a root designer for a document is disposed.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary>Gets a collection of root designers for design documents that are currently active in the development environment.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.DesignerCollection"></see> containing the root designers that have been created and not yet disposed.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary>Occurs when the current design-view selection changes.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary>Provides an interface that enables a designer to access and filter the dictionaries of a <see cref="T:System.ComponentModel.TypeDescriptor"></see> that stores the property, attribute, and event descriptors that a component designer can expose to the design-time environment.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, allows a designer to change or remove items from the set of attributes that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</summary>
      <param name="attributes">The <see cref="T:System.Attribute"></see> objects for the class of the component. The keys in the dictionary of attributes are the <see cref="P:System.Attribute.TypeId"></see> values of the attributes.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, allows a designer to change or remove items from the set of events that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</summary>
      <param name="events">The <see cref="T:System.ComponentModel.EventDescriptor"></see> objects that represent the events of the class of the component. The keys in the dictionary of events are event names.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, allows a designer to change or remove items from the set of properties that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</summary>
      <param name="properties">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, allows a designer to add items to the set of attributes that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</summary>
      <param name="attributes">The <see cref="T:System.Attribute"></see> objects for the class of the component. The keys in the dictionary of attributes are the <see cref="P:System.Attribute.TypeId"></see> values of the attributes.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, allows a designer to add items to the set of events that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</summary>
      <param name="events">The <see cref="T:System.ComponentModel.EventDescriptor"></see> objects that represent the events of the class of the component. The keys in the dictionary of events are event names.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, allows a designer to add items to the set of properties that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</summary>
      <param name="properties">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary>Provides an interface for managing designer transactions and components.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary>Activates the designer that this host is hosting.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary>Occurs when this designer is activated.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary>Gets the container for this designer host.</summary>
      <returns>The <see cref="T:System.ComponentModel.IContainer"></see> for this host.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary>Creates a component of the specified type and adds it to the design document.</summary>
      <param name="componentClass">The type of the component to create.</param>
      <returns>The newly created component.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary>Creates a component of the specified type and name, and adds it to the design document.</summary>
      <param name="componentClass">The type of the component to create.</param>
      <param name="name">The name for the component.</param>
      <returns>The newly created component.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary>Creates a <see cref="T:System.ComponentModel.Design.DesignerTransaction"></see> that can encapsulate event sequences to improve performance and enable undo and redo support functionality.</summary>
      <returns>A new instance of <see cref="T:System.ComponentModel.Design.DesignerTransaction"></see>. When you complete the steps in your transaction, you should call <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit"></see> on this object.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary>Creates a <see cref="T:System.ComponentModel.Design.DesignerTransaction"></see> that can encapsulate event sequences to improve performance and enable undo and redo support functionality, using the specified transaction description.</summary>
      <param name="description">A title or description for the newly created transaction.</param>
      <returns>A new <see cref="T:System.ComponentModel.Design.DesignerTransaction"></see>. When you have completed the steps in your transaction, you should call <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit"></see> on this object.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary>Occurs when this designer is deactivated.</summary>
      <returns></returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary>Destroys the specified component and removes it from the designer container.</summary>
      <param name="component">The component to destroy.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary>Gets the designer instance that contains the specified component.</summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent"></see> to retrieve the designer for.</param>
      <returns>An <see cref="T:System.ComponentModel.Design.IDesigner"></see>, or null if there is no designer for the specified component.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary>Gets an instance of the specified, fully qualified type name.</summary>
      <param name="typeName">The name of the type to load.</param>
      <returns>The type object for the specified type name, or null if the type cannot be found.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary>Gets a value indicating whether the designer host is currently in a transaction.</summary>
      <returns>true if a transaction is in progress; otherwise, false.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary>Occurs when this designer completes loading its document.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary>Gets a value indicating whether the designer host is currently loading the document.</summary>
      <returns>true if the designer host is currently loading the document; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary>Gets the instance of the base class used as the root component for the current design.</summary>
      <returns>The instance of the root component class.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary>Gets the fully qualified name of the class being designed.</summary>
      <returns>The fully qualified name of the base component class.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary>Adds an event handler for the <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed"></see> event.</summary>
      <returns></returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary>Adds an event handler for the <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing"></see> event.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary>Gets the description of the current transaction.</summary>
      <returns>A description of the current transaction.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary>Adds an event handler for the <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened"></see> event.</summary>
      <returns></returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary>Adds an event handler for the <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening"></see> event.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary>Specifies methods for the designer host to report on the state of transactions.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary>Gets a value indicating whether the designer host is closing a transaction.</summary>
      <returns>true if the designer is closing a transaction; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary>Provides access to the designer options located on the Tools menu under the Options command in the Visual Studio development environment.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary>Gets the value of the specified Windows Forms Designer option.</summary>
      <param name="pageName">The name of the page that defines the option.</param>
      <param name="valueName">The name of the option property.</param>
      <returns>The value of the specified option.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary>Sets the value of the specified Windows Forms Designer option.</summary>
      <param name="pageName">The name of the page that defines the option.</param>
      <param name="valueName">The name of the option property.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary>Provides a basic, component site-specific, key-value pair dictionary through a service that a designer can use to store user-defined data.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary>Gets the key corresponding to the specified value.</summary>
      <param name="value">The value to look up in the dictionary.</param>
      <returns>The associated key, or null if no key exists.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary>Gets the value corresponding to the specified key.</summary>
      <param name="key">The key to look up the value for.</param>
      <returns>The associated value, or null if no value exists.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary>Sets the specified key-value pair.</summary>
      <param name="key">An object to use as the key to associate the value with.</param>
      <param name="value">The value to store.</param>
    </member>
    <member name="T:System.Configuration.ApplicationScopedSettingAttribute">
      <summary>Specifies that an application settings property has a common value for all users of an application. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.ApplicationScopedSettingAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ApplicationScopedSettingAttribute"></see> class.</summary>
    </member>
    <member name="T:System.Configuration.ApplicationSettingsBase">
      <summary>Acts as a base class for deriving concrete wrapper classes to implement the application settings feature in Window Forms applications.</summary>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Configuration.ApplicationSettingsBase"></see> class to its default state.</summary>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent)">
      <summary>Initializes an instance of the <see cref="T:System.Configuration.ApplicationSettingsBase"></see> class using the supplied owner component.</summary>
      <param name="owner">The component that will act as the owner of the application settings object.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="owner">owner</paramref> is null.</exception>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Configuration.ApplicationSettingsBase"></see> class using the supplied settings key.</summary>
      <param name="settingsKey">A <see cref="T:System.String"></see> that uniquely identifies separate instances of the wrapper class.</param>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent,System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Configuration.ApplicationSettingsBase"></see> class using the supplied owner component and settings key.</summary>
      <param name="owner">The component that will act as the owner of the application settings object.</param>
      <param name="settingsKey">A <see cref="T:System.String"></see> that uniquely identifies separate instances of the wrapper class.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="owner">owner</paramref> is null.</exception>
    </member>
    <member name="P:System.Configuration.ApplicationSettingsBase.Context">
      <summary>Gets the application settings context associated with the settings group.</summary>
      <returns>A <see cref="T:System.Configuration.SettingsContext"></see> associated with the settings group.</returns>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.GetPreviousVersion(System.String)">
      <summary>Returns the value of the named settings property for the previous version of the same application.</summary>
      <param name="propertyName">A <see cref="T:System.String"></see> containing the name of the settings property whose value is to be returned.</param>
      <returns>An <see cref="T:System.Object"></see> containing the value of the specified <see cref="T:System.Configuration.SettingsProperty"></see> if found; otherwise, null.</returns>
      <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">The property does not exist. The property count is zero or the property cannot be found in the data store.</exception>
    </member>
    <member name="P:System.Configuration.ApplicationSettingsBase.Item(System.String)">
      <summary>Gets or sets the value of the specified application settings property.</summary>
      <param name="propertyName">A <see cref="T:System.String"></see> containing the name of the property to access.</param>
      <returns>If found, the value of the named settings property; otherwise, null.</returns>
      <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">There are no properties associated with the current wrapper or the specified property could not be found.</exception>
      <exception cref="T:System.Configuration.SettingsPropertyIsReadOnlyException">An attempt was made to set a read-only property.</exception>
      <exception cref="T:System.Configuration.SettingsPropertyWrongTypeException">The value supplied is of a type incompatible with the settings property, during a set operation.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration file could not be parsed.</exception>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Configuration.ApplicationSettingsBase.PropertyChanged"></see> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)">
      <summary>Raises the <see cref="E:System.Configuration.ApplicationSettingsBase.SettingChanging"></see> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Configuration.SettingChangingEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)">
      <summary>Raises the <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded"></see> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Configuration.SettingsLoadedEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)">
      <summary>Raises the <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsSaving"></see> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="P:System.Configuration.ApplicationSettingsBase.Properties">
      <summary>Gets the collection of settings properties in the wrapper.</summary>
      <returns>A <see cref="T:System.Configuration.SettingsPropertyCollection"></see> containing all the <see cref="T:System.Configuration.SettingsProperty"></see> objects used in the current wrapper.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The associated settings provider could not be found or its instantiation failed.</exception>
    </member>
    <member name="E:System.Configuration.ApplicationSettingsBase.PropertyChanged">
      <summary>Occurs after the value of an application settings property is changed.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Configuration.ApplicationSettingsBase.PropertyValues">
      <summary>Gets a collection of property values.</summary>
      <returns>A <see cref="T:System.Configuration.SettingsPropertyValueCollection"></see> of property values.</returns>
    </member>
    <member name="P:System.Configuration.ApplicationSettingsBase.Providers">
      <summary>Gets the collection of application settings providers used by the wrapper.</summary>
      <returns>A <see cref="T:System.Configuration.SettingsProviderCollection"></see> containing all the <see cref="T:System.Configuration.SettingsProvider"></see> objects used by the settings properties of the current settings wrapper.</returns>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.Reload">
      <summary>Refreshes the application settings property values from persistent storage.</summary>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.Reset">
      <summary>Restores the persisted application settings values to their corresponding default properties.</summary>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration file could not be parsed.</exception>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.Save">
      <summary>Stores the current values of the application settings properties.</summary>
    </member>
    <member name="E:System.Configuration.ApplicationSettingsBase.SettingChanging">
      <summary>Occurs before the value of an application settings property is changed.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Configuration.ApplicationSettingsBase.SettingsKey">
      <summary>Gets or sets the settings key for the application settings group.</summary>
      <returns>A <see cref="T:System.String"></see> containing the settings key for the current settings group.</returns>
    </member>
    <member name="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded">
      <summary>Occurs after the application settings are retrieved from storage.</summary>
      <returns></returns>
    </member>
    <member name="E:System.Configuration.ApplicationSettingsBase.SettingsSaving">
      <summary>Occurs before values are saved to the data store.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.Upgrade">
      <summary>Updates application settings to reflect a more recent installation of the application.</summary>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration file could not be parsed.</exception>
    </member>
    <member name="T:System.Configuration.ApplicationSettingsGroup">
      <summary>Represents a grouping of related application settings sections within a configuration file. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ApplicationSettingsGroup"></see> class.</summary>
    </member>
    <member name="T:System.Configuration.AppSettingsReader">
      <summary>Provides a method for reading values of a particular type from the configuration.</summary>
    </member>
    <member name="M:System.Configuration.AppSettingsReader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.AppSettingsReader"></see> class.</summary>
    </member>
    <member name="M:System.Configuration.AppSettingsReader.GetValue(System.String,System.Type)">
      <summary>Gets the value for a specified key from the <see cref="P:System.Configuration.ConfigurationSettings.AppSettings"></see> property and returns an object of the specified type containing the value from the configuration.</summary>
      <param name="key">The key for which to get the value.</param>
      <param name="type">The type of the object to return.</param>
      <returns>The value of the specified key.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.   - or -  <paramref name="type">type</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="key">key</paramref> does not exist in the &lt;appSettings&gt; configuration section.   - or -   The value in the &lt;appSettings&gt; configuration section for <paramref name="key">key</paramref> is not of type <paramref name="type">type</paramref>.</exception>
    </member>
    <member name="T:System.Configuration.ClientSettingsSection">
      <summary>Represents a group of user-scoped application settings in a configuration file.</summary>
    </member>
    <member name="M:System.Configuration.ClientSettingsSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ClientSettingsSection"></see> class.</summary>
    </member>
    <member name="P:System.Configuration.ClientSettingsSection.Settings">
      <summary>Gets the collection of client settings for the section.</summary>
      <returns>A <see cref="T:System.Configuration.SettingElementCollection"></see> containing all the client settings found in the current configuration section.</returns>
    </member>
    <member name="T:System.Diagnostics.BooleanSwitch">
      <summary>Provides a simple on/off switch that controls debugging and tracing output.</summary>
    </member>
    <member name="M:System.Diagnostics.BooleanSwitch.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.BooleanSwitch"></see> class with the specified display name and description.</summary>
      <param name="displayName">The name to display on a user interface.</param>
      <param name="description">The description of the switch.</param>
    </member>
    <member name="M:System.Diagnostics.BooleanSwitch.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.BooleanSwitch"></see> class with the specified display name, description, and default switch value.</summary>
      <param name="displayName">The name to display on the user interface.</param>
      <param name="description">The description of the switch.</param>
      <param name="defaultSwitchValue">The default value of the switch.</param>
    </member>
    <member name="P:System.Diagnostics.BooleanSwitch.Enabled">
      <summary>Gets or sets a value indicating whether the switch is enabled or disabled.</summary>
      <returns>true if the switch is enabled; otherwise, false. The default is false.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the correct permission.</exception>
    </member>
    <member name="M:System.Diagnostics.BooleanSwitch.OnValueChanged">
      <summary>Determines whether the new value of the <see cref="P:System.Diagnostics.Switch.Value"></see> property can be parsed as a Boolean value.</summary>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute">
      <summary>Specifies that the attributed code should be excluded from code coverage information.</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute"></see> class.</summary>
    </member>
    <member name="T:System.LdapStyleUriParser">
      <summary>A customizable parser based on the Lightweight Directory Access Protocol (LDAP) scheme.</summary>
    </member>
    <member name="M:System.LdapStyleUriParser.#ctor">
      <summary>Creates a customizable parser based on the Lightweight Directory Access Protocol (LDAP) scheme.</summary>
    </member>
    <member name="T:System.Net.ProtocolViolationException">
      <summary>The exception that is thrown when an error is made while using a network protocol.</summary>
    </member>
    <member name="M:System.Net.ProtocolViolationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.ProtocolViolationException"></see> class.</summary>
    </member>
    <member name="M:System.Net.ProtocolViolationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.ProtocolViolationException"></see> class with the specified message.</summary>
      <param name="message">The error message string.</param>
    </member>
    <member name="M:System.Net.ProtocolViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.ProtocolViolationException"></see> class from the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> instances.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that contains the information that is required to deserialize the <see cref="T:System.Net.ProtocolViolationException"></see>.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains the source of the serialized stream that is associated with the new <see cref="T:System.Net.ProtocolViolationException"></see>.</param>
    </member>
    <member name="M:System.Net.ProtocolViolationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data required to serialize the target object.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that specifies the destination for this serialization.</param>
    </member>
    <member name="M:System.Net.ProtocolViolationException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Serializes this instance into the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object.</summary>
      <param name="serializationInfo">The object into which this <see cref="T:System.Net.ProtocolViolationException"></see> will be serialized.</param>
      <param name="streamingContext">The destination of the serialization.</param>
    </member>
    <member name="T:System.Net.Security.AuthenticatedStream">
      <summary>Provides methods for passing credentials across a stream and requesting or performing authentication for client-server applications.</summary>
    </member>
    <member name="M:System.Net.Security.AuthenticatedStream.#ctor(System.IO.Stream,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Security.AuthenticatedStream"></see> class.</summary>
      <param name="innerStream">A <see cref="T:System.IO.Stream"></see> object used by the <see cref="T:System.Net.Security.AuthenticatedStream"></see> for sending and receiving data.</param>
      <param name="leaveInnerStreamOpen">A <see cref="T:System.Boolean"></see> that indicates whether closing this <see cref="T:System.Net.Security.AuthenticatedStream"></see> object also closes innerStream.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="innerStream">innerStream</paramref> is null.   -or-  <paramref name="innerStream">innerStream</paramref> is equal to <see cref="F:System.IO.Stream.Null"></see>.</exception>
    </member>
    <member name="M:System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Security.AuthenticatedStream"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.InnerStream">
      <summary>Gets the stream used by this <see cref="T:System.Net.Security.AuthenticatedStream"></see> for sending and receiving data.</summary>
      <returns>A <see cref="T:System.IO.Stream"></see> object.</returns>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.IsAuthenticated">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether authentication was successful.</summary>
      <returns>true if successful authentication occurred; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.IsEncrypted">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether data sent using this <see cref="T:System.Net.Security.AuthenticatedStream"></see> is encrypted.</summary>
      <returns>true if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether both server and client have been authenticated.</summary>
      <returns>true if the client and server have been authenticated; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.IsServer">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the local side of the connection was authenticated as the server.</summary>
      <returns>true if the local endpoint was authenticated as the server side of a client-server authenticated connection; false if the local endpoint was authenticated as the client.</returns>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.IsSigned">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the data sent using this stream is signed.</summary>
      <returns>true if the data is signed before being transmitted; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen">
      <summary>Gets whether the stream used by this <see cref="T:System.Net.Security.AuthenticatedStream"></see> for sending and receiving data has been left open.</summary>
      <returns>true if the inner stream has been left open; otherwise, false.</returns>
    </member>
    <member name="T:System.Net.Security.AuthenticationLevel">
      <summary>Specifies client requirements for authentication and impersonation when using the <see cref="T:System.Net.WebRequest"></see> class and derived classes to request a resource.</summary>
    </member>
    <member name="F:System.Net.Security.AuthenticationLevel.MutualAuthRequested">
      <summary>The client and server should be authenticated. The request does not fail if the server is not authenticated. To determine whether mutual authentication occurred, check the value of the <see cref="P:System.Net.WebResponse.IsMutuallyAuthenticated"></see> property.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Security.AuthenticationLevel.MutualAuthRequired">
      <summary>The client and server should be authenticated. If the server is not authenticated, your application will receive an <see cref="T:System.IO.IOException"></see> with a <see cref="T:System.Net.ProtocolViolationException"></see> inner exception that indicates that mutual authentication failed</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Security.AuthenticationLevel.None">
      <summary>No authentication is required for the client and server.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Security.EncryptionPolicy">
      <summary>The EncryptionPolicy to use.</summary>
    </member>
    <member name="F:System.Net.Security.EncryptionPolicy.AllowNoEncryption">
      <summary>Prefer that full encryption be used, but allow a NULL cipher (no encryption) if the server agrees.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Security.EncryptionPolicy.NoEncryption">
      <summary>Allow no encryption and request that a NULL cipher be used if the other endpoint can handle a NULL cipher.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Security.EncryptionPolicy.RequireEncryption">
      <summary>Require encryption and never allow a NULL cipher.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Security.LocalCertificateSelectionCallback">
      <summary>Selects the local Secure Sockets Layer (SSL) certificate used for authentication.</summary>
      <param name="sender">An object that contains state information for this validation.</param>
      <param name="targetHost">The host server specified by the client.</param>
      <param name="localCertificates">An <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> containing local certificates.</param>
      <param name="remoteCertificate">The certificate used to authenticate the remote party.</param>
      <param name="acceptableIssuers">A <see cref="T:System.String"></see> array of certificate issuers acceptable to the remote party.</param>
      <returns></returns>
    </member>
    <member name="T:System.Net.Security.NegotiateStream">
      <summary>Provides a stream that uses the Negotiate security protocol to authenticate the client, and optionally the server, in client-server communication.</summary>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Security.NegotiateStream"></see> class using the specified <see cref="T:System.IO.Stream"></see>.</summary>
      <param name="innerStream">A <see cref="T:System.IO.Stream"></see> object used by the <see cref="T:System.Net.Security.NegotiateStream"></see> for sending and receiving data.</param>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Security.NegotiateStream"></see> class using the specified <see cref="T:System.IO.Stream"></see> and stream closure behavior.</summary>
      <param name="innerStream">A <see cref="T:System.IO.Stream"></see> object used by the <see cref="T:System.Net.Security.NegotiateStream"></see> for sending and receiving data.</param>
      <param name="leaveInnerStreamOpen">true to indicate that closing this <see cref="T:System.Net.Security.NegotiateStream"></see> has no effect on innerstream; false to indicate that closing this <see cref="T:System.Net.Security.NegotiateStream"></see> also closes innerStream.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="innerStream">innerStream</paramref> is null.   - or -  <paramref name="innerStream">innerStream</paramref> is equal to <see cref="F:System.IO.Stream.Null"></see>.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClient">
      <summary>Called by clients to authenticate the client, and optionally the server, in a client-server connection.</summary>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)">
      <summary>Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential.</summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> that is used to establish the identity of the client.</param>
      <param name="targetName">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</param>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="targetName">targetName</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)">
      <summary>Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential and the channel binding.</summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> that is used to establish the identity of the client.</param>
      <param name="binding">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding"></see> that is used for extended protection.</param>
      <param name="targetName">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="targetName">targetName</paramref> is null.   - or -  <paramref name="credential">credential</paramref> is null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)">
      <summary>Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options.</summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> that is used to establish the identity of the client.</param>
      <param name="targetName">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</param>
      <param name="requiredProtectionLevel">One of the <see cref="T:System.Net.Security.ProtectionLevel"></see> values, indicating the security services for the stream.</param>
      <param name="allowedImpersonationLevel">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel"></see> values, indicating how the server can use the client's credentials to access resources.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="allowedImpersonationLevel">allowedImpersonationLevel</paramref> is not a valid value.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="targetName">targetName</paramref> is null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)">
      <summary>Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credential, authentication options, and channel binding.</summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> that is used to establish the identity of the client.</param>
      <param name="binding">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding"></see> that is used for extended protection.</param>
      <param name="targetName">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</param>
      <param name="requiredProtectionLevel">One of the <see cref="T:System.Net.Security.ProtectionLevel"></see> values, indicating the security services for the stream.</param>
      <param name="allowedImpersonationLevel">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel"></see> values, indicating how the server can use the client's credentials to access resources.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="targetName">targetName</paramref> is null.   - or -  <paramref name="credential">credential</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="allowedImpersonationLevel">allowedImpersonationLevel</paramref> is not a valid value.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync">
      <summary>Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see> The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)">
      <summary>Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential.</summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> that is used to establish the identity of the client.</param>
      <param name="targetName">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see> The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="targetName">targetName</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)">
      <summary>Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential and the channel binding.</summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> that is used to establish the identity of the client.</param>
      <param name="binding">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding"></see> that is used for extended protection.</param>
      <param name="targetName">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see> The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="targetName">targetName</paramref> is null.   - or -  <paramref name="credential">credential</paramref> is null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)">
      <summary>Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credentials and authentication options.</summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> that is used to establish the identity of the client.</param>
      <param name="targetName">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</param>
      <param name="requiredProtectionLevel">One of the <see cref="T:System.Net.Security.ProtectionLevel"></see> values, indicating the security services for the stream.</param>
      <param name="allowedImpersonationLevel">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel"></see> values, indicating how the server can use the client's credentials to access resources.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see> The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="allowedImpersonationLevel">allowedImpersonationLevel</paramref> is not a valid value.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="targetName">targetName</paramref> is null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)">
      <summary>Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credential, authentication options, and channel binding.</summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> that is used to establish the identity of the client.</param>
      <param name="binding">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding"></see> that is used for extended protection.</param>
      <param name="targetName">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</param>
      <param name="requiredProtectionLevel">One of the <see cref="T:System.Net.Security.ProtectionLevel"></see> values, indicating the security services for the stream.</param>
      <param name="allowedImpersonationLevel">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel"></see> values, indicating how the server can use the client's credentials to access resources.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see> The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="targetName">targetName</paramref> is null.   - or -  <paramref name="credential">credential</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="allowedImpersonationLevel">allowedImpersonationLevel</paramref> is not a valid value.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)">
      <summary>Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy.</summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> that is used to establish the identity of the client.</param>
      <param name="policy">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> that is used for extended protection.</param>
      <param name="requiredProtectionLevel">One of the <see cref="T:System.Net.Security.ProtectionLevel"></see> values, indicating the security services for the stream.</param>
      <param name="requiredImpersonationLevel">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel"></see> values, indicating how the server can use the client's credentials to access resources.</param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding"></see> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames"></see> on the extended protection policy passed in the <paramref name="policy">policy</paramref> parameter are both null.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="credential">credential</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="requiredImpersonationLevel">requiredImpersonationLevel</paramref> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification"></see>, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation"></see>, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation"></see>,</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to try to r-authenticate.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.</exception>
      <exception cref="T:System.NotSupportedException">Windows 95 and Windows 98 are not supported.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The <paramref name="policy">policy</paramref> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always"></see> on a platform that does not support extended protection.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)">
      <summary>Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options.</summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> that is used to establish the identity of the server.</param>
      <param name="requiredProtectionLevel">One of the <see cref="T:System.Net.Security.ProtectionLevel"></see> values, indicating the security services for the stream.</param>
      <param name="requiredImpersonationLevel">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel"></see> values, indicating how the server can use the client's credentials to access resources.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="credential">credential</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="requiredImpersonationLevel">requiredImpersonationLevel</paramref> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification"></see>, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation"></see>, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation"></see>,</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to try to r-authenticate.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.</exception>
      <exception cref="T:System.NotSupportedException">Windows 95 and Windows 98 are not supported.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsServer">
      <summary>Called by servers to authenticate the client, and optionally the server, in a client-server connection.</summary>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.NotSupportedException">Windows 95 and Windows 98 are not supported.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)">
      <summary>Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy.</summary>
      <param name="policy">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> that is used for extended protection.</param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding"></see> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames"></see> on the extended protection policy passed in the <paramref name="policy">policy</paramref> parameter are both null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.NotSupportedException">Windows 95 and Windows 98 are not supported.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The <paramref name="policy">policy</paramref> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always"></see> on a platform that does not support extended protection.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync">
      <summary>Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see> The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.NotSupportedException">Windows 95 and Windows 98 are not supported.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)">
      <summary>Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified extended protection policy.</summary>
      <param name="policy">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> that is used for extended protection.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see> The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding"></see> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames"></see> on the extended protection policy passed in the <paramref name="policy">policy</paramref> parameter are both null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.NotSupportedException">Windows 95 and Windows 98 are not supported.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The <paramref name="policy">policy</paramref> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always"></see> on a platform that does not support extended protection.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)">
      <summary>Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials and authentication options.</summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> that is used to establish the identity of the server.</param>
      <param name="requiredProtectionLevel">One of the <see cref="T:System.Net.Security.ProtectionLevel"></see> values, indicating the security services for the stream.</param>
      <param name="requiredImpersonationLevel">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel"></see> values, indicating how the server can use the client's credentials to access resources.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see> The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="credential">credential</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="requiredImpersonationLevel">requiredImpersonationLevel</paramref> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification"></see>, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation"></see>, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation"></see>,</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to try to r-authenticate.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.</exception>
      <exception cref="T:System.NotSupportedException">Windows 95 and Windows 98 are not supported.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)">
      <summary>Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials, authentication options, and extended protection policy.</summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> that is used to establish the identity of the client.</param>
      <param name="policy">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> that is used for extended protection.</param>
      <param name="requiredProtectionLevel">One of the <see cref="T:System.Net.Security.ProtectionLevel"></see> values, indicating the security services for the stream.</param>
      <param name="requiredImpersonationLevel">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel"></see> values, indicating how the server can use the client's credentials to access resources.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see> The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding"></see> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames"></see> on the extended protection policy passed in the <paramref name="policy">policy</paramref> parameter are both null.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="credential">credential</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="requiredImpersonationLevel">requiredImpersonationLevel</paramref> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification"></see>, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation"></see>, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation"></see>,</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to try to r-authenticate.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.</exception>
      <exception cref="T:System.NotSupportedException">Windows 95 and Windows 98 are not supported.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The <paramref name="policy">policy</paramref> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always"></see> on a platform that does not support extended protection.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)">
      <summary>Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials, authentication options, and channel binding. This method does not block.</summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> that is used to establish the identity of the client.</param>
      <param name="binding">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding"></see> that is used for extended protection.</param>
      <param name="targetName">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</param>
      <param name="requiredProtectionLevel">One of the <see cref="T:System.Net.Security.ProtectionLevel"></see> values, indicating the security services for the stream.</param>
      <param name="allowedImpersonationLevel">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel"></see> values, indicating how the server can use the client's credentials to access resources.</param>
      <param name="asyncCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the authentication is complete.</param>
      <param name="asyncState">A user-defined object containing information about the write operation. This object is passed to the asyncCallback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object indicating the status of the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="credential">credential</paramref> is null.   - or -  <paramref name="targetName">targetName</paramref> is null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)">
      <summary>Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.</summary>
      <param name="asyncCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the authentication is complete.</param>
      <param name="asyncState">A user-defined object containing information about the operation. This object is passed to the asyncCallback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object indicating the status of the asynchronous operation.</returns>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)">
      <summary>Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials. This method does not block.</summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> that is used to establish the identity of the client.</param>
      <param name="targetName">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</param>
      <param name="asyncCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the authentication is complete.</param>
      <param name="asyncState">A user-defined object containing information about the write operation. This object is passed to the asyncCallback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object indicating the status of the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="credential">credential</paramref> is null.   - or -  <paramref name="targetName">targetName</paramref> is null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)">
      <summary>Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and channel binding. This method does not block.</summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> that is used to establish the identity of the client.</param>
      <param name="binding">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding"></see> that is used for extended protection.</param>
      <param name="targetName">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</param>
      <param name="asyncCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the authentication is complete.</param>
      <param name="asyncState">A user-defined object containing information about the write operation. This object is passed to the asyncCallback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object indicating the status of the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="credential">credential</paramref> is null.   - or -  <paramref name="targetName">targetName</paramref> is null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)">
      <summary>Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options. This method does not block.</summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> that is used to establish the identity of the client.</param>
      <param name="targetName">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</param>
      <param name="requiredProtectionLevel">One of the <see cref="T:System.Net.Security.ProtectionLevel"></see> values, indicating the security services for the stream.</param>
      <param name="allowedImpersonationLevel">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel"></see> values, indicating how the server can use the client's credentials to access resources.</param>
      <param name="asyncCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the authentication is complete.</param>
      <param name="asyncState">A user-defined object containing information about the write operation. This object is passed to the asyncCallback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object indicating the status of the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="credential">credential</paramref> is null.   - or -  <paramref name="targetName">targetName</paramref> is null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)">
      <summary>Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options. This method does not block.</summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> that is used to establish the identity of the client.</param>
      <param name="requiredProtectionLevel">One of the <see cref="T:System.Net.Security.ProtectionLevel"></see> values, indicating the security services for the stream.</param>
      <param name="requiredImpersonationLevel">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel"></see> values, indicating how the server can use the client's credentials to access resources.</param>
      <param name="asyncCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the authentication is complete.</param>
      <param name="asyncState">A user-defined object containing information about the operation. This object is passed to the asyncCallback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object indicating the status of the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="credential">credential</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="requiredImpersonationLevel">requiredImpersonationLevel</paramref> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification"></see>, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation"></see>, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation"></see>,</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.</exception>
      <exception cref="T:System.NotSupportedException">Windows 95 and Windows 98 are not supported.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)">
      <summary>Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy. This method does not block.</summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential"></see> that is used to establish the identity of the client.</param>
      <param name="policy">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> that is used for extended protection.</param>
      <param name="requiredProtectionLevel">One of the <see cref="T:System.Net.Security.ProtectionLevel"></see> values, indicating the security services for the stream.</param>
      <param name="requiredImpersonationLevel">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel"></see> values, indicating how the server can use the client's credentials to access resources.</param>
      <param name="asyncCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the authentication is complete.</param>
      <param name="asyncState">A user-defined object containing information about the write operation. This object is passed to the asyncCallback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object indicating the status of the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding"></see> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames"></see> on the extended protection policy passed in the <paramref name="policy">policy</paramref> parameter are both null.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="credential">credential</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="requiredImpersonationLevel">requiredImpersonationLevel</paramref> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification"></see>, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation"></see>, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation"></see>,</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   - or -   This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.</exception>
      <exception cref="T:System.NotSupportedException">Windows 95 and Windows 98 are not supported.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The <paramref name="policy">policy</paramref> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always"></see> on a platform that does not support extended protection.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)">
      <summary>Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.</summary>
      <param name="asyncCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the authentication is complete.</param>
      <param name="asyncState">A user-defined object containing information about the operation. This object is passed to the asyncCallback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object indicating the status of the asynchronous operation.</returns>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.NotSupportedException">Windows 95 and Windows 98 are not supported.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)">
      <summary>Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy. This method does not block.</summary>
      <param name="policy">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> that is used for extended protection.</param>
      <param name="asyncCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the authentication is complete.</param>
      <param name="asyncState">A user-defined object containing information about the write operation. This object is passed to the asyncCallback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object indicating the status of the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding"></see> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames"></see> on the extended protection policy passed in the <paramref name="policy">policy</paramref> parameter are both null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.NotSupportedException">Windows 95 and Windows 98 are not supported.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The <paramref name="policy">policy</paramref> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always"></see> on a platform that does not support extended protection.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.</summary>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that receives the bytes read from the stream.</param>
      <param name="offset">The zero-based location in buffer at which to begin storing the data read from this stream.</param>
      <param name="count">The maximum number of bytes to read from the stream.</param>
      <param name="asyncCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the read operation is complete.</param>
      <param name="asyncState">A user-defined object containing information about the read operation. This object is passed to the asyncCallback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object indicating the status of the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="offset">offset</paramref> is less than 0.   - or -  <paramref name="offset">offset</paramref> is greater than the length of <paramref name="buffer">buffer</paramref>.   - or -  <paramref name="offset">offset</paramref> plus <paramref name="count">count</paramref> is greater than the length of <paramref name="buffer">buffer</paramref>.</exception>
      <exception cref="T:System.IO.IOException">The read operation failed.   - or -   Encryption is in use, but the data could not be decrypted.</exception>
      <exception cref="T:System.NotSupportedException">There is already a read operation in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous write operation that writes <see cref="T:System.Byte"></see>s from the specified buffer to the stream.</summary>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that supplies the bytes to be written to the stream.</param>
      <param name="offset">The zero-based location in buffer at which to begin reading bytes to be written to the stream.</param>
      <param name="count">An <see cref="T:System.Int32"></see> value that specifies the number of bytes to read from buffer.</param>
      <param name="asyncCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the write operation is complete.</param>
      <param name="asyncState">A user-defined object containing information about the write operation. This object is passed to the asyncCallback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object indicating the status of the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="offset is less than 0">offset is less than 0</paramref>.   - or -  <paramref name="offset">offset</paramref> is greater than the length of <paramref name="buffer">buffer</paramref>.   - or -  <paramref name="offset">offset</paramref> plus count is greater than the length of <paramref name="buffer">buffer</paramref>.</exception>
      <exception cref="T:System.IO.IOException">The write operation failed.   - or -   Encryption is in use, but the data could not be encrypted.</exception>
      <exception cref="T:System.NotSupportedException">There is already a write operation in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.CanRead">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the underlying stream is readable.</summary>
      <returns>true if authentication has occurred and the underlying stream is readable; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.CanSeek">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the underlying stream is seekable.</summary>
      <returns>This property always returns false.</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.CanTimeout">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the underlying stream supports time-outs.</summary>
      <returns>true if the underlying stream supports time-outs; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.CanWrite">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the underlying stream is writable.</summary>
      <returns>true if authentication has occurred and the underlying stream is writable; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Security.NegotiateStream"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)">
      <summary>Ends a pending asynchronous client authentication operation that was started with a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient"></see>.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> instance returned by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not created by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient"></see>.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.InvalidOperationException">There is no pending client authentication to complete.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)">
      <summary>Ends a pending asynchronous client authentication operation that was started with a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer"></see>.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> instance returned by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not created by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer"></see>.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">The authentication failed. You can use this object to retry the authentication.</exception>
      <exception cref="T:System.InvalidOperationException">There is no pending authentication to complete.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)">
      <summary>Ends an asynchronous read operation that was started with a call to <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see>.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> instance returned by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see></param>
      <returns>A <see cref="T:System.Int32"></see> value that specifies the number of bytes read from the underlying stream.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The asyncResult was not created by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see>.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
      <exception cref="T:System.IO.IOException">The read operation failed.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)">
      <summary>Ends an asynchronous write operation that was started with a call to <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see>.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> instance returned by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see></param>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The asyncResult was not created by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see>.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
      <exception cref="T:System.IO.IOException">The write operation failed.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.Flush">
      <summary>Causes any buffered data to be written to the underlying device.</summary>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.ImpersonationLevel">
      <summary>Gets a value that indicates how the server can use the client's credentials.</summary>
      <returns>One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel"></see> values.</returns>
      <exception cref="T:System.InvalidOperationException">Authentication failed or has not occurred.</exception>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.IsAuthenticated">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether authentication was successful.</summary>
      <returns>true if successful authentication occurred; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.IsEncrypted">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether this <see cref="T:System.Net.Security.NegotiateStream"></see> uses data encryption.</summary>
      <returns>true if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether both the server and the client have been authenticated.</summary>
      <returns>true if the server has been authenticated; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.IsServer">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the local side of the connection used by this <see cref="T:System.Net.Security.NegotiateStream"></see> was authenticated as the server.</summary>
      <returns>true if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.IsSigned">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the data sent using this stream is signed.</summary>
      <returns>true if the data is signed before being transmitted; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.Length">
      <summary>Gets the length of the underlying stream.</summary>
      <returns>A <see cref="T:System.Int64"></see> that specifies the length of the underlying stream.</returns>
      <exception cref="T:System.NotSupportedException">Getting the value of this property is not supported when the underlying stream is a <see cref="T:System.Net.Sockets.NetworkStream"></see>.</exception>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.Position">
      <summary>Gets or sets the current position in the underlying stream.</summary>
      <returns>A <see cref="T:System.Int64"></see> that specifies the current position in the underlying stream.</returns>
      <exception cref="T:System.NotSupportedException">Setting this property is not supported.   - or -   Getting the value of this property is not supported when the underlying stream is a <see cref="T:System.Net.Sockets.NetworkStream"></see>.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads data from this stream and stores it in the specified array.</summary>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that receives the bytes read from the stream.</param>
      <param name="offset">A <see cref="T:System.Int32"></see> containing the zero-based location in buffer at which to begin storing the data read from this stream.</param>
      <param name="count">A <see cref="T:System.Int32"></see> containing the maximum number of bytes to read from the stream.</param>
      <returns>A <see cref="T:System.Int32"></see> value that specifies the number of bytes read from the underlying stream. When there is no more data to be read, returns 0.</returns>
      <exception cref="T:System.IO.IOException">The read operation failed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
      <exception cref="T:System.NotSupportedException">A <see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)"></see> operation is already in progress.</exception>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.ReadTimeout">
      <summary>Gets or sets the amount of time a read operation blocks waiting for data.</summary>
      <returns>A <see cref="T:System.Int32"></see> that specifies the amount of time that will elapse before a read operation fails.</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.RemoteIdentity">
      <summary>Gets information about the identity of the remote party sharing this authenticated stream.</summary>
      <returns>An <see cref="T:System.Security.Principal.IIdentity"></see> object that describes the identity of the remote endpoint.</returns>
      <exception cref="T:System.InvalidOperationException">Authentication failed or has not occurred.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Throws <see cref="T:System.NotSupportedException"></see>.</summary>
      <param name="offset">This value is ignored.</param>
      <param name="origin">This value is ignored.</param>
      <returns>Always throws a <see cref="T:System.NotSupportedException"></see>.</returns>
      <exception cref="T:System.NotSupportedException">Seeking is not supported on <see cref="T:System.Net.Security.NegotiateStream"></see>.</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.SetLength(System.Int64)">
      <summary>Sets the length of the underlying stream.</summary>
      <param name="value">An <see cref="T:System.Int64"></see> value that specifies the length of the stream.</param>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Write the specified number of <see cref="T:System.Byte"></see>s to the underlying stream using the specified buffer and offset.</summary>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that supplies the bytes written to the stream.</param>
      <param name="offset">An <see cref="T:System.Int32"></see> containing the zero-based location in buffer at which to begin reading bytes to be written to the stream.</param>
      <param name="count">A <see cref="T:System.Int32"></see> containing the number of bytes to read from buffer.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="offset is less than 0">offset is less than 0</paramref>.   - or -  <paramref name="offset">offset</paramref> is greater than the length of <paramref name="buffer">buffer</paramref>.   - or -  <paramref name="offset">offset</paramref> plus count is greater than the length of <paramref name="buffer">buffer</paramref>.</exception>
      <exception cref="T:System.IO.IOException">The write operation failed.   - or -   Encryption is in use, but the data could not be encrypted.</exception>
      <exception cref="T:System.NotSupportedException">There is already a write operation in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.WriteTimeout">
      <summary>Gets or sets the amount of time a write operation blocks waiting for data.</summary>
      <returns>A <see cref="T:System.Int32"></see> that specifies the amount of time that will elapse before a write operation fails.</returns>
    </member>
    <member name="T:System.Net.Security.ProtectionLevel">
      <summary>Indicates the security services requested for an authenticated stream.</summary>
    </member>
    <member name="F:System.Net.Security.ProtectionLevel.EncryptAndSign">
      <summary>Encrypt and sign data to help ensure the confidentiality and integrity of transmitted data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Security.ProtectionLevel.None">
      <summary>Authentication only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Security.ProtectionLevel.Sign">
      <summary>Sign data to help ensure the integrity of transmitted data.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Security.RemoteCertificateValidationCallback">
      <summary>Verifies the remote Secure Sockets Layer (SSL) certificate used for authentication.</summary>
      <param name="sender">An object that contains state information for this validation.</param>
      <param name="certificate">The certificate used to authenticate the remote party.</param>
      <param name="chain">The chain of certificate authorities associated with the remote certificate.</param>
      <param name="sslPolicyErrors">One or more errors associated with the remote certificate.</param>
      <returns></returns>
    </member>
    <member name="T:System.Net.Security.SslPolicyErrors">
      <summary>Enumerates Secure Socket Layer (SSL) policy errors.</summary>
    </member>
    <member name="F:System.Net.Security.SslPolicyErrors.None">
      <summary>No SSL policy errors.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Security.SslPolicyErrors.RemoteCertificateChainErrors">
      <summary><see cref="P:System.Security.Cryptography.X509Certificates.X509Chain.ChainStatus"></see> has returned a non empty array.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Security.SslPolicyErrors.RemoteCertificateNameMismatch">
      <summary>Certificate name mismatch.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Security.SslPolicyErrors.RemoteCertificateNotAvailable">
      <summary>Certificate not available.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Security.SslStream">
      <summary>Provides a stream used for client-server communication that uses the Secure Socket Layer (SSL) security protocol to authenticate the server and optionally the client.</summary>
    </member>
    <member name="M:System.Net.Security.SslStream.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Security.SslStream"></see> class using the specified <see cref="T:System.IO.Stream"></see>.</summary>
      <param name="innerStream">A <see cref="T:System.IO.Stream"></see> object used by the <see cref="T:System.Net.Security.SslStream"></see> for sending and receiving data.</param>
      <exception cref="T:System.ArgumentException"><paramref name="innerStream">innerStream</paramref> is not readable.   -or-  <paramref name="innerStream">innerStream</paramref> is not writable.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="innerStream">innerStream</paramref> is null.   -or-  <paramref name="innerStream">innerStream</paramref> is equal to <see cref="F:System.IO.Stream.Null"></see>.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Security.SslStream"></see> class using the specified <see cref="T:System.IO.Stream"></see> and stream closure behavior.</summary>
      <param name="innerStream">A <see cref="T:System.IO.Stream"></see> object used by the <see cref="T:System.Net.Security.SslStream"></see> for sending and receiving data.</param>
      <param name="leaveInnerStreamOpen">A Boolean value that indicates the closure behavior of the <see cref="T:System.IO.Stream"></see> object used by the <see cref="T:System.Net.Security.SslStream"></see> for sending and receiving data. This parameter indicates if the inner stream is left open.</param>
      <exception cref="T:System.ArgumentException"><paramref name="innerStream">innerStream</paramref> is not readable.   -or-  <paramref name="innerStream">innerStream</paramref> is not writable.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="innerStream">innerStream</paramref> is null.   -or-  <paramref name="innerStream">innerStream</paramref> is equal to <see cref="F:System.IO.Stream.Null"></see>.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Security.SslStream"></see> class using the specified <see cref="T:System.IO.Stream"></see>, stream closure behavior and certificate validation delegate.</summary>
      <param name="innerStream">A <see cref="T:System.IO.Stream"></see> object used by the <see cref="T:System.Net.Security.SslStream"></see> for sending and receiving data.</param>
      <param name="leaveInnerStreamOpen">A Boolean value that indicates the closure behavior of the <see cref="T:System.IO.Stream"></see> object used by the <see cref="T:System.Net.Security.SslStream"></see> for sending and receiving data. This parameter indicates if the inner stream is left open.</param>
      <param name="userCertificateValidationCallback">A <see cref="T:System.Net.Security.RemoteCertificateValidationCallback"></see> delegate responsible for validating the certificate supplied by the remote party.</param>
      <exception cref="T:System.ArgumentException"><paramref name="innerStream">innerStream</paramref> is not readable.   -or-  <paramref name="innerStream">innerStream</paramref> is not writable.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="innerStream">innerStream</paramref> is null.   -or-  <paramref name="innerStream">innerStream</paramref> is equal to <see cref="F:System.IO.Stream.Null"></see>.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Security.SslStream"></see> class using the specified <see cref="T:System.IO.Stream"></see>, stream closure behavior, certificate validation delegate and certificate selection delegate.</summary>
      <param name="innerStream">A <see cref="T:System.IO.Stream"></see> object used by the <see cref="T:System.Net.Security.SslStream"></see> for sending and receiving data.</param>
      <param name="leaveInnerStreamOpen">A Boolean value that indicates the closure behavior of the <see cref="T:System.IO.Stream"></see> object used by the <see cref="T:System.Net.Security.SslStream"></see> for sending and receiving data. This parameter indicates if the inner stream is left open.</param>
      <param name="userCertificateValidationCallback">A <see cref="T:System.Net.Security.RemoteCertificateValidationCallback"></see> delegate responsible for validating the certificate supplied by the remote party.</param>
      <param name="userCertificateSelectionCallback">A <see cref="T:System.Net.Security.LocalCertificateSelectionCallback"></see> delegate responsible for selecting the certificate used for authentication.</param>
      <exception cref="T:System.ArgumentException"><paramref name="innerStream">innerStream</paramref> is not readable.   -or-  <paramref name="innerStream">innerStream</paramref> is not writable.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="innerStream">innerStream</paramref> is null.   -or-  <paramref name="innerStream">innerStream</paramref> is equal to <see cref="F:System.IO.Stream.Null"></see>.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Security.SslStream"></see> class using the specified <see cref="T:System.IO.Stream"></see></summary>
      <param name="innerStream">A <see cref="T:System.IO.Stream"></see> object used by the <see cref="T:System.Net.Security.SslStream"></see> for sending and receiving data.</param>
      <param name="leaveInnerStreamOpen">A Boolean value that indicates the closure behavior of the <see cref="T:System.IO.Stream"></see> object used by the <see cref="T:System.Net.Security.SslStream"></see> for sending and receiving data. This parameter indicates if the inner stream is left open.</param>
      <param name="userCertificateValidationCallback">A <see cref="T:System.Net.Security.RemoteCertificateValidationCallback"></see> delegate responsible for validating the certificate supplied by the remote party.</param>
      <param name="userCertificateSelectionCallback">A <see cref="T:System.Net.Security.LocalCertificateSelectionCallback"></see> delegate responsible for selecting the certificate used for authentication.</param>
      <param name="encryptionPolicy">The <see cref="T:System.Net.Security.EncryptionPolicy"></see> to use.</param>
      <exception cref="T:System.ArgumentException"><paramref name="innerStream">innerStream</paramref> is not readable.   -or-  <paramref name="innerStream">innerStream</paramref> is not writable.   -or-  <paramref name="encryptionPolicy">encryptionPolicy</paramref> is not valid.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="innerStream">innerStream</paramref> is null.   -or-  <paramref name="innerStream">innerStream</paramref> is equal to <see cref="F:System.IO.Stream.Null"></see>.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsClient(System.String)">
      <summary>Called by clients to authenticate the server and optionally the client in a client-server connection.</summary>
      <param name="targetHost">The name of the server that shares this <see cref="T:System.Net.Security.SslStream"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="targetHost">targetHost</paramref> is null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   -or-   Server authentication using this <see cref="T:System.Net.Security.SslStream"></see> was tried previously.   -or-   Authentication is already in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Boolean)">
      <summary>Called by clients to authenticate the server and optionally the client in a client-server connection. The authentication process uses the specified certificate collection, and the system default SSL protocol.</summary>
      <param name="targetHost">The name of the server that will share this <see cref="T:System.Net.Security.SslStream"></see>.</param>
      <param name="clientCertificates">The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> that contains client certificates.</param>
      <param name="checkCertificateRevocation">A <see cref="T:System.Boolean"></see> value that specifies whether the certificate revocation list is checked during authentication.</param>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)">
      <summary>Called by clients to authenticate the server and optionally the client in a client-server connection. The authentication process uses the specified certificate collection and SSL protocol.</summary>
      <param name="targetHost">The name of the server that will share this <see cref="T:System.Net.Security.SslStream"></see>.</param>
      <param name="clientCertificates">The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> that contains client certificates.</param>
      <param name="enabledSslProtocols">The <see cref="T:System.Security.Authentication.SslProtocols"></see> value that represents the protocol used for authentication.</param>
      <param name="checkCertificateRevocation">A <see cref="T:System.Boolean"></see> value that specifies whether the certificate revocation list is checked during authentication.</param>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String)">
      <summary>Called by clients to authenticate the server and optionally the client in a client-server connection as an asynchronous operation.</summary>
      <param name="targetHost">The name of the server that shares this <see cref="T:System.Net.Security.SslStream"></see>.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see> The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="targetHost">targetHost</paramref> is null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   -or-   Server authentication using this <see cref="T:System.Net.Security.SslStream"></see> was tried previously.   -or-   Authentication is already in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Boolean)">
      <summary>Called by clients to authenticate the server and optionally the client in a client-server connection as an asynchronous operation. The authentication process uses the specified certificate collection and the system default SSL protocol.</summary>
      <param name="targetHost">The name of the server that will share this <see cref="T:System.Net.Security.SslStream"></see>.</param>
      <param name="clientCertificates">The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> that contains client certificates.</param>
      <param name="checkCertificateRevocation">A <see cref="T:System.Boolean"></see> value that specifies whether the certificate revocation list is checked during authentication.</param>
      <returns>The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)">
      <summary>Called by clients to authenticate the server and optionally the client in a client-server connection as an asynchronous operation. The authentication process uses the specified certificate collection and SSL protocol.</summary>
      <param name="targetHost">The name of the server that will share this <see cref="T:System.Net.Security.SslStream"></see>.</param>
      <param name="clientCertificates">The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> that contains client certificates.</param>
      <param name="enabledSslProtocols">The <see cref="T:System.Security.Authentication.SslProtocols"></see> value that represents the protocol used for authentication.</param>
      <param name="checkCertificateRevocation">A <see cref="T:System.Boolean"></see> value that specifies whether the certificate revocation list is checked during authentication.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see> The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificate.</summary>
      <param name="serverCertificate">The certificate used to authenticate the server.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="serverCertificate">serverCertificate</paramref> is null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   -or-   Client authentication using this <see cref="T:System.Net.Security.SslStream"></see> was tried previously.   -or-   Authentication is already in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The <see cref="Overload:System.Net.Security.SslStream.AuthenticateAsServer"></see> method is not supported on Windows 95, Windows 98, or Windows Millennium.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Boolean)">
      <summary>Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificates and requirements, and using the sytem default security protocol.</summary>
      <param name="serverCertificate">The X509Certificate used to authenticate the server.</param>
      <param name="clientCertificateRequired">A <see cref="T:System.Boolean"></see> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.</param>
      <param name="checkCertificateRevocation">A <see cref="T:System.Boolean"></see> value that specifies whether the certificate revocation list is checked during authentication.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="serverCertificate">serverCertificate</paramref> is null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   -or-   Client authentication using this <see cref="T:System.Net.Security.SslStream"></see> was tried previously.   -or-   Authentication is already in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The <see cref="Overload:System.Net.Security.SslStream.AuthenticateAsServer"></see> method is not supported on Windows 95, Windows 98, or Windows Millennium.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)">
      <summary>Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificates, requirements and security protocol.</summary>
      <param name="serverCertificate">The X509Certificate used to authenticate the server.</param>
      <param name="clientCertificateRequired">A <see cref="T:System.Boolean"></see> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.</param>
      <param name="enabledSslProtocols">The <see cref="T:System.Security.Authentication.SslProtocols"></see> value that represents the protocol used for authentication.</param>
      <param name="checkCertificateRevocation">A <see cref="T:System.Boolean"></see> value that specifies whether the certificate revocation list is checked during authentication.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="serverCertificate">serverCertificate</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="enabledSslProtocols">enabledSslProtocols</paramref> is not a valid <see cref="T:System.Security.Authentication.SslProtocols"></see> value.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   -or-   Client authentication using this <see cref="T:System.Net.Security.SslStream"></see> was tried previously.   -or-   Authentication is already in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The <see cref="Overload:System.Net.Security.SslStream.AuthenticateAsServer"></see> method is not supported on Windows 95, Windows 98, or Windows Millennium.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)">
      <summary>Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificates, requirements and security protocol as an asynchronous operation.</summary>
      <param name="serverCertificate">The X509Certificate used to authenticate the server.</param>
      <param name="clientCertificateRequired">A <see cref="T:System.Boolean"></see> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.</param>
      <param name="enabledSslProtocols">The <see cref="T:System.Security.Authentication.SslProtocols"></see> value that represents the protocol used for authentication.</param>
      <param name="checkCertificateRevocation">A <see cref="T:System.Boolean"></see> value that specifies whether the certificate revocation list is checked during authentication.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see> The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificate as an asynchronous operation.</summary>
      <param name="serverCertificate">The certificate used to authenticate the server.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see> The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="serverCertificate">serverCertificate</paramref> is null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   -or-   Client authentication using this <see cref="T:System.Net.Security.SslStream"></see> was tried previously.   -or-   Authentication is already in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The <see cref="Overload:System.Net.Security.SslStream.AuthenticateAsServerAsync"></see> method is not supported on Windows 95, Windows 98, or Windows Millennium.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Boolean)">
      <summary>Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificates, requirements and security protocol as an asynchronous operation.</summary>
      <param name="serverCertificate">The X509Certificate used to authenticate the server.</param>
      <param name="clientCertificateRequired">A <see cref="T:System.Boolean"></see> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.</param>
      <param name="checkCertificateRevocation">A <see cref="T:System.Boolean"></see> value that specifies whether the certificate revocation list is checked during authentication.</param>
      <returns>The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)">
      <summary>Called by clients to begin an asynchronous operation to authenticate the server and optionally the client.</summary>
      <param name="targetHost">The name of the server that shares this <see cref="T:System.Net.Security.SslStream"></see>.</param>
      <param name="asyncCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the authentication is complete.</param>
      <param name="asyncState">A user-defined object that contains information about the operation. This object is passed to the asyncCallback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object that indicates the status of the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="targetHost">targetHost</paramref> is null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   -or-   Server authentication using this <see cref="T:System.Net.Security.SslStream"></see> was tried previously.   -or-   Authentication is already in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Called by clients to begin an asynchronous operation to authenticate the server and optionally the client using the specified certificates and the system default security protocol.</summary>
      <param name="targetHost">The name of the server that shares this <see cref="T:System.Net.Security.SslStream"></see>.</param>
      <param name="clientCertificates">The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> containing client certificates.</param>
      <param name="checkCertificateRevocation">A <see cref="T:System.Boolean"></see> value that specifies whether the certificate revocation list is checked during authentication.</param>
      <param name="asyncCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the authentication is complete.</param>
      <param name="asyncState">A user-defined object that contains information about the operation. This object is passed to the asyncCallback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object that indicates the status of the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="targetHost">targetHost</paramref> is null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   -or-   Server authentication using this <see cref="T:System.Net.Security.SslStream"></see> was tried previously.   -or-   Authentication is already in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Called by clients to begin an asynchronous operation to authenticate the server and optionally the client using the specified certificates and security protocol.</summary>
      <param name="targetHost">The name of the server that shares this <see cref="T:System.Net.Security.SslStream"></see>.</param>
      <param name="clientCertificates">The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> containing client certificates.</param>
      <param name="enabledSslProtocols">The <see cref="T:System.Security.Authentication.SslProtocols"></see> value that represents the protocol used for authentication.</param>
      <param name="checkCertificateRevocation">A <see cref="T:System.Boolean"></see> value that specifies whether the certificate revocation list is checked during authentication.</param>
      <param name="asyncCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the authentication is complete.</param>
      <param name="asyncState">A user-defined object that contains information about the operation. This object is passed to the asyncCallback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object that indicates the status of the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="targetHost">targetHost</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="enabledSslProtocols">enabledSslProtocols</paramref> is not a valid <see cref="T:System.Security.Authentication.SslProtocols"></see> value.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   -or-   Server authentication using this <see cref="T:System.Net.Security.SslStream"></see> was tried previously.   -or-   Authentication is already in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)">
      <summary>Called by servers to begin an asynchronous operation to authenticate the client and optionally the server in a client-server connection.</summary>
      <param name="serverCertificate">The X509Certificate used to authenticate the server.</param>
      <param name="asyncCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the authentication is complete.</param>
      <param name="asyncState">A user-defined object that contains information about the operation. This object is passed to the asyncCallback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object indicating the status of the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="serverCertificate">serverCertificate</paramref> is null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   -or-   Client authentication using this <see cref="T:System.Net.Security.SslStream"></see> was tried previously.   -or-   Authentication is already in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer"></see> method is not supported on Windows 95, Windows 98, or Windows Millennium.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Called by servers to begin an asynchronous operation to authenticate the server and optionally the client using the specified certificates and requirements, and the system default security protocol.</summary>
      <param name="serverCertificate">The X509Certificate used to authenticate the server.</param>
      <param name="clientCertificateRequired">A <see cref="T:System.Boolean"></see> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.</param>
      <param name="checkCertificateRevocation">A <see cref="T:System.Boolean"></see> value that specifies whether the certificate revocation list is checked during authentication.</param>
      <param name="asyncCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the authentication is complete.</param>
      <param name="asyncState">A user-defined object that contains information about the operation. This object is passed to the asyncCallback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object that indicates the status of the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="serverCertificate">serverCertificate</paramref> is null.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   -or-   Server authentication using this <see cref="T:System.Net.Security.SslStream"></see> was tried previously.   -or-   Authentication is already in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer"></see> method is not supported on Windows 95, Windows 98, or Windows Millennium.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Called by servers to begin an asynchronous operation to authenticate the server and optionally the client using the specified certificates, requirements and security protocol.</summary>
      <param name="serverCertificate">The X509Certificate used to authenticate the server.</param>
      <param name="clientCertificateRequired">A <see cref="T:System.Boolean"></see> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.</param>
      <param name="enabledSslProtocols">The <see cref="T:System.Security.Authentication.SslProtocols"></see> value that represents the protocol used for authentication.</param>
      <param name="checkCertificateRevocation">A <see cref="T:System.Boolean"></see> value that specifies whether the certificate revocation list is checked during authentication.</param>
      <param name="asyncCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the authentication is complete.</param>
      <param name="asyncState">A user-defined object that contains information about the operation. This object is passed to the asyncCallback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object that indicates the status of the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="serverCertificate">serverCertificate</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="enabledSslProtocols">enabledSslProtocols</paramref> is not a valid <see cref="T:System.Security.Authentication.SslProtocols"></see> value.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has already occurred.   -or-   Server authentication using this <see cref="T:System.Net.Security.SslStream"></see> was tried previously.   -or-   Authentication is already in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer"></see> method is not supported on Windows 95, Windows 98, or Windows Millennium.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.</summary>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that receives the bytes read from the stream.</param>
      <param name="offset">The zero-based location in buffer at which to begin storing the data read from this stream.</param>
      <param name="count">The maximum number of bytes to read from the stream.</param>
      <param name="asyncCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the read operation is complete.</param>
      <param name="asyncState">A user-defined object that contains information about the read operation. This object is passed to the asyncCallback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object that indicates the status of the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="offset">offset</paramref>
<paramref name="&lt;">&lt;</paramref>
<paramref name="0">0</paramref>.  <paramref name="-or-">-or-</paramref><paramref name="offset">offset</paramref> &gt; the length of <paramref name="buffer">buffer</paramref>.   -or-  <paramref name="offset">offset</paramref> + count &gt; the length of <paramref name="buffer">buffer</paramref>.</exception>
      <exception cref="T:System.IO.IOException">The read operation failed.   -or-   Encryption is in use, but the data could not be decrypted.</exception>
      <exception cref="T:System.NotSupportedException">There is already a read operation in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous write operation that writes <see cref="T:System.Byte"></see>s from the specified buffer to the stream.</summary>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that supplies the bytes to be written to the stream.</param>
      <param name="offset">The zero-based location in buffer at which to begin reading bytes to be written to the stream.</param>
      <param name="count">An <see cref="T:System.Int32"></see> value that specifies the number of bytes to read from buffer.</param>
      <param name="asyncCallback">An <see cref="T:System.AsyncCallback"></see> delegate that references the method to invoke when the write operation is complete.</param>
      <param name="asyncState">A user-defined object that contains information about the write operation. This object is passed to the asyncCallback delegate when the operation completes.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> object indicating the status of the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="offset">offset</paramref>
<paramref name="&lt;">&lt;</paramref>
<paramref name="0">0</paramref>.  <paramref name="-or-">-or-</paramref><paramref name="offset">offset</paramref> &gt; the length of <paramref name="buffer">buffer</paramref>.   -or-  <paramref name="offset">offset</paramref> + count &gt; the length of <paramref name="buffer">buffer</paramref>.</exception>
      <exception cref="T:System.IO.IOException">The write operation failed.</exception>
      <exception cref="T:System.NotSupportedException">There is already a write operation in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
    </member>
    <member name="P:System.Net.Security.SslStream.CanRead">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the underlying stream is readable.</summary>
      <returns>true if authentication has occurred and the underlying stream is readable; otherwise false.</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.CanSeek">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the underlying stream is seekable.</summary>
      <returns>This property always returns false.</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.CanTimeout">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the underlying stream supports time-outs.</summary>
      <returns>true if the underlying stream supports time-outs; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.CanWrite">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the underlying stream is writable.</summary>
      <returns>true if authentication has occurred and the underlying stream is writable; otherwise false.</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.CheckCertRevocationStatus">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the certificate revocation list is checked during the certificate validation process.</summary>
      <returns>true if the certificate revocation list is checked; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.CipherAlgorithm">
      <summary>Gets a value that identifies the bulk encryption algorithm used by this <see cref="T:System.Net.Security.SslStream"></see>.</summary>
      <returns>A <see cref="T:System.Security.Authentication.CipherAlgorithmType"></see> value.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Net.Security.SslStream.CipherAlgorithm"></see> property was accessed before the completion of the authentication process or the authentication process failed.</exception>
    </member>
    <member name="P:System.Net.Security.SslStream.CipherStrength">
      <summary>Gets a value that identifies the strength of the cipher algorithm used by this <see cref="T:System.Net.Security.SslStream"></see>.</summary>
      <returns>An <see cref="T:System.Int32"></see> value that specifies the strength of the algorithm, in bits.</returns>
    </member>
    <member name="M:System.Net.Security.SslStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Security.SslStream"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.Security.SslStream.EndAuthenticateAsClient(System.IAsyncResult)">
      <summary>Ends a pending asynchronous server authentication operation started with a previous call to <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer"></see>.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> instance returned by a call to <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not created by a call to <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer"></see>.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
      <exception cref="T:System.InvalidOperationException">There is no pending server authentication to complete.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.EndAuthenticateAsServer(System.IAsyncResult)">
      <summary>Ends a pending asynchronous client authentication operation started with a previous call to <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsClient"></see>.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> instance returned by a call to <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsClient"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not created by a call to <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsClient"></see>.</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
      <exception cref="T:System.InvalidOperationException">There is no pending client authentication to complete.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.EndRead(System.IAsyncResult)">
      <summary>Ends an asynchronous read operation started with a previous call to <see cref="M:System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see>.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> instance returned by a call to <see cref="M:System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see></param>
      <returns>A <see cref="T:System.Int32"></see> value that specifies the number of bytes read from the underlying stream.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not created by a call to <see cref="M:System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see>.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
      <exception cref="T:System.IO.IOException">The read operation failed.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.EndWrite(System.IAsyncResult)">
      <summary>Ends an asynchronous write operation started with a previous call to <see cref="M:System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see>.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> instance returned by a call to <see cref="M:System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see></param>
      <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult">asyncResult</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="asyncResult">asyncResult</paramref> was not created by a call to <see cref="M:System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see>.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
      <exception cref="T:System.IO.IOException">The write operation failed.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.Flush">
      <summary>Causes any buffered data to be written to the underlying device.</summary>
    </member>
    <member name="P:System.Net.Security.SslStream.HashAlgorithm">
      <summary>Gets the algorithm used for generating message authentication codes (MACs).</summary>
      <returns>A <see cref="T:System.Security.Authentication.HashAlgorithmType"></see> value.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Net.Security.SslStream.HashAlgorithm"></see> property was accessed before the completion of the authentication process or the authentication process failed.</exception>
    </member>
    <member name="P:System.Net.Security.SslStream.HashStrength">
      <summary>Gets a value that identifies the strength of the hash algorithm used by this instance.</summary>
      <returns>An <see cref="T:System.Int32"></see> value that specifies the strength of the <see cref="T:System.Security.Authentication.HashAlgorithmType"></see> algorithm, in bits. Valid values are 128 or 160.</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.IsAuthenticated">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether authentication was successful.</summary>
      <returns>true if successful authentication occurred; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.IsEncrypted">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether this <see cref="T:System.Net.Security.SslStream"></see> uses data encryption.</summary>
      <returns>true if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise false.</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.IsMutuallyAuthenticated">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether both server and client have been authenticated.</summary>
      <returns>true if the server has been authenticated; otherwise false.</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.IsServer">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the local side of the connection used by this <see cref="T:System.Net.Security.SslStream"></see> was authenticated as the server.</summary>
      <returns>true if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise false.</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.IsSigned">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the data sent using this stream is signed.</summary>
      <returns>true if the data is signed before being transmitted; otherwise false.</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.KeyExchangeAlgorithm">
      <summary>Gets the key exchange algorithm used by this <see cref="T:System.Net.Security.SslStream"></see>.</summary>
      <returns>An <see cref="T:System.Security.Authentication.ExchangeAlgorithmType"></see> value.</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.KeyExchangeStrength">
      <summary>Gets a value that identifies the strength of the key exchange algorithm used by this instance.</summary>
      <returns>An <see cref="T:System.Int32"></see> value that specifies the strength of the <see cref="T:System.Security.Authentication.ExchangeAlgorithmType"></see> algorithm, in bits.</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.Length">
      <summary>Gets the length of the underlying stream.</summary>
      <returns>A <see cref="T:System.Int64"></see>.   The length of the underlying stream.</returns>
      <exception cref="T:System.NotSupportedException">Getting the value of this property is not supported when the underlying stream is a <see cref="T:System.Net.Sockets.NetworkStream"></see>.</exception>
    </member>
    <member name="P:System.Net.Security.SslStream.LocalCertificate">
      <summary>Gets the certificate used to authenticate the local endpoint.</summary>
      <returns>An X509Certificate object that represents the certificate supplied for authentication or null if no certificate was supplied.</returns>
      <exception cref="T:System.InvalidOperationException">Authentication failed or has not occurred.</exception>
    </member>
    <member name="P:System.Net.Security.SslStream.Position">
      <summary>Gets or sets the current position in the underlying stream.</summary>
      <returns>A <see cref="T:System.Int64"></see>.   The current position in the underlying stream.</returns>
      <exception cref="T:System.NotSupportedException">Setting this property is not supported.   -or-   Getting the value of this property is not supported when the underlying stream is a <see cref="T:System.Net.Sockets.NetworkStream"></see>.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads data from this stream and stores it in the specified array.</summary>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that receives the bytes read from this stream.</param>
      <param name="offset">A <see cref="T:System.Int32"></see> that contains the zero-based location in buffer at which to begin storing the data read from this stream.</param>
      <param name="count">A <see cref="T:System.Int32"></see> that contains the maximum number of bytes to read from this stream.</param>
      <returns>A <see cref="T:System.Int32"></see> value that specifies the number of bytes read. When there is no more data to be read, returns 0.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="offset">offset</paramref>
<paramref name="&lt;">&lt;</paramref>
<paramref name="0">0</paramref>.  <paramref name="-or-">-or-</paramref><paramref name="offset">offset</paramref> &gt; the length of <paramref name="buffer">buffer</paramref>.   -or-  <paramref name="offset">offset</paramref> + count &gt; the length of <paramref name="buffer">buffer</paramref>.</exception>
      <exception cref="T:System.IO.IOException">The read operation failed. Check the inner exception, if present to determine the cause of the failure.</exception>
      <exception cref="T:System.NotSupportedException">There is already a read operation in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
    </member>
    <member name="P:System.Net.Security.SslStream.ReadTimeout">
      <summary>Gets or sets the amount of time a read operation blocks waiting for data.</summary>
      <returns>A <see cref="T:System.Int32"></see> that specifies the amount of time that elapses before a synchronous read operation fails.</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.RemoteCertificate">
      <summary>Gets the certificate used to authenticate the remote endpoint.</summary>
      <returns>An X509Certificate object that represents the certificate supplied for authentication or null if no certificate was supplied.</returns>
      <exception cref="T:System.InvalidOperationException">Authentication failed or has not occurred.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <param name="offset">This value is ignored.</param>
      <param name="origin">This value is ignored.</param>
      <returns>Always throws a <see cref="T:System.NotSupportedException"></see>.</returns>
      <exception cref="T:System.NotSupportedException">Seeking is not supported by <see cref="T:System.Net.Security.SslStream"></see> objects.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.SetLength(System.Int64)">
      <summary>Sets the length of the underlying stream.</summary>
      <param name="value">An <see cref="T:System.Int64"></see> value that specifies the length of the stream.</param>
    </member>
    <member name="M:System.Net.Security.SslStream.ShutdownAsync">
      <summary>Shuts down this SslStream.</summary>
      <returns>The task object representing the asynchronous operation.</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.SslProtocol">
      <summary>Gets a value that indicates the security protocol used to authenticate this connection.</summary>
      <returns>The <see cref="T:System.Security.Authentication.SslProtocols"></see> value that represents the protocol used for authentication.</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.TransportContext">
      <summary>Gets the <see cref="T:System.Net.TransportContext"></see> used for authentication using extended protection.</summary>
      <returns>The <see cref="T:System.Net.TransportContext"></see> object that contains the channel binding token (CBT) used for extended protection.</returns>
    </member>
    <member name="M:System.Net.Security.SslStream.Write(System.Byte[])">
      <summary>Writes the specified data to this stream.</summary>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that supplies the bytes written to the stream.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.IO.IOException">The write operation failed.</exception>
      <exception cref="T:System.NotSupportedException">There is already a write operation in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Write the specified number of <see cref="T:System.Byte"></see>s to the underlying stream using the specified buffer and offset.</summary>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that supplies the bytes written to the stream.</param>
      <param name="offset">A <see cref="T:System.Int32"></see> that contains the zero-based location in buffer at which to begin reading bytes to be written to the stream.</param>
      <param name="count">A <see cref="T:System.Int32"></see> that contains the number of bytes to read from buffer.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="offset">offset</paramref>
<paramref name="&lt;">&lt;</paramref>
<paramref name="0">0</paramref>.  <paramref name="-or-">-or-</paramref><paramref name="offset">offset</paramref> &gt; the length of <paramref name="buffer">buffer</paramref>.   -or-  <paramref name="offset">offset</paramref> + count &gt; the length of <paramref name="buffer">buffer</paramref>.</exception>
      <exception cref="T:System.IO.IOException">The write operation failed.</exception>
      <exception cref="T:System.NotSupportedException">There is already a write operation in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
    </member>
    <member name="P:System.Net.Security.SslStream.WriteTimeout">
      <summary>Gets or sets the amount of time a write operation blocks waiting for data.</summary>
      <returns>A <see cref="T:System.Int32"></see> that specifies the amount of time that elapses before a synchronous write operation fails.</returns>
    </member>
    <member name="T:System.Net.SecurityProtocolType">
      <summary>Specifies the security protocols that are supported by the Schannel security package.</summary>
    </member>
    <member name="F:System.Net.SecurityProtocolType.Ssl3">
      <summary>Specifies the Secure Socket Layer (SSL) 3.0 security protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.SecurityProtocolType.SystemDefault">
      <summary>Specifies the system default security protocol as defined by <see cref="https://go.microsoft.com/fwlink/?linkid=833507">Schannel</see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.SecurityProtocolType.Tls">
      <summary>Specifies the Transport Layer Security (TLS) 1.0 security protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.SecurityProtocolType.Tls11">
      <summary>Specifies the Transport Layer Security (TLS) 1.1 security protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.SecurityProtocolType.Tls12">
      <summary>Specifies the Transport Layer Security (TLS) 1.2 security protocol.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.ServicePoint">
      <summary>Provides connection management for HTTP connections.</summary>
    </member>
    <member name="P:System.Net.ServicePoint.Address">
      <summary>Gets the Uniform Resource Identifier (URI) of the server that this <see cref="T:System.Net.ServicePoint"></see> object connects to.</summary>
      <returns>An instance of the <see cref="T:System.Uri"></see> class that contains the URI of the Internet server that this <see cref="T:System.Net.ServicePoint"></see> object connects to.</returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Net.ServicePoint"></see> is in host mode.</exception>
    </member>
    <member name="P:System.Net.ServicePoint.BindIPEndPointDelegate">
      <summary>Specifies the delegate to associate a local <see cref="T:System.Net.IPEndPoint"></see> with a <see cref="T:System.Net.ServicePoint"></see>.</summary>
      <returns>A delegate that forces a <see cref="T:System.Net.ServicePoint"></see> to use a particular local Internet Protocol (IP) address and port number. The default value is null.</returns>
    </member>
    <member name="P:System.Net.ServicePoint.Certificate">
      <summary>Gets the certificate received for this <see cref="T:System.Net.ServicePoint"></see> object.</summary>
      <returns>An instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> class that contains the security certificate received for this <see cref="T:System.Net.ServicePoint"></see> object.</returns>
    </member>
    <member name="P:System.Net.ServicePoint.ClientCertificate">
      <summary>Gets the last client certificate sent to the server.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"></see> object that contains the public values of the last client certificate sent to the server.</returns>
    </member>
    <member name="M:System.Net.ServicePoint.CloseConnectionGroup(System.String)">
      <summary>Removes the specified connection group from this <see cref="T:System.Net.ServicePoint"></see> object.</summary>
      <param name="connectionGroupName">The name of the connection group that contains the connections to close and remove from this service point.</param>
      <returns>A <see cref="T:System.Boolean"></see> value that indicates whether the connection group was closed.</returns>
    </member>
    <member name="P:System.Net.ServicePoint.ConnectionLeaseTimeout">
      <summary>Gets or sets the number of milliseconds after which an active <see cref="T:System.Net.ServicePoint"></see> connection is closed.</summary>
      <returns>A <see cref="T:System.Int32"></see> that specifies the number of milliseconds that an active <see cref="T:System.Net.ServicePoint"></see> connection remains open. The default is -1, which allows an active <see cref="T:System.Net.ServicePoint"></see> connection to stay connected indefinitely. Set this property to 0 to force <see cref="T:System.Net.ServicePoint"></see> connections to close after servicing a request.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is a negative number less than -1.</exception>
    </member>
    <member name="P:System.Net.ServicePoint.ConnectionLimit">
      <summary>Gets or sets the maximum number of connections allowed on this <see cref="T:System.Net.ServicePoint"></see> object.</summary>
      <returns>The maximum number of connections allowed on this <see cref="T:System.Net.ServicePoint"></see> object.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The connection limit is equal to or less than 0.</exception>
    </member>
    <member name="P:System.Net.ServicePoint.ConnectionName">
      <summary>Gets the connection name.</summary>
      <returns>A <see cref="T:System.String"></see> that represents the connection name.</returns>
    </member>
    <member name="P:System.Net.ServicePoint.CurrentConnections">
      <summary>Gets the number of open connections associated with this <see cref="T:System.Net.ServicePoint"></see> object.</summary>
      <returns>The number of open connections associated with this <see cref="T:System.Net.ServicePoint"></see> object.</returns>
    </member>
    <member name="P:System.Net.ServicePoint.Expect100Continue">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that determines whether 100-Continue behavior is used.</summary>
      <returns>true to expect 100-Continue responses for POST requests; otherwise, false. The default value is true.</returns>
    </member>
    <member name="P:System.Net.ServicePoint.IdleSince">
      <summary>Gets the date and time that the <see cref="T:System.Net.ServicePoint"></see> object was last connected to a host.</summary>
      <returns>A <see cref="T:System.DateTime"></see> object that contains the date and time at which the <see cref="T:System.Net.ServicePoint"></see> object was last connected.</returns>
    </member>
    <member name="P:System.Net.ServicePoint.MaxIdleTime">
      <summary>Gets or sets the amount of time a connection associated with the <see cref="T:System.Net.ServicePoint"></see> object can remain idle before the connection is closed.</summary>
      <returns>The length of time, in milliseconds, that a connection associated with the <see cref="T:System.Net.ServicePoint"></see> object can remain idle before it is closed and reused for another connection.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Net.ServicePoint.MaxIdleTime"></see> is set to less than <see cref="F:System.Threading.Timeout.Infinite"></see> or greater than <see cref="F:System.Int32.MaxValue"></see>.</exception>
    </member>
    <member name="P:System.Net.ServicePoint.ProtocolVersion">
      <summary>Gets the version of the HTTP protocol that the <see cref="T:System.Net.ServicePoint"></see> object uses.</summary>
      <returns>A <see cref="T:System.Version"></see> object that contains the HTTP protocol version that the <see cref="T:System.Net.ServicePoint"></see> object uses.</returns>
    </member>
    <member name="P:System.Net.ServicePoint.ReceiveBufferSize">
      <summary>Gets or sets the size of the receiving buffer for the socket used by this <see cref="T:System.Net.ServicePoint"></see>.</summary>
      <returns>A <see cref="T:System.Int32"></see> that contains the size, in bytes, of the receive buffer. The default is 8192.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is greater than <see cref="F:System.Int32.MaxValue"></see>.</exception>
    </member>
    <member name="M:System.Net.ServicePoint.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)">
      <summary>Enables or disables the keep-alive option on a TCP connection.</summary>
      <param name="enabled">If set to true, then the TCP keep-alive option on a TCP connection will be enabled using the specified keepAliveTime and keepAliveInterval values.   If set to false, then the TCP keep-alive option is disabled and the remaining parameters are ignored.   The default value is false.</param>
      <param name="keepAliveTime">Specifies the timeout, in milliseconds, with no activity until the first keep-alive packet is sent.   The value must be greater than 0.  If a value of less than or equal to zero is passed an <see cref="T:System.ArgumentOutOfRangeException"></see> is thrown.</param>
      <param name="keepAliveInterval">Specifies the interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received.   The value must be greater than 0.  If a value of less than or equal to zero is passed an <see cref="T:System.ArgumentOutOfRangeException"></see> is thrown.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for <paramref name="keepAliveTime">keepAliveTime</paramref> or <paramref name="keepAliveInterval">keepAliveInterval</paramref> parameter is less than or equal to 0.</exception>
    </member>
    <member name="P:System.Net.ServicePoint.SupportsPipelining">
      <summary>Indicates whether the <see cref="T:System.Net.ServicePoint"></see> object supports pipelined connections.</summary>
      <returns>true if the <see cref="T:System.Net.ServicePoint"></see> object supports pipelined connections; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.ServicePoint.UseNagleAlgorithm">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that determines whether the Nagle algorithm is used on connections managed by this <see cref="T:System.Net.ServicePoint"></see> object.</summary>
      <returns>true to use the Nagle algorithm; otherwise, false. The default value is true.</returns>
    </member>
    <member name="T:System.Net.ServicePointManager">
      <summary>Manages the collection of <see cref="T:System.Net.ServicePoint"></see> objects.</summary>
    </member>
    <member name="P:System.Net.ServicePointManager.CertificatePolicy">
      <summary>Gets or sets policy for server certificates.</summary>
      <returns>An object that implements the <see cref="T:System.Net.ICertificatePolicy"></see> interface.</returns>
    </member>
    <member name="P:System.Net.ServicePointManager.CheckCertificateRevocationList">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that indicates whether the certificate is checked against the certificate authority revocation list.</summary>
      <returns>true if the certificate revocation list is checked; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.ServicePointManager.ClientCipherSuitesCallback">
      <returns></returns>
    </member>
    <member name="P:System.Net.ServicePointManager.DefaultConnectionLimit">
      <summary>Gets or sets the maximum number of concurrent connections allowed by a <see cref="T:System.Net.ServicePoint"></see> object.</summary>
      <returns>The maximum number of concurrent connections allowed by a <see cref="T:System.Net.ServicePoint"></see> object. The default value is 2. When an app is running as an ASP.NET host, it is not possible to alter the value of this property through the config file if the autoConfig property is set to true. However, you can change the value programmatically when the autoConfig property is true. Set your preferred value once, when the AppDomain loads.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Net.ServicePointManager.DefaultConnectionLimit"></see> is less than or equal to 0.</exception>
    </member>
    <member name="F:System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit">
      <summary>The default number of non-persistent connections (4) allowed on a <see cref="T:System.Net.ServicePoint"></see> object connected to an HTTP/1.0 or later server. This field is constant but is no longer used in the .NET Framework 2.0.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.ServicePointManager.DefaultPersistentConnectionLimit">
      <summary>The default number of persistent connections (2) allowed on a <see cref="T:System.Net.ServicePoint"></see> object connected to an HTTP/1.1 or later server. This field is constant and is used to initialize the <see cref="P:System.Net.ServicePointManager.DefaultConnectionLimit"></see> property if the value of the <see cref="P:System.Net.ServicePointManager.DefaultConnectionLimit"></see> property has not been set either directly or through configuration.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Net.ServicePointManager.DnsRefreshTimeout">
      <summary>Gets or sets a value that indicates how long a Domain Name Service (DNS) resolution is considered valid.</summary>
      <returns>The time-out value, in milliseconds. A value of -1 indicates an infinite time-out period. The default value is 120,000 milliseconds (two minutes).</returns>
    </member>
    <member name="P:System.Net.ServicePointManager.EnableDnsRoundRobin">
      <summary>Gets or sets a value that indicates whether a Domain Name Service (DNS) resolution rotates among the applicable Internet Protocol (IP) addresses.</summary>
      <returns>false if a DNS resolution always returns the first IP address for a particular host; otherwise true. The default is false.</returns>
    </member>
    <member name="P:System.Net.ServicePointManager.EncryptionPolicy">
      <summary>Gets the <see cref="T:System.Net.Security.EncryptionPolicy"></see> for this <see cref="T:System.Net.ServicePointManager"></see> instance.</summary>
      <returns>The encryption policy to use for this <see cref="T:System.Net.ServicePointManager"></see> instance.</returns>
    </member>
    <member name="P:System.Net.ServicePointManager.Expect100Continue">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that determines whether 100-Continue behavior is used.</summary>
      <returns>true to enable 100-Continue behavior. The default value is true.</returns>
    </member>
    <member name="M:System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)">
      <summary>Finds an existing <see cref="T:System.Net.ServicePoint"></see> object or creates a new <see cref="T:System.Net.ServicePoint"></see> object to manage communications with the specified <see cref="T:System.Uri"></see> object.</summary>
      <param name="address">A <see cref="T:System.Uri"></see> object that contains the address of the Internet resource to contact.</param>
      <param name="proxy">The proxy data for this request.</param>
      <returns>The <see cref="T:System.Net.ServicePoint"></see> object that manages communications for the request.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The maximum number of <see cref="T:System.Net.ServicePoint"></see> objects defined in <see cref="P:System.Net.ServicePointManager.MaxServicePoints"></see> has been reached.</exception>
    </member>
    <member name="M:System.Net.ServicePointManager.FindServicePoint(System.Uri)">
      <summary>Finds an existing <see cref="T:System.Net.ServicePoint"></see> object or creates a new <see cref="T:System.Net.ServicePoint"></see> object to manage communications with the specified <see cref="T:System.Uri"></see> object.</summary>
      <param name="address">The <see cref="T:System.Uri"></see> object of the Internet resource to contact.</param>
      <returns>The <see cref="T:System.Net.ServicePoint"></see> object that manages communications for the request.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The maximum number of <see cref="T:System.Net.ServicePoint"></see> objects defined in <see cref="P:System.Net.ServicePointManager.MaxServicePoints"></see> has been reached.</exception>
    </member>
    <member name="M:System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)">
      <summary>Finds an existing <see cref="T:System.Net.ServicePoint"></see> object or creates a new <see cref="T:System.Net.ServicePoint"></see> object to manage communications with the specified Uniform Resource Identifier (URI).</summary>
      <param name="uriString">The URI of the Internet resource to be contacted.</param>
      <param name="proxy">The proxy data for this request.</param>
      <returns>The <see cref="T:System.Net.ServicePoint"></see> object that manages communications for the request.</returns>
      <exception cref="T:System.UriFormatException">The URI specified in <paramref name="uriString">uriString</paramref> is invalid.</exception>
      <exception cref="T:System.InvalidOperationException">The maximum number of <see cref="T:System.Net.ServicePoint"></see> objects defined in <see cref="P:System.Net.ServicePointManager.MaxServicePoints"></see> has been reached.</exception>
    </member>
    <member name="P:System.Net.ServicePointManager.MaxServicePointIdleTime">
      <summary>Gets or sets the maximum idle time of a <see cref="T:System.Net.ServicePoint"></see> object.</summary>
      <returns>The maximum idle time, in milliseconds, of a <see cref="T:System.Net.ServicePoint"></see> object. The default value is 100,000 milliseconds (100 seconds).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Net.ServicePointManager.MaxServicePointIdleTime"></see> is less than <see cref="F:System.Threading.Timeout.Infinite"></see> or greater than <see cref="F:System.Int32.MaxValue"></see>.</exception>
    </member>
    <member name="P:System.Net.ServicePointManager.MaxServicePoints">
      <summary>Gets or sets the maximum number of <see cref="T:System.Net.ServicePoint"></see> objects to maintain at any time.</summary>
      <returns>The maximum number of <see cref="T:System.Net.ServicePoint"></see> objects to maintain. The default value is 0, which means there is no limit to the number of <see cref="T:System.Net.ServicePoint"></see> objects.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Net.ServicePointManager.MaxServicePoints"></see> is less than 0 or greater than <see cref="F:System.Int32.MaxValue"></see>.</exception>
    </member>
    <member name="P:System.Net.ServicePointManager.ReusePort">
      <summary>Setting this property value to true causes all outbound TCP connections from HttpWebRequest to use the native socket option SO_REUSE_UNICASTPORT on the socket. This causes the underlying outgoing ports to be shared. This is useful for scenarios where a large number of outgoing connections are made in a short time, and the app risks running out of ports.</summary>
      <returns>Returns <see cref="T:System.Boolean"></see>.</returns>
    </member>
    <member name="P:System.Net.ServicePointManager.SecurityProtocol">
      <summary>Gets or sets the security protocol used by the <see cref="T:System.Net.ServicePoint"></see> objects managed by the <see cref="T:System.Net.ServicePointManager"></see> object.</summary>
      <returns>One of the values defined in the <see cref="T:System.Net.SecurityProtocolType"></see> enumeration.</returns>
      <exception cref="T:System.NotSupportedException">The value specified to set the property is not a valid <see cref="T:System.Net.SecurityProtocolType"></see> enumeration value.</exception>
    </member>
    <member name="P:System.Net.ServicePointManager.ServerCertificateValidationCallback">
      <summary>Gets or sets the callback to validate a server certificate.</summary>
      <returns>A <see cref="T:System.Net.Security.RemoteCertificateValidationCallback"></see>. The default value is null.</returns>
    </member>
    <member name="P:System.Net.ServicePointManager.ServerCipherSuitesCallback">
      <returns></returns>
    </member>
    <member name="M:System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)">
      <summary>Enables or disables the keep-alive option on a TCP connection.</summary>
      <param name="enabled">If set to true, then the TCP keep-alive option on a TCP connection will be enabled using the specified keepAliveTime and keepAliveInterval values.   If set to false, then the TCP keep-alive option is disabled and the remaining parameters are ignored.   The default value is false.</param>
      <param name="keepAliveTime">Specifies the timeout, in milliseconds, with no activity until the first keep-alive packet is sent.   The value must be greater than 0.  If a value of less than or equal to zero is passed an <see cref="T:System.ArgumentOutOfRangeException"></see> is thrown.</param>
      <param name="keepAliveInterval">Specifies the interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received.   The value must be greater than 0.  If a value of less than or equal to zero is passed an <see cref="T:System.ArgumentOutOfRangeException"></see> is thrown.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for <paramref name="keepAliveTime">keepAliveTime</paramref> or <paramref name="keepAliveInterval">keepAliveInterval</paramref> parameter is less than or equal to 0.</exception>
    </member>
    <member name="P:System.Net.ServicePointManager.UseNagleAlgorithm">
      <summary>Determines whether the Nagle algorithm is used by the service points managed by this <see cref="T:System.Net.ServicePointManager"></see> object.</summary>
      <returns>true to use the Nagle algorithm; otherwise, false. The default value is true.</returns>
    </member>
    <member name="T:System.Net.SocketAddress">
      <summary>Stores serialized information from <see cref="T:System.Net.EndPoint"></see> derived classes.</summary>
    </member>
    <member name="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)">
      <summary>Creates a new instance of the <see cref="T:System.Net.SocketAddress"></see> class for the given address family.</summary>
      <param name="family">An <see cref="T:System.Net.Sockets.AddressFamily"></see> enumerated value.</param>
    </member>
    <member name="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)">
      <summary>Creates a new instance of the <see cref="T:System.Net.SocketAddress"></see> class using the specified address family and buffer size.</summary>
      <param name="family">An <see cref="T:System.Net.Sockets.AddressFamily"></see> enumerated value.</param>
      <param name="size">The number of bytes to allocate for the underlying buffer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size">size</paramref> is less than 2. These 2 bytes are needed to store <paramref name="family">family</paramref>.</exception>
    </member>
    <member name="M:System.Net.SocketAddress.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to the current Object.</summary>
      <param name="comparand">The <see cref="T:System.Object"></see> to compare with the current Object.</param>
      <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.SocketAddress.Family">
      <summary>Gets the <see cref="T:System.Net.Sockets.AddressFamily"></see> enumerated value of the current <see cref="T:System.Net.SocketAddress"></see>.</summary>
      <returns>One of the <see cref="T:System.Net.Sockets.AddressFamily"></see> enumerated values.</returns>
    </member>
    <member name="M:System.Net.SocketAddress.GetHashCode">
      <summary>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</summary>
      <returns>A hash code for the current <see cref="T:System.Object"></see>.</returns>
    </member>
    <member name="P:System.Net.SocketAddress.Item(System.Int32)">
      <summary>Gets or sets the specified index element in the underlying buffer.</summary>
      <param name="offset">The array index element of the desired information.</param>
      <returns>The value of the specified index element in the underlying buffer.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The specified index does not exist in the buffer.</exception>
    </member>
    <member name="P:System.Net.SocketAddress.Size">
      <summary>Gets the underlying buffer size of the <see cref="T:System.Net.SocketAddress"></see>.</summary>
      <returns>The underlying buffer size of the <see cref="T:System.Net.SocketAddress"></see>.</returns>
    </member>
    <member name="M:System.Net.SocketAddress.ToString">
      <summary>Returns information about the socket address.</summary>
      <returns>A string that contains information about the <see cref="T:System.Net.SocketAddress"></see>.</returns>
    </member>
    <member name="T:System.Net.SocketPermission">
      <summary>Controls rights to make or accept connections on a transport address.</summary>
    </member>
    <member name="M:System.Net.SocketPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.SocketPermission"></see> class that allows unrestricted access to the <see cref="T:System.Net.Sockets.Socket"></see> or disallows access to the <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
    </member>
    <member name="M:System.Net.SocketPermission.#ctor(System.Net.NetworkAccess,System.Net.TransportType,System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.SocketPermission"></see> class for the given transport address with the specified permission.</summary>
      <param name="access">One of the <see cref="T:System.Net.NetworkAccess"></see> values.</param>
      <param name="transport">One of the <see cref="T:System.Net.TransportType"></see> values.</param>
      <param name="hostName">The host name for the transport address.</param>
      <param name="portNumber">The port number for the transport address.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostName">hostName</paramref> is null.</exception>
    </member>
    <member name="P:System.Net.SocketPermission.AcceptList">
      <summary>Gets a list of <see cref="T:System.Net.EndpointPermission"></see> instances that identifies the endpoints that can be accepted under this permission instance.</summary>
      <returns>An instance that implements the <see cref="T:System.Collections.IEnumerator"></see> interface that contains <see cref="T:System.Net.EndpointPermission"></see> instances.</returns>
    </member>
    <member name="M:System.Net.SocketPermission.AddPermission(System.Net.NetworkAccess,System.Net.TransportType,System.String,System.Int32)">
      <summary>Adds a permission to the set of permissions for a transport address.</summary>
      <param name="access">One of the <see cref="T:System.Net.NetworkAccess"></see> values.</param>
      <param name="transport">One of the <see cref="T:System.Net.TransportType"></see> values.</param>
      <param name="hostName">The host name for the transport address.</param>
      <param name="portNumber">The port number for the transport address.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostName">hostName</paramref> is null.</exception>
    </member>
    <member name="F:System.Net.SocketPermission.AllPorts">
      <summary>Defines a constant that represents all ports.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Net.SocketPermission.ConnectList">
      <summary>Gets a list of <see cref="T:System.Net.EndpointPermission"></see> instances that identifies the endpoints that can be connected to under this permission instance.</summary>
      <returns>An instance that implements the <see cref="T:System.Collections.IEnumerator"></see> interface that contains <see cref="T:System.Net.EndpointPermission"></see> instances.</returns>
    </member>
    <member name="M:System.Net.SocketPermission.Copy">
      <summary>Creates a copy of a <see cref="T:System.Net.SocketPermission"></see> instance.</summary>
      <returns>A new instance of the <see cref="T:System.Net.SocketPermission"></see> class that is a copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.SocketPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a <see cref="T:System.Net.SocketPermission"></see> instance for an XML encoding.</summary>
      <param name="securityElement">The XML encoding used to reconstruct the <see cref="T:System.Net.SocketPermission"></see> instance.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="securityElement">securityElement</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="securityElement">securityElement</paramref> is not a permission element for this type.</exception>
    </member>
    <member name="M:System.Net.SocketPermission.Intersect(System.Security.IPermission)">
      <summary>Returns the logical intersection between two <see cref="T:System.Net.SocketPermission"></see> instances.</summary>
      <param name="target">The <see cref="T:System.Net.SocketPermission"></see> instance to intersect with the current instance.</param>
      <returns>The <see cref="T:System.Net.SocketPermission"></see> instance that represents the intersection of two <see cref="T:System.Net.SocketPermission"></see> instances. If the intersection is empty, the method returns null. If the <paramref name="target">target</paramref> parameter is a null reference, the method returns null.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="target">target</paramref> parameter is not a <see cref="T:System.Net.SocketPermission"></see>.</exception>
      <exception cref="T:System.Security.SecurityException"><see cref="T:System.Net.DnsPermission"></see> is not granted to the method caller.</exception>
    </member>
    <member name="M:System.Net.SocketPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines if the current permission is a subset of the specified permission.</summary>
      <param name="target">A <see cref="T:System.Net.SocketPermission"></see> that is to be tested for the subset relationship.</param>
      <returns>If <paramref name="target">target</paramref> is null, this method returns true if the current instance defines no permissions; otherwise, false. If <paramref name="target">target</paramref> is not null, this method returns true if the current instance defines a subset of <paramref name="target">target</paramref> permissions; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not a <see cref="T:System.Net.Sockets.SocketException"></see>.</exception>
      <exception cref="T:System.Security.SecurityException"><see cref="T:System.Net.DnsPermission"></see> is not granted to the method caller.</exception>
    </member>
    <member name="M:System.Net.SocketPermission.IsUnrestricted">
      <summary>Checks the overall permission state of the object.</summary>
      <returns>true if the <see cref="T:System.Net.SocketPermission"></see> instance is created with the Unrestricted value from <see cref="T:System.Security.Permissions.PermissionState"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.SocketPermission.ToXml">
      <summary>Creates an XML encoding of a <see cref="T:System.Net.SocketPermission"></see> instance and its current state.</summary>
      <returns>A <see cref="T:System.Security.SecurityElement"></see> instance that contains an XML-encoded representation of the <see cref="T:System.Net.SocketPermission"></see> instance, including state information.</returns>
    </member>
    <member name="M:System.Net.SocketPermission.Union(System.Security.IPermission)">
      <summary>Returns the logical union between two <see cref="T:System.Net.SocketPermission"></see> instances.</summary>
      <param name="target">The <see cref="T:System.Net.SocketPermission"></see> instance to combine with the current instance.</param>
      <returns>The <see cref="T:System.Net.SocketPermission"></see> instance that represents the union of two <see cref="T:System.Net.SocketPermission"></see> instances. If <paramref name="target">target</paramref> parameter is null, it returns a copy of the current instance.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not a <see cref="T:System.Net.SocketPermission"></see>.</exception>
    </member>
    <member name="T:System.Net.SocketPermissionAttribute">
      <summary>Specifies security actions to control <see cref="T:System.Net.Sockets.Socket"></see> connections. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Net.SocketPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.SocketPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see> value.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
      <exception cref="T:System.ArgumentException"><paramref name="action">action</paramref> is not a valid <see cref="T:System.Security.Permissions.SecurityAction"></see> value.</exception>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Access">
      <summary>Gets or sets the network access method that is allowed by this <see cref="T:System.Net.SocketPermissionAttribute"></see>.</summary>
      <returns>A string that contains the network access method that is allowed by this instance of <see cref="T:System.Net.SocketPermissionAttribute"></see>. Valid values are &quot;Accept&quot; and &quot;Connect.&quot;</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Net.SocketPermissionAttribute.Access"></see> property is not null when you attempt to set the value. To specify more than one Access method, use an additional attribute declaration statement.</exception>
    </member>
    <member name="M:System.Net.SocketPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new instance of the <see cref="T:System.Net.SocketPermission"></see> class.</summary>
      <returns>An instance of the <see cref="T:System.Net.SocketPermission"></see> class that corresponds to the security declaration.</returns>
      <exception cref="T:System.ArgumentException">One or more of the current instance's <see cref="P:System.Net.SocketPermissionAttribute.Access"></see>, <see cref="P:System.Net.SocketPermissionAttribute.Host"></see>, <see cref="P:System.Net.SocketPermissionAttribute.Transport"></see>, or <see cref="P:System.Net.SocketPermissionAttribute.Port"></see> properties is null.</exception>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Host">
      <summary>Gets or sets the DNS host name or IP address that is specified by this <see cref="T:System.Net.SocketPermissionAttribute"></see>.</summary>
      <returns>A string that contains the DNS host name or IP address that is associated with this instance of <see cref="T:System.Net.SocketPermissionAttribute"></see>.</returns>
      <exception cref="T:System.ArgumentException"><see cref="P:System.Net.SocketPermissionAttribute.Host"></see> is not null when you attempt to set the value. To specify more than one host, use an additional attribute declaration statement.</exception>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Port">
      <summary>Gets or sets the port number that is associated with this <see cref="T:System.Net.SocketPermissionAttribute"></see>.</summary>
      <returns>A string that contains the port number that is associated with this instance of <see cref="T:System.Net.SocketPermissionAttribute"></see>.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Net.SocketPermissionAttribute.Port"></see> property is null when you attempt to set the value. To specify more than one port, use an additional attribute declaration statement.</exception>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Transport">
      <summary>Gets or sets the <see cref="T:System.Net.TransportType"></see> that is specified by this <see cref="T:System.Net.SocketPermissionAttribute"></see>.</summary>
      <returns>A string that contains the <see cref="T:System.Net.TransportType"></see> that is associated with this <see cref="T:System.Net.SocketPermissionAttribute"></see>.</returns>
      <exception cref="T:System.ArgumentException"><see cref="P:System.Net.SocketPermissionAttribute.Transport"></see> is not null when you attempt to set the value. To specify more than one transport type, use an additional attribute declaration statement.</exception>
    </member>
    <member name="T:System.Net.Sockets.AddressFamily">
      <summary>Specifies the addressing scheme that an instance of the <see cref="T:System.Net.Sockets.Socket"></see> class can use.</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.AppleTalk">
      <summary>AppleTalk address.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Atm">
      <summary>Native ATM services address.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Banyan">
      <summary>Banyan address.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ccitt">
      <summary>Addresses for CCITT protocols, such as X.25.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Chaos">
      <summary>Address for MIT CHAOS protocols.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Cluster">
      <summary>Address for Microsoft cluster products.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.DataKit">
      <summary>Address for Datakit protocols.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.DataLink">
      <summary>Direct data-link interface address.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.DecNet">
      <summary>DECnet address.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ecma">
      <summary>European Computer Manufacturers Association (ECMA) address.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.FireFox">
      <summary>FireFox address.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.HyperChannel">
      <summary>NSC Hyperchannel address.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ieee12844">
      <summary>IEEE 1284.4 workgroup address.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.ImpLink">
      <summary>ARPANET IMP address.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.InterNetwork">
      <summary>Address for IP version 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.InterNetworkV6">
      <summary>Address for IP version 6.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ipx">
      <summary>IPX or SPX address.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Irda">
      <summary>IrDA address.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Iso">
      <summary>Address for ISO protocols.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Lat">
      <summary>LAT address.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Max">
      <summary>MAX address.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.NetBios">
      <summary>NetBios address.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.NetworkDesigners">
      <summary>Address for Network Designers OSI gateway-enabled protocols.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.NS">
      <summary>Address for Xerox NS protocols.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Osi">
      <summary>Address for OSI protocols.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Pup">
      <summary>Address for PUP protocols.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Sna">
      <summary>IBM SNA address.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Unix">
      <summary>Unix local to host address.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Unknown">
      <summary>Unknown address family.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Unspecified">
      <summary>Unspecified address family.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.VoiceView">
      <summary>VoiceView address.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Sockets.IOControlCode">
      <summary>Specifies the IO control codes supported by the <see cref="M:System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])"></see> method.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AbsorbRouterAlert">
      <summary>This value is equal to the Winsock 2 SIO_ABSORB_RTRALERT constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AddMulticastGroupOnInterface">
      <summary>Join a multicast group using an interface identified by its index. This control code is supported on Windows 2000 and later operating systems. This value is equal to the Winsock 2 SIO_INDEX_ADD_MCAST constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AddressListChange">
      <summary>Enable receiving notification when the list of local interfaces for the socket's protocol family changes. This control code is supported on Windows 2000 and later operating systems. This value is equal to the Winsock 2 SIO_ADDRESS_LIST_CHANGE constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AddressListQuery">
      <summary>Return the list of local interfaces that the socket can bind to. This control code is supported on Windows 2000 and later operating systems. This value is equal to the Winsock 2 SIO_ADDRESS_LIST_QUERY constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AddressListSort">
      <summary>Sort the structure returned by the <see cref="F:System.Net.Sockets.IOControlCode.AddressListQuery"></see> field and add scope ID information for IPv6 addresses. This control code is supported on Windows XP and later operating systems. This value is equal to the Winsock 2 SIO_ADDRESS_LIST_SORT constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AssociateHandle">
      <summary>Associate this socket with the specified handle of a companion interface. Refer to the appropriate  protocol-specific annex in the Winsock 2 reference or documentation for the particular companion interface for additional details. It is recommended that the Component Object Model (COM) be used instead of this IOCTL to discover and track other interfaces that might be supported by a socket. This control code is present for backward compatibility with systems where COM is not available or cannot be used for some other reason. This value is equal to the Winsock 2 SIO_ASSOCIATE_HANDLE constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AsyncIO">
      <summary>Enable notification for when data is waiting to be received. This value is equal to the Winsock 2 FIOASYNC constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.BindToInterface">
      <summary>Bind the socket to a specified interface index. This control code is supported on Windows 2000 and later operating systems. This value is equal to the Winsock 2 SIO_INDEX_BIND constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.DataToRead">
      <summary>Return the number of bytes available for reading. This value is equal to the Winsock 2 FIONREAD constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.DeleteMulticastGroupFromInterface">
      <summary>Remove the socket from a multicast group. This control code is supported on Windows 2000 and later operating systems. This value is equal to the Winsock 2 SIO_INDEX_ADD_MCAST constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.EnableCircularQueuing">
      <summary>Replace the oldest queued datagram with an incoming datagram when the incoming message queues are full. This value is equal to the Winsock 2 SIO_ENABLE_CIRCULAR_QUEUEING constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.Flush">
      <summary>Discard the contents of the sending queue. This value is equal to the Winsock 2 SIO_FLUSH constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.GetBroadcastAddress">
      <summary>Return a SOCKADDR structure that contains the broadcast address for the address family of the current socket. The returned address can be used with the <see cref="Overload:System.Net.Sockets.Socket.SendTo"></see> method. This value is equal to the Winsock 2 SIO_GET_BROADCAST_ADDRESS constant. This value can be used on User Datagram Protocol (UDP) sockets only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.GetExtensionFunctionPointer">
      <summary>Obtain provider-specific functions that are not part of the Winsock specification. Functions are specified using their provider-assigned GUID. This value is equal to the Winsock 2 SIO_GET_EXTENSION_FUNCTION_POINTER constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.GetGroupQos">
      <summary>Return the Quality of Service (QOS) attributes for the socket group. This value is reserved for future use, and is equal to the Winsock 2 SIO_GET_GROUP_QOS constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.GetQos">
      <summary>Retrieve the QOS structure associated with the socket. This control is only supported on platforms that provide a QOS capable transport (Windows Me, Windows 2000, and later.) This value is equal to the Winsock 2 SIO_GET_QOS constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.KeepAliveValues">
      <summary>Control sending TCP keep-alive packets and the interval at which they are sent. This control code is supported on Windows 2000 and later operating systems. For additional information, see RFC 1122 section 4.2.3.6. This value is equal to the Winsock 2 SIO_KEEPALIVE_VALS constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.LimitBroadcasts">
      <summary>This value is equal to the Winsock 2 SIO_LIMIT_BROADCASTS constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.MulticastInterface">
      <summary>Set the interface used for outgoing multicast packets. The interface is identified by its index. This control code is supported on Windows 2000 and later operating systems.  This value is equal to the Winsock 2 SIO_INDEX_MCASTIF constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.MulticastScope">
      <summary>Control the number of times a multicast packet can be forwarded by a router, also known as the Time to Live (TTL), or hop count. This value is equal to the Winsock 2 SIO_MULTICAST_SCOPE constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.MultipointLoopback">
      <summary>Control whether multicast data sent by the socket appears as incoming data in the sockets receive queue. This value is equal to the Winsock 2 SIO_MULTIPOINT_LOOPBACK constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.NamespaceChange">
      <summary>Control whether the socket receives notification when a namespace query becomes invalid. This control code is supported on Windows XP and later operating systems. This value is equal to the Winsock 2 SIO_NSP_NOTIFY_CHANGE constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.NonBlockingIO">
      <summary>Control the blocking behavior of the socket. If the argument specified with this control code is zero, the socket is placed in blocking mode. If the argument is nonzero, the socket is placed in nonblocking mode. This value is equal to the Winsock 2 FIONBIO constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.OobDataRead">
      <summary>Return information about out-of-band data waiting to be received. When using this control code on stream sockets, the return value indicates the number of bytes available.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.QueryTargetPnpHandle">
      <summary>Retrieve the underlying provider's SOCKET handle. This handle can be used to receive plug-and-play event notification. This control code is supported on Windows 2000 and later operating systems. This value is equal to the Winsock 2 SIO_QUERY_TARGET_PNP_HANDLE constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.ReceiveAll">
      <summary>Enable receiving all IPv4 packets on the network. The socket must have address family <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"></see>, the socket type must be <see cref="F:System.Net.Sockets.SocketType.Raw"></see>, and the protocol type must be <see cref="F:System.Net.Sockets.ProtocolType.IP"></see>. The current user must belong to the Administrators group on the local computer, and the socket must be bound to a specific port. This control code is supported on Windows 2000 and later operating systems. This value is equal to the Winsock 2 SIO_RCVALL constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.ReceiveAllIgmpMulticast">
      <summary>Enable receiving all Internet Group Management Protocol (IGMP) packets on the network. The socket must have address family <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"></see>, the socket type must be <see cref="F:System.Net.Sockets.SocketType.Raw"></see>, and the protocol type must be <see cref="F:System.Net.Sockets.ProtocolType.Igmp"></see>. The current user must belong to the Administrators group on the local computer, and the socket must be bound to a specific port. This control code is supported on Windows 2000 and later operating systems. This value is equal to the Winsock 2 SIO_RCVALL_IGMPMCAST constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.ReceiveAllMulticast">
      <summary>Enable receiving all multicast IPv4 packets on the network. These are packets with destination addresses in the range 224.0.0.0 through 239.255.255.255. The socket must have address family <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"></see>, the socket type must be <see cref="F:System.Net.Sockets.SocketType.Raw"></see>, and the protocol type must be <see cref="F:System.Net.Sockets.ProtocolType.Udp"></see>. The current user must belong to the Administrators group on the local computer, and the socket must be bound to a specific port. This control code is supported on Windows 2000 and later operating systems. This value is equal to the Winsock 2 SIO_RCVALL_MCAST constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.RoutingInterfaceChange">
      <summary>Enable receiving notification when the local interface used to access a remote endpoint changes. This value is equal to the Winsock 2 SIO_ROUTING_INTERFACE_CHANGE constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.RoutingInterfaceQuery">
      <summary>Return the interface addresses that can be used to connect to the specified remote address. This value is equal to the Winsock 2 SIO_ROUTING_INTERFACE_QUERY constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.SetGroupQos">
      <summary>Set the Quality of Service (QOS) attributes for the socket group. This value is reserved for future use and is equal to the Winsock 2 SIO_SET_GROUP_QOS constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.SetQos">
      <summary>Set the Quality of Service (QOS) attributes for the socket. QOS defines the bandwidth requirements for the socket. This control code is supported on Windows Me, Windows 2000, and later operating systems. This value is equal to the Winsock 2 SIO_SET_QOS constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.TranslateHandle">
      <summary>Return a handle for the socket that is valid in the context of a companion interface. This value is equal to the Winsock 2 SIO_TRANSLATE_HANDLE constant.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.UnicastInterface">
      <summary>Set the interface used for outgoing unicast packets. This value is equal to the Winsock 2 SIO_UCAST_IF constant.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Sockets.IPPacketInformation">
      <summary>Presents the packet information from a call to <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)"></see> or <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)"></see>.</summary>
    </member>
    <member name="P:System.Net.Sockets.IPPacketInformation.Address">
      <summary>Gets the origin information of the packet that was received as a result of calling the <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)"></see> method or <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)"></see> method.</summary>
      <returns>An <see cref="T:System.Net.IPAddress"></see> that indicates the origin information of the packet that was received as a result of calling the <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)"></see> method or <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)"></see> method. For packets that were sent from a unicast address, the <see cref="P:System.Net.Sockets.IPPacketInformation.Address"></see> property will return the <see cref="T:System.Net.IPAddress"></see> of the sender; for multicast or broadcast packets, the <see cref="P:System.Net.Sockets.IPPacketInformation.Address"></see> property will return the multicast or broadcast <see cref="T:System.Net.IPAddress"></see>.</returns>
    </member>
    <member name="M:System.Net.Sockets.IPPacketInformation.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="comparand">The object to compare with this instance.</param>
      <returns>true if <paramref name="comparand">comparand</paramref> is an instance of <see cref="T:System.Net.Sockets.IPPacketInformation"></see> and equals the value of the instance; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Sockets.IPPacketInformation.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>An Int32 hash code.</returns>
    </member>
    <member name="P:System.Net.Sockets.IPPacketInformation.Interface">
      <summary>Gets the network interface information that is associated with a call to <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)"></see> or <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)"></see>.</summary>
      <returns>An <see cref="T:System.Int32"></see> value, which represents the index of the network interface. You can use this index with <see cref="M:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces"></see> to get more information about the relevant interface.</returns>
    </member>
    <member name="M:System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
      <summary>Tests whether two specified <see cref="T:System.Net.Sockets.IPPacketInformation"></see> instances are equivalent.</summary>
      <param name="packetInformation1">The <see cref="T:System.Net.Sockets.IPPacketInformation"></see> instance that is to the left of the equality operator.</param>
      <param name="packetInformation2">The <see cref="T:System.Net.Sockets.IPPacketInformation"></see> instance that is to the right of the equality operator.</param>
      <returns>true if <paramref name="packetInformation1">packetInformation1</paramref> and <paramref name="packetInformation2">packetInformation2</paramref> are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
      <summary>Tests whether two specified <see cref="T:System.Net.Sockets.IPPacketInformation"></see> instances are not equal.</summary>
      <param name="packetInformation1">The <see cref="T:System.Net.Sockets.IPPacketInformation"></see> instance that is to the left of the inequality operator.</param>
      <param name="packetInformation2">The <see cref="T:System.Net.Sockets.IPPacketInformation"></see> instance that is to the right of the inequality operator.</param>
      <returns>true if <paramref name="packetInformation1">packetInformation1</paramref> and <paramref name="packetInformation2">packetInformation2</paramref> are unequal; otherwise, false.</returns>
    </member>
    <member name="T:System.Net.Sockets.IPProtectionLevel">
      <summary>A value that enables restriction of an IPv6 socket to a specified scope, such as addresses with the same link local or site local prefix.</summary>
    </member>
    <member name="F:System.Net.Sockets.IPProtectionLevel.EdgeRestricted">
      <summary>The IP protection level is edge restricted. This value would be used by applications designed to operate across the Internet. This setting does not allow Network Address Translation (NAT) traversal using the Windows Teredo implementation. These applications may bypass IPv4 firewalls, so applications must be hardened against Internet attacks directed at the opened port. On Windows Server 2003 and Windows XP, the default value for the IP Protection level on a socket is edge restricted.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IPProtectionLevel.Restricted">
      <summary>The IP protection level is restricted. This value would be used by intranet applications that do not implement Internet scenarios. These applications are generally not tested or hardened against Internet-style attacks. This setting will limit the received traffic to link-local only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IPProtectionLevel.Unrestricted">
      <summary>The IP protection level is unrestricted. This value would be used by applications designed to operate across the Internet, including applications taking advantage of IPv6 NAT traversal capabilities built into Windows (Teredo, for example). These applications may bypass IPv4 firewalls, so applications must be hardened against Internet attacks directed at the opened port. On Windows Server 2008 R2 and Windows Vista, the default value for the IP Protection level on a socket is unrestricted.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.IPProtectionLevel.Unspecified">
      <summary>The IP protection level is unspecified. On Windows 7 and Windows Server 2008 R2, the default value for the IP Protection level on a socket is unspecified.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Sockets.IPv6MulticastOption">
      <summary>Contains option values for joining an IPv6 multicast group.</summary>
    </member>
    <member name="M:System.Net.Sockets.IPv6MulticastOption.#ctor(System.Net.IPAddress)">
      <summary>Initializes a new version of the <see cref="T:System.Net.Sockets.IPv6MulticastOption"></see> class for the specified IP multicast group.</summary>
      <param name="group">The <see cref="T:System.Net.IPAddress"></see> of the multicast group.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="group">group</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Sockets.IPv6MulticastOption.#ctor(System.Net.IPAddress,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.IPv6MulticastOption"></see> class with the specified IP multicast group and the local interface address.</summary>
      <param name="group">The group <see cref="T:System.Net.IPAddress"></see>.</param>
      <param name="ifindex">The local interface address.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ifindex">ifindex</paramref> is less than 0.   -or-  <paramref name="ifindex">ifindex</paramref> is greater than 0x00000000FFFFFFFF.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="group">group</paramref> is null.</exception>
    </member>
    <member name="P:System.Net.Sockets.IPv6MulticastOption.Group">
      <summary>Gets or sets the IP address of a multicast group.</summary>
      <returns>An <see cref="T:System.Net.IPAddress"></see> that contains the Internet address of a multicast group.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="group">group</paramref> is null.</exception>
    </member>
    <member name="P:System.Net.Sockets.IPv6MulticastOption.InterfaceIndex">
      <summary>Gets or sets the interface index that is associated with a multicast group.</summary>
      <returns>A <see cref="T:System.UInt64"></see> value that specifies the address of the interface.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value that is specified for a set operation is less than 0 or greater than 0x00000000FFFFFFFF.</exception>
    </member>
    <member name="T:System.Net.Sockets.LingerOption">
      <summary>Specifies whether a <see cref="T:System.Net.Sockets.Socket"></see> will remain connected after a call to the <see cref="M:System.Net.Sockets.Socket.Close"></see> or <see cref="M:System.Net.Sockets.TcpClient.Close"></see> methods and the length of time it will remain connected, if data remains to be sent.</summary>
    </member>
    <member name="M:System.Net.Sockets.LingerOption.#ctor(System.Boolean,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.LingerOption"></see> class.</summary>
      <param name="enable">true to remain connected after the <see cref="M:System.Net.Sockets.Socket.Close"></see> method is called; otherwise, false.</param>
      <param name="seconds">The number of seconds to remain connected after the <see cref="M:System.Net.Sockets.Socket.Close"></see> method is called.</param>
    </member>
    <member name="P:System.Net.Sockets.LingerOption.Enabled">
      <summary>Gets or sets a value that indicates whether to linger after the <see cref="T:System.Net.Sockets.Socket"></see> is closed.</summary>
      <returns>true if the <see cref="T:System.Net.Sockets.Socket"></see> should linger after <see cref="M:System.Net.Sockets.Socket.Close"></see> is called; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Sockets.LingerOption.LingerTime">
      <summary>Gets or sets the amount of time to remain connected after calling the <see cref="M:System.Net.Sockets.Socket.Close"></see> method if data remains to be sent.</summary>
      <returns>The amount of time, in seconds, to remain connected after calling <see cref="M:System.Net.Sockets.Socket.Close"></see>.</returns>
    </member>
    <member name="T:System.Net.Sockets.MulticastOption">
      <summary>Contains <see cref="T:System.Net.IPAddress"></see> values used to join and drop multicast groups.</summary>
    </member>
    <member name="M:System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress)">
      <summary>Initializes a new version of the <see cref="T:System.Net.Sockets.MulticastOption"></see> class for the specified IP multicast group.</summary>
      <param name="group">The <see cref="T:System.Net.IPAddress"></see> of the multicast group.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="group">group</paramref> is null.</exception>
    </member>
    <member name="M:System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.MulticastOption"></see> class with the specified IP multicast group address and interface index.</summary>
      <param name="group">The <see cref="T:System.Net.IPAddress"></see> of the multicast group.</param>
      <param name="interfaceIndex">The index of the interface that is used to send and receive multicast packets.</param>
    </member>
    <member name="M:System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress,System.Net.IPAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.MulticastOption"></see> class with the specified IP multicast group address and local IP address associated with a network interface.</summary>
      <param name="group">The group <see cref="T:System.Net.IPAddress"></see>.</param>
      <param name="mcint">The local <see cref="T:System.Net.IPAddress"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="group">group</paramref> is null.   -or-  <paramref name="mcint">mcint</paramref> is null.</exception>
    </member>
    <member name="P:System.Net.Sockets.MulticastOption.Group">
      <summary>Gets or sets the IP address of a multicast group.</summary>
      <returns>An <see cref="T:System.Net.IPAddress"></see> that contains the Internet address of a multicast group.</returns>
    </member>
    <member name="P:System.Net.Sockets.MulticastOption.InterfaceIndex">
      <summary>Gets or sets the index of the interface that is used to send and receive multicast packets.</summary>
      <returns>An integer that represents the index of a <see cref="T:System.Net.NetworkInformation.NetworkInterface"></see> array element.</returns>
    </member>
    <member name="P:System.Net.Sockets.MulticastOption.LocalAddress">
      <summary>Gets or sets the local address associated with a multicast group.</summary>
      <returns>An <see cref="T:System.Net.IPAddress"></see> that contains the local address associated with a multicast group.</returns>
    </member>
    <member name="T:System.Net.Sockets.NetworkStream">
      <summary>Provides the underlying stream of data for network access.</summary>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
      <summary>Creates a new instance of the <see cref="T:System.Net.Sockets.NetworkStream"></see> class for the specified <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <param name="socket">The <see cref="T:System.Net.Sockets.Socket"></see> that the <see cref="T:System.Net.Sockets.NetworkStream"></see> will use to send and receive data.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="socket">socket</paramref> parameter is null.</exception>
      <exception cref="T:System.IO.IOException">The <paramref name="socket">socket</paramref> parameter is not connected.   -or-   The <see cref="P:System.Net.Sockets.Socket.SocketType"></see> property of the <paramref name="socket">socket</paramref> parameter is not <see cref="F:System.Net.Sockets.SocketType.Stream"></see>.   -or-   The <paramref name="socket">socket</paramref> parameter is in a nonblocking state.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.NetworkStream"></see> class for the specified <see cref="T:System.Net.Sockets.Socket"></see> with the specified <see cref="T:System.Net.Sockets.Socket"></see> ownership.</summary>
      <param name="socket">The <see cref="T:System.Net.Sockets.Socket"></see> that the <see cref="T:System.Net.Sockets.NetworkStream"></see> will use to send and receive data.</param>
      <param name="ownsSocket">Set to true to indicate that the <see cref="T:System.Net.Sockets.NetworkStream"></see> will take ownership of the <see cref="T:System.Net.Sockets.Socket"></see>; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="socket">socket</paramref> parameter is null.</exception>
      <exception cref="T:System.IO.IOException">The <paramref name="socket">socket</paramref> parameter is not connected.   -or-   the value of the <see cref="P:System.Net.Sockets.Socket.SocketType"></see> property of the <paramref name="socket">socket</paramref> parameter is not <see cref="F:System.Net.Sockets.SocketType.Stream"></see>.   -or-   the <paramref name="socket">socket</paramref> parameter is in a nonblocking state.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
      <summary>Creates a new instance of the <see cref="T:System.Net.Sockets.NetworkStream"></see> class for the specified <see cref="T:System.Net.Sockets.Socket"></see> with the specified access rights.</summary>
      <param name="socket">The <see cref="T:System.Net.Sockets.Socket"></see> that the <see cref="T:System.Net.Sockets.NetworkStream"></see> will use to send and receive data.</param>
      <param name="access">A bitwise combination of the <see cref="T:System.IO.FileAccess"></see> values that specify the type of access given to the <see cref="T:System.Net.Sockets.NetworkStream"></see> over the provided <see cref="T:System.Net.Sockets.Socket"></see>.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="socket">socket</paramref> parameter is null.</exception>
      <exception cref="T:System.IO.IOException">The <paramref name="socket">socket</paramref> parameter is not connected.   -or-   the <see cref="P:System.Net.Sockets.Socket.SocketType"></see> property of the <paramref name="socket">socket</paramref> parameter is not <see cref="F:System.Net.Sockets.SocketType.Stream"></see>.   -or-   the <paramref name="socket">socket</paramref> parameter is in a nonblocking state.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.Net.Sockets.NetworkStream"></see> class for the specified <see cref="T:System.Net.Sockets.Socket"></see> with the specified access rights and the specified <see cref="T:System.Net.Sockets.Socket"></see> ownership.</summary>
      <param name="socket">The <see cref="T:System.Net.Sockets.Socket"></see> that the <see cref="T:System.Net.Sockets.NetworkStream"></see> will use to send and receive data.</param>
      <param name="access">A bitwise combination of the <see cref="T:System.IO.FileAccess"></see> values that specifies the type of access given to the <see cref="T:System.Net.Sockets.NetworkStream"></see> over the provided <see cref="T:System.Net.Sockets.Socket"></see>.</param>
      <param name="ownsSocket">Set to true to indicate that the <see cref="T:System.Net.Sockets.NetworkStream"></see> will take ownership of the <see cref="T:System.Net.Sockets.Socket"></see>; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="socket">socket</paramref> parameter is null.</exception>
      <exception cref="T:System.IO.IOException">The <paramref name="socket">socket</paramref> parameter is not connected.   -or-   The <see cref="P:System.Net.Sockets.Socket.SocketType"></see> property of the <paramref name="socket">socket</paramref> parameter is not <see cref="F:System.Net.Sockets.SocketType.Stream"></see>.   -or-   The <paramref name="socket">socket</paramref> parameter is in a nonblocking state.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous read from the <see cref="T:System.Net.Sockets.NetworkStream"></see>.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that is the location in memory to store data read from the <see cref="T:System.Net.Sockets.NetworkStream"></see>.</param>
      <param name="offset">The location in buffer to begin storing the data.</param>
      <param name="size">The number of bytes to read from the <see cref="T:System.Net.Sockets.NetworkStream"></see>.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback"></see> delegate that is executed when <see cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see> completes.</param>
      <param name="state">An object that contains any additional user-defined data.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that represents the asynchronous call.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer">buffer</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset">offset</paramref> parameter is less than 0.   -or-   The <paramref name="offset">offset</paramref> parameter is greater than the length of the <paramref name="buffer">buffer</paramref> paramater.   -or-   The <paramref name="size">size</paramref> is less than 0.   -or-   The <paramref name="size">size</paramref> is greater than the length of <paramref name="buffer">buffer</paramref> minus the value of the <paramref name="offset">offset</paramref> parameter.</exception>
      <exception cref="T:System.IO.IOException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> is closed.   -or-   There was a failure while reading from the network.   -or-   An error occurred when accessing the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.NetworkStream"></see> is closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous write to a stream.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that contains the data to write to the <see cref="T:System.Net.Sockets.NetworkStream"></see>.</param>
      <param name="offset">The location in buffer to begin sending the data.</param>
      <param name="size">The number of bytes to write to the <see cref="T:System.Net.Sockets.NetworkStream"></see>.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback"></see> delegate that is executed when <see cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see> completes.</param>
      <param name="state">An object that contains any additional user-defined data.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that represents the asynchronous call.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer">buffer</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset">offset</paramref> parameter is less than 0.   -or-   The <paramref name="offset">offset</paramref> parameter is greater than the length of <paramref name="buffer">buffer</paramref>.   -or-   The <paramref name="size">size</paramref> parameter is less than 0.   -or-   The <paramref name="size">size</paramref> parameter is greater than the length of <paramref name="buffer">buffer</paramref> minus the value of the <paramref name="offset">offset</paramref> parameter.</exception>
      <exception cref="T:System.IO.IOException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> is closed.   -or-   There was a failure while writing to the network.   -or-   An error occurred when accessing the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.NetworkStream"></see> is closed.</exception>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.CanRead">
      <summary>Gets a value that indicates whether the <see cref="T:System.Net.Sockets.NetworkStream"></see> supports reading.</summary>
      <returns>true if data can be read from the stream; otherwise, false. The default value is true.</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.CanSeek">
      <summary>Gets a value that indicates whether the stream supports seeking. This property is not currently supported.This property always returns false.</summary>
      <returns>false in all cases to indicate that <see cref="T:System.Net.Sockets.NetworkStream"></see> cannot seek a specific location in the stream.</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.CanTimeout">
      <summary>Indicates whether timeout properties are usable for <see cref="T:System.Net.Sockets.NetworkStream"></see>.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.CanWrite">
      <summary>Gets a value that indicates whether the <see cref="T:System.Net.Sockets.NetworkStream"></see> supports writing.</summary>
      <returns>true if data can be written to the <see cref="T:System.Net.Sockets.NetworkStream"></see>; otherwise, false. The default value is true.</returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
      <summary>Closes the <see cref="T:System.Net.Sockets.NetworkStream"></see> after waiting the specified time to allow data to be sent.</summary>
      <param name="timeout">A 32-bit signed integer that specifies the number of milliseconds to wait to send any remaining data before closing.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="timeout">timeout</paramref> parameter is less than -1.</exception>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.DataAvailable">
      <summary>Gets a value that indicates whether data is available on the <see cref="T:System.Net.Sockets.NetworkStream"></see> to be read.</summary>
      <returns>true if data is available on the stream to be read; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.NetworkStream"></see> is closed.</exception>
      <exception cref="T:System.IO.IOException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> is closed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode"></see> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.NetworkStream"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
      <summary>Handles the end of an asynchronous read.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> that represents an asynchronous call.</param>
      <returns>The number of bytes read from the <see cref="T:System.Net.Sockets.NetworkStream"></see>.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="asyncResult">asyncResult</paramref> parameter is null.</exception>
      <exception cref="T:System.IO.IOException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> is closed.   -or-   An error occurred when accessing the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.NetworkStream"></see> is closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
      <summary>Handles the end of an asynchronous write.</summary>
      <param name="asyncResult">The <see cref="T:System.IAsyncResult"></see> that represents the asynchronous call.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="asyncResult">asyncResult</paramref> parameter is null.</exception>
      <exception cref="T:System.IO.IOException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> is closed.   -or-   An error occurred while writing to the network.   -or-   An error occurred when accessing the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.NetworkStream"></see> is closed.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Finalize">
      <summary>Releases all resources used by the <see cref="T:System.Net.Sockets.NetworkStream"></see>.</summary>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Flush">
      <summary>Flushes data from the stream. This method is reserved for future use.</summary>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>Flushes data from the stream as an asynchronous operation.</summary>
      <param name="cancellationToken">A cancellation token used to propagate notification that this  operation should be canceled.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task"></see>.   The task object representing the asynchronous operation.</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Length">
      <summary>Gets the length of the data available on the stream. This property is not currently supported and always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <returns>The length of the data available on the stream.</returns>
      <exception cref="T:System.NotSupportedException">Any use of this property.</exception>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Position">
      <summary>Gets or sets the current position in the stream. This property is not currently supported and always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <returns>The current position in the stream.</returns>
      <exception cref="T:System.NotSupportedException">Any use of this property.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads data from the <see cref="T:System.Net.Sockets.NetworkStream"></see>.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that is the location in memory to store data read from the <see cref="T:System.Net.Sockets.NetworkStream"></see>.</param>
      <param name="offset">The location in buffer to begin storing the data to.</param>
      <param name="size">The number of bytes to read from the <see cref="T:System.Net.Sockets.NetworkStream"></see>.</param>
      <returns>The number of bytes read from the <see cref="T:System.Net.Sockets.NetworkStream"></see>, or 0 if the socket is closed.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer">buffer</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset">offset</paramref> parameter is less than 0.   -or-   The <paramref name="offset">offset</paramref> parameter is greater than the length of <paramref name="buffer">buffer</paramref>.   -or-   The <paramref name="size">size</paramref> parameter is less than 0.   -or-   The <paramref name="size">size</paramref> parameter is greater than the length of <paramref name="buffer">buffer</paramref> minus the value of the <paramref name="offset">offset</paramref> parameter.   -or-   An error occurred when accessing the socket.</exception>
      <exception cref="T:System.IO.IOException">The underlying <see cref="T:System.Net.Sockets.Socket"></see> is closed.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.NetworkStream"></see> is closed.   -or-   There is a failure reading from the network.</exception>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Readable">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Net.Sockets.NetworkStream"></see> can be read.</summary>
      <returns>true to indicate that the <see cref="T:System.Net.Sockets.NetworkStream"></see> can be read; otherwise, false. The default value is true.</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.ReadTimeout">
      <summary>Gets or sets the amount of time that a read operation blocks waiting for data.</summary>
      <returns>A <see cref="T:System.Int32"></see> that specifies the amount of time, in milliseconds, that will elapse before a read operation fails. The default value, <see cref="F:System.Threading.Timeout.Infinite"></see>, specifies that the read operation does not time out.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than or equal to zero and is not <see cref="F:System.Threading.Timeout.Infinite"></see>.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the current position of the stream to the given value. This method is not currently supported and always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <param name="offset">This parameter is not used.</param>
      <param name="origin">This parameter is not used.</param>
      <returns>The position in the stream.</returns>
      <exception cref="T:System.NotSupportedException">Any use of this property.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
      <summary>Sets the length of the stream. This method always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <param name="value">This parameter is not used.</param>
      <exception cref="T:System.NotSupportedException">Any use of this property.</exception>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Socket">
      <summary>Gets the underlying <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
      <returns>A <see cref="T:System.Net.Sockets.Socket"></see> that represents the underlying network connection.</returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes data to the <see cref="T:System.Net.Sockets.NetworkStream"></see>.</summary>
      <param name="buffer">An array of type <see cref="T:System.Byte"></see> that contains the data to write to the <see cref="T:System.Net.Sockets.NetworkStream"></see>.</param>
      <param name="offset">The location in buffer from which to start writing data.</param>
      <param name="size">The number of bytes to write to the <see cref="T:System.Net.Sockets.NetworkStream"></see>.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer">buffer</paramref> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset">offset</paramref> parameter is less than 0.   -or-   The <paramref name="offset">offset</paramref> parameter is greater than the length of <paramref name="buffer">buffer</paramref>.   -or-   The <paramref name="size">size</paramref> parameter is less than 0.   -or-   The <paramref name="size">size</paramref> parameter is greater than the length of <paramref name="buffer">buffer</paramref> minus the value of the <paramref name="offset">offset</paramref> parameter.</exception>
      <exception cref="T:System.IO.IOException">There was a failure while writing to the network.   -or-   An error occurred when accessing the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.NetworkStream"></see> is closed.   -or-   There was a failure reading from the network.</exception>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Writeable">
      <summary>Gets a value that indicates whether the <see cref="T:System.Net.Sockets.NetworkStream"></see> is writable.</summary>
      <returns>true if data can be written to the stream; otherwise, false. The default value is true.</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.WriteTimeout">
      <summary>Gets or sets the amount of time that a write operation blocks waiting for data.</summary>
      <returns>A <see cref="T:System.Int32"></see> that specifies the amount of time, in milliseconds, that will elapse before a write operation fails. The default value, <see cref="F:System.Threading.Timeout.Infinite"></see>, specifies that the write operation does not time out.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than or equal to zero and is not <see cref="F:System.Threading.Timeout.Infinite"></see>.</exception>
    </member>
    <member name="T:System.Net.Sockets.ProtocolFamily">
      <summary>Specifies the type of protocol that an instance of the <see cref="T:System.Net.Sockets.Socket"></see> class can use.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.AppleTalk">
      <summary>AppleTalk protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Atm">
      <summary>Native ATM services protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Banyan">
      <summary>Banyan protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ccitt">
      <summary>CCITT protocol, such as X.25.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Chaos">
      <summary>MIT CHAOS protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Cluster">
      <summary>Microsoft Cluster products protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.DataKit">
      <summary>DataKit protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.DataLink">
      <summary>Direct data link protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.DecNet">
      <summary>DECNet protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ecma">
      <summary>European Computer Manufacturers Association (ECMA) protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.FireFox">
      <summary>FireFox protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.HyperChannel">
      <summary>NSC HyperChannel protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ieee12844">
      <summary>IEEE 1284.4 workgroup protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.ImpLink">
      <summary>ARPANET IMP protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.InterNetwork">
      <summary>IP version 4 protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.InterNetworkV6">
      <summary>IP version 6 protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ipx">
      <summary>IPX or SPX protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Irda">
      <summary>IrDA protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Iso">
      <summary>ISO protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Lat">
      <summary>LAT protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Max">
      <summary>MAX protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.NetBios">
      <summary>NetBIOS protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.NetworkDesigners">
      <summary>Network Designers OSI gateway enabled protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.NS">
      <summary>Xerox NS protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Osi">
      <summary>OSI protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Pup">
      <summary>PUP protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Sna">
      <summary>IBM SNA protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Unix">
      <summary>Unix local to host protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Unknown">
      <summary>Unknown protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Unspecified">
      <summary>Unspecified protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.VoiceView">
      <summary>VoiceView protocol.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Sockets.ProtocolType">
      <summary>Specifies the protocols that the <see cref="T:System.Net.Sockets.Socket"></see> class supports.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Ggp">
      <summary>Gateway To Gateway Protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Icmp">
      <summary>Internet Control Message Protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IcmpV6">
      <summary>Internet Control Message Protocol for IPv6.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Idp">
      <summary>Internet Datagram Protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Igmp">
      <summary>Internet Group Management Protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IP">
      <summary>Internet Protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPSecAuthenticationHeader">
      <summary>IPv6 Authentication header. For details, see RFC 2292 section 2.2.1, available at <see cref="http://www.ietf.org">http://www.ietf.org</see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPSecEncapsulatingSecurityPayload">
      <summary>IPv6 Encapsulating Security Payload header.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv4">
      <summary>Internet Protocol version 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6">
      <summary>Internet Protocol version 6 (IPv6).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6DestinationOptions">
      <summary>IPv6 Destination Options header.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6FragmentHeader">
      <summary>IPv6 Fragment header.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6HopByHopOptions">
      <summary>IPv6 Hop by Hop Options header.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6NoNextHeader">
      <summary>IPv6 No next header.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6RoutingHeader">
      <summary>IPv6 Routing header.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Ipx">
      <summary>Internet Packet Exchange Protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.ND">
      <summary>Net Disk Protocol (unofficial).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Pup">
      <summary>PARC Universal Packet Protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Raw">
      <summary>Raw IP packet protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Spx">
      <summary>Sequenced Packet Exchange protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.SpxII">
      <summary>Sequenced Packet Exchange version 2 protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Tcp">
      <summary>Transmission Control Protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Udp">
      <summary>User Datagram Protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Unknown">
      <summary>Unknown protocol.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Unspecified">
      <summary>Unspecified protocol.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.Sockets.SelectMode">
      <summary>Defines the polling modes for the <see cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)"></see> method.</summary>
    </member>
    <member name="F:System.Net.Sockets.SelectMode.SelectError">
      <summary>Error status mode.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SelectMode.SelectRead">
      <summary>Read status mode.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.Sockets.SelectMode.SelectWrite">
      <summary>Write status mode.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultParameterValueAttribute">
      <summary>Sets the default value of a parameter when called from a language that supports default parameters. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultParameterValueAttribute.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DefaultParameterValueAttribute"></see> class with the default value of a parameter.</summary>
      <param name="value">An object that represents the default value of a parameter.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultParameterValueAttribute.Value">
      <summary>Gets the default value of a parameter.</summary>
      <returns>An object that represents the default value of a parameter.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleCollector">
      <summary>Tracks outstanding handles and forces a garbage collection when the specified threshold is reached.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.HandleCollector"></see> class using a name and a threshold at which to begin handle collection.</summary>
      <param name="name">A name for the collector. This parameter allows you to name collectors that track handle types separately.</param>
      <param name="initialThreshold">A value that specifies the point at which collections should begin.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="initialThreshold">initialThreshold</paramref> parameter is less than 0.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.HandleCollector"></see> class using a name, a threshold at which to begin handle collection, and a threshold at which handle collection must occur.</summary>
      <param name="name">A name for the collector.  This parameter allows you to name collectors that track handle types separately.</param>
      <param name="initialThreshold">A value that specifies the point at which collections should begin.</param>
      <param name="maximumThreshold">A value that specifies the point at which collections must occur. This should be set to the maximum number of available handles.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="initialThreshold">initialThreshold</paramref> parameter is less than 0.   -or-   The <paramref name="maximumThreshold">maximumThreshold</paramref> parameter is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="maximumThreshold">maximumThreshold</paramref> parameter is less than the <paramref name="initialThreshold">initialThreshold</paramref> parameter.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Add">
      <summary>Increments the current handle count.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Runtime.InteropServices.HandleCollector.Count"></see> property is less than 0.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Count">
      <summary>Gets the number of handles collected.</summary>
      <returns>The number of handles collected.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.InitialThreshold">
      <summary>Gets a value that specifies the point at which collections should begin.</summary>
      <returns>A value that specifies the point at which collections should begin.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold">
      <summary>Gets a value that specifies the point at which collections must occur.</summary>
      <returns>A value that specifies the point at which collections must occur.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Name">
      <summary>Gets the name of a <see cref="T:System.Runtime.InteropServices.HandleCollector"></see> object.</summary>
      <returns>This <see cref="P:System.Runtime.InteropServices.HandleCollector.Name"></see> property allows you to name collectors that track handle types separately.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Remove">
      <summary>Decrements the current handle count.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Runtime.InteropServices.HandleCollector.Count"></see> property is less than 0.</exception>
    </member>
    <member name="T:System.Security.AccessControl.SemaphoreAccessRule">
      <summary>Represents a set of access rights allowed or denied for a user or group. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.SemaphoreAccessRule"></see> class, specifying the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</summary>
      <param name="identity">The user or group the rule applies to. Must be of type <see cref="T:System.Security.Principal.SecurityIdentifier"></see> or a type such as <see cref="T:System.Security.Principal.NTAccount"></see> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier"></see>.</param>
      <param name="eventRights">A bitwise combination of <see cref="T:System.Security.AccessControl.SemaphoreRights"></see> values specifying the rights allowed or denied.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType"></see> values specifying whether the rights are allowed or denied.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventRights">eventRights</paramref> specifies an invalid value.   -or-  <paramref name="type">type</paramref> specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="identity">identity</paramref> is null.   -or-  <paramref name="eventRights">eventRights</paramref> is zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="identity">identity</paramref> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier"></see> nor of a type such as <see cref="T:System.Security.Principal.NTAccount"></see> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier"></see>.</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.SemaphoreAccessRule"></see> class, specifying the name of the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</summary>
      <param name="identity">The name of the user or group the rule applies to.</param>
      <param name="eventRights">A bitwise combination of <see cref="T:System.Security.AccessControl.SemaphoreRights"></see> values specifying the rights allowed or denied.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType"></see> values specifying whether the rights are allowed or denied.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventRights">eventRights</paramref> specifies an invalid value.   -or-  <paramref name="type">type</paramref> specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="eventRights">eventRights</paramref> is zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="identity">identity</paramref> is null.   -or-  <paramref name="identity">identity</paramref> is a zero-length string.   -or-  <paramref name="identity">identity</paramref> is longer than 512 characters.</exception>
    </member>
    <member name="P:System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights">
      <summary>Gets the rights allowed or denied by the access rule.</summary>
      <returns>A bitwise combination of <see cref="T:System.Security.AccessControl.SemaphoreRights"></see> values indicating the rights allowed or denied by the access rule.</returns>
    </member>
    <member name="T:System.Security.AccessControl.SemaphoreAuditRule">
      <summary>Represents a set of access rights to be audited for a user or group. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AuditFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.SemaphoreAuditRule"></see> class, specifying the user or group to audit, the rights to audit, and whether to audit success, failure, or both.</summary>
      <param name="identity">The user or group the rule applies to. Must be of type <see cref="T:System.Security.Principal.SecurityIdentifier"></see> or a type such as <see cref="T:System.Security.Principal.NTAccount"></see> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier"></see>.</param>
      <param name="eventRights">A bitwise combination of <see cref="T:System.Security.AccessControl.SemaphoreRights"></see> values specifying the kinds of access to audit.</param>
      <param name="flags">A bitwise combination of <see cref="T:System.Security.AccessControl.AuditFlags"></see> values specifying whether to audit success, failure, or both.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventRights">eventRights</paramref> specifies an invalid value.   -or-  <paramref name="flags">flags</paramref> specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="identity">identity</paramref> is null.   -or-  <paramref name="eventRights">eventRights</paramref> is zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="identity">identity</paramref> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier"></see> nor of a type such as <see cref="T:System.Security.Principal.NTAccount"></see> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier"></see>.</exception>
    </member>
    <member name="P:System.Security.AccessControl.SemaphoreAuditRule.SemaphoreRights">
      <summary>Gets the access rights affected by the audit rule.</summary>
      <returns>A bitwise combination of <see cref="T:System.Security.AccessControl.SemaphoreRights"></see> values that indicates the rights affected by the audit rule.</returns>
    </member>
    <member name="T:System.Security.AccessControl.SemaphoreRights">
      <summary>Specifies the access control rights that can be applied to named system semaphore objects.</summary>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions">
      <summary>The right to change the security and audit rules associated with a named semaphore.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.Delete">
      <summary>The right to delete a named semaphore.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.FullControl">
      <summary>The right to exert full control over a named semaphore, and to modify its access rules and audit rules.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.Modify">
      <summary>The right to release a named semaphore.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions">
      <summary>The right to open and copy the access rules and audit rules for a named semaphore.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.Synchronize">
      <summary>The right to wait on a named semaphore.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.TakeOwnership">
      <summary>The right to change the owner of a named semaphore.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.AccessControl.SemaphoreSecurity">
      <summary>Represents the Windows access control security for a named semaphore. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.SemaphoreSecurity"></see> class with default values.</summary>
      <exception cref="T:System.NotSupportedException">This class is not supported on Windows 98 or Windows Millennium Edition.</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.SemaphoreSecurity"></see> class with the specified sections of the access control security rules from the system semaphore with the specified name.</summary>
      <param name="name">The name of the system semaphore whose access control security rules are to be retrieved.</param>
      <param name="includeSections">A combination of <see cref="T:System.Security.AccessControl.AccessControlSections"></see> flags specifying the sections to retrieve.</param>
      <exception cref="T:System.NotSupportedException">This class is not supported on Windows 98 or Windows Millennium Edition.</exception>
    </member>
    <member name="P:System.Security.AccessControl.SemaphoreSecurity.AccessRightType">
      <summary>Gets the enumeration that the <see cref="T:System.Security.AccessControl.SemaphoreSecurity"></see> class uses to represent access rights.</summary>
      <returns>A <see cref="T:System.Type"></see> object representing the <see cref="T:System.Security.AccessControl.SemaphoreRights"></see> enumeration.</returns>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
      <summary>Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.</summary>
      <param name="identityReference">An <see cref="T:System.Security.Principal.IdentityReference"></see> that identifies the user or group the rule applies to.</param>
      <param name="accessMask">A bitwise combination of <see cref="T:System.Security.AccessControl.SemaphoreRights"></see> values specifying the access rights to allow or deny, cast to an integer.</param>
      <param name="isInherited">Meaningless for named semaphores, because they have no hierarchy.</param>
      <param name="inheritanceFlags">Meaningless for named semaphores, because they have no hierarchy.</param>
      <param name="propagationFlags">Meaningless for named semaphores, because they have no hierarchy.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType"></see> values specifying whether the rights are allowed or denied.</param>
      <returns>A <see cref="T:System.Security.AccessControl.SemaphoreAccessRule"></see> object representing the specified rights for the specified user.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="accessMask">accessMask</paramref>, <paramref name="inheritanceFlags">inheritanceFlags</paramref>, <paramref name="propagationFlags">propagationFlags</paramref>, or <paramref name="type">type</paramref> specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="identityReference">identityReference</paramref> is null.   -or-  <paramref name="accessMask">accessMask</paramref> is zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="identityReference">identityReference</paramref> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier"></see>, nor of a type such as <see cref="T:System.Security.Principal.NTAccount"></see> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier"></see>.</exception>
    </member>
    <member name="P:System.Security.AccessControl.SemaphoreSecurity.AccessRuleType">
      <summary>Gets the type that the <see cref="T:System.Security.AccessControl.SemaphoreSecurity"></see> class uses to represent access rules.</summary>
      <returns>A <see cref="T:System.Type"></see> object representing the <see cref="T:System.Security.AccessControl.SemaphoreAccessRule"></see> class.</returns>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.AddAccessRule(System.Security.AccessControl.SemaphoreAccessRule)">
      <summary>Searches for a matching rule with which the new rule can be merged. If none are found, adds the new rule.</summary>
      <param name="rule">The access control rule to add.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="rule">rule</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.AddAuditRule(System.Security.AccessControl.SemaphoreAuditRule)">
      <summary>Searches for an audit rule with which the new rule can be merged. If none are found, adds the new rule.</summary>
      <param name="rule">The audit rule to add. The user specified by this rule determines the search.</param>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
      <summary>Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, and the outcome that triggers the audit rule.</summary>
      <param name="identityReference">An <see cref="T:System.Security.Principal.IdentityReference"></see> that identifies the user or group the rule applies to.</param>
      <param name="accessMask">A bitwise combination of <see cref="T:System.Security.AccessControl.SemaphoreRights"></see> values specifying the access rights to audit, cast to an integer.</param>
      <param name="isInherited">Meaningless for named wait handles, because they have no hierarchy.</param>
      <param name="inheritanceFlags">Meaningless for named wait handles, because they have no hierarchy.</param>
      <param name="propagationFlags">Meaningless for named wait handles, because they have no hierarchy.</param>
      <param name="flags">A bitwise combination of <see cref="T:System.Security.AccessControl.AuditFlags"></see> values that specify whether to audit successful access, failed access, or both.</param>
      <returns>A <see cref="T:System.Security.AccessControl.SemaphoreAuditRule"></see> object representing the specified audit rule for the specified user. The return type of the method is the base class, <see cref="T:System.Security.AccessControl.AuditRule"></see>, but the return value can be cast safely to the derived class.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="accessMask">accessMask</paramref>, <paramref name="inheritanceFlags">inheritanceFlags</paramref>, <paramref name="propagationFlags">propagationFlags</paramref>, or <paramref name="flags">flags</paramref> specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="identityReference">identityReference</paramref> is null.   -or-  <paramref name="accessMask">accessMask</paramref> is zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="identityReference">identityReference</paramref> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier"></see>, nor of a type such as <see cref="T:System.Security.Principal.NTAccount"></see> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier"></see>.</exception>
    </member>
    <member name="P:System.Security.AccessControl.SemaphoreSecurity.AuditRuleType">
      <summary>Gets the type that the <see cref="T:System.Security.AccessControl.SemaphoreSecurity"></see> class uses to represent audit rules.</summary>
      <returns>A <see cref="T:System.Type"></see> object representing the <see cref="T:System.Security.AccessControl.SemaphoreAuditRule"></see> class.</returns>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule(System.Security.AccessControl.SemaphoreAccessRule)">
      <summary>Searches for an access control rule with the same user and <see cref="T:System.Security.AccessControl.AccessControlType"></see> (allow or deny) as the specified rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.</summary>
      <param name="rule">A <see cref="T:System.Security.AccessControl.SemaphoreAccessRule"></see> that specifies the user and <see cref="T:System.Security.AccessControl.AccessControlType"></see> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.</param>
      <returns>true if a compatible rule is found; otherwise false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="rule">rule</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll(System.Security.AccessControl.SemaphoreAccessRule)">
      <summary>Searches for all access control rules with the same user and <see cref="T:System.Security.AccessControl.AccessControlType"></see> (allow or deny) as the specified rule and, if found, removes them.</summary>
      <param name="rule">A <see cref="T:System.Security.AccessControl.SemaphoreAccessRule"></see> that specifies the user and <see cref="T:System.Security.AccessControl.AccessControlType"></see> to search for. Any rights specified by this rule are ignored.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="rule">rule</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.SemaphoreAccessRule)">
      <summary>Searches for an access control rule that exactly matches the specified rule and, if found, removes it.</summary>
      <param name="rule">The <see cref="T:System.Security.AccessControl.SemaphoreAccessRule"></see> to remove.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="rule">rule</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRule(System.Security.AccessControl.SemaphoreAuditRule)">
      <summary>Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.</summary>
      <param name="rule">A <see cref="T:System.Security.AccessControl.SemaphoreAuditRule"></see> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.</param>
      <returns>true if a compatible rule is found; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="rule">rule</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleAll(System.Security.AccessControl.SemaphoreAuditRule)">
      <summary>Searches for all audit rules with the same user as the specified rule and, if found, removes them.</summary>
      <param name="rule">A <see cref="T:System.Security.AccessControl.SemaphoreAuditRule"></see> that specifies the user to search for. Any rights specified by this rule are ignored.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="rule">rule</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.SemaphoreAuditRule)">
      <summary>Searches for an audit rule that exactly matches the specified rule and, if found, removes it.</summary>
      <param name="rule">The <see cref="T:System.Security.AccessControl.SemaphoreAuditRule"></see> to remove.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="rule">rule</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)">
      <summary>Removes all access control rules with the same user as the specified rule, regardless of <see cref="T:System.Security.AccessControl.AccessControlType"></see>, and then adds the specified rule.</summary>
      <param name="rule">The <see cref="T:System.Security.AccessControl.SemaphoreAccessRule"></see> to add. The user specified by this rule determines the rules to remove before this rule is added.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="rule">rule</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.SetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)">
      <summary>Removes all access control rules with the same user and <see cref="T:System.Security.AccessControl.AccessControlType"></see> (allow or deny) as the specified rule, and then adds the specified rule.</summary>
      <param name="rule">The <see cref="T:System.Security.AccessControl.SemaphoreAccessRule"></see> to add. The user and <see cref="T:System.Security.AccessControl.AccessControlType"></see> of this rule determine the rules to remove before this rule is added.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="rule">rule</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.SetAuditRule(System.Security.AccessControl.SemaphoreAuditRule)">
      <summary>Removes all audit rules with the same user as the specified rule, regardless of the <see cref="T:System.Security.AccessControl.AuditFlags"></see> value, and then adds the specified rule.</summary>
      <param name="rule">The <see cref="T:System.Security.AccessControl.SemaphoreAuditRule"></see> to add. The user specified by this rule determines the rules to remove before this rule is added.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="rule">rule</paramref> is null.</exception>
    </member>
    <member name="T:System.Security.Authentication.AuthenticationException">
      <summary>The exception that is thrown when authentication fails for an authentication stream.</summary>
    </member>
    <member name="M:System.Security.Authentication.AuthenticationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Authentication.AuthenticationException"></see> class with no message.</summary>
    </member>
    <member name="M:System.Security.Authentication.AuthenticationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Authentication.AuthenticationException"></see> class with the specified message.</summary>
      <param name="message">A <see cref="T:System.String"></see> that describes the authentication failure.</param>
    </member>
    <member name="M:System.Security.Authentication.AuthenticationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Authentication.AuthenticationException"></see> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> classes.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance that contains the information required to deserialize the new <see cref="T:System.Security.Authentication.AuthenticationException"></see> instance.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> instance.</param>
    </member>
    <member name="M:System.Security.Authentication.AuthenticationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Authentication.AuthenticationException"></see> class with the specified message and inner exception.</summary>
      <param name="message">A <see cref="T:System.String"></see> that describes the authentication failure.</param>
      <param name="innerException">The <see cref="T:System.Exception"></see> that is the cause of the current exception.</param>
    </member>
    <member name="T:System.Security.Authentication.CipherAlgorithmType">
      <summary>Defines the possible cipher algorithms for the <see cref="T:System.Net.Security.SslStream"></see> class.</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Aes">
      <summary>The Advanced Encryption Standard (AES) algorithm.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Aes128">
      <summary>The Advanced Encryption Standard (AES) algorithm with a 128 bit key.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Aes192">
      <summary>The Advanced Encryption Standard (AES) algorithm with a 192 bit key.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Aes256">
      <summary>The Advanced Encryption Standard (AES) algorithm with a 256 bit key.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Des">
      <summary>The Data Encryption Standard (DES) algorithm.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.None">
      <summary>No encryption algorithm is used.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Null">
      <summary>No encryption is used with a Null cipher algorithm.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Rc2">
      <summary>Rivest's Code 2 (RC2) algorithm.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Rc4">
      <summary>Rivest's Code 4 (RC4) algorithm.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.TripleDes">
      <summary>The Triple Data Encryption Standard (3DES) algorithm.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Authentication.ExchangeAlgorithmType">
      <summary>Specifies the algorithm used to create keys shared by the client and server.</summary>
    </member>
    <member name="F:System.Security.Authentication.ExchangeAlgorithmType.DiffieHellman">
      <summary>The Diffie Hellman ephemeral key exchange algorithm.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.ExchangeAlgorithmType.None">
      <summary>No key exchange algorithm is used.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.ExchangeAlgorithmType.RsaKeyX">
      <summary>The RSA public-key exchange algorithm.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.ExchangeAlgorithmType.RsaSign">
      <summary>The RSA public-key signature algorithm.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ChannelBinding">
      <summary>The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding"></see> class encapsulates a pointer to the opaque data used to bind an authenticated transaction to a secure channel.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ChannelBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding"></see> class.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ChannelBinding.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding"></see> class.</summary>
      <param name="ownsHandle">A Boolean value that indicates if the application owns the safe handle to a native memory region containing the byte data that would be passed to native calls that provide extended protection for integrated windows authentication.</param>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.ChannelBinding.Size">
      <summary>The <see cref="P:System.Security.Authentication.ExtendedProtection.ChannelBinding.Size"></see> property gets the size, in bytes, of the channel binding token associated with the <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding"></see> instance.</summary>
      <returns>The size, in bytes, of the channel binding token in the <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding"></see> instance.</returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ChannelBindingKind">
      <summary>The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBindingKind"></see> enumeration represents the kinds of channel bindings that can be queried from secure channels.</summary>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.ChannelBindingKind.Endpoint">
      <summary>A channel binding unique to a given endpoint (a TLS server certificate, for example).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.ChannelBindingKind.Unique">
      <summary>A channel binding completely unique to a given channel (a TLS session key, for example).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.ChannelBindingKind.Unknown">
      <summary>An unknown channel binding type.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy">
      <summary>The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> class represents the extended protection policy used by the server to validate incoming client connections.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.#ctor(System.Security.Authentication.ExtendedProtection.PolicyEnforcement)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> class that specifies when the extended protection policy should be enforced.</summary>
      <param name="policyEnforcement">A <see cref="T:System.Security.Authentication.ExtendedProtection.PolicyEnforcement"></see> value that indicates when the extended protection policy should be enforced.</param>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> class from a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that contains the required data to populate the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see>.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance that contains the information that is required to serialize the new <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> instance.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains the source of the serialized stream that is associated with the new <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> instance.</param>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.#ctor(System.Security.Authentication.ExtendedProtection.PolicyEnforcement,System.Security.Authentication.ExtendedProtection.ChannelBinding)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> class that specifies when the extended protection policy should be enforced and the channel binding token (CBT) to be used.</summary>
      <param name="policyEnforcement">A <see cref="T:System.Security.Authentication.ExtendedProtection.PolicyEnforcement"></see> value that indicates when the extended protection policy should be enforced.</param>
      <param name="customChannelBinding">A <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding"></see> that contains a custom channel binding to use for validation.</param>
      <exception cref="T:System.ArgumentException"><paramref name="policyEnforcement">policyEnforcement</paramref> is specified as <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never"></see>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="customChannelBinding">customChannelBinding</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.#ctor(System.Security.Authentication.ExtendedProtection.PolicyEnforcement,System.Security.Authentication.ExtendedProtection.ProtectionScenario,System.Collections.ICollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> class that specifies when the extended protection policy should be enforced, the kind of protection enforced by the policy, and a custom Service Provider Name (SPN) list that is used to match against a client's SPN.</summary>
      <param name="policyEnforcement">A <see cref="T:System.Security.Authentication.ExtendedProtection.PolicyEnforcement"></see> value that indicates when the extended protection policy should be enforced.</param>
      <param name="protectionScenario">A <see cref="T:System.Security.Authentication.ExtendedProtection.ProtectionScenario"></see> value that indicates the kind of protection enforced by the policy.</param>
      <param name="customServiceNames">A <see cref="T:System.Collections.ICollection"></see> that contains the custom SPN list that is used to match against a client's SPN.</param>
      <exception cref="T:System.ArgumentException"><paramref name="policyEnforcement">policyEnforcement</paramref> is specified as <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never"></see>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="customServiceNames">customServiceNames</paramref> is null or an empty list.</exception>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.#ctor(System.Security.Authentication.ExtendedProtection.PolicyEnforcement,System.Security.Authentication.ExtendedProtection.ProtectionScenario,System.Security.Authentication.ExtendedProtection.ServiceNameCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> class that specifies when the extended protection policy should be enforced, the kind of protection enforced by the policy, and a custom Service Provider Name (SPN) list that is used to match against a client's SPN.</summary>
      <param name="policyEnforcement">A <see cref="T:System.Security.Authentication.ExtendedProtection.PolicyEnforcement"></see> value that indicates when the extended protection policy should be enforced.</param>
      <param name="protectionScenario">A <see cref="T:System.Security.Authentication.ExtendedProtection.ProtectionScenario"></see> value that indicates the kind of protection enforced by the policy.</param>
      <param name="customServiceNames">A <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection"></see> that contains the custom SPN list that is used to match against a client's SPN.</param>
      <exception cref="T:System.ArgumentException"><paramref name="policyEnforcement">policyEnforcement</paramref> is specified as <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never"></see>.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="customServiceNames">customServiceNames</paramref> is null or an empty list.</exception>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding">
      <summary>Gets a custom channel binding token (CBT) to use for validation.</summary>
      <returns>A <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding"></see> that contains a custom channel binding to use for validation.</returns>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames">
      <summary>Gets the custom Service Provider Name (SPN) list used to match against a client's SPN.</summary>
      <returns>A <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection"></see> that contains the custom SPN list that is used to match against a client's SPN.</returns>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.OSSupportsExtendedProtection">
      <summary>Indicates whether the operating system supports integrated windows authentication with extended protection.</summary>
      <returns>true if the operating system supports integrated windows authentication with extended protection, otherwise false.</returns>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement">
      <summary>Gets when the extended protection policy should be enforced.</summary>
      <returns>A <see cref="T:System.Security.Authentication.ExtendedProtection.PolicyEnforcement"></see> value that indicates when the extended protection policy should be enforced.</returns>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.ProtectionScenario">
      <summary>Gets the kind of protection enforced by the extended protection policy.</summary>
      <returns>A <see cref="T:System.Security.Authentication.ExtendedProtection.ProtectionScenario"></see> value that indicates the kind of protection enforced by the policy.</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.ToString">
      <summary>Gets a string representation for the extended protection policy instance.</summary>
      <returns>A <see cref="T:System.String"></see> instance that contains the representation of the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> instance.</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object with the required data to serialize an <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> object.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that holds the serialized data for an <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains the destination of the serialized stream that is associated with the new <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see>.</param>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary>The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter"></see> class represents the type converter for extended protection policy used by the server to validate incoming client connections.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter"></see> class.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert the object to the specified type.</summary>
      <param name="context">The object to convert.</param>
      <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
      <returns>true if this converter can perform the conversion; otherwise false.</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convert the object to the specified type</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see> object. If null is passed, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert. This should be a <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> object.</param>
      <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
      <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType">destinationType</paramref> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The conversion could not be performed.</exception>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.PolicyEnforcement">
      <summary>The <see cref="T:System.Security.Authentication.ExtendedProtection.PolicyEnforcement"></see> enumeration specifies when the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> should be enforced.</summary>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always">
      <summary>The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> is always enforced. Clients that don’t support extended protection will fail to authenticate.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never">
      <summary>The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> is never enforced and extended protection is disabled.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.WhenSupported">
      <summary>The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"></see> is enforced only if the client and server supports extended protection.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ProtectionScenario">
      <summary>The <see cref="T:System.Security.Authentication.ExtendedProtection.ProtectionScenario"></see> enumeration specifies the protection scenario enforced by the policy.</summary>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.ProtectionScenario.TransportSelected">
      <summary>The transport will select between a secure and standard protection scenario depending on the type of channel used. For secure protection, integrated Windows authentication is wrapped in a secure channel and has an exactly matching channel binding token with no Service Provider Name (SPN) validation. For standard protection, integrated Windows authentication is optionally wrapped in a secure channel with an optional channel binding token and SPN validation is required. So if the request comes through a secure channel, the channel binding token (CBT) is checked, otherwise the SPN is checked.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.ProtectionScenario.TrustedProxy">
      <summary>Integrated Windows authentication is wrapped in a secure channel terminated by a trusted proxy and has a channel binding token with SPN validation required. This requires the presence of a CBT, but the CBT is not checked while the SPN is checked.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection">
      <summary>The <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection"></see> class is a read-only collection of service principal names.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.#ctor(System.Collections.ICollection)">
      <summary>Initializes a new read-only instance of the <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection"></see> class based on an existing <see cref="T:System.Collections.ICollection"></see>.</summary>
      <param name="items">An instance of the <see cref="T:System.Collections.ICollection"></see> class that contains the specified values of service names to be used to initialize the class.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="item">item</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="item">item</paramref> is empty.</exception>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Contains(System.String)">
      <summary>Returns a value indicating whether the specified string occurs within this <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection"></see> instance.</summary>
      <param name="searchServiceName">The string to seek.</param>
      <returns>Returns <see cref="T:System.Boolean"></see>.  true if the <paramref name="searchServiceName">searchServiceName</paramref> parameter occurs within this <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection"></see> instance; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge(System.Collections.IEnumerable)">
      <summary>Merges the current <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection"></see> with the specified values to create a new <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection"></see> containing the union.</summary>
      <param name="serviceNames">An instance of the <see cref="T:System.Collections.IEnumerable"></see> class that contains the specified values of service names to be merged.</param>
      <returns>A new <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection"></see> instance that contains the union of the existing <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection"></see> instance merged with the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="serviceNames">serviceNames</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="serviceNames">serviceNames</paramref> is empty.</exception>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge(System.String)">
      <summary>Merges the current <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection"></see> with the specified values to create a new <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection"></see> containing the union.</summary>
      <param name="serviceName">A string that contains the specified values of service names to be used to initialize the class.</param>
      <returns>A new <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection"></see> instance that contains the union of the existing <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection"></see> instance merged with the specified values.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="serviceNames">serviceNames</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="serviceNames">serviceNames</paramref> is empty.</exception>
    </member>
    <member name="T:System.Security.Authentication.HashAlgorithmType">
      <summary>Specifies the algorithm used for generating message authentication codes (MACs).</summary>
    </member>
    <member name="F:System.Security.Authentication.HashAlgorithmType.Md5">
      <summary>The Message Digest 5 (MD5) hashing algorithm.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.HashAlgorithmType.None">
      <summary>No hashing algorithm is used.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.HashAlgorithmType.Sha1">
      <summary>The Secure Hashing Algorithm (SHA1).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.HashAlgorithmType.Sha256">
      <summary>The Secure Hashing Algorithm 2 (SHA-2), using a 256-bit digest.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.HashAlgorithmType.Sha384">
      <summary>The Secure Hashing Algorithm 2 (SHA-2), using a 384-bit digest.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.HashAlgorithmType.Sha512">
      <summary>The Secure Hashing Algorithm 2 (SHA-2), using a 512-bit digest.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Security.Authentication.InvalidCredentialException">
      <summary>The exception that is thrown when authentication fails for an authentication stream and cannot be retried.</summary>
    </member>
    <member name="M:System.Security.Authentication.InvalidCredentialException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Authentication.InvalidCredentialException"></see> class with no message.</summary>
    </member>
    <member name="M:System.Security.Authentication.InvalidCredentialException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Authentication.InvalidCredentialException"></see> class with the specified message.</summary>
      <param name="message">A <see cref="T:System.String"></see> that describes the authentication failure.</param>
    </member>
    <member name="M:System.Security.Authentication.InvalidCredentialException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Authentication.InvalidCredentialException"></see> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> classes.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance that contains the information required to deserialize the new <see cref="T:System.Security.Authentication.InvalidCredentialException"></see> instance.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> instance.</param>
    </member>
    <member name="M:System.Security.Authentication.InvalidCredentialException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Authentication.InvalidCredentialException"></see> class with the specified message and inner exception.</summary>
      <param name="message">A <see cref="T:System.String"></see> that describes the authentication failure.</param>
      <param name="innerException">The <see cref="T:System.Exception"></see> that is the cause of the current exception.</param>
    </member>
    <member name="T:System.Security.Authentication.SslProtocols">
      <summary>Defines the possible versions of <see cref="T:System.Security.Authentication.SslProtocols"></see>.</summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Default">
      <summary>Specifies that either Secure Sockets Layer (SSL) 3.0 or Transport Layer Security (TLS) 1.0 are acceptable for secure communications</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.None">
      <summary>No SSL protocol is specified.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Ssl2">
      <summary>Specifies the SSL 2.0 protocol. SSL 2.0 has been superseded by the TLS protocol and is provided for backward compatibility only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Ssl3">
      <summary>Specifies the SSL 3.0 protocol. SSL 3.0 has been superseded by the TLS protocol and is provided for backward compatibility only.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Tls">
      <summary>Specifies the TLS 1.0 security protocol. The TLS protocol is defined in IETF RFC 2246.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Tls11">
      <summary>Specifies the TLS 1.1 security protocol. The TLS protocol is defined in IETF RFC 4346.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Tls12">
      <summary>Specifies the TLS 1.2 security protocol. The TLS protocol is defined in IETF RFC 5246.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Collections.Generic.ISet`1">
      <summary>Provides the base interface for the abstraction of sets.</summary>
      <typeparam name="T">The type of elements in the set.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
      <summary>Adds an element to the current set and returns a value to indicate if the element was successfully added.</summary>
      <param name="item">The element to add to the set.</param>
      <returns>true if the element is added to the set; false if the element is already in the set.</returns>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Removes all elements in the specified collection from the current set.</summary>
      <param name="other">The collection of items to remove from the set.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current set so that it contains only elements that are also in a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set is a proper (strict) subset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is a proper subset of <paramref name="other">other</paramref>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set is a proper (strict) superset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is a proper superset of <paramref name="other">other</paramref>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a set is a subset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is a subset of <paramref name="other">other</paramref>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set is a superset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is a superset of <paramref name="other">other</paramref>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set overlaps with the specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set and <paramref name="other">other</paramref> share at least one common element; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set and the specified collection contain the same elements.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is equal to <paramref name="other">other</paramref>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current set so that it contains all elements that are present in the current set, in the specified collection, or in both.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Collections.Generic.LinkedList`1"></see> at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator"></see>.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection. This class cannot be inherited.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface and raises the deserialization event when the deserialization is complete.</summary>
      <param name="sender">The source of the deserialization event.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object associated with the current <see cref="T:System.Collections.Generic.LinkedList`1"></see> instance is invalid.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface and returns the data needed to serialize the <see cref="T:System.Collections.Generic.LinkedList`1"></see> instance.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that contains the information required to serialize the <see cref="T:System.Collections.Generic.LinkedList`1"></see> instance.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.LinkedList`1"></see> instance.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
      <summary>Represents a doubly linked list.</summary>
      <typeparam name="T">Specifies the element type of the linked list.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.LinkedList`1"></see> class that is empty.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.LinkedList`1"></see> class that contains elements copied from the specified <see cref="T:System.Collections.IEnumerable"></see> and has sufficient capacity to accommodate the number of elements copied.</summary>
      <param name="collection">The <see cref="T:System.Collections.IEnumerable"></see> whose elements are copied to the new <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="collection">collection</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.LinkedList`1"></see> class that is serializable with the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see>.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object containing the information required to serialize the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>Adds the specified new node after the specified existing node in the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> after which to insert newNode.</param>
      <param name="newNode">The new <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> to add to the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="node">node</paramref> is null.   -or-  <paramref name="newNode">newNode</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="node">node</paramref> is not in the current <see cref="T:System.Collections.Generic.LinkedList`1"></see>.   -or-  <paramref name="newNode">newNode</paramref> belongs to another <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>Adds a new node containing the specified value after the specified existing node in the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> after which to insert a new <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> containing value.</param>
      <param name="value">The value to add to the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</param>
      <returns>The new <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> containing <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="node">node</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="node">node</paramref> is not in the current <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>Adds the specified new node before the specified existing node in the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> before which to insert newNode.</param>
      <param name="newNode">The new <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> to add to the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="node">node</paramref> is null.   -or-  <paramref name="newNode">newNode</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="node">node</paramref> is not in the current <see cref="T:System.Collections.Generic.LinkedList`1"></see>.   -or-  <paramref name="newNode">newNode</paramref> belongs to another <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>Adds a new node containing the specified value before the specified existing node in the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> before which to insert a new <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> containing value.</param>
      <param name="value">The value to add to the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</param>
      <returns>The new <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> containing <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="node">node</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="node">node</paramref> is not in the current <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
      <summary>Adds the specified new node at the start of the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <param name="node">The new <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> to add at the start of the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="node">node</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="node">node</paramref> belongs to another <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
      <summary>Adds a new node containing the specified value at the start of the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <param name="value">The value to add at the start of the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</param>
      <returns>The new <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> containing <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
      <summary>Adds the specified new node at the end of the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <param name="node">The new <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> to add at the end of the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="node">node</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="node">node</paramref> belongs to another <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
      <summary>Adds a new node containing the specified value at the end of the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <param name="value">The value to add at the end of the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</param>
      <returns>The new <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> containing <paramref name="value">value</paramref>.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
      <summary>Removes all nodes from the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
      <summary>Determines whether a value is in the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <param name="value">The value to locate in the <see cref="T:System.Collections.Generic.LinkedList`1"></see>. The value can be null for reference types.</param>
      <returns>true if <paramref name="value">value</paramref> is found in the <see cref="T:System.Collections.Generic.LinkedList`1"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.Collections.Generic.LinkedList`1"></see> to a compatible one-dimensional <see cref="T:System.Array"></see>, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.LinkedList`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.LinkedList`1"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
      <summary>Gets the number of nodes actually contained in the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <returns>The number of nodes actually contained in the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
      <summary>Finds the first node that contains the specified value.</summary>
      <param name="value">The value to locate in the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</param>
      <returns>The first <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> that contains the specified value, if found; otherwise, null.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
      <summary>Finds the last node that contains the specified value.</summary>
      <param name="value">The value to locate in the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</param>
      <returns>The last <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> that contains the specified value, if found; otherwise, null.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
      <summary>Gets the first node of the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <returns>The first <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> of the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <returns>An <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator"></see> for the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface and returns the data needed to serialize the <see cref="T:System.Collections.Generic.LinkedList`1"></see> instance.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that contains the information required to serialize the <see cref="T:System.Collections.Generic.LinkedList`1"></see> instance.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.LinkedList`1"></see> instance.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
      <summary>Gets the last node of the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <returns>The last <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> of the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface and raises the deserialization event when the deserialization is complete.</summary>
      <param name="sender">The source of the deserialization event.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object associated with the current <see cref="T:System.Collections.Generic.LinkedList`1"></see> instance is invalid.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
      <summary>Removes the specified node from the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> to remove from the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="node">node</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException"><paramref name="node">node</paramref> is not in the current <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
      <summary>Removes the first occurrence of the specified value from the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <param name="value">The value to remove from the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</param>
      <returns>true if the element containing <paramref name="value">value</paramref> is successfully removed; otherwise, false.  This method also returns false if <paramref name="value">value</paramref> was not found in the original <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
      <summary>Removes the node at the start of the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Generic.LinkedList`1"></see> is empty.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
      <summary>Removes the node at the end of the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Generic.LinkedList`1"></see> is empty.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Adds an item at the end of the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</summary>
      <param name="value">The value to add at the end of the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.LinkedList`1"></see>, this property always returns false.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-  <paramref name="array">array</paramref> does not have zero-based indexing.   -or-   The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.   -or-   The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.LinkedList`1"></see>, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.  In the default implementation of <see cref="T:System.Collections.Generic.LinkedList`1"></see>, this property always returns the current instance.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the linked list as a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that can be used to iterate through the linked list as a collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
      <summary>Represents a node in a <see cref="T:System.Collections.Generic.LinkedList`1"></see>. This class cannot be inherited.</summary>
      <typeparam name="T">Specifies the element type of the linked list.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> class, containing the specified value.</summary>
      <param name="value">The value to contain in the <see cref="T:System.Collections.Generic.LinkedListNode`1"></see>.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
      <summary>Gets the <see cref="T:System.Collections.Generic.LinkedList`1"></see> that the <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> belongs to.</summary>
      <returns>A reference to the <see cref="T:System.Collections.Generic.LinkedList`1"></see> that the <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> belongs to, or null if the <see cref="T:System.Collections.Generic.LinkedListNode`1"></see> is not linked.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
      <summary>Gets the next node in the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <returns>A reference to the next node in the <see cref="T:System.Collections.Generic.LinkedList`1"></see>, or null if the current node is the last element (<see cref="P:System.Collections.Generic.LinkedList`1.Last"></see>) of the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
      <summary>Gets the previous node in the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</summary>
      <returns>A reference to the previous node in the <see cref="T:System.Collections.Generic.LinkedList`1"></see>, or null if the current node is the first element (<see cref="P:System.Collections.Generic.LinkedList`1.First"></see>) of the <see cref="T:System.Collections.Generic.LinkedList`1"></see>.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
      <summary>Gets the value contained in the node.</summary>
      <returns>The value contained in the node.</returns>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Collections.Generic.Queue`1"></see>.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Collections.Generic.Queue`1"></see> at the current position of the enumerator.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Collections.Generic.Queue`1.Enumerator"></see>.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.Queue`1"></see>.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="T:System.Collections.Generic.Queue`1">
      <summary>Represents a first-in, first-out collection of objects.</summary>
      <typeparam name="T">Specifies the type of elements in the queue.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1"></see> class that is empty and has the default initial capacity.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1"></see> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</summary>
      <param name="collection">The collection whose elements are copied to the new <see cref="T:System.Collections.Generic.Queue`1"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="collection">collection</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1"></see> class that is empty and has the specified initial capacity.</summary>
      <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.Queue`1"></see> can contain.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
      <summary>Removes all objects from the <see cref="T:System.Collections.Generic.Queue`1"></see>.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
      <summary>Determines whether an element is in the <see cref="T:System.Collections.Generic.Queue`1"></see>.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.Queue`1"></see>. The value can be null for reference types.</param>
      <returns>true if <paramref name="item">item</paramref> is found in the <see cref="T:System.Collections.Generic.Queue`1"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the <see cref="T:System.Collections.Generic.Queue`1"></see> elements to an existing one-dimensional <see cref="T:System.Array"></see>, starting at the specified array index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Queue`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex">arrayIndex</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.Queue`1"></see> is greater than the available space from <paramref name="arrayIndex">arrayIndex</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Queue`1"></see>.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.Queue`1"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
      <summary>Removes and returns the object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1"></see>.</summary>
      <returns>The object that is removed from the beginning of the <see cref="T:System.Collections.Generic.Queue`1"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Generic.Queue`1"></see> is empty.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
      <summary>Adds an object to the end of the <see cref="T:System.Collections.Generic.Queue`1"></see>.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.Queue`1"></see>. The value can be null for reference types.</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Queue`1"></see>.</summary>
      <returns>An <see cref="T:System.Collections.Generic.Queue`1.Enumerator"></see> for the <see cref="T:System.Collections.Generic.Queue`1"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
      <summary>Returns the object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1"></see> without removing it.</summary>
      <returns>The object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Generic.Queue`1"></see> is empty.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
      <summary>Copies the <see cref="T:System.Collections.Generic.Queue`1"></see> elements to a new array.</summary>
      <returns>A new array containing elements copied from the <see cref="T:System.Collections.Generic.Queue`1"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
      <summary>Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.Queue`1"></see>, if that number is less than 90 percent of current capacity.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-  <paramref name="array">array</paramref> does not have zero-based indexing.   -or-   The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.   -or-   The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Queue`1"></see>, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.  In the default implementation of <see cref="T:System.Collections.Generic.Queue`1"></see>, this property always returns the current instance.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</summary>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see> at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator"></see>.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>Gets the element at the current position of the enumerator as a <see cref="T:System.Collections.DictionaryEntry"></see> structure.</summary>
      <returns>The element in the collection at the current position of the dictionary, as a <see cref="T:System.Collections.DictionaryEntry"></see> structure.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>Gets the key of the element at the current position of the enumerator.</summary>
      <returns>The key of the element in the collection at the current position of the enumerator.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>Gets the value of the element at the current position of the enumerator.</summary>
      <returns>The value of the element in the collection at the current position of the enumerator.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection"></see>.</summary>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection"></see> at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator"></see>.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection"></see>.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection">
      <summary>Represents the collection of keys in a <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>. This class cannot be inherited.</summary>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection"></see> class that reflects the keys in the specified <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</summary>
      <param name="dictionary">The <see cref="T:System.Collections.Generic.SortedDictionary`2"></see> whose keys are reflected in the new <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="dictionary">dictionary</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>Copies the <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection"></see> elements to an existing one-dimensional array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection"></see>. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection"></see>.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection"></see>.</summary>
      <returns>A <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator"></see> structure for the <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.  This implementation always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
      <exception cref="T:System.NotSupportedException">Always thrown; the collection is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.  This implementation always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <exception cref="T:System.NotSupportedException">Always thrown; the collection is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains the specified value.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
      <returns>true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection"></see>, this property always returns false.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.  This implementation always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
      <returns>true if item is successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
      <exception cref="T:System.NotSupportedException">Always thrown; the collection is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an array, starting at a particular array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.ICollection"></see>. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than 0.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-  <paramref name="array">array</paramref> does not have zero-based indexing.   -or-   The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.   -or-   The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection"></see>, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.  In the default implementation of <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection"></see>, this property always returns the current instance.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection"></see>.</summary>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection"></see> at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator"></see>.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection"></see>.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection">
      <summary>Represents the collection of values in a <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>. This class cannot be inherited</summary>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection"></see> class that reflects the values in the specified <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</summary>
      <param name="dictionary">The <see cref="T:System.Collections.Generic.SortedDictionary`2"></see> whose values are reflected in the new <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="dictionary">dictionary</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>Copies the <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection"></see> elements to an existing one-dimensional array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection"></see>. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection"></see>.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection"></see>.</summary>
      <returns>A <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator"></see> structure for the <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>. This implementation always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
      <exception cref="T:System.NotSupportedException">Always thrown; the collection is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>. This implementation always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <exception cref="T:System.NotSupportedException">Always thrown; the collection is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specified value.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
      <returns>true if <paramref name="item">item</paramref> is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection"></see>, this property always returns false.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>. This implementation always throws a <see cref="T:System.NotSupportedException"></see>.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
      <returns>true if <paramref name="item">item</paramref> is successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if <paramref name="item">item</paramref> is not found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
      <exception cref="T:System.NotSupportedException">Always thrown; the collection is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an array, starting at a particular array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.ICollection"></see>. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than 0.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-  <paramref name="array">array</paramref> does not have zero-based indexing.   -or-   The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.   -or-   The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection"></see>, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.  In the default implementation of <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection"></see>, this property always returns the current instance.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2">
      <summary>Represents a collection of key/value pairs that are sorted on the key.</summary>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see> class that is empty and uses the default <see cref="T:System.Collections.Generic.IComparer`1"></see> implementation for the key type.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see> class that is empty and uses the specified <see cref="T:System.Collections.Generic.IComparer`1"></see> implementation to compare keys.</summary>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"></see> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.Comparer`1"></see> for the type of the key.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"></see> and uses the default <see cref="T:System.Collections.Generic.IComparer`1"></see> implementation for the key type.</summary>
      <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> whose elements are copied to the new <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="dictionary">dictionary</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="dictionary">dictionary</paramref> contains one or more duplicate keys.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"></see> and uses the specified <see cref="T:System.Collections.Generic.IComparer`1"></see> implementation to compare keys.</summary>
      <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> whose elements are copied to the new <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"></see> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.Comparer`1"></see> for the type of the key.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="dictionary">dictionary</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="dictionary">dictionary</paramref> contains one or more duplicate keys.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)">
      <summary>Adds an element with the specified key and value into the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Comparer">
      <summary>Gets the <see cref="T:System.Collections.Generic.IComparer`1"></see> used to order the elements of the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</summary>
      <returns>The <see cref="T:System.Collections.Generic.IComparer`1"></see> used to order the elements of the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see></returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see> contains an element with the specified key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</param>
      <returns>true if the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see> contains an element with the specified key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see> contains an element with the specified value.</summary>
      <param name="value">The value to locate in the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>. The value can be null for reference types.</param>
      <returns>true if the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see> contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see> to the specified array of <see cref="T:System.Collections.Generic.KeyValuePair`2"></see> structures, starting at the specified index.</summary>
      <param name="array">The one-dimensional array of <see cref="T:System.Collections.Generic.KeyValuePair`2"></see> structures that is the destination of the elements copied from the current <see cref="T:System.Collections.Generic.SortedDictionary`2"></see> The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.SortedDictionary`2"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Count">
      <summary>Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</summary>
      <returns>The number of key/value pairs contained in the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</summary>
      <returns>A <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator"></see> for the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Item(`0)">
      <summary>Gets or sets the value associated with the specified key.</summary>
      <param name="key">The key of the value to get or set.</param>
      <returns>The value associated with the specified key. If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"></see>, and a set operation creates a new element with the specified key.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key">key</paramref> does not exist in the collection.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Keys">
      <summary>Gets a collection containing the keys in the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</summary>
      <returns>A <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection"></see> containing the keys in the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Remove(`0)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</summary>
      <param name="key">The key of the element to remove.</param>
      <returns>true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key">key</paramref> is not found in the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>Gets the value associated with the specified key.</summary>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.</param>
      <returns>true if the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see> contains an element with the specified key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Values">
      <summary>Gets a collection containing the values in the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</summary>
      <returns>A <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection"></see> containing the values in the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="keyValuePair"></param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="keyValuePair"></param>
      <returns></returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly">
      <returns></returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="keyValuePair"></param>
      <returns></returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys">
      <returns></returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values">
      <returns></returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
      <returns></returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys">
      <returns></returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values">
      <returns></returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.ICollection`1"></see>. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than 0.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-  <paramref name="array">array</paramref> does not have zero-based indexing.   -or-   The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from <paramref name="index">index</paramref> to the end of the destination <paramref name="array">array</paramref>.   -or-   The type of the source <see cref="T:System.Collections.Generic.ICollection`1"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see>.</summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="key">key</paramref> is of a type that is not assignable to the key type <paramref name="TKey">TKey</paramref> of the <see cref="T:System.Collections.IDictionary"></see>.   -or-  <paramref name="value">value</paramref> is of a type that is not assignable to the value type <paramref name="TValue">TValue</paramref> of the <see cref="T:System.Collections.IDictionary"></see>.   -or-   An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"></see>.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IDictionary"></see> contains an element with the specified key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see>.</param>
      <returns>true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> for the <see cref="T:System.Collections.IDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator"></see> for the <see cref="T:System.Collections.IDictionary"></see>.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary"></see> has a fixed size; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary"></see> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Gets or sets the element with the specified key.</summary>
      <param name="key">The key of the element to get.</param>
      <returns>The element with the specified key, or null if <paramref name="key">key</paramref> is not in the dictionary or <paramref name="key">key</paramref> is of a type that is not assignable to the key type <paramref name="TKey">TKey</paramref> of the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">A value is being assigned, and <paramref name="key">key</paramref> is of a type that is not assignable to the key type <paramref name="TKey">TKey</paramref> of the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.   -or-   A value is being assigned, and <paramref name="value">value</paramref> is of a type that is not assignable to the value type <paramref name="TValue">TValue</paramref> of the <see cref="T:System.Collections.Generic.SortedDictionary`2"></see>.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection"></see> containing the keys of the <see cref="T:System.Collections.IDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.ICollection"></see> containing the keys of the <see cref="T:System.Collections.IDictionary"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"></see>.</summary>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection"></see> containing the values in the <see cref="T:System.Collections.IDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.ICollection"></see> containing the values in the <see cref="T:System.Collections.IDictionary"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedList`2">
      <summary>Represents a collection of key/value pairs that are sorted by key based on the associated <see cref="T:System.Collections.Generic.IComparer`1"></see> implementation.</summary>
      <typeparam name="TKey">The type of keys in the collection.</typeparam>
      <typeparam name="TValue">The type of values in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2"></see> class that is empty, has the default initial capacity, and uses the default <see cref="T:System.Collections.Generic.IComparer`1"></see>.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2"></see> class that is empty, has the default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IComparer`1"></see>.</summary>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"></see> implementation to use when comparing keys.   -or-  null to use the default <see cref="T:System.Collections.Generic.Comparer`1"></see> for the type of the key.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2"></see> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"></see>, has sufficient capacity to accommodate the number of elements copied, and uses the default <see cref="T:System.Collections.Generic.IComparer`1"></see>.</summary>
      <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> whose elements are copied to the new <see cref="T:System.Collections.Generic.SortedList`2"></see>.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="dictionary">dictionary</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="dictionary">dictionary</paramref> contains one or more duplicate keys.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2"></see> class that is empty, has the specified initial capacity, and uses the default <see cref="T:System.Collections.Generic.IComparer`1"></see>.</summary>
      <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.SortedList`2"></see> can contain.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2"></see> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"></see>, has sufficient capacity to accommodate the number of elements copied, and uses the specified <see cref="T:System.Collections.Generic.IComparer`1"></see>.</summary>
      <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> whose elements are copied to the new <see cref="T:System.Collections.Generic.SortedList`2"></see>.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"></see> implementation to use when comparing keys.   -or-  null to use the default <see cref="T:System.Collections.Generic.Comparer`1"></see> for the type of the key.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="dictionary">dictionary</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="dictionary">dictionary</paramref> contains one or more duplicate keys.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2"></see> class that is empty, has the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IComparer`1"></see>.</summary>
      <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.SortedList`2"></see> can contain.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"></see> implementation to use when comparing keys.   -or-  null to use the default <see cref="T:System.Collections.Generic.Comparer`1"></see> for the type of the key.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
      <summary>Adds an element with the specified key and value into the <see cref="T:System.Collections.Generic.SortedList`2"></see>.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.SortedList`2"></see>.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Capacity">
      <summary>Gets or sets the number of elements that the <see cref="T:System.Collections.Generic.SortedList`2"></see> can contain.</summary>
      <returns>The number of elements that the <see cref="T:System.Collections.Generic.SortedList`2"></see> can contain.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Collections.Generic.SortedList`2.Capacity"></see> is set to a value that is less than <see cref="P:System.Collections.Generic.SortedList`2.Count"></see>.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory available on the system.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.Generic.SortedList`2"></see>.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Comparer">
      <summary>Gets the <see cref="T:System.Collections.Generic.IComparer`1"></see> for the sorted list.</summary>
      <returns>The <see cref="T:System.IComparable`1"></see> for the current <see cref="T:System.Collections.Generic.SortedList`2"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.SortedList`2"></see> contains a specific key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.SortedList`2"></see>.</param>
      <returns>true if the <see cref="T:System.Collections.Generic.SortedList`2"></see> contains an element with the specified key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.SortedList`2"></see> contains a specific value.</summary>
      <param name="value">The value to locate in the <see cref="T:System.Collections.Generic.SortedList`2"></see>. The value can be null for reference types.</param>
      <returns>true if the <see cref="T:System.Collections.Generic.SortedList`2"></see> contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Count">
      <summary>Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Generic.SortedList`2"></see>.</summary>
      <returns>The number of key/value pairs contained in the <see cref="T:System.Collections.Generic.SortedList`2"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.SortedList`2"></see>.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"></see> of type <see cref="T:System.Collections.Generic.KeyValuePair`2"></see> for the <see cref="T:System.Collections.Generic.SortedList`2"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
      <summary>Searches for the specified key and returns the zero-based index within the entire <see cref="T:System.Collections.Generic.SortedList`2"></see>.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.SortedList`2"></see>.</param>
      <returns>The zero-based index of <paramref name="key">key</paramref> within the entire <see cref="T:System.Collections.Generic.SortedList`2"></see>, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
      <summary>Searches for the specified value and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.SortedList`2"></see>.</summary>
      <param name="value">The value to locate in the <see cref="T:System.Collections.Generic.SortedList`2"></see>.  The value can be null for reference types.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value">value</paramref> within the entire <see cref="T:System.Collections.Generic.SortedList`2"></see>, if found; otherwise, -1.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Item(`0)">
      <summary>Gets or sets the value associated with the specified key.</summary>
      <param name="key">The key whose value to get or set.</param>
      <returns>The value associated with the specified key. If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"></see> and a set operation creates a new element using the specified key.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key">key</paramref> does not exist in the collection.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Keys">
      <summary>Gets a collection containing the keys in the <see cref="T:System.Collections.Generic.SortedList`2"></see>, in sorted order.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IList`1"></see> containing the keys in the <see cref="T:System.Collections.Generic.SortedList`2"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Remove(`0)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.Generic.SortedList`2"></see>.</summary>
      <param name="key">The key of the element to remove.</param>
      <returns>true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key">key</paramref> was not found in the original <see cref="T:System.Collections.Generic.SortedList`2"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.Collections.Generic.SortedList`2"></see>.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.   -or-  <paramref name="index">index</paramref> is equal to or greater than <see cref="P:System.Collections.Generic.SortedList`2.Count"></see>.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TrimExcess">
      <summary>Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.SortedList`2"></see>, if that number is less than 90 percent of current capacity.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
      <summary>Gets the value associated with the specified key.</summary>
      <param name="key">The key whose value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
      <returns>true if the <see cref="T:System.Collections.Generic.SortedList`2"></see> contains an element with the specified key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Values">
      <summary>Gets a collection containing the values in the <see cref="T:System.Collections.Generic.SortedList`2"></see>.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IList`1"></see> containing the values in the <see cref="T:System.Collections.Generic.SortedList`2"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="keyValuePair"></param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="keyValuePair"></param>
      <returns></returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array"></param>
      <param name="arrayIndex"></param>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly">
      <returns></returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="keyValuePair"></param>
      <returns></returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys">
      <returns></returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values">
      <returns></returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
      <returns></returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys">
      <returns></returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values">
      <returns></returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex">arrayIndex</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-  <paramref name="array">array</paramref> does not have zero-based indexing.   -or-   The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from <paramref name="arrayIndex">arrayIndex</paramref> to the end of the destination <paramref name="array">array</paramref>.   -or-   The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.SortedList`2"></see>, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.  In the default implementation of <see cref="T:System.Collections.Generic.SortedList`2"></see>, this property always returns the current instance.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see>.</summary>
      <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
      <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="key">key</paramref> is of a type that is not assignable to the key type <paramref name="TKey">TKey</paramref> of the <see cref="T:System.Collections.IDictionary"></see>.   -or-  <paramref name="value">value</paramref> is of a type that is not assignable to the value type <paramref name="TValue">TValue</paramref> of the <see cref="T:System.Collections.IDictionary"></see>.   -or-   An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"></see>.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IDictionary"></see> contains an element with the specified key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see>.</param>
      <returns>true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> for the <see cref="T:System.Collections.IDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator"></see> for the <see cref="T:System.Collections.IDictionary"></see>.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary"></see> has a fixed size; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.SortedList`2"></see>, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary"></see> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.SortedList`2"></see>, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Gets or sets the element with the specified key.</summary>
      <param name="key">The key of the element to get or set.</param>
      <returns>The element with the specified key, or null if <paramref name="key">key</paramref> is not in the dictionary or <paramref name="key">key</paramref> is of a type that is not assignable to the key type <paramref name="TKey">TKey</paramref> of the <see cref="T:System.Collections.Generic.SortedList`2"></see>.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException">A value is being assigned, and <paramref name="key">key</paramref> is of a type that is not assignable to the key type <paramref name="TKey">TKey</paramref> of the <see cref="T:System.Collections.Generic.SortedList`2"></see>.   -or-   A value is being assigned, and <paramref name="value">value</paramref> is of a type that is not assignable to the value type <paramref name="TValue">TValue</paramref> of the <see cref="T:System.Collections.Generic.SortedList`2"></see>.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection"></see> containing the keys of the <see cref="T:System.Collections.IDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.ICollection"></see> containing the keys of the <see cref="T:System.Collections.IDictionary"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"></see>.</summary>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection"></see> containing the values in the <see cref="T:System.Collections.IDictionary"></see>.</summary>
      <returns>An <see cref="T:System.Collections.ICollection"></see> containing the values in the <see cref="T:System.Collections.IDictionary"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Collections.Generic.SortedSet`1"></see> object.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Collections.Generic.SortedSet`1.Enumerator"></see>.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.SortedSet`1"></see> collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface and raises the deserialization event when the deserialization is complete.</summary>
      <param name="sender">The source of the deserialization event.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object associated with the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> instance is invalid.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface and returns the data needed to serialize the <see cref="T:System.Collections.Generic.SortedSet`1"></see> instance.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that contains the information required to serialize the <see cref="T:System.Collections.Generic.SortedSet`1"></see> instance.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.SortedSet`1"></see> instance.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1">
      <summary>Represents a collection of objects that is maintained in sorted order.</summary>
      <typeparam name="T">The type of elements in the set.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedSet`1"></see> class.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedSet`1"></see> class that uses a specified comparer.</summary>
      <param name="comparer">The default comparer to use for comparing objects.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="comparer">comparer</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedSet`1"></see> class that contains elements copied from a specified enumerable collection.</summary>
      <param name="collection">The enumerable collection to be copied.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedSet`1"></see> class that contains elements copied from a specified enumerable collection and that uses a specified comparer.</summary>
      <param name="collection">The enumerable collection to be copied.</param>
      <param name="comparer">The default comparer to use for comparing objects.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="collection">collection</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedSet`1"></see> class that contains serialized data.</summary>
      <param name="info">The object that contains the information that is required to serialize the <see cref="T:System.Collections.Generic.SortedSet`1"></see> object.</param>
      <param name="context">The structure that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.SortedSet`1"></see> object.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Add(`0)">
      <summary>Adds an element to the set and returns a value that indicates if it was successfully added.</summary>
      <param name="item">The element to add to the set.</param>
      <returns>true if <paramref name="item">item</paramref> is added to the set; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Clear">
      <summary>Removes all elements from the set.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Comparer">
      <summary>Gets the <see cref="T:System.Collections.Generic.IComparer`1"></see> object that is used to order the values in the <see cref="T:System.Collections.Generic.SortedSet`1"></see>.</summary>
      <returns>The comparer that is used to order the values in the <see cref="T:System.Collections.Generic.SortedSet`1"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Contains(`0)">
      <summary>Determines whether the set contains a specific element.</summary>
      <param name="item">The element to locate in the set.</param>
      <returns>true if the set contains <paramref name="item">item</paramref>; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>Copies a specified number of elements from <see cref="T:System.Collections.Generic.SortedSet`1"></see> to a compatible one-dimensional array, starting at the specified array index.</summary>
      <param name="array">A one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.SortedSet`1"></see>. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <param name="count">The number of elements to copy.</param>
      <exception cref="T:System.ArgumentException">The number of elements in the source array is greater than the available space from <paramref name="index">index</paramref> to the end of the destination array.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.   -or-  <paramref name="count">count</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the complete <see cref="T:System.Collections.Generic.SortedSet`1"></see> to a compatible one-dimensional array, starting at the specified array index.</summary>
      <param name="array">A one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.SortedSet`1"></see>. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentException">The number of elements in the source array is greater than the available space from <paramref name="index">index</paramref> to the end of the destination array.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[])">
      <summary>Copies the complete <see cref="T:System.Collections.Generic.SortedSet`1"></see> to a compatible one-dimensional array, starting at the beginning of the target array.</summary>
      <param name="array">A one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.SortedSet`1"></see>.</param>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.SortedSet`1"></see> exceeds the number of elements that the destination array can contain.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Count">
      <summary>Gets the number of elements in the <see cref="T:System.Collections.Generic.SortedSet`1"></see>.</summary>
      <returns>The number of elements in the <see cref="T:System.Collections.Generic.SortedSet`1"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer">
      <summary>Returns an <see cref="T:System.Collections.IEqualityComparer"></see> object that can be used to create a collection that contains individual sets.</summary>
      <returns>A comparer for creating a collection of sets.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Returns an <see cref="T:System.Collections.IEqualityComparer"></see> object, according to a specified comparer, that can be used to create a collection that contains individual sets.</summary>
      <param name="memberEqualityComparer">The comparer to use for creating the returned comparer.</param>
      <returns>A comparer for creating a collection of sets.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Removes all elements that are in a specified collection from the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> object.</summary>
      <param name="other">The collection of items to remove from the <see cref="T:System.Collections.Generic.SortedSet`1"></see> object.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.SortedSet`1"></see>.</summary>
      <returns>An enumerator that iterates through the <see cref="T:System.Collections.Generic.SortedSet`1"></see> in sorted order.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface and returns the data that you must have to serialize a <see cref="T:System.Collections.Generic.SortedSet`1"></see> object.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that contains the information that is required to serialize the <see cref="T:System.Collections.Generic.SortedSet`1"></see> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> structure that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.SortedSet`1"></see> object.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)">
      <summary>Returns a view of a subset in a <see cref="T:System.Collections.Generic.SortedSet`1"></see>.</summary>
      <param name="lowerValue">The lowest desired value in the view.</param>
      <param name="upperValue">The highest desired value in the view.</param>
      <returns>A subset view that contains only the values in the specified range.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="lowerValue">lowerValue</paramref> is more than <paramref name="upperValue">upperValue</paramref> according to the comparer.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A tried operation on the view was outside the range specified by <paramref name="lowerValue">lowerValue</paramref> and <paramref name="upperValue">upperValue</paramref>.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> object so that it contains only elements that are also in a specified collection.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> object.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.SortedSet`1"></see> object is a proper subset of the specified collection.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> object.</param>
      <returns>true if the <see cref="T:System.Collections.Generic.SortedSet`1"></see> object is a proper subset of <paramref name="other">other</paramref>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.SortedSet`1"></see> object is a proper superset of the specified collection.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> object.</param>
      <returns>true if the <see cref="T:System.Collections.Generic.SortedSet`1"></see> object is a proper superset of <paramref name="other">other</paramref>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.SortedSet`1"></see> object is a subset of the specified collection.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> object.</param>
      <returns>true if the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> object is a subset of <paramref name="other">other</paramref>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.SortedSet`1"></see> object is a superset of the specified collection.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> object.</param>
      <returns>true if the <see cref="T:System.Collections.Generic.SortedSet`1"></see> object is a superset of <paramref name="other">other</paramref>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Max">
      <summary>Gets the maximum value in the <see cref="T:System.Collections.Generic.SortedSet`1"></see>, as defined by the comparer.</summary>
      <returns>The maximum value in the set.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Min">
      <summary>Gets the minimum value in the <see cref="T:System.Collections.Generic.SortedSet`1"></see>, as defined by the comparer.</summary>
      <returns>The minimum value in the set.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.OnDeserialization(System.Object)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface, and raises the deserialization event when the deserialization is completed.</summary>
      <param name="sender">The source of the deserialization event.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object associated with the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> object is invalid.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> object and a specified collection share common elements.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> object.</param>
      <returns>true if the <see cref="T:System.Collections.Generic.SortedSet`1"></see> object and <paramref name="other">other</paramref> share at least one common element; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Remove(`0)">
      <summary>Removes a specified item from the <see cref="T:System.Collections.Generic.SortedSet`1"></see>.</summary>
      <param name="item">The element to remove.</param>
      <returns>true if the element is found and successfully removed; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>Removes all elements that match the conditions defined by the specified predicate from a <see cref="T:System.Collections.Generic.SortedSet`1"></see>.</summary>
      <param name="match">The delegate that defines the conditions of the elements to remove.</param>
      <returns>The number of elements that were removed from the <see cref="T:System.Collections.Generic.SortedSet`1"></see> collection..</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="match">match</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Reverse">
      <summary>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that iterates over the <see cref="T:System.Collections.Generic.SortedSet`1"></see> in reverse order.</summary>
      <returns>An enumerator that iterates over the <see cref="T:System.Collections.Generic.SortedSet`1"></see> in reverse order.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> object and the specified collection contain the same elements.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> object.</param>
      <returns>true if the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> object is equal to <paramref name="other">other</paramref>; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> object so that it contains only elements that are present either in the current object or in the specified collection, but not both.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> object.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> object so that it contains all elements that are present in either the current object or the specified collection.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> object.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="other">other</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Adds an item to an <see cref="T:System.Collections.Generic.ICollection`1"></see> object.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see> object.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value that indicates whether a <see cref="T:System.Collections.ICollection"></see> is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the complete <see cref="T:System.Collections.Generic.SortedSet`1"></see> to a compatible one-dimensional array, starting at the specified array index.</summary>
      <param name="array">A one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.SortedSet`1"></see>. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentException">The number of elements in the source array is greater than the available space from <paramref name="index">index</paramref> to the end of the destination array.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>. In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"></see>, this property always returns the current instance.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.IDeserializationCallback"></see> interface, and raises the deserialization event when the deserialization is completed.</summary>
      <param name="sender">The source of the deserialization event.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object associated with the current <see cref="T:System.Collections.Generic.SortedSet`1"></see> instance is invalid.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface, and returns the data that you need to serialize the <see cref="T:System.Collections.Generic.SortedSet`1"></see> instance.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that contains the information that is required to serialize the <see cref="T:System.Collections.Generic.SortedSet`1"></see> instance.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> structure that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.SortedSet`1"></see> instance.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Collections.Generic.Stack`1"></see>.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Collections.Generic.Stack`1"></see> at the current position of the enumerator.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Collections.Generic.Stack`1.Enumerator"></see>.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.Stack`1"></see>.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection. This class cannot be inherited.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
      <summary>Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type.</summary>
      <typeparam name="T">Specifies the type of elements in the stack.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1"></see> class that is empty and has the default initial capacity.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1"></see> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</summary>
      <param name="collection">The collection to copy elements from.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="collection">collection</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1"></see> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.</summary>
      <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.Stack`1"></see> can contain.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity">capacity</paramref> is less than zero.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
      <summary>Removes all objects from the <see cref="T:System.Collections.Generic.Stack`1"></see>.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
      <summary>Determines whether an element is in the <see cref="T:System.Collections.Generic.Stack`1"></see>.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.Stack`1"></see>. The value can be null for reference types.</param>
      <returns>true if <paramref name="item">item</paramref> is found in the <see cref="T:System.Collections.Generic.Stack`1"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the <see cref="T:System.Collections.Generic.Stack`1"></see> to an existing one-dimensional <see cref="T:System.Array"></see>, starting at the specified array index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Stack`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex">arrayIndex</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.Stack`1"></see> is greater than the available space from <paramref name="arrayIndex">arrayIndex</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Stack`1"></see>.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.Stack`1"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
      <summary>Returns an enumerator for the <see cref="T:System.Collections.Generic.Stack`1"></see>.</summary>
      <returns>An <see cref="T:System.Collections.Generic.Stack`1.Enumerator"></see> for the <see cref="T:System.Collections.Generic.Stack`1"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
      <summary>Returns the object at the top of the <see cref="T:System.Collections.Generic.Stack`1"></see> without removing it.</summary>
      <returns>The object at the top of the <see cref="T:System.Collections.Generic.Stack`1"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Generic.Stack`1"></see> is empty.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
      <summary>Removes and returns the object at the top of the <see cref="T:System.Collections.Generic.Stack`1"></see>.</summary>
      <returns>The object removed from the top of the <see cref="T:System.Collections.Generic.Stack`1"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Generic.Stack`1"></see> is empty.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
      <summary>Inserts an object at the top of the <see cref="T:System.Collections.Generic.Stack`1"></see>.</summary>
      <param name="item">The object to push onto the <see cref="T:System.Collections.Generic.Stack`1"></see>. The value can be null for reference types.</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
      <summary>Copies the <see cref="T:System.Collections.Generic.Stack`1"></see> to a new array.</summary>
      <returns>A new array containing copies of the elements of the <see cref="T:System.Collections.Generic.Stack`1"></see>.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
      <summary>Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.Stack`1"></see>, if that number is less than 90 percent of current capacity.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex">arrayIndex</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-  <paramref name="array">array</paramref> does not have zero-based indexing.   -or-   The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from <paramref name="arrayIndex">arrayIndex</paramref> to the end of the destination <paramref name="array">array</paramref>.   -or-   The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Stack`1"></see>, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.  In the default implementation of <see cref="T:System.Collections.Generic.Stack`1"></see>, this property always returns the current instance.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary>Provides a service for registering event handlers for component events.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>Creates a unique name for an event-handler method for the specified component and event.</summary>
      <param name="component">The component instance the event is connected to.</param>
      <param name="e">The event to create a name for.</param>
      <returns>The recommended name for the event-handler method for this event.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary>Gets a collection of event-handler methods that have a method signature compatible with the specified event.</summary>
      <param name="e">The event to get the compatible event-handler methods for.</param>
      <returns>A collection of strings.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary>Gets an <see cref="T:System.ComponentModel.EventDescriptor"></see> for the event that the specified property descriptor represents, if it represents an event.</summary>
      <param name="property">The property that represents an event.</param>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptor"></see> for the event that the property represents, or null if the property does not represent an event.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary>Converts a set of event descriptors to a set of property descriptors.</summary>
      <param name="events">The events to convert to properties.</param>
      <returns>An array of <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects that describe the event set.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary>Converts a single event descriptor to a property descriptor.</summary>
      <param name="e">The event to convert.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that describes the event.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary>Displays the user code for the designer.</summary>
      <returns>true if the code is displayed; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary>Displays the user code for the designer at the specified line.</summary>
      <param name="lineNumber">The line number to place the caret on.</param>
      <returns>true if the code is displayed; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>Displays the user code for the specified event.</summary>
      <param name="component">The component that the event is connected to.</param>
      <param name="e">The event to display.</param>
      <returns>true if the code is displayed; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary>Provides an interface that can list extender providers.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary>Gets the set of extender providers for the component.</summary>
      <returns>An array of type <see cref="T:System.ComponentModel.IExtenderProvider"></see> that lists the active extender providers. If there are no providers, an empty array is returned.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary>Provides an interface for adding and removing extender providers at design time.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>Adds the specified extender provider.</summary>
      <param name="provider">The extender provider to add.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>Removes the specified extender provider.</summary>
      <param name="provider">The extender provider to remove.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary>Provides methods for showing Help topics and adding and removing Help keywords at design time.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary>Adds a context attribute to the document.</summary>
      <param name="name">The name of the attribute to add.</param>
      <param name="value">The value of the attribute.</param>
      <param name="keywordType">The type of the keyword, from the enumeration <see cref="T:System.ComponentModel.Design.HelpKeywordType"></see>.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary>Removes all existing context attributes from the document.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary>Creates a local <see cref="T:System.ComponentModel.Design.IHelpService"></see> to manage subcontexts.</summary>
      <param name="contextType">The priority type of the subcontext to add.</param>
      <returns>The newly created <see cref="T:System.ComponentModel.Design.IHelpService"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary>Removes a previously added context attribute.</summary>
      <param name="name">The name of the attribute to remove.</param>
      <param name="value">The value of the attribute to remove.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary>Removes a context created with <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)"></see>.</summary>
      <param name="localContext">The local context <see cref="T:System.ComponentModel.Design.IHelpService"></see> to remove.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary>Shows the Help topic that corresponds to the specified keyword.</summary>
      <param name="helpKeyword">The keyword of the Help topic to display.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary>Shows the Help topic that corresponds to the specified URL.</summary>
      <param name="helpUrl">The URL of the Help topic to display.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary>Provides methods for identifying the components of a component.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary>Searches the specified component for fields that implement the <see cref="T:System.ComponentModel.IComponent"></see> interface and adds each to the specified container, storing the inheritance level of each which can be retrieved using the <see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)"></see> method.</summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent"></see> to search. Searching begins with this component.</param>
      <param name="container">The <see cref="T:System.ComponentModel.IContainer"></see> to add components to.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary>Gets the inheritance attribute for the specified component.</summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent"></see> for which to retrieve the inheritance attribute.</param>
      <returns>An instance of <see cref="T:System.ComponentModel.InheritanceAttribute"></see> that describes the level of inheritance of the specified component.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary>Provides methods to manage the global designer verbs and menu commands available in design mode, and to show some types of shortcut menus.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>Adds the specified standard menu command to the menu.</summary>
      <param name="command">The <see cref="T:System.ComponentModel.Design.MenuCommand"></see> to add.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.ComponentModel.Design.CommandID"></see> of the specified <see cref="T:System.ComponentModel.Design.MenuCommand"></see> is already present on a menu.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>Adds the specified designer verb to the set of global designer verbs.</summary>
      <param name="verb">The <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> to add.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary>Searches for the specified command ID and returns the menu command associated with it.</summary>
      <param name="commandID">The <see cref="T:System.ComponentModel.Design.CommandID"></see> to search for.</param>
      <returns>The <see cref="T:System.ComponentModel.Design.MenuCommand"></see> associated with the command ID, or null if no command is found.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary>Invokes a menu or designer verb command matching the specified command ID.</summary>
      <param name="commandID">The <see cref="T:System.ComponentModel.Design.CommandID"></see> of the command to search for and execute.</param>
      <returns>true if the command was found and invoked successfully; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>Removes the specified standard menu command from the menu.</summary>
      <param name="command">The <see cref="T:System.ComponentModel.Design.MenuCommand"></see> to remove.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>Removes the specified designer verb from the collection of global designer verbs.</summary>
      <param name="verb">The <see cref="T:System.ComponentModel.Design.DesignerVerb"></see> to remove.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary>Shows the specified shortcut menu at the specified location.</summary>
      <param name="menuID">The <see cref="T:System.ComponentModel.Design.CommandID"></see> for the shortcut menu to show.</param>
      <param name="x">The x-coordinate at which to display the menu, in screen coordinates.</param>
      <param name="y">The y-coordinate at which to display the menu, in screen coordinates.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary>Gets a collection of the designer verbs that are currently available.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.DesignerVerbCollection"></see> that contains the designer verbs that are currently available.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary>Provides an interface for obtaining references to objects within a project by name or type, obtaining the name of a specified object, and for locating the parent of a specified object within a designer project.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary>Gets the component that contains the specified component.</summary>
      <param name="reference">The object to retrieve the parent component for.</param>
      <returns>The base <see cref="T:System.ComponentModel.IComponent"></see> that contains the specified object, or null if no parent component exists.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary>Gets the name of the specified component.</summary>
      <param name="reference">The object to return the name of.</param>
      <returns>The name of the object referenced, or null if the object reference is not valid.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary>Gets a reference to the component whose name matches the specified name.</summary>
      <param name="name">The name of the component to return a reference to.</param>
      <returns>An object the specified name refers to, or null if no reference is found.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary>Gets all available references to project components.</summary>
      <returns>An array of all objects with references available to the <see cref="T:System.ComponentModel.Design.IReferenceService"></see>.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary>Gets all available references to components of the specified type.</summary>
      <param name="baseType">The type of object to return references to instances of.</param>
      <returns>An array of all available objects of the specified type.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary>Provides an interface for designers to access resource readers and writers for specific <see cref="T:System.Globalization.CultureInfo"></see> resource types.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary>Locates the resource reader for the specified culture and returns it.</summary>
      <param name="info">The <see cref="T:System.Globalization.CultureInfo"></see> of the resource for which to retrieve a resource reader.</param>
      <returns>An <see cref="T:System.Resources.IResourceReader"></see> interface that contains the resources for the culture, or null if no resources for the culture exist.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary>Locates the resource writer for the specified culture and returns it.</summary>
      <param name="info">The <see cref="T:System.Globalization.CultureInfo"></see> of the resource for which to create a resource writer.</param>
      <returns>An <see cref="T:System.Resources.IResourceWriter"></see> interface for the specified culture.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary>Provides support for root-level designer view technologies.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary>Gets a view object for the specified view technology.</summary>
      <param name="technology">A <see cref="T:System.ComponentModel.Design.ViewTechnology"></see> that indicates a particular view technology.</param>
      <returns>An object that represents the view for this designer.</returns>
      <exception cref="T:System.ArgumentException">The specified view technology is not supported or does not exist.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary>Gets the set of technologies that this designer can support for its display.</summary>
      <returns>An array of supported <see cref="T:System.ComponentModel.Design.ViewTechnology"></see> values.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary>Provides an interface for a designer to select components.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary>Gets a value indicating whether the specified component is currently selected.</summary>
      <param name="component">The component to test.</param>
      <returns>true if the component is part of the user's current selection; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary>Gets a collection of components that are currently selected.</summary>
      <returns>A collection that represents the current set of components that are selected.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary>Gets the object that is currently the primary selected object.</summary>
      <returns>The object that is currently the primary selected object.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary>Occurs when the current selection changes.</summary>
      <returns></returns>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary>Occurs when the current selection is about to change.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary>Gets the count of selected objects.</summary>
      <returns>The number of selected objects.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary>Selects the specified collection of components.</summary>
      <param name="components">The collection of components to select.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary>Selects the components from within the specified collection of components that match the specified selection type.</summary>
      <param name="components">The collection of components to select.</param>
      <param name="selectionType">A value from the <see cref="T:System.ComponentModel.Design.SelectionTypes"></see> enumeration. The default is <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal"></see>.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary>Provides a container for services.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>Adds the specified service to the service container.</summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="callback">A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary>Adds the specified service to the service container.</summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="serviceInstance">An instance of the service type to add. This object must implement or inherit from the type indicated by the serviceType parameter.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>Adds the specified service to the service container, and optionally promotes the service to parent service containers.</summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="callback">A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.</param>
      <param name="promote">true to promote this request to any parent service containers; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>Adds the specified service to the service container, and optionally promotes the service to any parent service containers.</summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="serviceInstance">An instance of the service type to add. This object must implement or inherit from the type indicated by the serviceType parameter.</param>
      <param name="promote">true to promote this request to any parent service containers; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary>Removes the specified service type from the service container.</summary>
      <param name="serviceType">The type of service to remove.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>Removes the specified service type from the service container, and optionally promotes the service to parent service containers.</summary>
      <param name="serviceType">The type of service to remove.</param>
      <param name="promote">true to promote this request to any parent service containers; otherwise, false.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary>Provides support for building a set of related custom designers.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary>Gets a collection of child designers.</summary>
      <returns>An <see cref="T:System.Collections.ICollection"></see>, containing the collection of <see cref="T:System.ComponentModel.Design.IDesigner"></see> child objects of the current designer.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary>Gets the parent designer.</summary>
      <returns>An <see cref="T:System.ComponentModel.Design.IDesigner"></see> representing the parent designer, or null if there is no parent.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary>Provides an interface to modify the set of member descriptors for a component in design mode.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>Filters the attributes that a component exposes through a <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</summary>
      <param name="component">The component to filter the attributes of.</param>
      <param name="attributes">A dictionary of attributes that can be modified.</param>
      <returns>true if the set of filtered attributes is to be cached; false if the filter service must query again.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>Filters the events that a component exposes through a <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</summary>
      <param name="component">The component to filter events for.</param>
      <param name="events">A dictionary of events that can be modified.</param>
      <returns>true if the set of filtered events is to be cached; false if the filter service must query again.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>Filters the properties that a component exposes through a <see cref="T:System.ComponentModel.TypeDescriptor"></see>.</summary>
      <param name="component">The component to filter properties for.</param>
      <param name="properties">A dictionary of properties that can be modified.</param>
      <returns>true if the set of filtered properties is to be cached; false if the filter service must query again.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary>Discovers available types at design time.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary>Retrieves the list of available types.</summary>
      <param name="baseType">The base type to match. Can be null.</param>
      <param name="excludeGlobalTypes">Indicates whether types from all referenced assemblies should be checked.</param>
      <returns>A collection of types that match the criteria specified by <paramref name="baseType">baseType</paramref> and <paramref name="excludeGlobalTypes">excludeGlobalTypes</paramref>.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary>Provides an interface to retrieve an assembly or type by name.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary>Gets the requested assembly.</summary>
      <param name="name">The name of the assembly to retrieve.</param>
      <returns>An instance of the requested assembly, or null if no assembly can be located.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary>Gets the requested assembly.</summary>
      <param name="name">The name of the assembly to retrieve.</param>
      <param name="throwOnError">true if this method should throw an exception if the assembly cannot be located; otherwise, false, and this method returns null if the assembly cannot be located.</param>
      <returns>An instance of the requested assembly, or null if no assembly can be located.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary>Gets the path to the file from which the assembly was loaded.</summary>
      <param name="name">The name of the assembly.</param>
      <returns>The path to the file from which the assembly was loaded.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary>Loads a type with the specified name.</summary>
      <param name="name">The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.</param>
      <returns>An instance of <see cref="T:System.Type"></see> that corresponds to the specified name, or null if no type can be found.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary>Loads a type with the specified name.</summary>
      <param name="name">The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.</param>
      <param name="throwOnError">true if this method should throw an exception if the assembly cannot be located; otherwise, false, and this method returns null if the assembly cannot be located.</param>
      <returns>An instance of <see cref="T:System.Type"></see> that corresponds to the specified name, or null if no type can be found.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Loads a type with the specified name.</summary>
      <param name="name">The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.</param>
      <param name="throwOnError">true if this method should throw an exception if the assembly cannot be located; otherwise, false, and this method returns null if the assembly cannot be located.</param>
      <param name="ignoreCase">true to ignore case when searching for types; otherwise, false.</param>
      <returns>An instance of <see cref="T:System.Type"></see> that corresponds to the specified name, or null if no type can be found.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary>Adds a reference to the specified assembly.</summary>
      <param name="name">An <see cref="T:System.Reflection.AssemblyName"></see> that indicates the assembly to reference.</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary>Represents a Windows menu or toolbar command item.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.MenuCommand"></see> class.</summary>
      <param name="handler">The event to raise when the user selects the menu item or toolbar button.</param>
      <param name="command">The unique command ID that links this menu command to the environment's menu.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary>Gets or sets a value indicating whether this menu item is checked.</summary>
      <returns>true if the item is checked; otherwise, false.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary>Occurs when the menu command changes.</summary>
      <returns></returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID"></see> associated with this menu command.</summary>
      <returns>The <see cref="T:System.ComponentModel.Design.CommandID"></see> associated with the menu command.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary>Gets a value indicating whether this menu item is available.</summary>
      <returns>true if the item is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary>Invokes the command.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary>Invokes the command with the given parameter.</summary>
      <param name="arg">An optional argument for use by the command.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary>Gets the OLE command status code for this menu item.</summary>
      <returns>An integer containing a mixture of status flags that reflect the state of this menu item.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged"></see> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary>Gets the public properties associated with the <see cref="T:System.ComponentModel.Design.MenuCommand"></see>.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary"></see> containing the public properties of the <see cref="T:System.ComponentModel.Design.MenuCommand"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary>Gets or sets a value indicating whether this menu item is supported.</summary>
      <returns>true if the item is supported, which is the default; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary>Returns a string representation of this menu command.</summary>
      <returns>A string containing the value of the <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID"></see> property appended with the names of any flags that are set, separated by pipe bars (|). These flag properties include <see cref="P:System.ComponentModel.Design.MenuCommand.Checked"></see>, <see cref="P:System.ComponentModel.Design.MenuCommand.Enabled"></see>, <see cref="P:System.ComponentModel.Design.MenuCommand.Supported"></see>, and <see cref="P:System.ComponentModel.Design.MenuCommand.Visible"></see>.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary>Gets or sets a value indicating whether this menu item is visible.</summary>
      <returns>true if the item is visible; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary>Defines identifiers that indicate the type of a selection.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary>Represents an add selection that adds the selected components to the current selection, maintaining the current set of selected components.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary>Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary>Represents a selection that occurs when a user clicks a component. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary>Represents a selection that occurs when the user presses on the mouse button while the mouse pointer is over a component. If the component under the pointer is already selected, it is promoted to become the primary selected component rather than being canceled.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary>Represents a selection that occurs when the user releases the mouse button immediately after a component has been selected. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary>Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary>Represents a primary selection that occurs when a user clicks on a component. If a component in the selection list is already selected, the component is promoted to be the primary selection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary>Represents a remove selection that removes the selected components from the current selection, maintaining the current set of selected components.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary>Represents a selection that occurs when the content of a selection is replaced. The selection service replaces the current selection with the replacement.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary>Represents a toggle selection that switches between the current selection and the provided selection. If a component is already selected and is passed into <see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents"></see> with a selection type of <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle"></see>, the component selection will be canceled.</summary>
      <returns></returns>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary>Identifies the valid selection types as <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal"></see>, <see cref="F:System.ComponentModel.Design.SelectionTypes.Replace"></see>, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown"></see>, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp"></see>, or <see cref="F:System.ComponentModel.Design.SelectionTypes.Click"></see>.</summary>
      <returns></returns>
    </member>
    <member name="T:System.ComponentModel.Win32Exception">
      <summary>Throws an exception for a Win32 error code.</summary>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Win32Exception"></see> class with the last Win32 error that occurred.</summary>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Win32Exception"></see> class with the specified error.</summary>
      <param name="error">The Win32 error code associated with this exception.</param>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Win32Exception"></see> class with the specified detailed description.</summary>
      <param name="message">A detailed description of the error.</param>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor(System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Win32Exception"></see> class with the specified error and the specified detailed description.</summary>
      <param name="error">The Win32 error code associated with this exception.</param>
      <param name="message">A detailed description of the error.</param>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Win32Exception"></see> class with the specified context and the serialization information.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> associated with this exception.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that represents the context of this exception.</param>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Win32Exception"></see> class with the specified detailed description and the specified exception.</summary>
      <param name="message">A detailed description of the error.</param>
      <param name="innerException">A reference to the inner exception that is the cause of this exception.</param>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object with the file name and line number at which this <see cref="T:System.ComponentModel.Win32Exception"></see> occurred.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see>.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="info">info</paramref> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Win32Exception.NativeErrorCode">
      <summary>Gets the Win32 error code associated with this exception.</summary>
      <returns>The Win32 error code associated with this exception.</returns>
    </member>
    <member name="T:System.Diagnostics.Process">
      <summary>Provides access to local and remote processes and enables you to start and stop local system processes.</summary>
    </member>
    <member name="M:System.Diagnostics.Process.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Process"></see> class.</summary>
    </member>
    <member name="P:System.Diagnostics.Process.BasePriority">
      <summary>Gets the base priority of the associated process.</summary>
      <returns>The base priority, which is computed from the <see cref="P:System.Diagnostics.Process.PriorityClass"></see> of the associated process.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> property to false to access this property on Windows 98 and Windows Me.</exception>
      <exception cref="T:System.InvalidOperationException">The process has exited.   -or-   The process has not started, so there is no process ID.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.BeginErrorReadLine">
      <summary>Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardError"></see> stream of the application.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError"></see> property is false.   - or -   An asynchronous read operation is already in progress on the <see cref="P:System.Diagnostics.Process.StandardError"></see> stream.   - or -   The <see cref="P:System.Diagnostics.Process.StandardError"></see> stream has been used by a synchronous read operation.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.BeginOutputReadLine">
      <summary>Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardOutput"></see> stream of the application.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput"></see> property is false.   - or -   An asynchronous read operation is already in progress on the <see cref="P:System.Diagnostics.Process.StandardOutput"></see> stream.   - or -   The <see cref="P:System.Diagnostics.Process.StandardOutput"></see> stream has been used by a synchronous read operation.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.CancelErrorRead">
      <summary>Cancels the asynchronous read operation on the redirected <see cref="P:System.Diagnostics.Process.StandardError"></see> stream of an application.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Diagnostics.Process.StandardError"></see> stream is not enabled for asynchronous read operations.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.CancelOutputRead">
      <summary>Cancels the asynchronous read operation on the redirected <see cref="P:System.Diagnostics.Process.StandardOutput"></see> stream of an application.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Diagnostics.Process.StandardOutput"></see> stream is not enabled for asynchronous read operations.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Close">
      <summary>Frees all the resources that are associated with this component.</summary>
    </member>
    <member name="M:System.Diagnostics.Process.CloseMainWindow">
      <summary>Closes a process that has a user interface by sending a close message to its main window.</summary>
      <returns>true if the close message was successfully sent; false if the associated process does not have a main window or if the main window is disabled (for example if a modal dialog is being shown).</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> property to false to access this property on Windows 98 and Windows Me.</exception>
      <exception cref="T:System.InvalidOperationException">The process has already exited.   -or-   No process is associated with this <see cref="T:System.Diagnostics.Process"></see> object.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Dispose(System.Boolean)">
      <summary>Release all resources used by this process.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Diagnostics.Process.EnableRaisingEvents">
      <summary>Gets or sets whether the <see cref="E:System.Diagnostics.Process.Exited"></see> event should be raised when the process terminates.</summary>
      <returns>true if the <see cref="E:System.Diagnostics.Process.Exited"></see> event should be raised when the associated process is terminated (through either an exit or a call to <see cref="M:System.Diagnostics.Process.Kill"></see>); otherwise, false. The default is false. Note that the <see cref="E:System.Diagnostics.Process.Exited"></see> event is raised even if the value of <see cref="P:System.Diagnostics.Process.EnableRaisingEvents"></see> is false when the process exits during or before the user performs a <see cref="P:System.Diagnostics.Process.HasExited"></see> check.</returns>
    </member>
    <member name="M:System.Diagnostics.Process.EnterDebugMode">
      <summary>Puts a <see cref="T:System.Diagnostics.Process"></see> component in state to interact with operating system processes that run in a special mode by enabling the native property SeDebugPrivilege on the current thread.</summary>
    </member>
    <member name="E:System.Diagnostics.Process.ErrorDataReceived">
      <summary>Occurs when an application writes to its redirected <see cref="P:System.Diagnostics.Process.StandardError"></see> stream.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Diagnostics.Process.ExitCode">
      <summary>Gets the value that the associated process specified when it terminated.</summary>
      <returns>The code that the associated process specified when it terminated.</returns>
      <exception cref="T:System.InvalidOperationException">The process has not exited.   -or-   The process <see cref="P:System.Diagnostics.Process.Handle"></see> is not valid.</exception>
      <exception cref="T:System.NotSupportedException">You are trying to access the <see cref="P:System.Diagnostics.Process.ExitCode"></see> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</exception>
    </member>
    <member name="E:System.Diagnostics.Process.Exited">
      <summary>Occurs when a process exits.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Diagnostics.Process.ExitTime">
      <summary>Gets the time that the associated process exited.</summary>
      <returns>A <see cref="T:System.DateTime"></see> that indicates when the associated process was terminated.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
      <exception cref="T:System.NotSupportedException">You are trying to access the <see cref="P:System.Diagnostics.Process.ExitTime"></see> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.GetCurrentProcess">
      <summary>Gets a new <see cref="T:System.Diagnostics.Process"></see> component and associates it with the currently active process.</summary>
      <returns>A new <see cref="T:System.Diagnostics.Process"></see> component associated with the process resource that is running the calling application.</returns>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
      <summary>Returns a new <see cref="T:System.Diagnostics.Process"></see> component, given the identifier of a process on the local computer.</summary>
      <param name="processId">The system-unique identifier of a process resource.</param>
      <returns>A <see cref="T:System.Diagnostics.Process"></see> component that is associated with the local process resource identified by the <paramref name="processId">processId</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentException">The process specified by the <paramref name="processId">processId</paramref> parameter is not running. The identifier might be expired.</exception>
      <exception cref="T:System.InvalidOperationException">The process was not started by this object.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
      <summary>Returns a new <see cref="T:System.Diagnostics.Process"></see> component, given a process identifier and the name of a computer on the network.</summary>
      <param name="processId">The system-unique identifier of a process resource.</param>
      <param name="machineName">The name of a computer on the network.</param>
      <returns>A <see cref="T:System.Diagnostics.Process"></see> component that is associated with a remote process resource identified by the <paramref name="processId">processId</paramref> parameter.</returns>
      <exception cref="T:System.ArgumentException">The process specified by the <paramref name="processId">processId</paramref> parameter is not running. The identifier might be expired.   -or-   The <paramref name="machineName">machineName</paramref> parameter syntax is invalid. The name might have length zero (0).</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="machineName">machineName</paramref> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The process was not started by this object.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcesses(System.String)">
      <summary>Creates a new <see cref="T:System.Diagnostics.Process"></see> component for each process resource on the specified computer.</summary>
      <param name="machineName">The computer from which to read the list of processes.</param>
      <returns>An array of type <see cref="T:System.Diagnostics.Process"></see> that represents all the process resources running on the specified computer.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="machineName">machineName</paramref> parameter syntax is invalid. It might have length zero (0).</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="machineName">machineName</paramref> parameter is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system platform does not support this operation on remote computers.</exception>
      <exception cref="T:System.InvalidOperationException">There are problems accessing the performance counter API's used to get process information. This exception is specific to Windows NT, Windows 2000, and Windows XP.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">A problem occurred accessing an underlying system API.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcesses">
      <summary>Creates a new <see cref="T:System.Diagnostics.Process"></see> component for each process resource on the local computer.</summary>
      <returns>An array of type <see cref="T:System.Diagnostics.Process"></see> that represents all the process resources running on the local computer.</returns>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
      <summary>Creates an array of new <see cref="T:System.Diagnostics.Process"></see> components and associates them with all the process resources on the local computer that share the specified process name.</summary>
      <param name="processName">The friendly name of the process.</param>
      <returns>An array of type <see cref="T:System.Diagnostics.Process"></see> that represents the process resources running the specified application or file.</returns>
      <exception cref="T:System.InvalidOperationException">There are problems accessing the performance counter API's used to get process information. This exception is specific to Windows NT, Windows 2000, and Windows XP.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
      <summary>Creates an array of new <see cref="T:System.Diagnostics.Process"></see> components and associates them with all the process resources on a remote computer that share the specified process name.</summary>
      <param name="processName">The friendly name of the process.</param>
      <param name="machineName">The name of a computer on the network.</param>
      <returns>An array of type <see cref="T:System.Diagnostics.Process"></see> that represents the process resources running the specified application or file.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="machineName">machineName</paramref> parameter syntax is invalid. It might have length zero (0).</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="machineName">machineName</paramref> parameter is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system platform does not support this operation on remote computers.</exception>
      <exception cref="T:System.InvalidOperationException">There are problems accessing the performance counter API's used to get process information. This exception is specific to Windows NT, Windows 2000, and Windows XP.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">A problem occurred accessing an underlying system API.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.Handle">
      <summary>Gets the native handle of the associated process.</summary>
      <returns>The handle that the operating system assigned to the associated process when the process was started. The system uses this handle to keep track of process attributes.</returns>
      <exception cref="T:System.InvalidOperationException">The process has not been started or has exited. The <see cref="P:System.Diagnostics.Process.Handle"></see> property cannot be read because there is no process associated with this <see cref="T:System.Diagnostics.Process"></see> instance.   -or-   The <see cref="T:System.Diagnostics.Process"></see> instance has been attached to a running process but you do not have the necessary permissions to get a handle with full access rights.</exception>
      <exception cref="T:System.NotSupportedException">You are trying to access the <see cref="P:System.Diagnostics.Process.Handle"></see> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.HandleCount">
      <summary>Gets the number of handles opened by the process.</summary>
      <returns>The number of operating system handles the process has opened.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> property to false to access this property on Windows 98 and Windows Me.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.HasExited">
      <summary>Gets a value indicating whether the associated process has been terminated.</summary>
      <returns>true if the operating system process referenced by the <see cref="T:System.Diagnostics.Process"></see> component has terminated; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">There is no process associated with the object.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">The exit code for the process could not be retrieved.</exception>
      <exception cref="T:System.NotSupportedException">You are trying to access the <see cref="P:System.Diagnostics.Process.HasExited"></see> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.Id">
      <summary>Gets the unique identifier for the associated process.</summary>
      <returns>The system-generated unique identifier of the process that is referenced by this <see cref="T:System.Diagnostics.Process"></see> instance.</returns>
      <exception cref="T:System.InvalidOperationException">The process's <see cref="P:System.Diagnostics.Process.Id"></see> property has not been set.   -or-   There is no process associated with this <see cref="T:System.Diagnostics.Process"></see> object.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> property to false to access this property on Windows 98 and Windows Me.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Kill">
      <summary>Immediately stops the associated process.</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">The associated process could not be terminated.   -or-   The process is terminating.   -or-   The associated process is a Win16 executable.</exception>
      <exception cref="T:System.NotSupportedException">You are attempting to call <see cref="M:System.Diagnostics.Process.Kill"></see> for a process that is running on a remote computer. The method is available only for processes running on the local computer.</exception>
      <exception cref="T:System.InvalidOperationException">The process has already exited.   -or-   There is no process associated with this <see cref="T:System.Diagnostics.Process"></see> object.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.LeaveDebugMode">
      <summary>Takes a <see cref="T:System.Diagnostics.Process"></see> component out of the state that lets it interact with operating system processes that run in a special mode.</summary>
    </member>
    <member name="P:System.Diagnostics.Process.MachineName">
      <summary>Gets the name of the computer the associated process is running on.</summary>
      <returns>The name of the computer that the associated process is running on.</returns>
      <exception cref="T:System.InvalidOperationException">There is no process associated with this <see cref="T:System.Diagnostics.Process"></see> object.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.MainModule">
      <summary>Gets the main module for the associated process.</summary>
      <returns>The <see cref="T:System.Diagnostics.ProcessModule"></see> that was used to start the process.</returns>
      <exception cref="T:System.NotSupportedException">You are trying to access the <see cref="P:System.Diagnostics.Process.MainModule"></see> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">A 32-bit process is trying to access the modules of a 64-bit process.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> to false to access this property on Windows 98 and Windows Me.</exception>
      <exception cref="T:System.InvalidOperationException">The process <see cref="P:System.Diagnostics.Process.Id"></see> is not available.   -or-   The process has exited.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.MainWindowHandle">
      <summary>Gets the window handle of the main window of the associated process.</summary>
      <returns>The system-generated window handle of the main window of the associated process.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Diagnostics.Process.MainWindowHandle"></see> is not defined because the process has exited.</exception>
      <exception cref="T:System.NotSupportedException">You are trying to access the <see cref="P:System.Diagnostics.Process.MainWindowHandle"></see> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> to false to access this property on Windows 98 and Windows Me.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.MainWindowTitle">
      <summary>Gets the caption of the main window of the process.</summary>
      <returns>The main window title of the process.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Diagnostics.Process.MainWindowTitle"></see> property is not defined because the process has exited.</exception>
      <exception cref="T:System.NotSupportedException">You are trying to access the <see cref="P:System.Diagnostics.Process.MainWindowTitle"></see> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> to false to access this property on Windows 98 and Windows Me.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.MaxWorkingSet">
      <summary>Gets or sets the maximum allowable working set size, in bytes, for the associated process.</summary>
      <returns>The maximum working set size that is allowed in memory for the process, in bytes.</returns>
      <exception cref="T:System.ArgumentException">The maximum working set size is invalid. It must be greater than or equal to the minimum working set size.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">Working set information cannot be retrieved from the associated process resource.   -or-   The process identifier or process handle is zero because the process has not been started.</exception>
      <exception cref="T:System.NotSupportedException">You are trying to access the <see cref="P:System.Diagnostics.Process.MaxWorkingSet"></see> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</exception>
      <exception cref="T:System.InvalidOperationException">The process <see cref="P:System.Diagnostics.Process.Id"></see> is not available.   -or-   The process has exited.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.MinWorkingSet">
      <summary>Gets or sets the minimum allowable working set size, in bytes, for the associated process.</summary>
      <returns>The minimum working set size that is required in memory for the process, in bytes.</returns>
      <exception cref="T:System.ArgumentException">The minimum working set size is invalid. It must be less than or equal to the maximum working set size.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">Working set information cannot be retrieved from the associated process resource.   -or-   The process identifier or process handle is zero because the process has not been started.</exception>
      <exception cref="T:System.NotSupportedException">You are trying to access the <see cref="P:System.Diagnostics.Process.MinWorkingSet"></see> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</exception>
      <exception cref="T:System.InvalidOperationException">The process <see cref="P:System.Diagnostics.Process.Id"></see> is not available.   -or-   The process has exited.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.Modules">
      <summary>Gets the modules that have been loaded by the associated process.</summary>
      <returns>An array of type <see cref="T:System.Diagnostics.ProcessModule"></see> that represents the modules that have been loaded by the associated process.</returns>
      <exception cref="T:System.NotSupportedException">You are attempting to access the <see cref="P:System.Diagnostics.Process.Modules"></see> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</exception>
      <exception cref="T:System.InvalidOperationException">The process <see cref="P:System.Diagnostics.Process.Id"></see> is not available.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> to false to access this property on Windows 98 and Windows Me.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">You are attempting to access the <see cref="P:System.Diagnostics.Process.Modules"></see> property for either the system process or the idle process. These processes do not have modules.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.NonpagedSystemMemorySize">
      <summary>Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.</summary>
      <returns>The amount of memory, in bytes, the system has allocated for the associated process that cannot be written to the virtual memory paging file.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.NonpagedSystemMemorySize64">
      <summary>Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.</summary>
      <returns>The amount of system memory, in bytes, allocated for the associated process that cannot be written to the virtual memory paging file.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.OnExited">
      <summary>Raises the <see cref="E:System.Diagnostics.Process.Exited"></see> event.</summary>
    </member>
    <member name="E:System.Diagnostics.Process.OutputDataReceived">
      <summary>Occurs each time an application writes a line to its redirected <see cref="P:System.Diagnostics.Process.StandardOutput"></see> stream.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Diagnostics.Process.PagedMemorySize">
      <summary>Gets the amount of paged memory, in bytes, allocated for the associated process.</summary>
      <returns>The amount of memory, in bytes, allocated by the associated process that can be written to the virtual memory paging file.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PagedMemorySize64">
      <summary>Gets the amount of paged memory, in bytes, allocated for the associated process.</summary>
      <returns>The amount of memory, in bytes, allocated in the virtual memory paging file for the associated process.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PagedSystemMemorySize">
      <summary>Gets the amount of pageable system memory, in bytes, allocated for the associated process.</summary>
      <returns>The amount of memory, in bytes, the system has allocated for the associated process that can be written to the virtual memory paging file.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PagedSystemMemorySize64">
      <summary>Gets the amount of pageable system memory, in bytes, allocated for the associated process.</summary>
      <returns>The amount of system memory, in bytes, allocated for the associated process that can be written to the virtual memory paging file.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PeakPagedMemorySize">
      <summary>Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.</summary>
      <returns>The maximum amount of memory, in bytes, allocated by the associated process that could be written to the virtual memory paging file.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PeakPagedMemorySize64">
      <summary>Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.</summary>
      <returns>The maximum amount of memory, in bytes, allocated in the virtual memory paging file for the associated process since it was started.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PeakVirtualMemorySize">
      <summary>Gets the maximum amount of virtual memory, in bytes, used by the associated process.</summary>
      <returns>The maximum amount of virtual memory, in bytes, that the associated process has requested.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PeakVirtualMemorySize64">
      <summary>Gets the maximum amount of virtual memory, in bytes, used by the associated process.</summary>
      <returns>The maximum amount of virtual memory, in bytes, allocated for the associated process since it was started.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PeakWorkingSet">
      <summary>Gets the peak working set size for the associated process, in bytes.</summary>
      <returns>The maximum amount of physical memory that the associated process has required all at once, in bytes.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PeakWorkingSet64">
      <summary>Gets the maximum amount of physical memory, in bytes, used by the associated process.</summary>
      <returns>The maximum amount of physical memory, in bytes, allocated for the associated process since it was started.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PriorityBoostEnabled">
      <summary>Gets or sets a value indicating whether the associated process priority should temporarily be boosted by the operating system when the main window has the focus.</summary>
      <returns>true if dynamic boosting of the process priority should take place for a process when it is taken out of the wait state; otherwise, false. The default is false.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">Priority boost information could not be retrieved from the associated process resource.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.   -or-   The process identifier or process handle is zero. (The process has not been started.)</exception>
      <exception cref="T:System.NotSupportedException">You are attempting to access the <see cref="P:System.Diagnostics.Process.PriorityBoostEnabled"></see> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</exception>
      <exception cref="T:System.InvalidOperationException">The process <see cref="P:System.Diagnostics.Process.Id"></see> is not available.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PriorityClass">
      <summary>Gets or sets the overall priority category for the associated process.</summary>
      <returns>The priority category for the associated process, from which the <see cref="P:System.Diagnostics.Process.BasePriority"></see> of the process is calculated.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">Process priority information could not be set or retrieved from the associated process resource.   -or-   The process identifier or process handle is zero. (The process has not been started.)</exception>
      <exception cref="T:System.NotSupportedException">You are attempting to access the <see cref="P:System.Diagnostics.Process.PriorityClass"></see> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</exception>
      <exception cref="T:System.InvalidOperationException">The process <see cref="P:System.Diagnostics.Process.Id"></see> is not available.</exception>
      <exception cref="T:System.PlatformNotSupportedException">You have set the <see cref="P:System.Diagnostics.Process.PriorityClass"></see> to AboveNormal or BelowNormal when using Windows 98 or Windows Millennium Edition (Windows Me). These platforms do not support those values for the priority class.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Priority class cannot be set because it does not use a valid value, as defined in the <see cref="T:System.Diagnostics.ProcessPriorityClass"></see> enumeration.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PrivateMemorySize">
      <summary>Gets the amount of private memory, in bytes, allocated for the associated process.</summary>
      <returns>The number of bytes allocated by the associated process that cannot be shared with other processes.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PrivateMemorySize64">
      <summary>Gets the amount of private memory, in bytes, allocated for the associated process.</summary>
      <returns>The amount of memory, in bytes, allocated for the associated process that cannot be shared with other processes.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PrivilegedProcessorTime">
      <summary>Gets the privileged processor time for this process.</summary>
      <returns>A <see cref="T:System.TimeSpan"></see> that indicates the amount of time that the process has spent running code inside the operating system core.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
      <exception cref="T:System.NotSupportedException">You are attempting to access the <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime"></see> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.ProcessName">
      <summary>Gets the name of the process.</summary>
      <returns>The name that the system uses to identify the process to the user.</returns>
      <exception cref="T:System.InvalidOperationException">The process does not have an identifier, or no process is associated with the <see cref="T:System.Diagnostics.Process"></see>.   -or-   The associated process has exited.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> to false to access this property on Windows 98 and Windows Me.</exception>
      <exception cref="T:System.NotSupportedException">The process is not on this computer.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.ProcessorAffinity">
      <summary>Gets or sets the processors on which the threads in this process can be scheduled to run.</summary>
      <returns>A bitmask representing the processors that the threads in the associated process can run on. The default depends on the number of processors on the computer. The default value is 2 n -1, where n is the number of processors.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception"><see cref="P:System.Diagnostics.Process.ProcessorAffinity"></see> information could not be set or retrieved from the associated process resource.   -or-   The process identifier or process handle is zero. (The process has not been started.)</exception>
      <exception cref="T:System.NotSupportedException">You are attempting to access the <see cref="P:System.Diagnostics.Process.ProcessorAffinity"></see> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</exception>
      <exception cref="T:System.InvalidOperationException">The process <see cref="P:System.Diagnostics.Process.Id"></see> was not available.   -or-   The process has exited.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Refresh">
      <summary>Discards any information about the associated process that has been cached inside the process component.</summary>
    </member>
    <member name="P:System.Diagnostics.Process.Responding">
      <summary>Gets a value indicating whether the user interface of the process is responding.</summary>
      <returns>true if the user interface of the associated process is responding to the system; otherwise, false.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> to false to access this property on Windows 98 and Windows Me.</exception>
      <exception cref="T:System.InvalidOperationException">There is no process associated with this <see cref="T:System.Diagnostics.Process"></see> object.</exception>
      <exception cref="T:System.NotSupportedException">You are attempting to access the <see cref="P:System.Diagnostics.Process.Responding"></see> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.SafeHandle">
      <summary>Gets the native handle to this process.</summary>
      <returns>The native handle to this process.</returns>
    </member>
    <member name="P:System.Diagnostics.Process.SessionId">
      <summary>Gets the Terminal Services session identifier for the associated process.</summary>
      <returns>The Terminal Services session identifier for the associated process.</returns>
      <exception cref="T:System.NullReferenceException">There is no session associated with this process.</exception>
      <exception cref="T:System.InvalidOperationException">There is no process associated with this session identifier.   -or-   The associated process is not on this machine.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The <see cref="P:System.Diagnostics.Process.SessionId"></see> property is not supported on Windows 98.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.StandardError">
      <summary>Gets a stream used to read the error output of the application.</summary>
      <returns>A <see cref="T:System.IO.StreamReader"></see> that can be used to read the standard error stream of the application.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Diagnostics.Process.StandardError"></see> stream has not been defined for redirection; ensure <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError"></see> is set to true and <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> is set to false.   - or -   The <see cref="P:System.Diagnostics.Process.StandardError"></see> stream has been opened for asynchronous read operations with <see cref="M:System.Diagnostics.Process.BeginErrorReadLine"></see>.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.StandardInput">
      <summary>Gets a stream used to write the input of the application.</summary>
      <returns>A <see cref="T:System.IO.StreamWriter"></see> that can be used to write the standard input stream of the application.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Diagnostics.Process.StandardInput"></see> stream has not been defined because <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput"></see> is set to false.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.StandardOutput">
      <summary>Gets a stream used to read the textual output of the application.</summary>
      <returns>A <see cref="T:System.IO.StreamReader"></see> that can be used to read the standard output stream of the application.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Diagnostics.Process.StandardOutput"></see> stream has not been defined for redirection; ensure <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput"></see> is set to true and <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> is set to false.   - or -   The <see cref="P:System.Diagnostics.Process.StandardOutput"></see> stream has been opened for asynchronous read operations with <see cref="M:System.Diagnostics.Process.BeginOutputReadLine"></see>.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Start">
      <summary>Starts (or reuses) the process resource that is specified by the <see cref="P:System.Diagnostics.Process.StartInfo"></see> property of this <see cref="T:System.Diagnostics.Process"></see> component and associates it with the component.</summary>
      <returns>true if a process resource is started; false if no new process resource is started (for example, if an existing process is reused).</returns>
      <exception cref="T:System.InvalidOperationException">No file name was specified in the <see cref="T:System.Diagnostics.Process"></see> component's <see cref="P:System.Diagnostics.Process.StartInfo"></see>.   -or-   The <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> member of the <see cref="P:System.Diagnostics.Process.StartInfo"></see> property is true while <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput"></see>, <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput"></see>, or <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError"></see> is true.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">There was an error in opening the associated file.</exception>
      <exception cref="T:System.ObjectDisposedException">The process object has already been disposed.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
      <summary>Starts the process resource that is specified by the parameter containing process start information (for example, the file name of the process to start) and associates the resource with a new <see cref="T:System.Diagnostics.Process"></see> component.</summary>
      <param name="startInfo">The <see cref="T:System.Diagnostics.ProcessStartInfo"></see> that contains the information that is used to start the process, including the file name and any command-line arguments.</param>
      <returns>A new <see cref="T:System.Diagnostics.Process"></see> that is associated with the process resource, or null if no process resource is started. Note that a new process that’s started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited"></see> property already set to true. In this case, the started process may have activated an existing instance of itself and then exited.</returns>
      <exception cref="T:System.InvalidOperationException">No file name was specified in the <paramref name="startInfo">startInfo</paramref> parameter's <see cref="P:System.Diagnostics.ProcessStartInfo.FileName"></see> property.   -or-   The <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> property of the <paramref name="startInfo">startInfo</paramref> parameter is true and the <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput"></see>, <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput"></see>, or <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError"></see> property is also true.   -or-   The <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> property of the <paramref name="startInfo">startInfo</paramref> parameter is true and the <see cref="P:System.Diagnostics.ProcessStartInfo.UserName"></see> property is not null or empty or the <see cref="P:System.Diagnostics.ProcessStartInfo.Password"></see> property is not null.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="startInfo">startInfo</paramref> parameter is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The process object has already been disposed.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in the <paramref name="startInfo">startInfo</paramref> parameter's <see cref="P:System.Diagnostics.ProcessStartInfo.FileName"></see> property could not be found.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file.   -or-   The sum of the length of the arguments and the length of the full path to the process exceeds 2080. The error message associated with this exception can be one of the following: &quot;The data area passed to a system call is too small.&quot; or &quot;Access is denied.&quot;</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.String)">
      <summary>Starts a process resource by specifying the name of a document or application file and associates the resource with a new <see cref="T:System.Diagnostics.Process"></see> component.</summary>
      <param name="fileName">The name of a document or application file to run in the process.</param>
      <returns>A new <see cref="T:System.Diagnostics.Process"></see> that is associated with the process resource, or null if no process resource is started. Note that a new process that’s started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited"></see> property already set to true. In this case, the started process may have activated an existing instance of itself and then exited.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file.</exception>
      <exception cref="T:System.ObjectDisposedException">The process object has already been disposed.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The PATH environment variable has a string containing quotes.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.String,System.String)">
      <summary>Starts a process resource by specifying the name of an application and a set of command-line arguments, and associates the resource with a new <see cref="T:System.Diagnostics.Process"></see> component.</summary>
      <param name="fileName">The name of an application file to run in the process.</param>
      <param name="arguments">Command-line arguments to pass when starting the process.</param>
      <returns>A new <see cref="T:System.Diagnostics.Process"></see> that is associated with the process resource, or null if no process resource is started. Note that a new process that’s started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited"></see> property already set to true. In this case, the started process may have activated an existing instance of itself and then exited.</returns>
      <exception cref="T:System.InvalidOperationException">The <paramref name="fileName">fileName</paramref> or <paramref name="arguments">arguments</paramref> parameter is null.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file.   -or-   The sum of the length of the arguments and the length of the full path to the process exceeds 2080. The error message associated with this exception can be one of the following: &quot;The data area passed to a system call is too small.&quot; or &quot;Access is denied.&quot;</exception>
      <exception cref="T:System.ObjectDisposedException">The process object has already been disposed.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The PATH environment variable has a string containing quotes.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
      <summary>Starts a process resource by specifying the name of an application, a user name, a password, and a domain and associates the resource with a new <see cref="T:System.Diagnostics.Process"></see> component.</summary>
      <param name="fileName">The name of an application file to run in the process.</param>
      <param name="userName">The user name to use when starting the process.</param>
      <param name="password">A <see cref="T:System.Security.SecureString"></see> that contains the password to use when starting the process.</param>
      <param name="domain">The domain to use when starting the process.</param>
      <returns>A new <see cref="T:System.Diagnostics.Process"></see> that is associated with the process resource, or null if no process resource is started. Note that a new process that’s started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited"></see> property already set to true. In this case, the started process may have activated an existing instance of itself and then exited.</returns>
      <exception cref="T:System.InvalidOperationException">No file name was specified.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">There was an error in opening the associated file.</exception>
      <exception cref="T:System.ObjectDisposedException">The process object has already been disposed.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
      <summary>Starts a process resource by specifying the name of an application, a set of command-line arguments, a user name, a password, and a domain and associates the resource with a new <see cref="T:System.Diagnostics.Process"></see> component.</summary>
      <param name="fileName">The name of an application file to run in the process.</param>
      <param name="arguments">Command-line arguments to pass when starting the process.</param>
      <param name="userName">The user name to use when starting the process.</param>
      <param name="password">A <see cref="T:System.Security.SecureString"></see> that contains the password to use when starting the process.</param>
      <param name="domain">The domain to use when starting the process.</param>
      <returns>A new <see cref="T:System.Diagnostics.Process"></see> that is associated with the process resource, or null if no process resource is started. Note that a new process that’s started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited"></see> property already set to true. In this case, the started process may have activated an existing instance of itself and then exited.</returns>
      <exception cref="T:System.InvalidOperationException">No file name was specified.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file.   -or-   The sum of the length of the arguments and the length of the full path to the associated file exceeds 2080. The error message associated with this exception can be one of the following: &quot;The data area passed to a system call is too small.&quot; or &quot;Access is denied.&quot;</exception>
      <exception cref="T:System.ObjectDisposedException">The process object has already been disposed.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.StartInfo">
      <summary>Gets or sets the properties to pass to the <see cref="M:System.Diagnostics.Process.Start"></see> method of the <see cref="T:System.Diagnostics.Process"></see>.</summary>
      <returns>The <see cref="T:System.Diagnostics.ProcessStartInfo"></see> that represents the data with which to start the process. These arguments include the name of the executable file or document used to start the process.</returns>
      <exception cref="T:System.ArgumentNullException">The value that specifies the <see cref="P:System.Diagnostics.Process.StartInfo"></see> is null.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.StartTime">
      <summary>Gets the time that the associated process was started.</summary>
      <returns>An object  that indicates when the process started. An exception is thrown if the process is not running.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
      <exception cref="T:System.NotSupportedException">You are attempting to access the <see cref="P:System.Diagnostics.Process.StartTime"></see> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</exception>
      <exception cref="T:System.InvalidOperationException">The process has exited.   -or-   The process has not been started.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred in the call to the Windows function.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.SynchronizingObject">
      <summary>Gets or sets the object used to marshal the event handler calls that are issued as a result of a process exit event.</summary>
      <returns>The <see cref="T:System.ComponentModel.ISynchronizeInvoke"></see> used to marshal event handler calls that are issued as a result of an <see cref="E:System.Diagnostics.Process.Exited"></see> event on the process.</returns>
    </member>
    <member name="P:System.Diagnostics.Process.Threads">
      <summary>Gets the set of threads that are running in the associated process.</summary>
      <returns>An array of type <see cref="T:System.Diagnostics.ProcessThread"></see> representing the operating system threads currently running in the associated process.</returns>
      <exception cref="T:System.SystemException">The process does not have an <see cref="P:System.Diagnostics.Process.Id"></see>, or no process is associated with the <see cref="T:System.Diagnostics.Process"></see> instance.   -or-   The associated process has exited.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> to false to access this property on Windows 98 and Windows Me.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.ToString">
      <summary>Formats the process's name as a string, combined with the parent component type, if applicable.</summary>
      <returns>The <see cref="P:System.Diagnostics.Process.ProcessName"></see>, combined with the base component's <see cref="M:System.Object.ToString"></see> return value.</returns>
      <exception cref="T:System.PlatformNotSupportedException"><see cref="M:System.Diagnostics.Process.ToString"></see> is not supported on Windows 98.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.TotalProcessorTime">
      <summary>Gets the total processor time for this process.</summary>
      <returns>A <see cref="T:System.TimeSpan"></see> that indicates the amount of time that the associated process has spent utilizing the CPU. This value is the sum of the <see cref="P:System.Diagnostics.Process.UserProcessorTime"></see> and the <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime"></see>.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
      <exception cref="T:System.NotSupportedException">You are attempting to access the <see cref="P:System.Diagnostics.Process.TotalProcessorTime"></see> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.UserProcessorTime">
      <summary>Gets the user processor time for this process.</summary>
      <returns>A <see cref="T:System.TimeSpan"></see> that indicates the amount of time that the associated process has spent running code inside the application portion of the process (not inside the operating system core).</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
      <exception cref="T:System.NotSupportedException">You are attempting to access the <see cref="P:System.Diagnostics.Process.UserProcessorTime"></see> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.VirtualMemorySize">
      <summary>Gets the size of the process's virtual memory, in bytes.</summary>
      <returns>The amount of virtual memory, in bytes, that the associated process has requested.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.VirtualMemorySize64">
      <summary>Gets the amount of the virtual memory, in bytes, allocated for the associated process.</summary>
      <returns>The amount of virtual memory, in bytes, allocated for the associated process.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForExit">
      <summary>Instructs the <see cref="T:System.Diagnostics.Process"></see> component to wait indefinitely for the associated process to exit.</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">The wait setting could not be accessed.</exception>
      <exception cref="T:System.SystemException">No process <see cref="P:System.Diagnostics.Process.Id"></see> has been set, and a <see cref="P:System.Diagnostics.Process.Handle"></see> from which the <see cref="P:System.Diagnostics.Process.Id"></see> property can be determined does not exist.   -or-   There is no process associated with this <see cref="T:System.Diagnostics.Process"></see> object.   -or-   You are attempting to call <see cref="M:System.Diagnostics.Process.WaitForExit"></see> for a process that is running on a remote computer. This method is available only for processes that are running on the local computer.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
      <summary>Instructs the <see cref="T:System.Diagnostics.Process"></see> component to wait the specified number of milliseconds for the associated process to exit.</summary>
      <param name="milliseconds">The amount of time, in milliseconds, to wait for the associated process to exit. The maximum is the largest possible value of a 32-bit integer, which represents infinity to the operating system.</param>
      <returns>true if the associated process has exited; otherwise, false.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">The wait setting could not be accessed.</exception>
      <exception cref="T:System.SystemException">No process <see cref="P:System.Diagnostics.Process.Id"></see> has been set, and a <see cref="P:System.Diagnostics.Process.Handle"></see> from which the <see cref="P:System.Diagnostics.Process.Id"></see> property can be determined does not exist.   -or-   There is no process associated with this <see cref="T:System.Diagnostics.Process"></see> object.   -or-   You are attempting to call <see cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)"></see> for a process that is running on a remote computer. This method is available only for processes that are running on the local computer.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForInputIdle">
      <summary>Causes the <see cref="T:System.Diagnostics.Process"></see> component to wait indefinitely for the associated process to enter an idle state. This overload applies only to processes with a user interface and, therefore, a message loop.</summary>
      <returns>true if the associated process has reached an idle state.</returns>
      <exception cref="T:System.InvalidOperationException">The process does not have a graphical interface.   -or-   An unknown error occurred. The process failed to enter an idle state.   -or-   The process has already exited.   -or-   No process is associated with this <see cref="T:System.Diagnostics.Process"></see> object.</exception>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
      <summary>Causes the <see cref="T:System.Diagnostics.Process"></see> component to wait the specified number of milliseconds for the associated process to enter an idle state. This overload applies only to processes with a user interface and, therefore, a message loop.</summary>
      <param name="milliseconds">A value of 1 to <see cref="F:System.Int32.MaxValue"></see> that specifies the amount of time, in milliseconds, to wait for the associated process to become idle. A value of 0 specifies an immediate return, and a value of -1 specifies an infinite wait.</param>
      <returns>true if the associated process has reached an idle state; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">The process does not have a graphical interface.   -or-   An unknown error occurred. The process failed to enter an idle state.   -or-   The process has already exited.   -or-   No process is associated with this <see cref="T:System.Diagnostics.Process"></see> object.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.WorkingSet">
      <summary>Gets the associated process's physical memory usage, in bytes.</summary>
      <returns>The total amount of physical memory the associated process is using, in bytes.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="P:System.Diagnostics.Process.WorkingSet64">
      <summary>Gets the amount of physical memory, in bytes, allocated for the associated process.</summary>
      <returns>The amount of physical memory, in bytes, allocated for the associated process.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</exception>
    </member>
    <member name="T:System.Diagnostics.ProcessModule">
      <summary>Represents a.dll or .exe file that is loaded into a particular process.</summary>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.BaseAddress">
      <summary>Gets the memory address where the module was loaded.</summary>
      <returns>The load address of the module.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.EntryPointAddress">
      <summary>Gets the memory address for the function that runs when the system loads and runs the module.</summary>
      <returns>The entry point of the module.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.FileName">
      <summary>Gets the full path to the module.</summary>
      <returns>The fully qualified path that defines the location of the module.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.FileVersionInfo">
      <summary>Gets version information about the module.</summary>
      <returns>A <see cref="T:System.Diagnostics.FileVersionInfo"></see> that contains the module's version information.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.ModuleMemorySize">
      <summary>Gets the amount of memory that is required to load the module.</summary>
      <returns>The size, in bytes, of the memory that the module occupies.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.ModuleName">
      <summary>Gets the name of the process module.</summary>
      <returns>The name of the module.</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModule.ToString">
      <summary>Converts the name of the module to a string.</summary>
      <returns>The value of the <see cref="P:System.Diagnostics.ProcessModule.ModuleName"></see> property.</returns>
    </member>
    <member name="T:System.Diagnostics.ProcessModuleCollection">
      <summary>Provides a strongly typed collection of <see cref="T:System.Diagnostics.ProcessModule"></see> objects.</summary>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.ProcessModuleCollection"></see> class, with no associated <see cref="T:System.Diagnostics.ProcessModule"></see> instances.</summary>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.#ctor(System.Diagnostics.ProcessModule[])">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.ProcessModuleCollection"></see> class, using the specified array of <see cref="T:System.Diagnostics.ProcessModule"></see> instances.</summary>
      <param name="processModules">An array of <see cref="T:System.Diagnostics.ProcessModule"></see> instances with which to initialize this <see cref="T:System.Diagnostics.ProcessModuleCollection"></see> instance.</param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.Add(System.Diagnostics.ProcessModule)">
      <param name="item"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.AddRange(System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessModule})">
      <param name="collection"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.AsReadOnly">
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.BinarySearch(System.Diagnostics.ProcessModule)">
      <param name="item"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.BinarySearch(System.Diagnostics.ProcessModule,System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})">
      <param name="item"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.BinarySearch(System.Int32,System.Int32,System.Diagnostics.ProcessModule,System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})">
      <param name="index"></param>
      <param name="count"></param>
      <param name="item"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member name="P:System.Diagnostics.ProcessModuleCollection.Capacity">
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.Clear">
      
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.Contains(System.Diagnostics.ProcessModule)">
      <summary>Determines whether the specified process module exists in the collection.</summary>
      <param name="module">A <see cref="T:System.Diagnostics.ProcessModule"></see> instance that indicates the module to find in this collection.</param>
      <returns>true if the module exists in the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.ConvertAll``1(System.Converter{System.Diagnostics.ProcessModule,``0})">
      <param name="converter"></param>
      <typeparam name="TOutput"></typeparam>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.CopyTo(System.Int32,System.Diagnostics.ProcessModule[],System.Int32,System.Int32)">
      <param name="index"></param>
      <param name="array"></param>
      <param name="arrayIndex"></param>
      <param name="count"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule[])">
      <param name="array"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule[],System.Int32)">
      <summary>Copies an array of <see cref="T:System.Diagnostics.ProcessModule"></see> instances to the collection, at the specified index.</summary>
      <param name="array">An array of <see cref="T:System.Diagnostics.ProcessModule"></see> instances to add to the collection.</param>
      <param name="index">The location at which to add the new instances.</param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.Exists(System.Predicate{System.Diagnostics.ProcessModule})">
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.Find(System.Predicate{System.Diagnostics.ProcessModule})">
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.FindAll(System.Predicate{System.Diagnostics.ProcessModule})">
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.FindIndex(System.Predicate{System.Diagnostics.ProcessModule})">
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.FindIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessModule})">
      <param name="startIndex"></param>
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.FindIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessModule})">
      <param name="startIndex"></param>
      <param name="count"></param>
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.FindLast(System.Predicate{System.Diagnostics.ProcessModule})">
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.FindLastIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessModule})">
      <param name="startIndex"></param>
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.FindLastIndex(System.Predicate{System.Diagnostics.ProcessModule})">
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.FindLastIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessModule})">
      <param name="startIndex"></param>
      <param name="count"></param>
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.ForEach(System.Action{System.Diagnostics.ProcessModule})">
      <param name="action"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.GetRange(System.Int32,System.Int32)">
      <param name="index"></param>
      <param name="count"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule)">
      <summary>Provides the location of a specified module within the collection.</summary>
      <param name="module">The <see cref="T:System.Diagnostics.ProcessModule"></see> whose index is retrieved.</param>
      <returns>The zero-based index that defines the location of the module within the <see cref="T:System.Diagnostics.ProcessModuleCollection"></see>.</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule,System.Int32)">
      <param name="item"></param>
      <param name="index"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule,System.Int32,System.Int32)">
      <param name="item"></param>
      <param name="index"></param>
      <param name="count"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.Insert(System.Int32,System.Diagnostics.ProcessModule)">
      <param name="index"></param>
      <param name="item"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessModule})">
      <param name="index"></param>
      <param name="collection"></param>
    </member>
    <member name="P:System.Diagnostics.ProcessModuleCollection.Item(System.Int32)">
      <summary>Gets an index for iterating over the set of process modules.</summary>
      <param name="index">The zero-based index value of the module in the collection.</param>
      <returns>A <see cref="T:System.Diagnostics.ProcessModule"></see> that indexes the modules in the collection</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.LastIndexOf(System.Diagnostics.ProcessModule)">
      <param name="item"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.LastIndexOf(System.Diagnostics.ProcessModule,System.Int32)">
      <param name="item"></param>
      <param name="index"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.LastIndexOf(System.Diagnostics.ProcessModule,System.Int32,System.Int32)">
      <param name="item"></param>
      <param name="index"></param>
      <param name="count"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.Remove(System.Diagnostics.ProcessModule)">
      <param name="item"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.RemoveAll(System.Predicate{System.Diagnostics.ProcessModule})">
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.RemoveAt(System.Int32)">
      <param name="index"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.RemoveRange(System.Int32,System.Int32)">
      <param name="index"></param>
      <param name="count"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.Reverse">
      
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.Reverse(System.Int32,System.Int32)">
      <param name="index"></param>
      <param name="count"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.Sort">
      
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.Sort(System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})">
      <param name="comparer"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.Sort(System.Comparison{System.Diagnostics.ProcessModule})">
      <param name="comparison"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})">
      <param name="index"></param>
      <param name="count"></param>
      <param name="comparer"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.ToArray">
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.TrimExcess">
      
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.TrueForAll(System.Predicate{System.Diagnostics.ProcessModule})">
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="T:System.Diagnostics.ProcessPriorityClass">
      <summary>Indicates the priority that the system associates with a process. This value, together with the priority value of each thread of the process, determines each thread's base priority level.</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.AboveNormal">
      <summary>Specifies that the process has priority above Normal but below <see cref="F:System.Diagnostics.ProcessPriorityClass.High"></see>.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.BelowNormal">
      <summary>Specifies that the process has priority above Idle but below Normal.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.High">
      <summary>Specifies that the process performs time-critical tasks that must be executed immediately, such as the Task List dialog, which must respond quickly when called by the user, regardless of the load on the operating system. The threads of the process preempt the threads of normal or idle priority class processes.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.Idle">
      <summary>Specifies that the threads of this process run only when the system is idle, such as a screen saver. The threads of the process are preempted by the threads of any process running in a higher priority class.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.Normal">
      <summary>Specifies that the process has no special scheduling needs.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.RealTime">
      <summary>Specifies that the process has the highest possible priority.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Diagnostics.ProcessStartInfo">
      <summary>Specifies a set of values that are used when you start a process.</summary>
    </member>
    <member name="M:System.Diagnostics.ProcessStartInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.ProcessStartInfo"></see> class without specifying a file name with which to start the process.</summary>
    </member>
    <member name="M:System.Diagnostics.ProcessStartInfo.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.ProcessStartInfo"></see> class and specifies a file name such as an application or document with which to start the process.</summary>
      <param name="fileName">An application or document with which to start a process.</param>
    </member>
    <member name="M:System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.ProcessStartInfo"></see> class, specifies an application file name with which to start the process, and specifies a set of command-line arguments to pass to the application.</summary>
      <param name="fileName">An application with which to start a process.</param>
      <param name="arguments">Command-line arguments to pass to the application when the process starts.</param>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Arguments">
      <summary>Gets or sets the set of command-line arguments to use when starting the application.</summary>
      <returns>A single string containing the arguments to pass to the target application specified in the <see cref="P:System.Diagnostics.ProcessStartInfo.FileName"></see> property. The default is an empty string (&quot;&quot;). On Windows Vista and earlier versions of the Windows operating system, the length of the arguments added to the length of the full path to the process must be less than 2080. On Windows 7 and later versions, the length must be less than 32699.   Arguments are parsed and interpreted by the target application, so must align with the expectations of that application. For.NET applications as demonstrated in the Examples below, spaces are interpreted as a separator between multiple arguments. A single argument that includes spaces must be surrounded by quotation marks, but those quotation marks are not carried through to the target application. In include quotation marks in the final parsed argument, triple-escape each mark.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.CreateNoWindow">
      <summary>Gets or sets a value indicating whether to start the process in a new window.</summary>
      <returns>true if the process should be started without creating a new window to contain it; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Domain">
      <summary>Gets or sets a value that identifies the domain to use when starting the process.</summary>
      <returns>The Active Directory domain to use when starting the process. The domain property is primarily of interest to users within enterprise environments that use Active Directory.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Environment">
      <summary>Gets the environment variables that apply to this process and its child processes.</summary>
      <returns>A generic dictionary containing the environment variables that apply to this process and its child processes. The default is null.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.EnvironmentVariables">
      <summary>Gets search paths for files, directories for temporary files, application-specific options, and other similar information.</summary>
      <returns>A string dictionary that provides environment variables that apply to this process and child processes. The default is null.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.ErrorDialog">
      <summary>Gets or sets a value indicating whether an error dialog box is displayed to the user if the process cannot be started.</summary>
      <returns>true if an error dialog box should be displayed on the screen if the process cannot be started; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle">
      <summary>Gets or sets the window handle to use when an error dialog box is shown for a process that cannot be started.</summary>
      <returns>A pointer to the handle of the error dialog box that results from a process start failure.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.FileName">
      <summary>Gets or sets the application or document to start.</summary>
      <returns>The name of the application to start, or the name of a document of a file type that is associated with an application and that has a default open action available to it. The default is an empty string (&quot;&quot;).</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.LoadUserProfile">
      <summary>Gets or sets a value that indicates whether the Windows user profile is to be loaded from the registry.</summary>
      <returns>true if the Windows user profile should be loaded; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Password">
      <summary>Gets or sets a secure string that contains the user password to use when starting the process.</summary>
      <returns>The user password to use when starting the process.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.PasswordInClearText">
      <summary>Gets or sets the user password in clear text to use when starting the process.</summary>
      <returns>The user password in clear text.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError">
      <summary>Gets or sets a value that indicates whether the error output of an application is written to the <see cref="P:System.Diagnostics.Process.StandardError"></see> stream.</summary>
      <returns>true if error output should be written to <see cref="P:System.Diagnostics.Process.StandardError"></see>; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput">
      <summary>Gets or sets a value indicating whether the input for an application is read from the <see cref="P:System.Diagnostics.Process.StandardInput"></see> stream.</summary>
      <returns>true if input should be read from <see cref="P:System.Diagnostics.Process.StandardInput"></see>; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput">
      <summary>Gets or sets a value that indicates whether the textual output of an application is written to the <see cref="P:System.Diagnostics.Process.StandardOutput"></see> stream.</summary>
      <returns>true if output should be written to <see cref="P:System.Diagnostics.Process.StandardOutput"></see>; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.StandardErrorEncoding">
      <summary>Gets or sets the preferred encoding for error output.</summary>
      <returns>An object that represents the preferred encoding for error output. The default is null.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.StandardOutputEncoding">
      <summary>Gets or sets the preferred encoding for standard output.</summary>
      <returns>An object that represents the preferred encoding for standard output. The default is null.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.UserName">
      <summary>Gets or sets the user name to be used when starting the process.</summary>
      <returns>The user name to use when starting the process.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.UseShellExecute">
      <summary>Gets or sets a value indicating whether to use the operating system shell to start the process.</summary>
      <returns>true if the shell should be used when starting the process; false if the process should be created directly from the executable file. The default is true.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Verb">
      <summary>Gets or sets the verb to use when opening the application or document specified by the <see cref="P:System.Diagnostics.ProcessStartInfo.FileName"></see> property.</summary>
      <returns>The action to take with the file that the process opens. The default is an empty string (&quot;&quot;), which signifies no action.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Verbs">
      <summary>Gets the set of verbs associated with the type of file specified by the <see cref="P:System.Diagnostics.ProcessStartInfo.FileName"></see> property.</summary>
      <returns>The actions that the system can apply to the file indicated by the <see cref="P:System.Diagnostics.ProcessStartInfo.FileName"></see> property.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.WindowStyle">
      <summary>Gets or sets the window state to use when the process is started.</summary>
      <returns>One of the enumeration values that indicates whether the process is started in a window that is maximized, minimized, normal (neither maximized nor minimized), or not visible. The default is Normal.</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The window style is not one of the <see cref="T:System.Diagnostics.ProcessWindowStyle"></see> enumeration members.</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.WorkingDirectory">
      <summary>When the <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> property is false, gets or sets the working directory for the process to be started. When <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> is true, gets or sets the directory that contains the process to be started.</summary>
      <returns>When <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> is true, the fully qualified name of the directory that contains the process to be started. When the <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> property is false, the working directory for the process to be started. The default is an empty string (&quot;&quot;).</returns>
    </member>
    <member name="T:System.Diagnostics.ProcessThread">
      <summary>Represents an operating system process thread.</summary>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.BasePriority">
      <summary>Gets the base priority of the thread.</summary>
      <returns>The base priority of the thread, which the operating system computes by combining the process priority class with the priority level of the associated thread.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.CurrentPriority">
      <summary>Gets the current priority of the thread.</summary>
      <returns>The current priority of the thread, which may deviate from the base priority based on how the operating system is scheduling the thread. The priority may be temporarily boosted for an active thread.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.Id">
      <summary>Gets the unique identifier of the thread.</summary>
      <returns>The unique identifier associated with a specific thread.</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.IdealProcessor">
      <summary>Sets the preferred processor for this thread to run on.</summary>
      <returns>The preferred processor for the thread, used when the system schedules threads, to determine which processor to run the thread on.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">The system could not set the thread to start on the specified processor.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.NotSupportedException">The process is on a remote computer.</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.PriorityBoostEnabled">
      <summary>Gets or sets a value indicating whether the operating system should temporarily boost the priority of the associated thread whenever the main window of the thread's process receives the focus.</summary>
      <returns>true to boost the thread's priority when the user interacts with the process's interface; otherwise, false. The default is false.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">The priority boost information could not be retrieved.   -or-   The priority boost information could not be set.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.NotSupportedException">The process is on a remote computer.</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.PriorityLevel">
      <summary>Gets or sets the priority level of the thread.</summary>
      <returns>One of the <see cref="T:System.Diagnostics.ThreadPriorityLevel"></see> values, specifying a range that bounds the thread's priority.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">The thread priority level information could not be retrieved.   -or-   The thread priority level could not be set.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.NotSupportedException">The process is on a remote computer.</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime">
      <summary>Gets the amount of time that the thread has spent running code inside the operating system core.</summary>
      <returns>A <see cref="T:System.TimeSpan"></see> indicating the amount of time that the thread has spent running code inside the operating system core.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">The thread time could not be retrieved.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.NotSupportedException">The process is on a remote computer.</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.ProcessorAffinity">
      <summary>Sets the processors on which the associated thread can run.</summary>
      <returns>An <see cref="T:System.IntPtr"></see> that points to a set of bits, each of which represents a processor that the thread can run on.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">The processor affinity could not be set.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.NotSupportedException">The process is on a remote computer.</exception>
    </member>
    <member name="M:System.Diagnostics.ProcessThread.ResetIdealProcessor">
      <summary>Resets the ideal processor for this thread to indicate that there is no single ideal processor. In other words, so that any processor is ideal.</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">The ideal processor could not be reset.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.NotSupportedException">The process is on a remote computer.</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.StartAddress">
      <summary>Gets the memory address of the function that the operating system called that started this thread.</summary>
      <returns>The thread's starting address, which points to the application-defined function that the thread executes.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.NotSupportedException">The process is on a remote computer.</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.StartTime">
      <summary>Gets the time that the operating system started the thread.</summary>
      <returns>A <see cref="T:System.DateTime"></see> representing the time that was on the system when the operating system started the thread.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">The thread time could not be retrieved.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.NotSupportedException">The process is on a remote computer.</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.ThreadState">
      <summary>Gets the current state of this thread.</summary>
      <returns>A <see cref="T:System.Diagnostics.ThreadState"></see> that indicates the thread's execution, for example, running, waiting, or terminated.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.NotSupportedException">The process is on a remote computer.</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.TotalProcessorTime">
      <summary>Gets the total amount of time that this thread has spent using the processor.</summary>
      <returns>A <see cref="T:System.TimeSpan"></see> that indicates the amount of time that the thread has had control of the processor.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">The thread time could not be retrieved.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.NotSupportedException">The process is on a remote computer.</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.UserProcessorTime">
      <summary>Gets the amount of time that the associated thread has spent running code inside the application.</summary>
      <returns>A <see cref="T:System.TimeSpan"></see> indicating the amount of time that the thread has spent running code inside the application, as opposed to inside the operating system core.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">The thread time could not be retrieved.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.NotSupportedException">The process is on a remote computer.</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.WaitReason">
      <summary>Gets the reason that the thread is waiting.</summary>
      <returns>A <see cref="T:System.Diagnostics.ThreadWaitReason"></see> representing the reason that the thread is in the wait state.</returns>
      <exception cref="T:System.InvalidOperationException">The thread is not in the wait state.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.NotSupportedException">The process is on a remote computer.</exception>
    </member>
    <member name="T:System.Diagnostics.ProcessThreadCollection">
      <summary>Provides a strongly typed collection of <see cref="T:System.Diagnostics.ProcessThread"></see> objects.</summary>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.ProcessThreadCollection"></see> class, with no associated <see cref="T:System.Diagnostics.ProcessThread"></see> instances.</summary>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.#ctor(System.Diagnostics.ProcessThread[])">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.ProcessThreadCollection"></see> class, using the specified array of <see cref="T:System.Diagnostics.ProcessThread"></see> instances.</summary>
      <param name="processThreads">An array of <see cref="T:System.Diagnostics.ProcessThread"></see> instances with which to initialize this <see cref="T:System.Diagnostics.ProcessThreadCollection"></see> instance.</param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Add(System.Diagnostics.ProcessThread)">
      <summary>Appends a process thread to the collection.</summary>
      <param name="thread">The thread to add to the collection.</param>
      <returns>The zero-based index of the thread in the collection.</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.AddRange(System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessThread})">
      <param name="collection"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.AsReadOnly">
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.BinarySearch(System.Diagnostics.ProcessThread)">
      <param name="item"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.BinarySearch(System.Diagnostics.ProcessThread,System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})">
      <param name="item"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.BinarySearch(System.Int32,System.Int32,System.Diagnostics.ProcessThread,System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})">
      <param name="index"></param>
      <param name="count"></param>
      <param name="item"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member name="P:System.Diagnostics.ProcessThreadCollection.Capacity">
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Clear">
      
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Contains(System.Diagnostics.ProcessThread)">
      <summary>Determines whether the specified process thread exists in the collection.</summary>
      <param name="thread">A <see cref="T:System.Diagnostics.ProcessThread"></see> instance that indicates the thread to find in this collection.</param>
      <returns>true if the thread exists in the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.ConvertAll``1(System.Converter{System.Diagnostics.ProcessThread,``0})">
      <param name="converter"></param>
      <typeparam name="TOutput"></typeparam>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.CopyTo(System.Int32,System.Diagnostics.ProcessThread[],System.Int32,System.Int32)">
      <param name="index"></param>
      <param name="array"></param>
      <param name="arrayIndex"></param>
      <param name="count"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread[])">
      <param name="array"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread[],System.Int32)">
      <summary>Copies an array of <see cref="T:System.Diagnostics.ProcessThread"></see> instances to the collection, at the specified index.</summary>
      <param name="array">An array of <see cref="T:System.Diagnostics.ProcessThread"></see> instances to add to the collection.</param>
      <param name="index">The location at which to add the new instances.</param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Exists(System.Predicate{System.Diagnostics.ProcessThread})">
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Find(System.Predicate{System.Diagnostics.ProcessThread})">
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.FindAll(System.Predicate{System.Diagnostics.ProcessThread})">
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.FindIndex(System.Predicate{System.Diagnostics.ProcessThread})">
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.FindIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessThread})">
      <param name="startIndex"></param>
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.FindIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessThread})">
      <param name="startIndex"></param>
      <param name="count"></param>
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.FindLast(System.Predicate{System.Diagnostics.ProcessThread})">
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.FindLastIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessThread})">
      <param name="startIndex"></param>
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.FindLastIndex(System.Predicate{System.Diagnostics.ProcessThread})">
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.FindLastIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessThread})">
      <param name="startIndex"></param>
      <param name="count"></param>
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.ForEach(System.Action{System.Diagnostics.ProcessThread})">
      <param name="action"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.GetRange(System.Int32,System.Int32)">
      <param name="index"></param>
      <param name="count"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread)">
      <summary>Provides the location of a specified thread within the collection.</summary>
      <param name="thread">The <see cref="T:System.Diagnostics.ProcessThread"></see> whose index is retrieved.</param>
      <returns>The zero-based index that defines the location of the thread within the <see cref="T:System.Diagnostics.ProcessThreadCollection"></see>.</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread,System.Int32)">
      <param name="item"></param>
      <param name="index"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread,System.Int32,System.Int32)">
      <param name="item"></param>
      <param name="index"></param>
      <param name="count"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Insert(System.Int32,System.Diagnostics.ProcessThread)">
      <summary>Inserts a process thread at the specified location in the collection.</summary>
      <param name="index">The zero-based index indicating the location at which to insert the thread.</param>
      <param name="thread">The thread to insert into the collection.</param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessThread})">
      <param name="index"></param>
      <param name="collection"></param>
    </member>
    <member name="P:System.Diagnostics.ProcessThreadCollection.Item(System.Int32)">
      <summary>Gets an index for iterating over the set of process threads.</summary>
      <param name="index">The zero-based index value of the thread in the collection.</param>
      <returns>A <see cref="T:System.Diagnostics.ProcessThread"></see> that indexes the threads in the collection.</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.LastIndexOf(System.Diagnostics.ProcessThread)">
      <param name="item"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.LastIndexOf(System.Diagnostics.ProcessThread,System.Int32)">
      <param name="item"></param>
      <param name="index"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.LastIndexOf(System.Diagnostics.ProcessThread,System.Int32,System.Int32)">
      <param name="item"></param>
      <param name="index"></param>
      <param name="count"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Remove(System.Diagnostics.ProcessThread)">
      <summary>Deletes a process thread from the collection.</summary>
      <param name="thread">The thread to remove from the collection.</param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.RemoveAll(System.Predicate{System.Diagnostics.ProcessThread})">
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.RemoveAt(System.Int32)">
      <param name="index"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.RemoveRange(System.Int32,System.Int32)">
      <param name="index"></param>
      <param name="count"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Reverse">
      
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Reverse(System.Int32,System.Int32)">
      <param name="index"></param>
      <param name="count"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Sort">
      
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Sort(System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})">
      <param name="comparer"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Sort(System.Comparison{System.Diagnostics.ProcessThread})">
      <param name="comparison"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{System.Diagnostics.ProcessThread})">
      <param name="index"></param>
      <param name="count"></param>
      <param name="comparer"></param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.ToArray">
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.TrimExcess">
      
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.TrueForAll(System.Predicate{System.Diagnostics.ProcessThread})">
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="T:System.Diagnostics.ProcessWindowStyle">
      <summary>Specified how a new window should appear when the system starts a process.</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Hidden">
      <summary>The hidden window style. A window can be either visible or hidden. The system displays a hidden window by not drawing it. If a window is hidden, it is effectively disabled. A hidden window can process messages from the system or from other windows, but it cannot process input from the user or display output. Frequently, an application may keep a new window hidden while it customizes the window's appearance, and then make the window style Normal. To use <see cref="F:System.Diagnostics.ProcessWindowStyle.Hidden"></see>, the <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"></see> property must be false.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Maximized">
      <summary>The maximized window style. By default, the system enlarges a maximized window so that it fills the screen or, in the case of a child window, the parent window's client area. If the window has a title bar, the system automatically moves it to the top of the screen or to the top of the parent window's client area. Also, the system disables the window's sizing border and the window-positioning capability of the title bar so that the user cannot move the window by dragging the title bar.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Minimized">
      <summary>The minimized window style. By default, the system reduces a minimized window to the size of its taskbar button and moves the minimized window to the taskbar.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Normal">
      <summary>The normal, visible window style. The system displays a window with Normal style on the screen, in a default location. If a window is visible, the user can supply input to the window and view the window's output. Frequently, an application may initialize a new window to the Hidden style while it customizes the window's appearance, and then make the window style Normal.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Diagnostics.SourceFilter">
      <summary>Indicates whether a listener should trace a message based on the source of a trace.</summary>
    </member>
    <member name="M:System.Diagnostics.SourceFilter.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.SourceFilter"></see> class, specifying the name of the trace source.</summary>
      <param name="source">The name of the trace source.</param>
    </member>
    <member name="M:System.Diagnostics.SourceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])">
      <summary>Determines whether the trace listener should trace the event.</summary>
      <param name="cache">An object that represents the information cache for the trace event.</param>
      <param name="source">The name of the source.</param>
      <param name="eventType">One of the enumeration values that identifies the event type.</param>
      <param name="id">A trace identifier number.</param>
      <param name="formatOrMessage">The format to use for writing an array of arguments or a message to write.</param>
      <param name="args">An array of argument objects.</param>
      <param name="data1">A trace data object.</param>
      <param name="data">An array of trace data objects.</param>
      <returns>true if the trace should be produced; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="source">source</paramref> is null.</exception>
    </member>
    <member name="P:System.Diagnostics.SourceFilter.Source">
      <summary>Gets or sets the name of the trace source.</summary>
      <returns>The name of the trace source.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
    </member>
    <member name="T:System.Diagnostics.SourceLevels">
      <summary>Specifies the levels of trace messages filtered by the source switch and event type filter.</summary>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.ActivityTracing">
      <summary>Allows the <see cref="F:System.Diagnostics.TraceEventType.Stop"></see>, <see cref="F:System.Diagnostics.TraceEventType.Start"></see>, <see cref="F:System.Diagnostics.TraceEventType.Suspend"></see>, <see cref="F:System.Diagnostics.TraceEventType.Transfer"></see>, and <see cref="F:System.Diagnostics.TraceEventType.Resume"></see> events through.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.All">
      <summary>Allows all events through.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.Critical">
      <summary>Allows only <see cref="F:System.Diagnostics.TraceEventType.Critical"></see> events through.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.Error">
      <summary>Allows <see cref="F:System.Diagnostics.TraceEventType.Critical"></see> and <see cref="F:System.Diagnostics.TraceEventType.Error"></see> events through.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.Information">
      <summary>Allows <see cref="F:System.Diagnostics.TraceEventType.Critical"></see>, <see cref="F:System.Diagnostics.TraceEventType.Error"></see>, <see cref="F:System.Diagnostics.TraceEventType.Warning"></see>, and <see cref="F:System.Diagnostics.TraceEventType.Information"></see> events through.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.Off">
      <summary>Does not allow any events through.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.Verbose">
      <summary>Allows <see cref="F:System.Diagnostics.TraceEventType.Critical"></see>, <see cref="F:System.Diagnostics.TraceEventType.Error"></see>, <see cref="F:System.Diagnostics.TraceEventType.Warning"></see>, <see cref="F:System.Diagnostics.TraceEventType.Information"></see>, and <see cref="F:System.Diagnostics.TraceEventType.Verbose"></see> events through.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.Warning">
      <summary>Allows <see cref="F:System.Diagnostics.TraceEventType.Critical"></see>, <see cref="F:System.Diagnostics.TraceEventType.Error"></see>, and <see cref="F:System.Diagnostics.TraceEventType.Warning"></see> events through.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Diagnostics.SourceSwitch">
      <summary>Provides a multilevel switch to control tracing and debug output without recompiling your code.</summary>
    </member>
    <member name="M:System.Diagnostics.SourceSwitch.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.SourceSwitch"></see> class, specifying the name of the source.</summary>
      <param name="name">The name of the source.</param>
    </member>
    <member name="M:System.Diagnostics.SourceSwitch.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.SourceSwitch"></see> class, specifying the display name and the default value for the source switch.</summary>
      <param name="displayName">The name of the source switch.</param>
      <param name="defaultSwitchValue">The default value for the switch.</param>
    </member>
    <member name="P:System.Diagnostics.SourceSwitch.Level">
      <summary>Gets or sets the level of the switch.</summary>
      <returns>One of the <see cref="T:System.Diagnostics.SourceLevels"></see> values that represents the event level of the switch.</returns>
    </member>
    <member name="M:System.Diagnostics.SourceSwitch.OnValueChanged">
      <summary>Invoked when the value of the <see cref="P:System.Diagnostics.Switch.Value"></see> property changes.</summary>
      <exception cref="T:System.ArgumentException">The new value of <see cref="P:System.Diagnostics.Switch.Value"></see> is not one of the <see cref="T:System.Diagnostics.SourceLevels"></see> values.</exception>
    </member>
    <member name="M:System.Diagnostics.SourceSwitch.ShouldTrace(System.Diagnostics.TraceEventType)">
      <summary>Determines if trace listeners should be called, based on the trace event type.</summary>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"></see> values.</param>
      <returns>True if the trace listeners should be called; otherwise, false.</returns>
    </member>
    <member name="T:System.Diagnostics.Stopwatch">
      <summary>Provides a set of methods and properties that you can use to accurately measure elapsed time.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Stopwatch"></see> class.</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.Elapsed">
      <summary>Gets the total elapsed time measured by the current instance.</summary>
      <returns>A read-only <see cref="T:System.TimeSpan"></see> representing the total elapsed time measured by the current instance.</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
      <summary>Gets the total elapsed time measured by the current instance, in milliseconds.</summary>
      <returns>A read-only long integer representing the total number of milliseconds measured by the current instance.</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
      <summary>Gets the total elapsed time measured by the current instance, in timer ticks.</summary>
      <returns>A read-only long integer representing the total number of timer ticks measured by the current instance.</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.Frequency">
      <summary>Gets the frequency of the timer as the number of ticks per second. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetTimestamp">
      <summary>Gets the current number of ticks in the timer mechanism.</summary>
      <returns>A long integer representing the tick counter value of the underlying timer mechanism.</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.IsHighResolution">
      <summary>Indicates whether the timer is based on a high-resolution performance counter. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.IsRunning">
      <summary>Gets a value indicating whether the <see cref="T:System.Diagnostics.Stopwatch"></see> timer is running.</summary>
      <returns>true if the <see cref="T:System.Diagnostics.Stopwatch"></see> instance is currently running and measuring elapsed time for an interval; otherwise, false.</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Reset">
      <summary>Stops time interval measurement and resets the elapsed time to zero.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Restart">
      <summary>Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Start">
      <summary>Starts, or resumes, measuring elapsed time for an interval.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.StartNew">
      <summary>Initializes a new <see cref="T:System.Diagnostics.Stopwatch"></see> instance, sets the elapsed time property to zero, and starts measuring elapsed time.</summary>
      <returns>A <see cref="T:System.Diagnostics.Stopwatch"></see> that has just begun measuring elapsed time.</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Stop">
      <summary>Stops measuring elapsed time for an interval.</summary>
    </member>
    <member name="T:System.Diagnostics.Switch">
      <summary>Provides an abstract base class to create new debugging and tracing switches.</summary>
    </member>
    <member name="M:System.Diagnostics.Switch.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Switch"></see> class.</summary>
      <param name="displayName">The name of the switch.</param>
      <param name="description">The description for the switch.</param>
    </member>
    <member name="M:System.Diagnostics.Switch.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Switch"></see> class, specifying the display name, description, and default value for the switch.</summary>
      <param name="displayName">The name of the switch.</param>
      <param name="description">The description of the switch.</param>
      <param name="defaultSwitchValue">The default value for the switch.</param>
    </member>
    <member name="P:System.Diagnostics.Switch.Attributes">
      <summary>Gets the custom switch attributes defined in the application configuration file.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.StringDictionary"></see> containing the case-insensitive custom attributes for the trace switch.</returns>
    </member>
    <member name="P:System.Diagnostics.Switch.Description">
      <summary>Gets a description of the switch.</summary>
      <returns>The description of the switch. The default value is an empty string (&quot;&quot;).</returns>
    </member>
    <member name="P:System.Diagnostics.Switch.DisplayName">
      <summary>Gets a name used to identify the switch.</summary>
      <returns>The name used to identify the switch. The default value is an empty string (&quot;&quot;).</returns>
    </member>
    <member name="M:System.Diagnostics.Switch.GetSupportedAttributes">
      <summary>Gets the custom attributes supported by the switch.</summary>
      <returns>A string array that contains the names of the custom attributes supported by the switch, or null if there no custom attributes are supported.</returns>
    </member>
    <member name="M:System.Diagnostics.Switch.OnSwitchSettingChanged">
      <summary>Invoked when the <see cref="P:System.Diagnostics.Switch.SwitchSetting"></see> property is changed.</summary>
    </member>
    <member name="M:System.Diagnostics.Switch.OnValueChanged">
      <summary>Invoked when the <see cref="P:System.Diagnostics.Switch.Value"></see> property is changed.</summary>
    </member>
    <member name="P:System.Diagnostics.Switch.SwitchSetting">
      <summary>Gets or sets the current setting for this switch.</summary>
      <returns>The current setting for this switch. The default is zero.</returns>
    </member>
    <member name="P:System.Diagnostics.Switch.Value">
      <summary>Gets or sets the value of the switch.</summary>
      <returns>A string representing the value of the switch.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The value is null.   -or-   The value does not consist solely of an optional negative sign followed by a sequence of digits ranging from 0 to 9.   -or-   The value represents a number less than <see cref="F:System.Int32.MinValue"></see> or greater than <see cref="F:System.Int32.MaxValue"></see>.</exception>
    </member>
    <member name="T:System.Diagnostics.SwitchAttribute">
      <summary>Identifies a switch used in an assembly, class, or member.</summary>
    </member>
    <member name="M:System.Diagnostics.SwitchAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.SwitchAttribute"></see> class, specifying the name and the type of the switch.</summary>
      <param name="switchName">The display name of the switch.</param>
      <param name="switchType">The type of the switch.</param>
    </member>
    <member name="M:System.Diagnostics.SwitchAttribute.GetAll(System.Reflection.Assembly)">
      <summary>Returns all switch attributes for the specified assembly.</summary>
      <param name="assembly">The assembly to check for switch attributes.</param>
      <returns>An array that contains all the switch attributes for the assembly.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="assembly">assembly</paramref> is null.</exception>
    </member>
    <member name="P:System.Diagnostics.SwitchAttribute.SwitchDescription">
      <summary>Gets or sets the description of the switch.</summary>
      <returns>The description of the switch.</returns>
    </member>
    <member name="P:System.Diagnostics.SwitchAttribute.SwitchName">
      <summary>Gets or sets the display name of the switch.</summary>
      <returns>The display name of the switch.</returns>
      <exception cref="T:System.ArgumentNullException"><see cref="P:System.Diagnostics.SwitchAttribute.SwitchName"></see> is set to null.</exception>
      <exception cref="T:System.ArgumentException"><see cref="P:System.Diagnostics.SwitchAttribute.SwitchName"></see> is set to an empty string.</exception>
    </member>
    <member name="P:System.Diagnostics.SwitchAttribute.SwitchType">
      <summary>Gets or sets the type of the switch.</summary>
      <returns>The type of the switch.</returns>
      <exception cref="T:System.ArgumentNullException"><see cref="P:System.Diagnostics.SwitchAttribute.SwitchType"></see> is set to null.</exception>
    </member>
    <member name="T:System.Diagnostics.SwitchLevelAttribute">
      <summary>Identifies the level type for a switch.</summary>
    </member>
    <member name="M:System.Diagnostics.SwitchLevelAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.SwitchLevelAttribute"></see> class, specifying the type that determines whether a trace should be written.</summary>
      <param name="switchLevelType">The <see cref="T:System.Type"></see> that determines whether a trace should be written.</param>
    </member>
    <member name="P:System.Diagnostics.SwitchLevelAttribute.SwitchLevelType">
      <summary>Gets or sets the type that determines whether a trace should be written.</summary>
      <returns>The <see cref="T:System.Type"></see> that determines whether a trace should be written.</returns>
      <exception cref="T:System.ArgumentNullException">The set operation failed because the value is null.</exception>
    </member>
    <member name="T:System.IO.Ports.Handshake">
      <summary>Specifies the control protocol used in establishing a serial port communication for a <see cref="T:System.IO.Ports.SerialPort"></see> object.</summary>
    </member>
    <member name="F:System.IO.Ports.Handshake.None">
      <summary>No control is used for the handshake.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Ports.Handshake.RequestToSend">
      <summary>Request-to-Send (RTS) hardware flow control is used. RTS signals that data is available for transmission. If the input buffer becomes full, the RTS line will be set to false. The RTS line will be set to true when more room becomes available in the input buffer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Ports.Handshake.RequestToSendXOnXOff">
      <summary>Both the Request-to-Send (RTS) hardware control and the XON/XOFF software controls are used.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Ports.Handshake.XOnXOff">
      <summary>The XON/XOFF software control protocol is used. The XOFF control is sent to stop the transmission of data. The XON control is sent to resume the transmission. These software controls are used instead of Request to Send (RTS) and Clear to Send (CTS) hardware controls.</summary>
      <returns></returns>
    </member>
    <member name="T:System.IO.Ports.Parity">
      <summary>Specifies the parity bit for a <see cref="T:System.IO.Ports.SerialPort"></see> object.</summary>
    </member>
    <member name="F:System.IO.Ports.Parity.Even">
      <summary>Sets the parity bit so that the count of bits set is an even number.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Ports.Parity.Mark">
      <summary>Leaves the parity bit set to 1.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Ports.Parity.None">
      <summary>No parity check occurs.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Ports.Parity.Odd">
      <summary>Sets the parity bit so that the count of bits set is an odd number.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Ports.Parity.Space">
      <summary>Leaves the parity bit set to 0.</summary>
      <returns></returns>
    </member>
    <member name="T:System.IO.Ports.SerialData">
      <summary>Specifies the type of character that was received on the serial port of the <see cref="T:System.IO.Ports.SerialPort"></see> object.</summary>
    </member>
    <member name="F:System.IO.Ports.SerialData.Chars">
      <summary>A character was received and placed in the input buffer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Ports.SerialData.Eof">
      <summary>The end of file character was received and placed in the input buffer.</summary>
      <returns></returns>
    </member>
    <member name="T:System.IO.Ports.SerialDataReceivedEventArgs">
      <summary>Provides data for the <see cref="E:System.IO.Ports.SerialPort.DataReceived"></see> event.</summary>
    </member>
    <member name="P:System.IO.Ports.SerialDataReceivedEventArgs.EventType">
      <summary>Gets or sets the event type.</summary>
      <returns>One of the <see cref="T:System.IO.Ports.SerialData"></see> values.</returns>
    </member>
    <member name="T:System.IO.Ports.SerialDataReceivedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.IO.Ports.SerialPort.DataReceived"></see> event of a <see cref="T:System.IO.Ports.SerialPort"></see> object.</summary>
      <param name="sender">The sender of the event, which is the <see cref="T:System.IO.Ports.SerialPort"></see> object.</param>
      <param name="e">A <see cref="T:System.IO.Ports.SerialDataReceivedEventArgs"></see> object that contains the event data.</param>
    </member>
    <member name="T:System.IO.Ports.SerialError">
      <summary>Specifies errors that occur on the <see cref="T:System.IO.Ports.SerialPort"></see> object.</summary>
    </member>
    <member name="F:System.IO.Ports.SerialError.Frame">
      <summary>The hardware detected a framing error.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Ports.SerialError.Overrun">
      <summary>A character-buffer overrun has occurred. The next character is lost.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Ports.SerialError.RXOver">
      <summary>An input buffer overflow has occurred. There is either no room in the input buffer, or a character was received after the end-of-file (EOF) character.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Ports.SerialError.RXParity">
      <summary>The hardware detected a parity error.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Ports.SerialError.TXFull">
      <summary>The application tried to transmit a character, but the output buffer was full.</summary>
      <returns></returns>
    </member>
    <member name="T:System.IO.Ports.SerialErrorReceivedEventArgs">
      <summary>Prepares data for the <see cref="E:System.IO.Ports.SerialPort.ErrorReceived"></see> event.</summary>
    </member>
    <member name="P:System.IO.Ports.SerialErrorReceivedEventArgs.EventType">
      <summary>Gets or sets the event type.</summary>
      <returns>One of the <see cref="T:System.IO.Ports.SerialError"></see> values.</returns>
    </member>
    <member name="T:System.IO.Ports.SerialErrorReceivedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.IO.Ports.SerialPort.ErrorReceived"></see> event of a <see cref="T:System.IO.Ports.SerialPort"></see> object.</summary>
      <param name="sender">The sender of the event, which is the <see cref="T:System.IO.Ports.SerialPort"></see> object.</param>
      <param name="e">A <see cref="T:System.IO.Ports.SerialErrorReceivedEventArgs"></see> object that contains the event data.</param>
    </member>
    <member name="T:System.IO.Ports.SerialPinChange">
      <summary>Specifies the type of change that occurred on the <see cref="T:System.IO.Ports.SerialPort"></see> object.</summary>
    </member>
    <member name="F:System.IO.Ports.SerialPinChange.Break">
      <summary>A break was detected on input.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Ports.SerialPinChange.CDChanged">
      <summary>The Carrier Detect (CD) signal changed state. This signal is used to indicate whether a modem is connected to a working phone line and a data carrier signal is detected.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Ports.SerialPinChange.CtsChanged">
      <summary>The Clear to Send (CTS) signal changed state. This signal is used to indicate whether data can be sent over the serial port.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Ports.SerialPinChange.DsrChanged">
      <summary>The Data Set Ready (DSR) signal changed state. This signal is used to indicate whether the device on the serial port is ready to operate.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Ports.SerialPinChange.Ring">
      <summary>A ring indicator was detected.</summary>
      <returns></returns>
    </member>
    <member name="T:System.IO.Ports.SerialPinChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.IO.Ports.SerialPort.PinChanged"></see> event.</summary>
    </member>
    <member name="P:System.IO.Ports.SerialPinChangedEventArgs.EventType">
      <summary>Gets or sets the event type.</summary>
      <returns>One of the <see cref="T:System.IO.Ports.SerialPinChange"></see> values.</returns>
    </member>
    <member name="T:System.IO.Ports.SerialPinChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.IO.Ports.SerialPort.PinChanged"></see> event of a <see cref="T:System.IO.Ports.SerialPort"></see> object.</summary>
      <param name="sender">The source of the event, which is the <see cref="T:System.IO.Ports.SerialPort"></see> object.</param>
      <param name="e">A <see cref="T:System.IO.Ports.SerialPinChangedEventArgs"></see> object that contains the event data.</param>
    </member>
    <member name="T:System.IO.Ports.SerialPort">
      <summary>Represents a serial port resource.</summary>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort"></see> class.</summary>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor(System.ComponentModel.IContainer)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort"></see> class using the specified <see cref="T:System.ComponentModel.IContainer"></see> object.</summary>
      <param name="container">An interface to a container.</param>
      <exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort"></see> class using the specified port name.</summary>
      <param name="portName">The port to use (for example, COM1).</param>
      <exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort"></see> class using the specified port name and baud rate.</summary>
      <param name="portName">The port to use (for example, COM1).</param>
      <param name="baudRate">The baud rate.</param>
      <exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort"></see> class using the specified port name, baud rate, and parity bit.</summary>
      <param name="portName">The port to use (for example, COM1).</param>
      <param name="baudRate">The baud rate.</param>
      <param name="parity">One of the <see cref="P:System.IO.Ports.SerialPort.Parity"></see> values.</param>
      <exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort"></see> class using the specified port name, baud rate, parity bit, and data bits.</summary>
      <param name="portName">The port to use (for example, COM1).</param>
      <param name="baudRate">The baud rate.</param>
      <param name="parity">One of the <see cref="P:System.IO.Ports.SerialPort.Parity"></see> values.</param>
      <param name="dataBits">The data bits value.</param>
      <exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort"></see> class using the specified port name, baud rate, parity bit, data bits, and stop bit.</summary>
      <param name="portName">The port to use (for example, COM1).</param>
      <param name="baudRate">The baud rate.</param>
      <param name="parity">One of the <see cref="P:System.IO.Ports.SerialPort.Parity"></see> values.</param>
      <param name="dataBits">The data bits value.</param>
      <param name="stopBits">One of the <see cref="P:System.IO.Ports.SerialPort.StopBits"></see> values.</param>
      <exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.BaseStream">
      <summary>Gets the underlying <see cref="T:System.IO.Stream"></see> object for a <see cref="T:System.IO.Ports.SerialPort"></see> object.</summary>
      <returns>A <see cref="T:System.IO.Stream"></see> object.</returns>
      <exception cref="T:System.InvalidOperationException">The stream is closed. This can occur because the <see cref="M:System.IO.Ports.SerialPort.Open"></see> method has not been called or the <see cref="M:System.IO.Ports.SerialPort.Close"></see> method has been called.</exception>
      <exception cref="T:System.NotSupportedException">The stream is in a .NET Compact Framework application and one of the following methods was called:  <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see><see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"></see><see cref="M:System.IO.Stream.EndRead(System.IAsyncResult)"></see><see cref="M:System.IO.Stream.EndWrite(System.IAsyncResult)"></see> The .NET Compact Framework does not support the asynchronous model with base streams.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.BaudRate">
      <summary>Gets or sets the serial baud rate.</summary>
      <returns>The baud rate.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The baud rate specified is less than or equal to zero, or is greater than the maximum allowable baud rate for the device.</exception>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.BreakState">
      <summary>Gets or sets the break signal state.</summary>
      <returns>true if the port is in a break state; otherwise, false.</returns>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is closed. This can occur because the <see cref="M:System.IO.Ports.SerialPort.Open"></see> method has not been called or the <see cref="M:System.IO.Ports.SerialPort.Close"></see> method has been called.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.BytesToRead">
      <summary>Gets the number of bytes of data in the receive buffer.</summary>
      <returns>The number of bytes of data in the receive buffer.</returns>
      <exception cref="T:System.InvalidOperationException">The port is not open.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.BytesToWrite">
      <summary>Gets the number of bytes of data in the send buffer.</summary>
      <returns>The number of bytes of data in the send buffer.</returns>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is closed. This can occur because the <see cref="M:System.IO.Ports.SerialPort.Open"></see> method has not been called or the <see cref="M:System.IO.Ports.SerialPort.Close"></see> method has been called.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.CDHolding">
      <summary>Gets the state of the Carrier Detect line for the port.</summary>
      <returns>true if the carrier is detected; otherwise, false.</returns>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is closed. This can occur because the <see cref="M:System.IO.Ports.SerialPort.Open"></see> method has not been called or the <see cref="M:System.IO.Ports.SerialPort.Close"></see> method has been called.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Close">
      <summary>Closes the port connection, sets the <see cref="P:System.IO.Ports.SerialPort.IsOpen"></see> property to false, and disposes of the internal <see cref="T:System.IO.Stream"></see> object.</summary>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.CtsHolding">
      <summary>Gets the state of the Clear-to-Send line.</summary>
      <returns>true if the Clear-to-Send line is detected; otherwise, false.</returns>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is closed. This can occur because the <see cref="M:System.IO.Ports.SerialPort.Open"></see> method has not been called or the <see cref="M:System.IO.Ports.SerialPort.Close"></see> method has been called.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.DataBits">
      <summary>Gets or sets the standard length of data bits per byte.</summary>
      <returns>The data bits length.</returns>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The data bits value is less than 5 or more than 8.</exception>
    </member>
    <member name="E:System.IO.Ports.SerialPort.DataReceived">
      <summary>Indicates that data has been received through a port represented by the <see cref="T:System.IO.Ports.SerialPort"></see> object.</summary>
      <returns></returns>
    </member>
    <member name="M:System.IO.Ports.SerialPort.DiscardInBuffer">
      <summary>Discards data from the serial driver's receive buffer.</summary>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is closed. This can occur because the <see cref="M:System.IO.Ports.SerialPort.Open"></see> method has not been called or the <see cref="M:System.IO.Ports.SerialPort.Close"></see> method has been called.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.DiscardNull">
      <summary>Gets or sets a value indicating whether null bytes are ignored when transmitted between the port and the receive buffer.</summary>
      <returns>true if null bytes are ignored; otherwise false. The default is false.</returns>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is closed. This can occur because the <see cref="M:System.IO.Ports.SerialPort.Open"></see> method has not been called or the <see cref="M:System.IO.Ports.SerialPort.Close"></see> method has been called.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.DiscardOutBuffer">
      <summary>Discards data from the serial driver's transmit buffer.</summary>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is closed. This can occur because the <see cref="M:System.IO.Ports.SerialPort.Open"></see> method has not been called or the <see cref="M:System.IO.Ports.SerialPort.Close"></see> method has been called.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Ports.SerialPort"></see> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.DsrHolding">
      <summary>Gets the state of the Data Set Ready (DSR) signal.</summary>
      <returns>true if a Data Set Ready signal has been sent to the port; otherwise, false.</returns>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is closed. This can occur because the <see cref="M:System.IO.Ports.SerialPort.Open"></see> method has not been called or the <see cref="M:System.IO.Ports.SerialPort.Close"></see> method has been called.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.DtrEnable">
      <summary>Gets or sets a value that enables the Data Terminal Ready (DTR) signal during serial communication.</summary>
      <returns>true to enable Data Terminal Ready (DTR); otherwise, false. The default is false.</returns>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.Encoding">
      <summary>Gets or sets the byte encoding for pre- and post-transmission conversion of text.</summary>
      <returns>An <see cref="T:System.Text.Encoding"></see> object. The default is <see cref="T:System.Text.ASCIIEncoding"></see>.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.IO.Ports.SerialPort.Encoding"></see> property was set to null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.IO.Ports.SerialPort.Encoding"></see> property was set to an encoding that is not <see cref="T:System.Text.ASCIIEncoding"></see>, <see cref="T:System.Text.UTF8Encoding"></see>, <see cref="T:System.Text.UTF32Encoding"></see>, <see cref="T:System.Text.UnicodeEncoding"></see>, one of the Windows single byte encodings, or one of the Windows double byte encodings.</exception>
    </member>
    <member name="E:System.IO.Ports.SerialPort.ErrorReceived">
      <summary>Indicates that an error has occurred with a port represented by a <see cref="T:System.IO.Ports.SerialPort"></see> object.</summary>
      <returns></returns>
    </member>
    <member name="M:System.IO.Ports.SerialPort.GetPortNames">
      <summary>Gets an array of serial port names for the current computer.</summary>
      <returns>An array of serial port names for the current computer.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">The serial port names could not be queried.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.Handshake">
      <summary>Gets or sets the handshaking protocol for serial port transmission of data using a value from <see cref="T:System.IO.Ports.Handshake"></see>.</summary>
      <returns>One of the <see cref="T:System.IO.Ports.Handshake"></see> values. The default is None.</returns>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value passed is not a valid value in the <see cref="T:System.IO.Ports.Handshake"></see> enumeration.</exception>
    </member>
    <member name="F:System.IO.Ports.SerialPort.InfiniteTimeout">
      <summary>Indicates that no time-out should occur.</summary>
      <returns></returns>
    </member>
    <member name="P:System.IO.Ports.SerialPort.IsOpen">
      <summary>Gets a value indicating the open or closed status of the <see cref="T:System.IO.Ports.SerialPort"></see> object.</summary>
      <returns>true if the serial port is open; otherwise, false. The default is false.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.IO.Ports.SerialPort.IsOpen"></see> value passed is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.IO.Ports.SerialPort.IsOpen"></see> value passed is an empty string (&quot;&quot;).</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.NewLine">
      <summary>Gets or sets the value used to interpret the end of a call to the <see cref="M:System.IO.Ports.SerialPort.ReadLine"></see> and <see cref="M:System.IO.Ports.SerialPort.WriteLine(System.String)"></see> methods.</summary>
      <returns>A value that represents the end of a line. The default is a line feed, <see cref="P:System.Environment.NewLine"></see>.</returns>
      <exception cref="T:System.ArgumentException">The property value is empty.</exception>
      <exception cref="T:System.ArgumentNullException">The property value is null.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Open">
      <summary>Opens a new serial port connection.</summary>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied to the port.   - or -   The current process, or another process on the system, already has the specified COM port open either by a <see cref="T:System.IO.Ports.SerialPort"></see> instance or in unmanaged code.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">One or more of the properties for this instance are invalid. For example, the <see cref="P:System.IO.Ports.SerialPort.Parity"></see>, <see cref="P:System.IO.Ports.SerialPort.DataBits"></see>, or <see cref="P:System.IO.Ports.SerialPort.Handshake"></see> properties are not valid values; the <see cref="P:System.IO.Ports.SerialPort.BaudRate"></see> is less than or equal to zero; the <see cref="P:System.IO.Ports.SerialPort.ReadTimeout"></see> or <see cref="P:System.IO.Ports.SerialPort.WriteTimeout"></see> property is less than zero and is not <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout"></see>.</exception>
      <exception cref="T:System.ArgumentException">The port name does not begin with &quot;COM&quot;.   - or -   The file type of the port is not supported.</exception>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
      <exception cref="T:System.InvalidOperationException">The specified port on the current instance of the <see cref="T:System.IO.Ports.SerialPort"></see> is already open.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.Parity">
      <summary>Gets or sets the parity-checking protocol.</summary>
      <returns>One of the enumeration values that represents the parity-checking protocol. The default is <see cref="F:System.IO.Ports.Parity.None"></see>.</returns>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.IO.Ports.SerialPort.Parity"></see> value passed is not a valid value in the <see cref="T:System.IO.Ports.Parity"></see> enumeration.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.ParityReplace">
      <summary>Gets or sets the byte that replaces invalid bytes in a data stream when a parity error occurs.</summary>
      <returns>A byte that replaces invalid bytes.</returns>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
    </member>
    <member name="E:System.IO.Ports.SerialPort.PinChanged">
      <summary>Indicates that a non-data signal event has occurred on the port represented by the <see cref="T:System.IO.Ports.SerialPort"></see> object.</summary>
      <returns></returns>
    </member>
    <member name="P:System.IO.Ports.SerialPort.PortName">
      <summary>Gets or sets the port for communications, including but not limited to all available COM ports.</summary>
      <returns>The communications port. The default is COM1.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.IO.Ports.SerialPort.PortName"></see> property was set to a value with a length of zero.   -or-   The <see cref="P:System.IO.Ports.SerialPort.PortName"></see> property was set to a value that starts with &quot;\\&quot;.   -or-   The port name was not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.IO.Ports.SerialPort.PortName"></see> property was set to null.</exception>
      <exception cref="T:System.InvalidOperationException">The specified port is open.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a number of bytes from the <see cref="T:System.IO.Ports.SerialPort"></see> input buffer and writes those bytes into a byte array at the specified offset.</summary>
      <param name="buffer">The byte array to write the input to.</param>
      <param name="offset">The offset in buffer at which to write the bytes.</param>
      <param name="count">The maximum number of bytes to read. Fewer bytes are read if count is greater than the number of bytes in the input buffer.</param>
      <returns>The number of bytes read.</returns>
      <exception cref="T:System.ArgumentNullException">The buffer passed is null.</exception>
      <exception cref="T:System.InvalidOperationException">The specified port is not open.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> parameters are outside a valid region of the <paramref name="buffer">buffer</paramref> being passed. Either <paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="offset">offset</paramref> plus <paramref name="count">count</paramref> is greater than the length of the <paramref name="buffer">buffer</paramref>.</exception>
      <exception cref="T:System.TimeoutException">No bytes were available to read.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a number of characters from the <see cref="T:System.IO.Ports.SerialPort"></see> input buffer and writes them into an array of characters at a given offset.</summary>
      <param name="buffer">The character array to write the input to.</param>
      <param name="offset">The offset in buffer at which to write the characters.</param>
      <param name="count">The maximum number of characters to read. Fewer characters are read if count is greater than the number of characters in the input buffer.</param>
      <returns>The number of characters read.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="offset">offset</paramref> plus <paramref name="count">count</paramref> is greater than the length of the buffer.   - or -  <paramref name="count">count</paramref> is 1 and there is a surrogate character in the buffer.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer">buffer</paramref> passed is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> parameters are outside a valid region of the <paramref name="buffer">buffer</paramref> being passed. Either <paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">The specified port is not open.</exception>
      <exception cref="T:System.TimeoutException">No characters were available to read.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.ReadBufferSize">
      <summary>Gets or sets the size of the <see cref="T:System.IO.Ports.SerialPort"></see> input buffer.</summary>
      <returns>The buffer size, in bytes. The default value is 4096; the maximum value is that of a positive int, or 2147483647.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.IO.Ports.SerialPort.ReadBufferSize"></see> value set is less than or equal to zero.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IO.Ports.SerialPort.ReadBufferSize"></see> property was set while the stream was open.</exception>
      <exception cref="T:System.IO.IOException">The <see cref="P:System.IO.Ports.SerialPort.ReadBufferSize"></see> property was set to an odd integer value.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.ReadByte">
      <summary>Synchronously reads one byte from the <see cref="T:System.IO.Ports.SerialPort"></see> input buffer.</summary>
      <returns>The byte, cast to an <see cref="T:System.Int32"></see>, or -1 if the end of the stream has been read.</returns>
      <exception cref="T:System.InvalidOperationException">The specified port is not open.</exception>
      <exception cref="T:System.ServiceProcess.TimeoutException">The operation did not complete before the time-out period ended.   - or -   No byte was read.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.ReadChar">
      <summary>Synchronously reads one character from the <see cref="T:System.IO.Ports.SerialPort"></see> input buffer.</summary>
      <returns>The character that was read.</returns>
      <exception cref="T:System.InvalidOperationException">The specified port is not open.</exception>
      <exception cref="T:System.ServiceProcess.TimeoutException">The operation did not complete before the time-out period ended.   - or -   No character was available in the allotted time-out period.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.ReadExisting">
      <summary>Reads all immediately available bytes, based on the encoding, in both the stream and the input buffer of the <see cref="T:System.IO.Ports.SerialPort"></see> object.</summary>
      <returns>The contents of the stream and the input buffer of the <see cref="T:System.IO.Ports.SerialPort"></see> object.</returns>
      <exception cref="T:System.InvalidOperationException">The specified port is not open.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.ReadLine">
      <summary>Reads up to the <see cref="P:System.IO.Ports.SerialPort.NewLine"></see> value in the input buffer.</summary>
      <returns>The contents of the input buffer up to the first occurrence of a <see cref="P:System.IO.Ports.SerialPort.NewLine"></see> value.</returns>
      <exception cref="T:System.InvalidOperationException">The specified port is not open.</exception>
      <exception cref="T:System.TimeoutException">The operation did not complete before the time-out period ended.   - or -   No bytes were read.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.ReadTimeout">
      <summary>Gets or sets the number of milliseconds before a time-out occurs when a read operation does not finish.</summary>
      <returns>The number of milliseconds before a time-out occurs when a read operation does not finish.</returns>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The read time-out value is less than zero and not equal to <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout"></see>.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.ReadTo(System.String)">
      <summary>Reads a string up to the specified <paramref name="value">value</paramref> in the input buffer.</summary>
      <param name="value">A value that indicates where the read operation stops.</param>
      <returns>The contents of the input buffer up to the specified <paramref name="value">value</paramref>.</returns>
      <exception cref="T:System.ArgumentException">The length of the <paramref name="value">value</paramref> parameter is 0.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value">value</paramref> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The specified port is not open.</exception>
      <exception cref="T:System.TimeoutException">The operation did not complete before the time-out period ended.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.ReceivedBytesThreshold">
      <summary>Gets or sets the number of bytes in the internal input buffer before a <see cref="E:System.IO.Ports.SerialPort.DataReceived"></see> event occurs.</summary>
      <returns>The number of bytes in the internal input buffer before a <see cref="E:System.IO.Ports.SerialPort.DataReceived"></see> event is fired. The default is 1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.IO.Ports.SerialPort.ReceivedBytesThreshold"></see> value is less than or equal to zero.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.RtsEnable">
      <summary>Gets or sets a value indicating whether the Request to Send (RTS) signal is enabled during serial communication.</summary>
      <returns>true to enable Request to Transmit (RTS); otherwise, false. The default is false.</returns>
      <exception cref="T:System.InvalidOperationException">The value of the <see cref="P:System.IO.Ports.SerialPort.RtsEnable"></see> property was set or retrieved while the <see cref="P:System.IO.Ports.SerialPort.Handshake"></see> property is set to the <see cref="F:System.IO.Ports.Handshake.RequestToSend"></see> value or the <see cref="F:System.IO.Ports.Handshake.RequestToSendXOnXOff"></see> value.</exception>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.StopBits">
      <summary>Gets or sets the standard number of stopbits per byte.</summary>
      <returns>One of the <see cref="T:System.IO.Ports.StopBits"></see> values.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.IO.Ports.SerialPort.StopBits"></see> value is  <see cref="F:System.IO.Ports.StopBits.None"></see>.</exception>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Write(System.String)">
      <summary>Writes the specified string to the serial port.</summary>
      <param name="text"></param>
      <exception cref="T:System.InvalidOperationException">The specified port is not open.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="str">str</paramref> is null.</exception>
      <exception cref="T:System.ServiceProcess.TimeoutException">The operation did not complete before the time-out period ended.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a specified number of bytes to the serial port using data from a buffer.</summary>
      <param name="buffer">The byte array that contains the data to write to the port.</param>
      <param name="offset">The zero-based byte offset in the buffer parameter at which to begin copying bytes to the port.</param>
      <param name="count">The number of bytes to write.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer">buffer</paramref> passed is null.</exception>
      <exception cref="T:System.InvalidOperationException">The specified port is not open.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> parameters are outside a valid region of the <paramref name="buffer">buffer</paramref> being passed. Either <paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="offset">offset</paramref> plus <paramref name="count">count</paramref> is greater than the length of the <paramref name="buffer">buffer</paramref>.</exception>
      <exception cref="T:System.ServiceProcess.TimeoutException">The operation did not complete before the time-out period ended.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a specified number of characters to the serial port using data from a buffer.</summary>
      <param name="buffer">The character array that contains the data to write to the port.</param>
      <param name="offset">The zero-based byte offset in the buffer parameter at which to begin copying bytes to the port.</param>
      <param name="count">The number of characters to write.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer">buffer</paramref> passed is null.</exception>
      <exception cref="T:System.InvalidOperationException">The specified port is not open.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> parameters are outside a valid region of the <paramref name="buffer">buffer</paramref> being passed. Either <paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="offset">offset</paramref> plus <paramref name="count">count</paramref> is greater than the length of the <paramref name="buffer">buffer</paramref>.</exception>
      <exception cref="T:System.ServiceProcess.TimeoutException">The operation did not complete before the time-out period ended.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.WriteBufferSize">
      <summary>Gets or sets the size of the serial port output buffer.</summary>
      <returns>The size of the output buffer. The default is 2048.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.IO.Ports.SerialPort.WriteBufferSize"></see> value is less than or equal to zero.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IO.Ports.SerialPort.WriteBufferSize"></see> property was set while the stream was open.</exception>
      <exception cref="T:System.IO.IOException">The <see cref="P:System.IO.Ports.SerialPort.WriteBufferSize"></see> property was set to an odd integer value.</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.WriteLine(System.String)">
      <summary>Writes the specified string and the <see cref="P:System.IO.Ports.SerialPort.NewLine"></see> value to the output buffer.</summary>
      <param name="text"></param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="str">str</paramref> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The specified port is not open.</exception>
      <exception cref="T:System.TimeoutException">The <see cref="M:System.IO.Ports.SerialPort.WriteLine(System.String)"></see> method could not write to the stream.</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.WriteTimeout">
      <summary>Gets or sets the number of milliseconds before a time-out occurs when a write operation does not finish.</summary>
      <returns>The number of milliseconds before a time-out occurs. The default is <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout"></see>.</returns>
      <exception cref="T:System.IO.IOException">The port is in an invalid state.   - or -   An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"></see> object were invalid.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.IO.Ports.SerialPort.WriteTimeout"></see> value is less than zero and not equal to <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout"></see>.</exception>
    </member>
    <member name="T:System.IO.Ports.StopBits">
      <summary>Specifies the number of stop bits used on the <see cref="T:System.IO.Ports.SerialPort"></see> object.</summary>
    </member>
    <member name="F:System.IO.Ports.StopBits.None">
      <summary>No stop bits are used. This value is not supported by the <see cref="P:System.IO.Ports.SerialPort.StopBits"></see> property.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Ports.StopBits.One">
      <summary>One stop bit is used.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Ports.StopBits.OnePointFive">
      <summary>1.5 stop bits are used.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.Ports.StopBits.Two">
      <summary>Two stop bits are used.</summary>
      <returns></returns>
    </member>
    <member name="T:System.IO.RenamedEventArgs">
      <summary>Provides data for the <see cref="E:System.IO.FileSystemWatcher.Renamed"></see> event.</summary>
    </member>
    <member name="M:System.IO.RenamedEventArgs.#ctor(System.IO.WatcherChangeTypes,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.RenamedEventArgs"></see> class.</summary>
      <param name="changeType">One of the <see cref="T:System.IO.WatcherChangeTypes"></see> values.</param>
      <param name="directory">The name of the affected file or directory.</param>
      <param name="name">The name of the affected file or directory.</param>
      <param name="oldName">The old name of the affected file or directory.</param>
    </member>
    <member name="P:System.IO.RenamedEventArgs.OldFullPath">
      <summary>Gets the previous fully qualified path of the affected file or directory.</summary>
      <returns>The previous fully qualified path of the affected file or directory.</returns>
    </member>
    <member name="P:System.IO.RenamedEventArgs.OldName">
      <summary>Gets the old name of the affected file or directory.</summary>
      <returns>The previous name of the affected file or directory.</returns>
    </member>
    <member name="T:System.IO.RenamedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.IO.FileSystemWatcher.Renamed"></see> event of a <see cref="T:System.IO.FileSystemWatcher"></see> class.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:System.IO.RenamedEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:System.IO.WaitForChangedResult">
      <summary>Contains information on the change that occurred.</summary>
    </member>
    <member name="P:System.IO.WaitForChangedResult.ChangeType">
      <summary>Gets or sets the type of change that occurred.</summary>
      <returns>One of the <see cref="T:System.IO.WatcherChangeTypes"></see> values.</returns>
    </member>
    <member name="P:System.IO.WaitForChangedResult.Name">
      <summary>Gets or sets the name of the file or directory that changed.</summary>
      <returns>The name of the file or directory that changed.</returns>
    </member>
    <member name="P:System.IO.WaitForChangedResult.OldName">
      <summary>Gets or sets the original name of the file or directory that was renamed.</summary>
      <returns>The original name of the file or directory that was renamed.</returns>
    </member>
    <member name="P:System.IO.WaitForChangedResult.TimedOut">
      <summary>Gets or sets a value indicating whether the wait operation timed out.</summary>
      <returns>true if the <see cref="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)"></see> method timed out; otherwise, false.</returns>
    </member>
    <member name="T:System.IO.WatcherChangeTypes">
      <summary>Changes that might occur to a file or directory.</summary>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.All">
      <summary>The creation, deletion, change, or renaming of a file or folder.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.Changed">
      <summary>The change of a file or folder. The types of changes include: changes to size, attributes, security settings, last write, and last access time.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.Created">
      <summary>The creation of a file or folder.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.Deleted">
      <summary>The deletion of a file or folder.</summary>
      <returns></returns>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.Renamed">
      <summary>The renaming of a file or folder.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IPAddressCollection">
      <summary>Stores a set of <see cref="T:System.Net.IPAddress"></see> types.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.IPAddressCollection"></see> class.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.Add(System.Net.IPAddress)">
      <summary>Throws a <see cref="T:System.NotSupportedException"></see> because this operation is not supported for this collection.</summary>
      <param name="address">The object to be added to the collection.</param>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.Clear">
      <summary>Throws a <see cref="T:System.NotSupportedException"></see> because this operation is not supported for this collection.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.Contains(System.Net.IPAddress)">
      <summary>Checks whether the collection contains the specified <see cref="T:System.Net.IPAddress"></see> object.</summary>
      <param name="address">The <see cref="T:System.Net.IPAddress"></see> object to be searched in the collection.</param>
      <returns>true if the <see cref="T:System.Net.IPAddress"></see> object exists in the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.CopyTo(System.Net.IPAddress[],System.Int32)">
      <summary>Copies the elements in this collection to a one-dimensional array of type <see cref="T:System.Net.IPAddress"></see>.</summary>
      <param name="array">A one-dimensional array that receives a copy of the collection.</param>
      <param name="offset">The zero-based index in array at which the copy begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-   The number of elements in this <see cref="T:System.Net.NetworkInformation.IPAddressCollection"></see> is greater than the available space from <paramref name="offset">offset</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The elements in this <see cref="T:System.Net.NetworkInformation.IPAddressCollection"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressCollection.Count">
      <summary>Gets the number of <see cref="T:System.Net.IPAddress"></see> types in this collection.</summary>
      <returns>An <see cref="T:System.Int32"></see> value that contains the number of <see cref="T:System.Net.IPAddress"></see> types in this collection.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.GetEnumerator">
      <summary>Returns an object that can be used to iterate through this collection.</summary>
      <returns>An object that implements the <see cref="T:System.Collections.IEnumerator"></see> interface and provides access to the <see cref="T:System.Net.NetworkInformation.IPAddressCollection"></see> types in this collection.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressCollection.IsReadOnly">
      <summary>Gets a value that indicates whether access to this collection is read-only.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Net.IPAddress"></see> at the specific index of the collection.</summary>
      <param name="index">The index of interest.</param>
      <returns>The <see cref="T:System.Net.IPAddress"></see> at the specific index in the collection.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.Remove(System.Net.IPAddress)">
      <summary>Throws a <see cref="T:System.NotSupportedException"></see> because this operation is not supported for this collection.</summary>
      <param name="address">The object to be removed.</param>
      <returns>Always throws a <see cref="T:System.NotSupportedException"></see>.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an object that can be used to iterate through this collection.</summary>
      <returns>An object that implements the <see cref="T:System.Collections.IEnumerator"></see> interface and provides access to the <see cref="T:System.Net.NetworkInformation.IPAddressCollection"></see> types in this collection.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IPAddressInformation">
      <summary>Provides information about a network interface address.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.IPAddressInformation"></see> class.</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressInformation.Address">
      <summary>Gets the Internet Protocol (IP) address.</summary>
      <returns>An <see cref="T:System.Net.IPAddress"></see> instance that contains the IP address of an interface.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the Internet Protocol (IP) address is valid to appear in a Domain Name System (DNS) server database.</summary>
      <returns>true if the address can appear in a DNS database; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressInformation.IsTransient">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the Internet Protocol (IP) address is transient (a cluster address).</summary>
      <returns>true if the address is transient; otherwise, false.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IPAddressInformationCollection">
      <summary>Stores a set of <see cref="T:System.Net.NetworkInformation.IPAddressInformation"></see> types.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.Add(System.Net.NetworkInformation.IPAddressInformation)">
      <summary>Throws a <see cref="T:System.NotSupportedException"></see> because this operation is not supported for this collection.</summary>
      <param name="address">The object to be added to the collection.</param>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.Clear">
      <summary>Throws a <see cref="T:System.NotSupportedException"></see> because this operation is not supported for this collection.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.Contains(System.Net.NetworkInformation.IPAddressInformation)">
      <summary>Checks whether the collection contains the specified <see cref="T:System.Net.NetworkInformation.IPAddressInformation"></see> object.</summary>
      <param name="address">The <see cref="T:System.Net.NetworkInformation.IPAddressInformation"></see> object to be searched in the collection.</param>
      <returns>true if the <see cref="T:System.Net.NetworkInformation.IPAddressInformation"></see> object exists in the collection; otherwise. false.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.CopyTo(System.Net.NetworkInformation.IPAddressInformation[],System.Int32)">
      <summary>Copies the collection to the specified array.</summary>
      <param name="array">A one-dimensional array that receives a copy of the collection.</param>
      <param name="offset">The zero-based index in array at which the copy begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-   The number of elements in this <see cref="T:System.Net.NetworkInformation.IPAddressInformation"></see> is greater than the available space from <paramref name="offset">offset</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The elements in this <see cref="T:System.Net.NetworkInformation.IPAddressInformation"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressInformationCollection.Count">
      <summary>Gets the number of <see cref="T:System.Net.NetworkInformation.IPAddressInformation"></see> types in this collection.</summary>
      <returns>An <see cref="T:System.Int32"></see> value that contains the number of <see cref="T:System.Net.NetworkInformation.IPAddressInformation"></see> types in this collection.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.GetEnumerator">
      <summary>Returns an object that can be used to iterate through this collection.</summary>
      <returns>An object that implements the <see cref="T:System.Collections.IEnumerator"></see> interface and provides access to the <see cref="T:System.Net.NetworkInformation.IPAddressInformation"></see> types in this collection.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressInformationCollection.IsReadOnly">
      <summary>Gets a value that indicates whether access to this collection is read-only.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressInformationCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Net.NetworkInformation.IPAddressInformation"></see> at the specified index in the collection.</summary>
      <param name="index">The zero-based index of the element.</param>
      <returns>The <see cref="T:System.Net.NetworkInformation.IPAddressInformation"></see> at the specified location.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.Remove(System.Net.NetworkInformation.IPAddressInformation)">
      <summary>Throws a <see cref="T:System.NotSupportedException"></see> because this operation is not supported for this collection.</summary>
      <param name="address">The object to be removed.</param>
      <returns>Always throws a <see cref="T:System.NotSupportedException"></see>.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an object that can be used to iterate through this collection.</summary>
      <returns>An object that implements the <see cref="T:System.Collections.IEnumerator"></see> interface and provides access to the <see cref="T:System.Net.NetworkInformation.IPAddressInformation"></see> types in this collection.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IPGlobalProperties">
      <summary>Provides information about the network connectivity of the local computer.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.IPGlobalProperties"></see> class.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.BeginGetUnicastAddresses(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request to retrieve the stable unicast IP address table on the local computer.</summary>
      <param name="callback">The <see cref="T:System.AsyncCallback"></see> delegate.</param>
      <param name="state">An object that contains state information for this request.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that references the asynchronous request.</returns>
      <exception cref="T:System.NotImplementedException">This method is not implemented on the platform. This method uses the native NotifyStableUnicastIpAddressTable function that is supported on Windows Vista and later.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">The call to the native NotifyStableUnicastIpAddressTable function failed.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalProperties.DhcpScopeName">
      <summary>Gets the Dynamic Host Configuration Protocol (DHCP) scope name.</summary>
      <returns>A <see cref="T:System.String"></see> instance that contains the computer's DHCP scope name.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">A Win32 function call failed.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalProperties.DomainName">
      <summary>Gets the domain in which the local computer is registered.</summary>
      <returns>A <see cref="T:System.String"></see> instance that contains the computer's domain name. If the computer does not belong to a domain, returns <see cref="F:System.String.Empty"></see>.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">A Win32 function call failed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.EndGetUnicastAddresses(System.IAsyncResult)">
      <summary>Ends a pending asynchronous request to retrieve the stable unicast IP address table on the local computer.</summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult"></see> that references the asynchronous request.</param>
      <returns>An <see cref="T:System.IAsyncResult"></see> that stores state information and any user defined data for this asynchronous operation.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">The call to the native GetAdaptersAddresses function failed.</exception>
      <exception cref="T:System.NotImplementedException">This method is not implemented on the platform. This method uses the native NotifyStableUnicastIpAddressTable function that is supported on Windows Vista and later.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have necessary <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Read"></see> permission.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetActiveTcpConnections">
      <summary>Returns information about the Internet Protocol version 4 (IPv4) and IPv6 Transmission Control Protocol (TCP) connections on the local computer.</summary>
      <returns>A <see cref="T:System.Net.NetworkInformation.TcpConnectionInformation"></see> array that contains objects that describe the active TCP connections, or an empty array if no active TCP connections are detected.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">The Win32 function GetTcpTable failed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetActiveTcpListeners">
      <summary>Returns endpoint information about the Internet Protocol version 4 (IPv4) and IPv6 Transmission Control Protocol (TCP) listeners on the local computer.</summary>
      <returns>A <see cref="T:System.Net.IPEndPoint"></see> array that contains objects that describe the active TCP listeners, or an empty array, if no active TCP listeners are detected.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">The Win32 function GetTcpTable failed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetActiveUdpListeners">
      <summary>Returns information about the Internet Protocol version 4 (IPv4) and IPv6 User Datagram Protocol (UDP) listeners on the local computer.</summary>
      <returns>An <see cref="T:System.Net.IPEndPoint"></see> array that contains objects that describe the UDP listeners, or an empty array if no UDP listeners are detected.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">The call to the Win32 function GetUdpTable failed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetIcmpV4Statistics">
      <summary>Provides Internet Control Message Protocol (ICMP) version 4 statistical data for the local computer.</summary>
      <returns>An <see cref="T:System.Net.NetworkInformation.IcmpV4Statistics"></see> object that provides ICMP version 4 traffic statistics for the local computer.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">The Win32 function GetIcmpStatistics failed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetIcmpV6Statistics">
      <summary>Provides Internet Control Message Protocol (ICMP) version 6 statistical data for the local computer.</summary>
      <returns>An <see cref="T:System.Net.NetworkInformation.IcmpV6Statistics"></see> object that provides ICMP version 6 traffic statistics for the local computer.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">The Win32 function GetIcmpStatisticsEx failed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The local computer's operating system is not Windows XP or later.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetIPGlobalProperties">
      <summary>Gets an object that provides information about the local computer's network connectivity and traffic statistics.</summary>
      <returns>A <see cref="T:System.Net.NetworkInformation.IPGlobalProperties"></see> object that contains information about the local computer.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetIPv4GlobalStatistics">
      <summary>Provides Internet Protocol version 4 (IPv4) statistical data for the local computer.</summary>
      <returns>An <see cref="T:System.Net.NetworkInformation.IPGlobalStatistics"></see> object that provides IPv4 traffic statistics for the local computer.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">The call to the Win32 function GetIpStatistics failed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetIPv6GlobalStatistics">
      <summary>Provides Internet Protocol version 6 (IPv6) statistical data for the local computer.</summary>
      <returns>An <see cref="T:System.Net.NetworkInformation.IPGlobalStatistics"></see> object that provides IPv6 traffic statistics for the local computer.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">The call to the Win32 function GetIpStatistics failed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The local computer is not running an operating system that supports IPv6.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetTcpIPv4Statistics">
      <summary>Provides Transmission Control Protocol/Internet Protocol version 4 (TCP/IPv4) statistical data for the local computer.</summary>
      <returns>A <see cref="T:System.Net.NetworkInformation.TcpStatistics"></see> object that provides TCP/IPv4 traffic statistics for the local computer.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">The call to the Win32 function GetTcpStatistics failed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetTcpIPv6Statistics">
      <summary>Provides Transmission Control Protocol/Internet Protocol version 6 (TCP/IPv6) statistical data for the local computer.</summary>
      <returns>A <see cref="T:System.Net.NetworkInformation.TcpStatistics"></see> object that provides TCP/IPv6 traffic statistics for the local computer.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">The call to the Win32 function GetTcpStatistics failed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The local computer is not running an operating system that supports IPv6.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetUdpIPv4Statistics">
      <summary>Provides User Datagram Protocol/Internet Protocol version 4 (UDP/IPv4) statistical data for the local computer.</summary>
      <returns>A <see cref="T:System.Net.NetworkInformation.UdpStatistics"></see> object that provides UDP/IPv4 traffic statistics for the local computer.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">The call to the Win32 function GetUdpStatistics failed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetUdpIPv6Statistics">
      <summary>Provides User Datagram Protocol/Internet Protocol version 6 (UDP/IPv6) statistical data for the local computer.</summary>
      <returns>A <see cref="T:System.Net.NetworkInformation.UdpStatistics"></see> object that provides UDP/IPv6 traffic statistics for the local computer.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">The call to the Win32 function GetUdpStatistics failed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The local computer is not running an operating system that supports IPv6.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddresses">
      <summary>Retrieves the stable unicast IP address table on the local computer.</summary>
      <returns>A <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformationCollection"></see> that contains a list of stable unicast IP addresses on the local computer.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">The call to the native GetAdaptersAddresses function failed.</exception>
      <exception cref="T:System.NotImplementedException">This method is not implemented on the platform. This method uses the native NotifyStableUnicastIpAddressTable function that is supported on Windows Vista and later.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have necessary <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Read"></see> permission.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">The call to the native NotifyStableUnicastIpAddressTable function failed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddressesAsync">
      <summary>Retrieves the stable unicast IP address table on the local computer as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">The call to the native GetAdaptersAddresses function failed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have necessary <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Read"></see> permission.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">The call to the native NotifyStableUnicastIpAddressTable function failed.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalProperties.HostName">
      <summary>Gets the host name for the local computer.</summary>
      <returns>A <see cref="T:System.String"></see> instance that contains the computer's NetBIOS name.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">A Win32 function call failed.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalProperties.IsWinsProxy">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that specifies whether the local computer is acting as a Windows Internet Name Service (WINS) proxy.</summary>
      <returns>true if the local computer is a WINS proxy; otherwise, false.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">A Win32 function call failed.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalProperties.NodeType">
      <summary>Gets the Network Basic Input/Output System (NetBIOS) node type of the local computer.</summary>
      <returns>A <see cref="T:System.Net.NetworkInformation.NetBiosNodeType"></see> value.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">A Win32 function call failed.</exception>
    </member>
    <member name="T:System.Net.NetworkInformation.IPGlobalStatistics">
      <summary>Provides Internet Protocol (IP) statistical data.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalStatistics.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.IPGlobalStatistics"></see> class.</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.DefaultTtl">
      <summary>Gets the default time-to-live (TTL) value for Internet Protocol (IP) packets.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the TTL.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ForwardingEnabled">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that specifies whether Internet Protocol (IP) packet forwarding is enabled.</summary>
      <returns>A <see cref="T:System.Boolean"></see> value that specifies whether packet forwarding is enabled.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.NumberOfInterfaces">
      <summary>Gets the number of network interfaces.</summary>
      <returns>An <see cref="T:System.Int64"></see> value containing the number of network interfaces for the address family used to obtain this <see cref="T:System.Net.NetworkInformation.IPGlobalStatistics"></see> instance.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.NumberOfIPAddresses">
      <summary>Gets the number of Internet Protocol (IP) addresses assigned to the local computer.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that indicates the number of IP addresses assigned to the address family (Internet Protocol version 4 or Internet Protocol version 6) described by this object.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.NumberOfRoutes">
      <summary>Gets the number of routes in the Internet Protocol (IP) routing table.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of routes in the routing table.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.OutputPacketRequests">
      <summary>Gets the number of outbound Internet Protocol (IP) packets.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of outgoing packets.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.OutputPacketRoutingDiscards">
      <summary>Gets the number of routes that have been discarded from the routing table.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of valid routes that have been discarded.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.OutputPacketsDiscarded">
      <summary>Gets the number of transmitted Internet Protocol (IP) packets that have been discarded.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of outgoing packets that have been discarded.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.OutputPacketsWithNoRoute">
      <summary>Gets the number of Internet Protocol (IP) packets for which the local computer could not determine a route to the destination address.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the number of packets that could not be sent because a route could not be found.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.PacketFragmentFailures">
      <summary>Gets the number of Internet Protocol (IP) packets that could not be fragmented.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of packets that required fragmentation but had the &quot;Don't Fragment&quot; bit set.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.PacketReassembliesRequired">
      <summary>Gets the number of Internet Protocol (IP) packets that required reassembly.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of packet reassemblies required.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.PacketReassemblyFailures">
      <summary>Gets the number of Internet Protocol (IP) packets that were not successfully reassembled.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of packets that could not be reassembled.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.PacketReassemblyTimeout">
      <summary>Gets the maximum amount of time within which all fragments of an Internet Protocol (IP) packet must arrive.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the maximum number of milliseconds within which all fragments of a packet must arrive to avoid being discarded.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.PacketsFragmented">
      <summary>Gets the number of Internet Protocol (IP) packets fragmented.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of fragmented packets.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.PacketsReassembled">
      <summary>Gets the number of Internet Protocol (IP) packets reassembled.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of fragmented packets that have been successfully reassembled.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPackets">
      <summary>Gets the number of Internet Protocol (IP) packets received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of IP packets received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsDelivered">
      <summary>Gets the number of Internet Protocol (IP) packets delivered.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of IP packets delivered.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsDiscarded">
      <summary>Gets the number of Internet Protocol (IP) packets that have been received and discarded.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of incoming packets that have been discarded.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsForwarded">
      <summary>Gets the number of Internet Protocol (IP) packets forwarded.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of forwarded packets.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsWithAddressErrors">
      <summary>Gets the number of Internet Protocol (IP) packets with address errors that were received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of IP packets received with errors in the address portion of the header.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsWithHeadersErrors">
      <summary>Gets the number of Internet Protocol (IP) packets with header errors that were received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of IP packets received and discarded due to errors in the header.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsWithUnknownProtocol">
      <summary>Gets the number of Internet Protocol (IP) packets received on the local machine with an unknown protocol in the header.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that indicates the total number of IP packets received with an unknown protocol.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IPInterfaceProperties">
      <summary>Provides information about network interfaces that support Internet Protocol version 4 (IPv4) or Internet Protocol version 6 (IPv6).</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPInterfaceProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.IPInterfaceProperties"></see> class.</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.AnycastAddresses">
      <summary>Gets the anycast IP addresses assigned to this interface.</summary>
      <returns>An <see cref="T:System.Net.NetworkInformation.IPAddressInformationCollection"></see> that contains the anycast addresses for this interface.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.DhcpServerAddresses">
      <summary>Gets the addresses of Dynamic Host Configuration Protocol (DHCP) servers for this interface.</summary>
      <returns>An <see cref="T:System.Net.NetworkInformation.IPAddressCollection"></see> that contains the address information for DHCP servers, or an empty array if no servers are found.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.DnsAddresses">
      <summary>Gets the addresses of Domain Name System (DNS) servers for this interface.</summary>
      <returns>A <see cref="T:System.Net.NetworkInformation.IPAddressCollection"></see> that contains the DNS server addresses.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix">
      <summary>Gets the Domain Name System (DNS) suffix associated with this interface.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the DNS suffix for this interface, or <see cref="F:System.String.Empty"></see> if there is no DNS suffix for the interface.</returns>
      <exception cref="T:System.PlatformNotSupportedException">This property is not valid on computers running operating systems earlier than Windows 2000.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.GatewayAddresses">
      <summary>Gets the IPv4 network gateway addresses for this interface.</summary>
      <returns>An <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformationCollection"></see> that contains the address information for network gateways, or an empty array if no gateways are found.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties">
      <summary>Provides Internet Protocol version 4 (IPv4) configuration data for this network interface.</summary>
      <returns>An <see cref="T:System.Net.NetworkInformation.IPv4InterfaceProperties"></see> object that contains IPv4 configuration data, or null if no data is available for the interface.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">The interface does not support the IPv4 protocol.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties">
      <summary>Provides Internet Protocol version 6 (IPv6) configuration data for this network interface.</summary>
      <returns>An <see cref="T:System.Net.NetworkInformation.IPv6InterfaceProperties"></see> object that contains IPv6 configuration data.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">The interface does not support the IPv6 protocol.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.IsDnsEnabled">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether NetBt is configured to use DNS name resolution on this interface.</summary>
      <returns>true if NetBt is configured to use DNS name resolution on this interface; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.IsDynamicDnsEnabled">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether this interface is configured to automatically register its IP address information with the Domain Name System (DNS).</summary>
      <returns>true if this interface is configured to automatically register a mapping between its dynamic IP address and static domain names; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.MulticastAddresses">
      <summary>Gets the multicast addresses assigned to this interface.</summary>
      <returns>An <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformationCollection"></see> that contains the multicast addresses for this interface.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses">
      <summary>Gets the unicast addresses assigned to this interface.</summary>
      <returns>An <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformationCollection"></see> that contains the unicast addresses for this interface.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.WinsServersAddresses">
      <summary>Gets the addresses of Windows Internet Name Service (WINS) servers.</summary>
      <returns>An <see cref="T:System.Net.NetworkInformation.IPAddressCollection"></see> that contains the address information for WINS servers, or an empty array if no servers are found.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IPInterfaceStatistics">
      <summary>Provides Internet Protocol (IP) statistical data for an network interface on the local computer.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPInterfaceStatistics.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.IPInterfaceStatistics"></see> class.</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.BytesReceived">
      <summary>Gets the number of bytes that were received on the interface.</summary>
      <returns>Returns <see cref="T:System.Int64"></see>.   The total number of bytes that were received on the interface.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.BytesSent">
      <summary>Gets the number of bytes that were sent on the interface.</summary>
      <returns>Returns <see cref="T:System.Int64"></see>.   The total number of bytes that were sent on the interface.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.IncomingPacketsDiscarded">
      <summary>Gets the number of incoming packets that were discarded.</summary>
      <returns>Returns <see cref="T:System.Int64"></see>.   The total number of incoming packets that were discarded.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.IncomingPacketsWithErrors">
      <summary>Gets the number of incoming packets with errors.</summary>
      <returns>Returns <see cref="T:System.Int64"></see>.   The total number of incoming packets with errors.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.IncomingUnknownProtocolPackets">
      <summary>Gets the number of incoming packets with an unknown protocol that were received on the interface.</summary>
      <returns>Returns <see cref="T:System.Int64"></see>.   The total number of incoming packets with an unknown protocol that were received on the interface.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.NonUnicastPacketsReceived">
      <summary>Gets the number of non-unicast packets that were received on the interface.</summary>
      <returns>Returns <see cref="T:System.Int64"></see>.   The total number of incoming non-unicast packets received on the interface.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.NonUnicastPacketsSent">
      <summary>Gets the number of non-unicast packets that were sent on the interface.</summary>
      <returns>Returns <see cref="T:System.Int64"></see>.   The total number of non-unicast packets that were sent on the interface.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.OutgoingPacketsDiscarded">
      <summary>Gets the number of outgoing packets that were discarded.</summary>
      <returns>Returns <see cref="T:System.Int64"></see>.   The total number of outgoing packets that were discarded.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.OutgoingPacketsWithErrors">
      <summary>Gets the number of outgoing packets with errors.</summary>
      <returns>Returns <see cref="T:System.Int64"></see>.   The total number of outgoing packets with errors.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.OutputQueueLength">
      <summary>Gets the length of the output queue.</summary>
      <returns>Returns <see cref="T:System.Int64"></see>.   The total number of packets in the output queue.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.UnicastPacketsReceived">
      <summary>Gets the number of unicast packets that were received on the interface.</summary>
      <returns>Returns <see cref="T:System.Int64"></see>.   The total number of unicast packets that were received on the interface.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.UnicastPacketsSent">
      <summary>Gets the number of unicast packets that were sent on the interface.</summary>
      <returns>Returns <see cref="T:System.Int64"></see>.   The total number of unicast packets that were sent on the interface.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IPStatus">
      <summary>Reports the status of sending an Internet Control Message Protocol (ICMP) echo message to a computer.</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.BadDestination">
      <summary>The ICMP echo request failed because the destination IP address cannot receive ICMP echo requests or should never appear in the destination address field of any IP datagram. For example, calling <see cref="Overload:System.Net.NetworkInformation.Ping.Send"></see> and specifying IP address &quot;000.0.0.0&quot; returns this status.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.BadHeader">
      <summary>The ICMP echo request failed because the header is invalid.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.BadOption">
      <summary>The ICMP echo request failed because it contains an invalid option.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.BadRoute">
      <summary>The ICMP echo request failed because there is no valid route between the source and destination computers.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationHostUnreachable">
      <summary>The ICMP echo request failed because the destination computer is not reachable.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationNetworkUnreachable">
      <summary>The ICMP echo request failed because the network that contains the destination computer is not reachable.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationPortUnreachable">
      <summary>The ICMP echo request failed because the port on the destination computer is not available.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationProhibited">
      <summary>The ICMPv6 echo request failed because contact with the destination computer is administratively prohibited. This value applies only to IPv6.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationProtocolUnreachable">
      <summary>The ICMP echo request failed because the destination computer that is specified in an ICMP echo message is not reachable, because it does not support the packet's protocol. This value applies only to IPv4. This value is described in IETF RFC 1812 as Communication Administratively Prohibited.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationScopeMismatch">
      <summary>The ICMP echo request failed because the source address and destination address that are specified in an ICMP echo message are not in the same scope. This is typically caused by a router forwarding a packet using an interface that is outside the scope of the source address. Address scopes (link-local, site-local, and global scope) determine where on the network an address is valid.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationUnreachable">
      <summary>The ICMP echo request failed because the destination computer that is specified in an ICMP echo message is not reachable; the exact cause of problem is unknown.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.HardwareError">
      <summary>The ICMP echo request failed because of a hardware error.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.IcmpError">
      <summary>The ICMP echo request failed because of an ICMP protocol error.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.NoResources">
      <summary>The ICMP echo request failed because of insufficient network resources.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.PacketTooBig">
      <summary>The ICMP echo request failed because the packet containing the request is larger than the maximum transmission unit (MTU) of a node (router or gateway) located between the source and destination. The MTU defines the maximum size of a transmittable packet.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.ParameterProblem">
      <summary>The ICMP echo request failed because a node (router or gateway) encountered problems while processing the packet header. This is the status if, for example, the header contains invalid field data or an unrecognized option.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.SourceQuench">
      <summary>The ICMP echo request failed because the packet was discarded. This occurs when the source computer's output queue has insufficient storage space, or when packets arrive at the destination too quickly to be processed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.Success">
      <summary>The ICMP echo request succeeded; an ICMP echo reply was received. When you get this status code, the other <see cref="T:System.Net.NetworkInformation.PingReply"></see> properties contain valid data.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.TimedOut">
      <summary>The ICMP echo Reply was not received within the allotted time. The default time allowed for replies is 5 seconds. You can change this value using the <see cref="Overload:System.Net.NetworkInformation.Ping.Send"></see> or <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync"></see> methods that take a <paramref name="timeout">timeout</paramref> parameter.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.TimeExceeded">
      <summary>The ICMP echo request failed because its Time to Live (TTL) value reached zero, causing the forwarding node (router or gateway) to discard the packet.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.TtlExpired">
      <summary>The ICMP echo request failed because its Time to Live (TTL) value reached zero, causing the forwarding node (router or gateway) to discard the packet.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.TtlReassemblyTimeExceeded">
      <summary>The ICMP echo request failed because the packet was divided into fragments for transmission and all of the fragments were not received within the time allotted for reassembly. RFC 2460 (available at www.ietf.org) specifies 60 seconds as the time limit within which all packet fragments must be received.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.Unknown">
      <summary>The ICMP echo request failed for an unknown reason.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.UnrecognizedNextHeader">
      <summary>The ICMP echo request failed because the Next Header field does not contain a recognized value. The Next Header field indicates the extension header type (if present) or the protocol above the IP layer, for example, TCP or UDP.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IPv4InterfaceProperties">
      <summary>Provides information about network interfaces that support Internet Protocol version 4 (IPv4).</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPv4InterfaceProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.IPv4InterfaceProperties"></see> class.</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.Index">
      <summary>Gets the index of the network interface associated with the Internet Protocol version 4 (IPv4) address.</summary>
      <returns>An <see cref="T:System.Int32"></see> that contains the index of the IPv4 interface.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingActive">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether this interface has an automatic private IP addressing (APIPA) address.</summary>
      <returns>true if the interface uses an APIPA address; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingEnabled">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether this interface has automatic private IP addressing (APIPA) enabled.</summary>
      <returns>true if the interface uses APIPA; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsDhcpEnabled">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the interface is configured to use a Dynamic Host Configuration Protocol (DHCP) server to obtain an IP address.</summary>
      <returns>true if the interface is configured to obtain an IP address from a DHCP server; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsForwardingEnabled">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether this interface can forward (route) packets.</summary>
      <returns>true if this interface routes packets; otherwise false.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.Mtu">
      <summary>Gets the maximum transmission unit (MTU) for this network interface.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the MTU.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.UsesWins">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether an interface uses Windows Internet Name Service (WINS).</summary>
      <returns>true if the interface uses WINS; otherwise, false.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IPv4InterfaceStatistics">
      <summary>Provides statistical data for a network interface on the local computer.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPv4InterfaceStatistics.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.IPv4InterfaceStatistics"></see> class.</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.BytesReceived">
      <summary>Gets the number of bytes that were received on the interface.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of bytes that were received on the interface.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.BytesSent">
      <summary>Gets the number of bytes that were sent on the interface.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of bytes that were transmitted on the interface.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.IncomingPacketsDiscarded">
      <summary>Gets the number of incoming packets that were discarded.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of discarded incoming packets.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.IncomingPacketsWithErrors">
      <summary>Gets the number of incoming packets with errors.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of incoming packets with errors.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.IncomingUnknownProtocolPackets">
      <summary>Gets the number of incoming packets with an unknown protocol that were received on the interface.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of incoming packets with an unknown protocol.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.NonUnicastPacketsReceived">
      <summary>Gets the number of non-unicast packets that were received on the interface.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of non-unicast packets that were received on the interface.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.NonUnicastPacketsSent">
      <summary>Gets the number of non-unicast packets that were sent on the interface.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of non-unicast packets that were sent on the interface.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.OutgoingPacketsDiscarded">
      <summary>Gets the number of outgoing packets that were discarded.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of discarded outgoing packets.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.OutgoingPacketsWithErrors">
      <summary>Gets the number of outgoing packets with errors.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of outgoing packets with errors.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.OutputQueueLength">
      <summary>Gets the length of the output queue.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of packets in the output queue.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.UnicastPacketsReceived">
      <summary>Gets the number of unicast packets that were received on the interface.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of unicast packets that were received on the interface.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.UnicastPacketsSent">
      <summary>Gets the number of unicast packets that were sent on the interface.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of unicast packets that were sent on the interface.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IPv6InterfaceProperties">
      <summary>Provides information about network interfaces that support Internet Protocol version 6 (IPv6).</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPv6InterfaceProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.IPv6InterfaceProperties"></see> class.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPv6InterfaceProperties.GetScopeId(System.Net.NetworkInformation.ScopeLevel)">
      <summary>Gets the scope ID of the network interface associated with an Internet Protocol version 6 (IPv6) address.</summary>
      <param name="scopeLevel">The scope level.</param>
      <returns>Returns <see cref="T:System.Int64"></see>.   The scope ID of the network interface associated with an IPv6 address.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv6InterfaceProperties.Index">
      <summary>Gets the index of the network interface associated with an Internet Protocol version 6 (IPv6) address.</summary>
      <returns>An <see cref="T:System.Int32"></see> value that contains the index of the network interface for IPv6 address.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv6InterfaceProperties.Mtu">
      <summary>Gets the maximum transmission unit (MTU) for this network interface.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the MTU.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.MulticastIPAddressInformation">
      <summary>Provides information about a network interface's multicast address.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation"></see> class.</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformation.AddressPreferredLifetime">
      <summary>Gets the number of seconds remaining during which this address is the preferred address.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the number of seconds left for this address to remain preferred.</returns>
      <exception cref="T:System.PlatformNotSupportedException">This property is not valid on computers running operating systems earlier than Windows XP.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformation.AddressValidLifetime">
      <summary>Gets the number of seconds remaining during which this address is valid.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the number of seconds left for this address to remain assigned.</returns>
      <exception cref="T:System.PlatformNotSupportedException">This property is not valid on computers running operating systems earlier than Windows XP.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformation.DhcpLeaseLifetime">
      <summary>Specifies the amount of time remaining on the Dynamic Host Configuration Protocol (DHCP) lease for this IP address.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that contains the number of seconds remaining before the computer must release the <see cref="T:System.Net.IPAddress"></see> instance.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformation.DuplicateAddressDetectionState">
      <summary>Gets a value that indicates the state of the duplicate address detection algorithm.</summary>
      <returns>One of the <see cref="T:System.Net.NetworkInformation.DuplicateAddressDetectionState"></see> values that indicates the progress of the algorithm in determining the uniqueness of this IP address.</returns>
      <exception cref="T:System.PlatformNotSupportedException">This property is not valid on computers running operating systems earlier than Windows XP.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformation.PrefixOrigin">
      <summary>Gets a value that identifies the source of a Multicast Internet Protocol (IP) address prefix.</summary>
      <returns>One of the <see cref="T:System.Net.NetworkInformation.PrefixOrigin"></see> values that identifies how the prefix information was obtained.</returns>
      <exception cref="T:System.PlatformNotSupportedException">This property is not valid on computers running operating systems earlier than Windows XP.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformation.SuffixOrigin">
      <summary>Gets a value that identifies the source of a Multicast Internet Protocol (IP) address suffix.</summary>
      <returns>One of the <see cref="T:System.Net.NetworkInformation.SuffixOrigin"></see> values that identifies how the suffix information was obtained.</returns>
      <exception cref="T:System.PlatformNotSupportedException">This property is not valid on computers running operating systems earlier than Windows XP.</exception>
    </member>
    <member name="T:System.Net.NetworkInformation.MulticastIPAddressInformationCollection">
      <summary>Stores a set of <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation"></see> types.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformationCollection"></see> class.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Add(System.Net.NetworkInformation.MulticastIPAddressInformation)">
      <summary>Throws a <see cref="T:System.NotSupportedException"></see> because the collection is read-only and elements cannot be added to the collection.</summary>
      <param name="address">The object to be added to the collection.</param>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Clear">
      <summary>Throws a <see cref="T:System.NotSupportedException"></see> because the collection is read-only and elements cannot be removed.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Contains(System.Net.NetworkInformation.MulticastIPAddressInformation)">
      <summary>Checks whether the collection contains the specified <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation"></see> object.</summary>
      <param name="address">The <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation"></see> object to be searched in the collection.</param>
      <returns>true if the <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation"></see> object exists in the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.CopyTo(System.Net.NetworkInformation.MulticastIPAddressInformation[],System.Int32)">
      <summary>Copies the elements in this collection to a one-dimensional array of type <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation"></see>.</summary>
      <param name="array">A one-dimensional array that receives a copy of the collection.</param>
      <param name="offset">The zero-based index in array at which the copy begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count">count</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-   The number of elements in this <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation"></see> is greater than the available space from <paramref name="count">count</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The elements in this <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Count">
      <summary>Gets the number of <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation"></see> types in this collection.</summary>
      <returns>An <see cref="T:System.Int32"></see> value that contains the number of <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation"></see> types in this collection.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.GetEnumerator">
      <summary>Returns an object that can be used to iterate through this collection.</summary>
      <returns>An object that implements the <see cref="T:System.Collections.IEnumerator"></see> interface and provides access to the <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation"></see> types in this collection.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.IsReadOnly">
      <summary>Gets a value that indicates whether access to this collection is read-only.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation"></see> at the specific index of the collection.</summary>
      <param name="index">The index of interest.</param>
      <returns>The <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation"></see> at the specific index in the collection.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Remove(System.Net.NetworkInformation.MulticastIPAddressInformation)">
      <summary>Throws a <see cref="T:System.NotSupportedException"></see> because the collection is read-only and elements cannot be removed.</summary>
      <param name="address">The object to be removed.</param>
      <returns>Always throws a <see cref="T:System.NotSupportedException"></see>.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an object that can be used to iterate through this collection.</summary>
      <returns>An object that implements the <see cref="T:System.Collections.IEnumerator"></see> interface and provides access to the <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation"></see> types in this collection.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.NetBiosNodeType">
      <summary>Specifies the Network Basic Input/Output System (NetBIOS) node type.</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetBiosNodeType.Broadcast">
      <summary>A broadcast node.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetBiosNodeType.Hybrid">
      <summary>A hybrid node.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetBiosNodeType.Mixed">
      <summary>A mixed node.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetBiosNodeType.Peer2Peer">
      <summary>A peer-to-peer node.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetBiosNodeType.Unknown">
      <summary>An unknown node type.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkAddressChangedEventHandler">
      <summary>References one or more methods to be called when the address of a network interface changes.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An <see cref="T:System.EventArgs"></see> object that contains data about the event.</param>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler">
      <summary>References one or more methods to be called when the availability of the network changes.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An <see cref="T:System.EventArgs"></see> object that contains data about the event.</param>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkAvailabilityEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.NetworkInformation.NetworkChange.NetworkAvailabilityChanged"></see> event.</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkAvailabilityEventArgs.IsAvailable">
      <summary>Gets the current status of the network connection.</summary>
      <returns>true if the network is available; otherwise, false.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkChange">
      
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkChange.#ctor">
      
    </member>
    <member name="E:System.Net.NetworkInformation.NetworkChange.NetworkAddressChanged">
      <returns></returns>
    </member>
    <member name="E:System.Net.NetworkInformation.NetworkChange.NetworkAvailabilityChanged">
      <returns></returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkChange.RegisterNetworkChange(System.Net.NetworkInformation.NetworkChange)">
      <param name="nc"></param>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInformationAccess">
      <summary>Specifies permission to access information about network interfaces and traffic statistics.</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInformationAccess.None">
      <summary>No access to network information.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping">
      <summary>Ping access to network information.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInformationAccess.Read">
      <summary>Read access to network information.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInformationException">
      <summary>The exception that is thrown when an error occurs while retrieving network information.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.NetworkInformationException"></see> class.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationException.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.NetworkInformationException"></see> class with the specified error code.</summary>
      <param name="errorCode">A Win32 error code.</param>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.NetworkInformationException"></see> class with serialized data.</summary>
      <param name="serializationInfo">A SerializationInfo object that contains the serialized exception data.</param>
      <param name="streamingContext">A StreamingContext that contains contextual information about the serialized exception.</param>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInformationException.ErrorCode">
      <summary>Gets the Win32 error code for this exception.</summary>
      <returns>An <see cref="T:System.Int32"></see> value that contains the Win32 error code.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInformationPermission">
      <summary>Controls access to network information and traffic statistics for the local computer. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.#ctor(System.Net.NetworkInformation.NetworkInformationAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission"></see> class using the specified <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess"></see> value.</summary>
      <param name="access">One of the <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess"></see> values.</param>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission"></see> class with the specified <see cref="T:System.Security.Permissions.PermissionState"></see>.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInformationPermission.Access">
      <summary>Gets the level of access to network information controlled by this permission.</summary>
      <returns>One of the <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess"></see> values.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.AddPermission(System.Net.NetworkInformation.NetworkInformationAccess)">
      <summary>Adds the specified value to this permission.</summary>
      <param name="access">One of the <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess"></see> values.</param>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.Copy">
      <summary>Creates and returns an identical copy of this permission.</summary>
      <returns>A <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission"></see> that is identical to the current permission</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.FromXml(System.Security.SecurityElement)">
      <summary>Sets the state of this permission using the specified XML encoding.</summary>
      <param name="securityElement">A <see cref="T:System.Security.SecurityElement"></see> that contains the XML encoding to use to set the state of the current permission</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="securityElement">securityElement</paramref> is null.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="securityElement">securityElement</paramref> is not a permission encoding.   -or-  <paramref name="securityElement">securityElement</paramref> is not an encoding of a <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission"></see>.   -or-  <paramref name="securityElement">securityElement</paramref> has invalid <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess"></see> values.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">An <see cref="T:System.Security.IPermission"></see> to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>A <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission"></see> that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty or <paramref name="target">target</paramref> is null.</returns>
      <exception cref="T:System.ArgumentException"><paramref name="target">target</paramref> is not a <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission"></see>.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">An <see cref="T:System.Security.IPermission"></see> that is to be tested for the subset relationship. This permission must be of the same type as the current permission</param>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>true if the current permission is unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.ToXml">
      <summary>Creates an XML encoding of the state of this permission.</summary>
      <returns>A <see cref="T:System.Security.SecurityElement"></see> that contains the XML encoding of the current permission.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of this permission and the specified permission.</summary>
      <param name="target">A <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission"></see> permission to combine with the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInformationPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission"></see> to be applied to code using declarative security.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.NetworkInformationPermissionAttribute"></see> class.</summary>
      <param name="action">A <see cref="T:System.Security.Permissions.SecurityAction"></see> value that specifies the permission behavior.</param>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInformationPermissionAttribute.Access">
      <summary>Gets or sets the network information access level.</summary>
      <returns>A string that specifies the access level.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission"></see> object.</summary>
      <returns>A <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission"></see> that corresponds to this attribute.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInterface">
      <summary>Provides configuration and statistical information for a network interface.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.NetworkInterface"></see> class.</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.Description">
      <summary>Gets the description of the interface.</summary>
      <returns>A <see cref="T:System.String"></see> that describes this interface.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces">
      <summary>Returns objects that describe the network interfaces on the local computer.</summary>
      <returns>A <see cref="T:System.Net.NetworkInformation.NetworkInterface"></see> array that contains objects that describe the available network interfaces, or an empty array if no interfaces are detected.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">A Windows system function call failed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.GetIPProperties">
      <summary>Returns an object that describes the configuration of this network interface.</summary>
      <returns>An <see cref="T:System.Net.NetworkInformation.IPInterfaceProperties"></see> object that describes this network interface.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.GetIPStatistics">
      <summary>Gets the IP statistics for this <see cref="T:System.Net.NetworkInformation.NetworkInterface"></see> instance.</summary>
      <returns>Returns <see cref="T:System.Net.NetworkInformation.IPInterfaceStatistics"></see>.   The IP statistics.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.GetIPv4Statistics">
      <summary>Gets the IPv4 statistics for this <see cref="T:System.Net.NetworkInformation.NetworkInterface"></see> instance.</summary>
      <returns>An <see cref="T:System.Net.NetworkInformation.IPv4InterfaceStatistics"></see> object.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable">
      <summary>Indicates whether any network connection is available.</summary>
      <returns>true if a network connection is available; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress">
      <summary>Returns the Media Access Control (MAC) or physical address for this adapter.</summary>
      <returns>A <see cref="T:System.Net.NetworkInformation.PhysicalAddress"></see> object that contains the physical address.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.Id">
      <summary>Gets the identifier of the network adapter.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the identifier.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.IPv6LoopbackInterfaceIndex">
      <summary>Gets the index of the IPv6 loopback interface.</summary>
      <returns>Returns <see cref="T:System.Int32"></see>.   The index for the IPv6 loopback interface.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.IsReceiveOnly">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the network interface is set to only receive data packets.</summary>
      <returns>true if the interface only receives network traffic; otherwise, false.</returns>
      <exception cref="T:System.PlatformNotSupportedException">This property is not valid on computers running operating systems earlier than Windows XP.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.LoopbackInterfaceIndex">
      <summary>Gets the index of the IPv4 loopback interface.</summary>
      <returns>A <see cref="T:System.Int32"></see> that contains the index for the IPv4 loopback interface.</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">This property is not valid on computers running only Ipv6.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.Name">
      <summary>Gets the name of the network adapter.</summary>
      <returns>A <see cref="T:System.String"></see> that contains the adapter name.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.NetworkInterfaceType">
      <summary>Gets the interface type.</summary>
      <returns>An <see cref="T:System.Net.NetworkInformation.NetworkInterfaceType"></see> value that specifies the network interface type.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.OperationalStatus">
      <summary>Gets the current operational state of the network connection.</summary>
      <returns>One of the <see cref="T:System.Net.NetworkInformation.OperationalStatus"></see> values.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.Speed">
      <summary>Gets the speed of the network interface.</summary>
      <returns>A <see cref="T:System.Int64"></see> value that specifies the speed in bits per second.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.Supports(System.Net.NetworkInformation.NetworkInterfaceComponent)">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the interface supports the specified protocol.</summary>
      <param name="networkInterfaceComponent">A <see cref="T:System.Net.NetworkInformation.NetworkInterfaceComponent"></see> value.</param>
      <returns>true if the specified protocol is supported; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.SupportsMulticast">
      <summary>Gets a <see cref="T:System.Boolean"></see> value that indicates whether the network interface is enabled to receive multicast packets.</summary>
      <returns>true if the interface receives multicast packets; otherwise, false.</returns>
      <exception cref="T:System.PlatformNotSupportedException">This property is not valid on computers running operating systems earlier than Windows XP.</exception>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInterfaceComponent">
      <summary>Specifies the Internet Protocol versions that are supported by a network interface.</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceComponent.IPv4">
      <summary>Internet Protocol version 4.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceComponent.IPv6">
      <summary>Internet Protocol version 6.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInterfaceType">
      <summary>Specifies types of network interfaces.</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.AsymmetricDsl">
      <summary>The network interface uses an Asymmetric Digital Subscriber Line (ADSL).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Atm">
      <summary>The network interface uses asynchronous transfer mode (ATM) for data transmission.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.BasicIsdn">
      <summary>The network interface uses a basic rate interface Integrated Services Digital Network (ISDN) connection. ISDN is a set of standards for data transmission over telephone lines.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Ethernet">
      <summary>The network interface uses an Ethernet connection. Ethernet is defined in IEEE standard 802.3.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Ethernet3Megabit">
      <summary>The network interface uses an Ethernet 3 megabit/second connection. This version of Ethernet is defined in IETF RFC 895.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.FastEthernetFx">
      <summary>The network interface uses a Fast Ethernet connection over optical fiber and provides a data rate of 100 megabits per second. This type of connection is also known as 100Base-FX.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.FastEthernetT">
      <summary>The network interface uses a Fast Ethernet connection over twisted pair and provides a data rate of 100 megabits per second. This type of connection is also known as 100Base-T.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Fddi">
      <summary>The network interface uses a Fiber Distributed Data Interface (FDDI) connection. FDDI is a set of standards for data transmission on fiber optic lines in a local area network.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.GenericModem">
      <summary>The network interface uses a modem.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.GigabitEthernet">
      <summary>The network interface uses a gigabit Ethernet connection and provides a data rate of 1,000 megabits per second (1 gigabit per second).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.HighPerformanceSerialBus">
      <summary>The network interface uses a High Performance Serial Bus.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.IPOverAtm">
      <summary>The network interface uses the Internet Protocol (IP) in combination with asynchronous transfer mode (ATM) for data transmission.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Isdn">
      <summary>The network interface uses a connection configured for ISDN and the X.25 protocol. X.25 allows computers on public networks to communicate using an intermediary computer.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Loopback">
      <summary>The network interface is a loopback adapter. Such interfaces are often used for testing; no traffic is sent over the wire.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.MultiRateSymmetricDsl">
      <summary>The network interface uses a Multirate Digital Subscriber Line.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Ppp">
      <summary>The network interface uses a Point-To-Point protocol (PPP) connection. PPP is a protocol for data transmission using a serial device.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.PrimaryIsdn">
      <summary>The network interface uses a primary rate interface Integrated Services Digital Network (ISDN) connection. ISDN is a set of standards for data transmission over telephone lines.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.RateAdaptDsl">
      <summary>The network interface uses a Rate Adaptive Digital Subscriber Line (RADSL).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Slip">
      <summary>The network interface uses a Serial Line Internet Protocol (SLIP) connection. SLIP is defined in IETF RFC 1055.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.SymmetricDsl">
      <summary>The network interface uses a Symmetric Digital Subscriber Line (SDSL).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.TokenRing">
      <summary>The network interface uses a Token-Ring connection. Token-Ring is defined in IEEE standard 802.5.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Tunnel">
      <summary>The network interface uses a tunnel connection.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Unknown">
      <summary>The interface type is not known.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.VeryHighSpeedDsl">
      <summary>The network interface uses a Very High Data Rate Digital Subscriber Line (VDSL).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Wireless80211">
      <summary>The network interface uses a wireless LAN connection (IEEE 802.11 standard).</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Wman">
      <summary>The network interface uses a mobile broadband interface for WiMax devices.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Wwanpp">
      <summary>The network interface uses a mobile broadband interface for GSM-based devices.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Wwanpp2">
      <summary>The network interface uses a mobile broadband interface for CDMA-based devices.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.NetworkInformation.OperationalStatus">
      <summary>Specifies the operational state of a network interface.</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.Dormant">
      <summary>The network interface is not in a condition to transmit data packets; it is waiting for an external event.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.Down">
      <summary>The network interface is unable to transmit data packets.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.LowerLayerDown">
      <summary>The network interface is unable to transmit data packets because it runs on top of one or more other interfaces, and at least one of these &quot;lower layer&quot; interfaces is down.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.NotPresent">
      <summary>The network interface is unable to transmit data packets because of a missing component, typically a hardware component.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.Testing">
      <summary>The network interface is running tests.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.Unknown">
      <summary>The network interface status is not known.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.Up">
      <summary>The network interface is up; it can transmit data packets.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.NetworkInformation.PhysicalAddress">
      <summary>Provides the Media Access Control (MAC) address for a network interface (adapter).</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.PhysicalAddress"></see> class.</summary>
      <param name="address">A <see cref="T:System.Byte"></see> array containing the address.</param>
    </member>
    <member name="M:System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)">
      <summary>Compares two <see cref="T:System.Net.NetworkInformation.PhysicalAddress"></see> instances.</summary>
      <param name="comparand">The <see cref="T:System.Net.NetworkInformation.PhysicalAddress"></see> to compare to the current instance.</param>
      <returns>true if this instance and the specified instance contain the same address; otherwise false.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes">
      <summary>Returns the address of the current instance.</summary>
      <returns>A <see cref="T:System.Byte"></see> array containing the address.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.PhysicalAddress.GetHashCode">
      <summary>Returns the hash value of a physical address.</summary>
      <returns>An integer hash value.</returns>
    </member>
    <member name="F:System.Net.NetworkInformation.PhysicalAddress.None">
      <summary>Returns a new <see cref="T:System.Net.NetworkInformation.PhysicalAddress"></see> instance with a zero length address. This field is read-only.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
      <summary>Parses the specified <see cref="T:System.String"></see> and stores its contents as the address bytes of the <see cref="T:System.Net.NetworkInformation.PhysicalAddress"></see> returned by this method.</summary>
      <param name="address">A <see cref="T:System.String"></see> containing the address that will be used to initialize the <see cref="T:System.Net.NetworkInformation.PhysicalAddress"></see> instance returned by this method.</param>
      <returns>A <see cref="T:System.Net.NetworkInformation.PhysicalAddress"></see> instance with the specified address.</returns>
      <exception cref="T:System.FormatException">The <paramref name="address">address</paramref> parameter contains an illegal hardware address.   This exception also occurs if the <paramref name="address">address</paramref> parameter contains a string in the incorrect format.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.PhysicalAddress.ToString">
      <summary>Returns the <see cref="T:System.String"></see> representation of the address of this instance.</summary>
      <returns>A <see cref="T:System.String"></see> containing the address contained in this instance.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.Ping">
      <summary>Allows an application to determine whether a remote computer is accessible over the network.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.Ping"></see> class.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.NetworkInformation.Ping"></see> object, and optionally disposes of the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted"></see> event.</summary>
      <param name="e">A <see cref="T:System.Net.NetworkInformation.PingCompletedEventArgs"></see> object that contains event data.</param>
    </member>
    <member name="E:System.Net.NetworkInformation.Ping.PingCompleted">
      <summary>Occurs when an asynchronous operation to send an Internet Control Message Protocol (ICMP) echo message and receive the corresponding ICMP echo reply message completes or is canceled.</summary>
      <returns></returns>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)">
      <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP packet.</summary>
      <param name="hostNameOrAddress">A <see cref="T:System.String"></see> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
      <param name="timeout">An <see cref="T:System.Int32"></see> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
      <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions"></see> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
      <returns>A <see cref="T:System.Net.NetworkInformation.PingReply"></see> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.</returns>
      <exception cref="T:System.ArgumentException">The size of <paramref name="buffer">buffer</paramref> exceeds 65500 bytes.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is null or is a zero length string.   -or-  <paramref name="buffer">buffer</paramref> is null, or the <paramref name="buffer">buffer</paramref> size is greater than 65500 bytes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync"></see> is in progress.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="address">address</paramref> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)">
      <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress"></see> and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP echo message packet.</summary>
      <param name="address">An <see cref="T:System.Net.IPAddress"></see> that identifies the computer that is the destination for the ICMP echo message.</param>
      <param name="timeout">An <see cref="T:System.Int32"></see> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
      <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions"></see> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
      <returns>A <see cref="T:System.Net.NetworkInformation.PingReply"></see> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received. The method will return <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig"></see> if the packet exceeds the Maximum Transmission Unit (MTU).</returns>
      <exception cref="T:System.ArgumentException">The size of <paramref name="buffer">buffer</paramref> exceeds 65500 bytes.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.   -or-  <paramref name="buffer">buffer</paramref> is null, or the <paramref name="buffer">buffer</paramref> size is greater than 65500 bytes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync"></see> is in progress.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="address">address</paramref> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[])">
      <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.</summary>
      <param name="hostNameOrAddress">A <see cref="T:System.String"></see> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
      <param name="timeout">An <see cref="T:System.Int32"></see> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
      <returns>A <see cref="T:System.Net.NetworkInformation.PingReply"></see> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.</returns>
      <exception cref="T:System.ArgumentException">The size of <paramref name="buffer">buffer</paramref> exceeds 65500 bytes.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is null or is an empty string (&quot;&quot;).   -or-  <paramref name="buffer">buffer</paramref> is null, or the <paramref name="buffer">buffer</paramref> size is greater than 65500 bytes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync"></see> is in progress.</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[])">
      <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress"></see>, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.</summary>
      <param name="address">An <see cref="T:System.Net.IPAddress"></see> that identifies the computer that is the destination for the ICMP echo message.</param>
      <param name="timeout">An <see cref="T:System.Int32"></see> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
      <returns>A <see cref="T:System.Net.NetworkInformation.PingReply"></see> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received. The method will return <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig"></see> if the packet exceeds the Maximum Transmission Unit (MTU).</returns>
      <exception cref="T:System.ArgumentException">The size of <paramref name="buffer">buffer</paramref> exceeds 65500 bytes.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.   -or-  <paramref name="buffer">buffer</paramref> is null, or the <paramref name="buffer">buffer</paramref> size is greater than 65500 bytes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync"></see> is in progress.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="address">address</paramref> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32)">
      <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This method allows you to specify a time-out value for the operation.</summary>
      <param name="hostNameOrAddress">A <see cref="T:System.String"></see> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
      <param name="timeout">An <see cref="T:System.Int32"></see> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
      <returns>A <see cref="T:System.Net.NetworkInformation.PingReply"></see> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is null or is an empty string (&quot;&quot;).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync"></see> is in progress.</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32)">
      <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress"></see>, and receive a corresponding ICMP echo reply message from that computer. This method allows you to specify a time-out value for the operation.</summary>
      <param name="address">An <see cref="T:System.Net.IPAddress"></see> that identifies the computer that is the destination for the ICMP echo message.</param>
      <param name="timeout">An <see cref="T:System.Int32"></see> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
      <returns>A <see cref="T:System.Net.NetworkInformation.PingReply"></see> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync"></see> is in progress.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="address">address</paramref> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.String)">
      <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.</summary>
      <param name="hostNameOrAddress">A <see cref="T:System.String"></see> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
      <returns>A <see cref="T:System.Net.NetworkInformation.PingReply"></see> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is null or is an empty string (&quot;&quot;).</exception>
      <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync"></see> is in progress.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="address">address</paramref> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress)">
      <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <see cref="T:System.Net.IPAddress"></see>, and receive a corresponding ICMP echo reply message from that computer.</summary>
      <param name="address">An <see cref="T:System.Net.IPAddress"></see> that identifies the computer that is the destination for the ICMP echo message.</param>
      <returns>A <see cref="T:System.Net.NetworkInformation.PingReply"></see> object that provides information about the ICMP echo reply message, if one was received, or describes the reason for the failure if no message was received.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync"></see> is in progress.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="address">address</paramref> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)">
      <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP packet.</summary>
      <param name="hostNameOrAddress">A <see cref="T:System.String"></see> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
      <param name="timeout">A <see cref="T:System.Byte"></see> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
      <param name="buffer">An <see cref="T:System.Int32"></see> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
      <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions"></see> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
      <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is null or is an empty string (&quot;&quot;).   -or-  <paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync"></see> is in progress.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="address">address</paramref> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> could not be resolved to a valid IP address.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
      <exception cref="T:System.ArgumentException">The size of <paramref name="buffer">buffer</paramref> exceeds 65500 bytes.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)">
      <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress"></see>, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP echo message packet.</summary>
      <param name="address">An <see cref="T:System.Net.IPAddress"></see> that identifies the computer that is the destination for the ICMP echo message.</param>
      <param name="timeout">An <see cref="T:System.Int32"></see> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
      <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions"></see> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
      <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.   -or-  <paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync"></see> is in progress.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="address">address</paramref> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address">address</paramref> is not a valid IP address.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
      <exception cref="T:System.ArgumentException">The size of <paramref name="buffer">buffer</paramref> exceeds 65500 bytes.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Object)">
      <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.</summary>
      <param name="hostNameOrAddress">A <see cref="T:System.String"></see> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
      <param name="timeout">An <see cref="T:System.Int32"></see> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
      <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is null or is an empty string (&quot;&quot;).   -or-  <paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync"></see> is in progress.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> could not be resolved to a valid IP address.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
      <exception cref="T:System.ArgumentException">The size of <paramref name="buffer">buffer</paramref> exceeds 65500 bytes.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)">
      <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress"></see>, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.</summary>
      <param name="address">An <see cref="T:System.Net.IPAddress"></see> that identifies the computer that is the destination for the ICMP echo message.</param>
      <param name="timeout">An <see cref="T:System.Int32"></see> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
      <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.   -or-  <paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync"></see> is in progress.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="address">address</paramref> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address">address</paramref> is not a valid IP address.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
      <exception cref="T:System.ArgumentException">The size of <paramref name="buffer">buffer</paramref> exceeds 65500 bytes.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Object)">
      <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <see cref="T:System.Net.IPAddress"></see>, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.</summary>
      <param name="address">An <see cref="T:System.Net.IPAddress"></see> that identifies the computer that is the destination for the ICMP echo message.</param>
      <param name="timeout">An <see cref="T:System.Int32"></see> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
      <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">A call to <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)"></see> method is in progress.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="address">address</paramref> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address">address</paramref> is not a valid IP address.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)">
      <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.</summary>
      <param name="hostNameOrAddress">A <see cref="T:System.String"></see> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
      <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is null or is an empty string (&quot;&quot;).</exception>
      <exception cref="T:System.InvalidOperationException">A call to <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)"></see> method is in progress.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="address">address</paramref> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> could not be resolved to a valid IP address.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Object)">
      <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <see cref="T:System.Net.IPAddress"></see>, and receive a corresponding ICMP echo reply message from that computer.</summary>
      <param name="address">An <see cref="T:System.Net.IPAddress"></see> that identifies the computer that is the destination for the ICMP echo message.</param>
      <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">A call to the <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync"></see> method is in progress.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="address">address</paramref> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address">address</paramref> is not a valid IP address.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Object)">
      <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.</summary>
      <param name="hostNameOrAddress">A <see cref="T:System.String"></see> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
      <param name="timeout">An <see cref="T:System.Int32"></see> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
      <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is null or is an empty string (&quot;&quot;).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync"></see> is in progress.</exception>
      <exception cref="T:System.NotSupportedException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress">hostNameOrAddress</paramref> could not be resolved to a valid IP address.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsyncCancel">
      <summary>Cancels all pending asynchronous requests to send an Internet Control Message Protocol (ICMP) echo message and receives a corresponding ICMP echo reply message.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)">
      <summary>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.</summary>
      <param name="hostNameOrAddress">The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
      <param name="timeout">The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
      <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions"></see> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)">
      <summary>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress"></see>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation.</summary>
      <param name="address">An IP address that identifies the computer that is the destination for the ICMP echo message.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.</exception>
      <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync"></see> is in progress.</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address">address</paramref> is not a valid IP address.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String)">
      <summary>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation.</summary>
      <param name="hostNameOrAddress">The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)">
      <summary>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress"></see>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation.</summary>
      <param name="address">An IP address that identifies the computer that is the destination for the ICMP echo message.</param>
      <param name="timeout">The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)">
      <summary>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation.</summary>
      <param name="hostNameOrAddress">The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
      <param name="timeout">The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])">
      <summary>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress"></see>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.</summary>
      <param name="address">An IP address that identifies the computer that is the destination for the ICMP echo message.</param>
      <param name="timeout">The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.   -or-  <paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync"></see> is in progress.</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address">address</paramref> is not a valid IP address.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
      <exception cref="T:System.ArgumentException">The size of <paramref name="buffer">buffer</paramref> exceeds 65,500 bytes.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])">
      <summary>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.</summary>
      <param name="hostNameOrAddress">The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
      <param name="timeout">The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)">
      <summary>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress"></see>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.</summary>
      <param name="address">An IP address that identifies the computer that is the destination for the ICMP echo message.</param>
      <param name="timeout">The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
      <param name="buffer">A <see cref="T:System.Byte"></see> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
      <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions"></see> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"></see>.   The task object representing the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="address">address</paramref> is null.   -or-  <paramref name="buffer">buffer</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout">timeout</paramref> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync"></see> is in progress.</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
      <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address">address</paramref> is not a valid IP address.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
      <exception cref="T:System.ArgumentException">The size of <paramref name="buffer">buffer</paramref> exceeds 65,500 bytes.</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.System#IDisposable#Dispose">
      
    </member>
    <member name="T:System.Net.NetworkInformation.PingCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted"></see> event.</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.PingCompletedEventArgs.Reply">
      <summary>Gets an object that contains data that describes an attempt to send an Internet Control Message Protocol (ICMP) echo request message and receive a corresponding ICMP echo reply message.</summary>
      <returns>A <see cref="T:System.Net.NetworkInformation.PingReply"></see> object that describes the results of the ICMP echo request.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.PingCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted"></see> event of a <see cref="T:System.Net.NetworkInformation.Ping"></see> object.</summary>
      <param name="sender">The source of the <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted"></see> event.</param>
      <param name="e">A <see cref="T:System.Net.NetworkInformation.PingCompletedEventArgs"></see> object that contains the event data.</param>
    </member>
    <member name="T:System.Net.NetworkInformation.PingException">
      <summary>The exception that is thrown when a <see cref="Overload:System.Net.NetworkInformation.Ping.Send"></see> or <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync"></see> method calls a method that throws an exception.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.PingException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.PingException"></see> class using the specified message.</summary>
      <param name="message">A <see cref="T:System.String"></see> that describes the error.</param>
    </member>
    <member name="M:System.Net.NetworkInformation.PingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.PingException"></see> class with serialized data.</summary>
      <param name="serializationInfo">The object that holds the serialized object data.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that specifies the contextual information about the source or destination for this serialization.</param>
    </member>
    <member name="M:System.Net.NetworkInformation.PingException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.PingException"></see> class using the specified message and inner exception.</summary>
      <param name="message">A <see cref="T:System.String"></see> that describes the error.</param>
      <param name="innerException">The exception that causes the current exception.</param>
    </member>
    <member name="T:System.Net.NetworkInformation.PingOptions">
      <summary>Used to control how <see cref="T:System.Net.NetworkInformation.Ping"></see> data packets are transmitted.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.PingOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.PingOptions"></see> class.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.PingOptions.#ctor(System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.PingOptions"></see> class and sets the Time to Live and fragmentation values.</summary>
      <param name="ttl">An <see cref="T:System.Int32"></see> value greater than zero that specifies the number of times that the <see cref="T:System.Net.NetworkInformation.Ping"></see> data packets can be forwarded.</param>
      <param name="dontFragment">true to prevent data sent to the remote host from being fragmented; otherwise, false.</param>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ttl">ttl</paramref> is less than or equal to zero.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.PingOptions.DontFragment">
      <summary>Gets or sets a <see cref="T:System.Boolean"></see> value that controls fragmentation of the data sent to the remote host.</summary>
      <returns>true if the data cannot be sent in multiple packets; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.PingOptions.Ttl">
      <summary>Gets or sets the number of routing nodes that can forward the <see cref="T:System.Net.NetworkInformation.Ping"></see> data before it is discarded.</summary>
      <returns>An <see cref="T:System.Int32"></see> value that specifies the number of times the <see cref="T:System.Net.NetworkInformation.Ping"></see> data packets can be forwarded. The default is 128.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than or equal to zero.</exception>
    </member>
    <member name="T:System.Net.NetworkInformation.PingReply">
      <summary>Provides information about the status and data resulting from a <see cref="Overload:System.Net.NetworkInformation.Ping.Send"></see> or <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync"></see> operation.</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.PingReply.Address">
      <summary>Gets the address of the host that sends the Internet Control Message Protocol (ICMP) echo reply.</summary>
      <returns>An <see cref="T:System.Net.IPAddress"></see> containing the destination for the ICMP echo message.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.PingReply.Buffer">
      <summary>Gets the buffer of data received in an Internet Control Message Protocol (ICMP) echo reply message.</summary>
      <returns>A <see cref="T:System.Byte"></see> array containing the data received in an ICMP echo reply message, or an empty array, if no reply was received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.PingReply.Options">
      <summary>Gets the options used to transmit the reply to an Internet Control Message Protocol (ICMP) echo request.</summary>
      <returns>A <see cref="T:System.Net.NetworkInformation.PingOptions"></see> object that contains the Time to Live (TTL) and the fragmentation directive used for transmitting the reply if <see cref="P:System.Net.NetworkInformation.PingReply.Status"></see> is <see cref="F:System.Net.NetworkInformation.IPStatus.Success"></see>; otherwise, null.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.PingReply.RoundtripTime">
      <summary>Gets the number of milliseconds taken to send an Internet Control Message Protocol (ICMP) echo request and receive the corresponding ICMP echo reply message.</summary>
      <returns>An <see cref="T:System.Int64"></see> that specifies the round trip time, in milliseconds.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.PingReply.Status">
      <summary>Gets the status of an attempt to send an Internet Control Message Protocol (ICMP) echo request and receive the corresponding ICMP echo reply message.</summary>
      <returns>An <see cref="T:System.Net.NetworkInformation.IPStatus"></see> value indicating the result of the request.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.PrefixOrigin">
      <summary>Specifies how an IP address network prefix was located.</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.PrefixOrigin.Dhcp">
      <summary>The prefix was supplied by a Dynamic Host Configuration Protocol (DHCP) server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.PrefixOrigin.Manual">
      <summary>The prefix was manually configured.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.PrefixOrigin.Other">
      <summary>The prefix was located using an unspecified source.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.PrefixOrigin.RouterAdvertisement">
      <summary>The prefix was supplied by a router advertisement.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.PrefixOrigin.WellKnown">
      <summary>The prefix is a well-known prefix. Well-known prefixes are specified in standard-track Request for Comments (RFC) documents and assigned by the Internet Assigned Numbers Authority (Iana) or an address registry. Such prefixes are reserved for special purposes.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.NetworkInformation.ScopeLevel">
      <summary>The scope level for an IPv6 address.</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.ScopeLevel.Admin">
      <summary>The scope is admin-level.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.ScopeLevel.Global">
      <summary>The scope is global.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.ScopeLevel.Interface">
      <summary>The scope is interface-level.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.ScopeLevel.Link">
      <summary>The scope is link-level.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.ScopeLevel.None">
      <summary>The scope level is not specified.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.ScopeLevel.Organization">
      <summary>The scope is organization-level.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.ScopeLevel.Site">
      <summary>The scope is site-level.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.ScopeLevel.Subnet">
      <summary>The scope is subnet-level.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.NetworkInformation.SuffixOrigin">
      <summary>Specifies how an IP address host suffix was located.</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.SuffixOrigin.LinkLayerAddress">
      <summary>The suffix is a link-local suffix.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.SuffixOrigin.Manual">
      <summary>The suffix was manually configured.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.SuffixOrigin.OriginDhcp">
      <summary>The suffix was supplied by a Dynamic Host Configuration Protocol (DHCP) server.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.SuffixOrigin.Other">
      <summary>The suffix was located using an unspecified source.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.SuffixOrigin.Random">
      <summary>The suffix was randomly assigned.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.SuffixOrigin.WellKnown">
      <summary>The suffix is a well-known suffix. Well-known suffixes are specified in standard-track Request for Comments (RFC) documents and assigned by the Internet Assigned Numbers Authority (Iana) or an address registry. Such suffixes are reserved for special purposes.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.NetworkInformation.TcpConnectionInformation">
      <summary>Provides information about the Transmission Control Protocol (TCP) connections on the local computer.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.TcpConnectionInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.TcpConnectionInformation"></see> class.</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpConnectionInformation.LocalEndPoint">
      <summary>Gets the local endpoint of a Transmission Control Protocol (TCP) connection.</summary>
      <returns>An <see cref="T:System.Net.IPEndPoint"></see> instance that contains the IP address and port on the local computer.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpConnectionInformation.RemoteEndPoint">
      <summary>Gets the remote endpoint of a Transmission Control Protocol (TCP) connection.</summary>
      <returns>An <see cref="T:System.Net.IPEndPoint"></see> instance that contains the IP address and port on the remote computer.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpConnectionInformation.State">
      <summary>Gets the state of this Transmission Control Protocol (TCP) connection.</summary>
      <returns>One of the <see cref="T:System.Net.NetworkInformation.TcpState"></see> enumeration values.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.TcpState">
      <summary>Specifies the states of a Transmission Control Protocol (TCP) connection.</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.Closed">
      <summary>The TCP connection is closed.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.CloseWait">
      <summary>The local endpoint of the TCP connection is waiting for a connection termination request from the local user.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.Closing">
      <summary>The local endpoint of the TCP connection is waiting for an acknowledgement of the connection termination request sent previously.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.DeleteTcb">
      <summary>The transmission control buffer (TCB) for the TCP connection is being deleted.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.Established">
      <summary>The TCP handshake is complete. The connection has been established and data can be sent.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.FinWait1">
      <summary>The local endpoint of the TCP connection is waiting for a connection termination request from the remote endpoint or for an acknowledgement of the connection termination request sent previously.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.FinWait2">
      <summary>The local endpoint of the TCP connection is waiting for a connection termination request from the remote endpoint.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.LastAck">
      <summary>The local endpoint of the TCP connection is waiting for the final acknowledgement of the connection termination request sent previously.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.Listen">
      <summary>The local endpoint of the TCP connection is listening for a connection request from any remote endpoint.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.SynReceived">
      <summary>The local endpoint of the TCP connection has sent and received a connection request and is waiting for an acknowledgment.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.SynSent">
      <summary>The local endpoint of the TCP connection has sent the remote endpoint a segment header with the synchronize (SYN) control bit set and is waiting for a matching connection request.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.TimeWait">
      <summary>The local endpoint of the TCP connection is waiting for enough time to pass to ensure that the remote endpoint received the acknowledgement of its connection termination request.</summary>
      <returns></returns>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.Unknown">
      <summary>The TCP connection state is unknown.</summary>
      <returns></returns>
    </member>
    <member name="T:System.Net.NetworkInformation.TcpStatistics">
      <summary>Provides Transmission Control Protocol (TCP) statistical data.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.TcpStatistics.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.TcpStatistics"></see> class.</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.ConnectionsAccepted">
      <summary>Gets the number of accepted Transmission Control Protocol (TCP) connection requests.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of TCP connection requests accepted.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.ConnectionsInitiated">
      <summary>Gets the number of Transmission Control Protocol (TCP) connection requests made by clients.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of TCP connections initiated by clients.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.CumulativeConnections">
      <summary>Specifies the total number of Transmission Control Protocol (TCP) connections established.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of connections established.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.CurrentConnections">
      <summary>Gets the number of current Transmission Control Protocol (TCP) connections.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of current TCP connections.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.ErrorsReceived">
      <summary>Gets the number of Transmission Control Protocol (TCP) errors received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of TCP errors received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.FailedConnectionAttempts">
      <summary>Gets the number of failed Transmission Control Protocol (TCP) connection attempts.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of failed TCP connection attempts.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.MaximumConnections">
      <summary>Gets the maximum number of supported Transmission Control Protocol (TCP) connections.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of TCP connections that can be supported.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.MaximumTransmissionTimeout">
      <summary>Gets the maximum retransmission time-out value for Transmission Control Protocol (TCP) segments.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the maximum number of milliseconds permitted by a TCP implementation for the retransmission time-out value.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.MinimumTransmissionTimeout">
      <summary>Gets the minimum retransmission time-out value for Transmission Control Protocol (TCP) segments.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the minimum number of milliseconds permitted by a TCP implementation for the retransmission time-out value.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.ResetConnections">
      <summary>Gets the number of RST packets received by Transmission Control Protocol (TCP) connections.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of reset TCP connections.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.ResetsSent">
      <summary>Gets the number of Transmission Control Protocol (TCP) segments sent with the reset flag set.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of TCP segments sent with the reset flag set.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.SegmentsReceived">
      <summary>Gets the number of Transmission Control Protocol (TCP) segments received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of TCP segments received.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.SegmentsResent">
      <summary>Gets the number of Transmission Control Protocol (TCP) segments re-sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of TCP segments retransmitted.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.SegmentsSent">
      <summary>Gets the number of Transmission Control Protocol (TCP) segments sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of TCP segments sent.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.UdpStatistics">
      <summary>Provides User Datagram Protocol (UDP) statistical data.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.UdpStatistics.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.UdpStatistics"></see> class.</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.UdpStatistics.DatagramsReceived">
      <summary>Gets the number of User Datagram Protocol (UDP) datagrams that were received.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of datagrams that were delivered to UDP users.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UdpStatistics.DatagramsSent">
      <summary>Gets the number of User Datagram Protocol (UDP) datagrams that were sent.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of datagrams that were sent.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UdpStatistics.IncomingDatagramsDiscarded">
      <summary>Gets the number of User Datagram Protocol (UDP) datagrams that were received and discarded because of port errors.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of received UDP datagrams that were discarded because there was no listening application at the destination port.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UdpStatistics.IncomingDatagramsWithErrors">
      <summary>Gets the number of User Datagram Protocol (UDP) datagrams that were received and discarded because of errors other than bad port information.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of received UDP datagrams that could not be delivered for reasons other than the lack of an application at the destination port.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UdpStatistics.UdpListeners">
      <summary>Gets the number of local endpoints that are listening for User Datagram Protocol (UDP) datagrams.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the total number of sockets that are listening for UDP datagrams.</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.UnicastIPAddressInformation">
      <summary>Provides information about a network interface's unicast address.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation"></see> class.</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.AddressPreferredLifetime">
      <summary>Gets the number of seconds remaining during which this address is the preferred address.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the number of seconds left for this address to remain preferred.</returns>
      <exception cref="T:System.PlatformNotSupportedException">This property is not valid on computers running operating systems earlier than Windows XP.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.AddressValidLifetime">
      <summary>Gets the number of seconds remaining during which this address is valid.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that specifies the number of seconds left for this address to remain assigned.</returns>
      <exception cref="T:System.PlatformNotSupportedException">This property is not valid on computers running operating systems earlier than Windows XP.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.DhcpLeaseLifetime">
      <summary>Specifies the amount of time remaining on the Dynamic Host Configuration Protocol (DHCP) lease for this IP address.</summary>
      <returns>An <see cref="T:System.Int64"></see> value that contains the number of seconds remaining before the computer must release the <see cref="T:System.Net.IPAddress"></see> instance.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.DuplicateAddressDetectionState">
      <summary>Gets a value that indicates the state of the duplicate address detection algorithm.</summary>
      <returns>One of the <see cref="T:System.Net.NetworkInformation.DuplicateAddressDetectionState"></see> values that indicates the progress of the algorithm in determining the uniqueness of this IP address.</returns>
      <exception cref="T:System.PlatformNotSupportedException">This property is not valid on computers running operating systems earlier than Windows XP.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.IPv4Mask">
      <summary>Gets the IPv4 mask.</summary>
      <returns>An <see cref="T:System.Net.IPAddress"></see> object that contains the IPv4 mask.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixLength">
      <summary>Gets the length, in bits, of the prefix or network part of the IP address.</summary>
      <returns>Returns <see cref="T:System.Int32"></see>.   the length, in bits, of the prefix or network part of the IP address.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixOrigin">
      <summary>Gets a value that identifies the source of a unicast Internet Protocol (IP) address prefix.</summary>
      <returns>One of the <see cref="T:System.Net.NetworkInformation.PrefixOrigin"></see> values that identifies how the prefix information was obtained.</returns>
      <exception cref="T:System.PlatformNotSupportedException">This property is not valid on computers running operating systems earlier than Windows XP.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.SuffixOrigin">
      <summary>Gets a value that identifies the source of a unicast Internet Protocol (IP) address suffix.</summary>
      <returns>One of the <see cref="T:System.Net.NetworkInformation.SuffixOrigin"></see> values that identifies how the suffix information was obtained.</returns>
      <exception cref="T:System.PlatformNotSupportedException">This property is not valid on computers running operating systems earlier than Windows XP.</exception>
    </member>
    <member name="T:System.Net.NetworkInformation.UnicastIPAddressInformationCollection">
      <summary>Stores a set of <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation"></see> types.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformationCollection"></see> class.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Add(System.Net.NetworkInformation.UnicastIPAddressInformation)">
      <summary>Throws a <see cref="T:System.NotSupportedException"></see> because this operation is not supported for this collection.</summary>
      <param name="address">The object to be added to the collection.</param>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Clear">
      <summary>Throws a <see cref="T:System.NotSupportedException"></see> because this operation is not supported for this collection.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Contains(System.Net.NetworkInformation.UnicastIPAddressInformation)">
      <summary>Checks whether the collection contains the specified <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation"></see> object.</summary>
      <param name="address">The <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation"></see> object to be searched in the collection.</param>
      <returns>true if the <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation"></see> object exists in the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.CopyTo(System.Net.NetworkInformation.UnicastIPAddressInformation[],System.Int32)">
      <summary>Copies the elements in this collection to a one-dimensional array of type <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation"></see>.</summary>
      <param name="array">A one-dimensional array that receives a copy of the collection.</param>
      <param name="offset">The zero-based index in array at which the copy begins.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than zero.</exception>
      <exception cref="T:System.ArgumentException"><paramref name="array">array</paramref> is multidimensional.   -or-   The number of elements in this <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformationCollection"></see> is greater than the available space from <paramref name="offset">offset</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
      <exception cref="T:System.InvalidCastException">The elements in this <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformationCollection"></see> cannot be cast automatically to the type of the destination <paramref name="array">array</paramref>.</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Count">
      <summary>Gets the number of <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation"></see> types in this collection.</summary>
      <returns>An <see cref="T:System.Int32"></see> value that contains the number of <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation"></see> types in this collection.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.GetEnumerator">
      <summary>Returns an object that can be used to iterate through this collection.</summary>
      <returns>An object that implements the <see cref="T:System.Collections.IEnumerator"></see> interface and provides access to the <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation"></see> types in this collection.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.IsReadOnly">
      <summary>Gets a value that indicates whether access to this collection is read-only.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation"></see> instance at the specified index in the collection.</summary>
      <param name="index">The zero-based index of the element.</param>
      <returns>The <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation"></see> at the specified location.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Remove(System.Net.NetworkInformation.UnicastIPAddressInformation)">
      <summary>Throws a <see cref="T:System.NotSupportedException"></see> because the collection is read-only and elements cannot be removed.</summary>
      <param name="address">The object to be removed.</param>
      <returns>Always throws a <see cref="T:System.NotSupportedException"></see>.</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an object that can be used to iterate through this collection.</summary>
      <returns>An object that implements the <see cref="T:System.Collections.IEnumerator"></see> interface and provides access to the <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation"></see> types in this collection.</returns>
    </member>
    <member name="T:System.Net.OpenReadCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.WebClient.OpenReadCompleted"></see> event.</summary>
    </member>
    <member name="P:System.Net.OpenReadCompletedEventArgs.Result">
      <summary>Gets a readable stream that contains data downloaded by a <see cref="Overload:System.Net.WebClient.DownloadDataAsync"></see> method.</summary>
      <returns>A <see cref="T:System.IO.Stream"></see> that contains the downloaded data.</returns>
    </member>
    <member name="T:System.Net.OpenReadCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Net.WebClient.OpenReadCompleted"></see> event of a <see cref="T:System.Net.WebClient"></see>.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Net.OpenReadCompletedEventArgs"></see> containing event data.</param>
    </member>
    <member name="T:System.Net.OpenWriteCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.WebClient.OpenWriteCompleted"></see> event.</summary>
    </member>
    <member name="P:System.Net.OpenWriteCompletedEventArgs.Result">
      <summary>Gets a writable stream that is used to send data to a server.</summary>
      <returns>A <see cref="T:System.IO.Stream"></see> where you can write data to be uploaded.</returns>
    </member>
    <member name="T:System.Net.OpenWriteCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Net.WebClient.OpenWriteCompleted"></see> event of a <see cref="T:System.Net.WebClient"></see>.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Net.OpenWriteCompletedEventArgs"></see> containing event data.</param>
    </member>
    <member name="T:System.Security.Cryptography.AsnEncodedData">
      <summary>Represents Abstract Syntax Notation One (ASN.1)-encoded data.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> class using a byte array.</summary>
      <param name="rawData">A byte array that contains Abstract Syntax Notation One (ASN.1)-encoded data.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.#ctor(System.Security.Cryptography.AsnEncodedData)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> class using an instance of the <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> class.</summary>
      <param name="asnEncodedData">An instance of the <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> class.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="asnEncodedData">asnEncodedData</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.#ctor(System.Security.Cryptography.Oid,System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> class using an <see cref="T:System.Security.Cryptography.Oid"></see> object and a byte array.</summary>
      <param name="oid">An <see cref="T:System.Security.Cryptography.Oid"></see> object.</param>
      <param name="rawData">A byte array that contains Abstract Syntax Notation One (ASN.1)-encoded data.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.#ctor(System.String,System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> class using a byte array.</summary>
      <param name="oid">A string that represents <see cref="T:System.Security.Cryptography.Oid"></see> information.</param>
      <param name="rawData">A byte array that contains Abstract Syntax Notation One (ASN.1)-encoded data.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>Copies information from an <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object.</summary>
      <param name="asnEncodedData">The <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object to base the new object on.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="asnEncodedData">asnEncodedData</paramref> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.Format(System.Boolean)">
      <summary>Returns a formatted version of the Abstract Syntax Notation One (ASN.1)-encoded data as a string.</summary>
      <param name="multiLine">true if the return string should contain carriage returns; otherwise, false.</param>
      <returns>A formatted string that represents the Abstract Syntax Notation One (ASN.1)-encoded data.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedData.Oid">
      <summary>Gets or sets the <see cref="T:System.Security.Cryptography.Oid"></see> value for an <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.Oid"></see> object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedData.RawData">
      <summary>Gets or sets the Abstract Syntax Notation One (ASN.1)-encoded data represented in a byte array.</summary>
      <returns>A byte array that represents the Abstract Syntax Notation One (ASN.1)-encoded data.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
    </member>
    <member name="T:System.Security.Cryptography.AsnEncodedDataCollection">
      <summary>Represents a collection of <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"></see> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.#ctor(System.Security.Cryptography.AsnEncodedData)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"></see> class and adds an <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object to the collection.</summary>
      <param name="asnEncodedData">The <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object to add to the collection.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.Add(System.Security.Cryptography.AsnEncodedData)">
      <summary>Adds an <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object to the <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"></see> object.</summary>
      <param name="asnEncodedData">The <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object to add to the collection.</param>
      <returns>The index of the added <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object.</returns>
      <exception cref="T:System.ArgumentNullException"><paramref name="asnEncodedData">asnEncodedData</paramref> is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">One of the OIDs is null and the OIDs do not match.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.CopyTo(System.Security.Cryptography.AsnEncodedData[],System.Int32)">
      <summary>Copies the <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"></see> object into an array.</summary>
      <param name="array">The array that the <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"></see> object is to be copied into.</param>
      <param name="index">The location where the copy operation starts.</param>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedDataCollection.Count">
      <summary>Gets the number of <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> objects in a collection.</summary>
      <returns>The number of <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> objects.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.GetEnumerator">
      <summary>Returns an <see cref="T:System.Security.Cryptography.AsnEncodedDataEnumerator"></see> object that can be used to navigate the <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"></see> object.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.AsnEncodedDataEnumerator"></see> object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedDataCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to the <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"></see> object is thread safe.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedDataCollection.Item(System.Int32)">
      <summary>Gets an <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object from the <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"></see> object.</summary>
      <param name="index">The location in the collection.</param>
      <returns>An <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.Remove(System.Security.Cryptography.AsnEncodedData)">
      <summary>Removes an <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object from the <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"></see> object.</summary>
      <param name="asnEncodedData">The <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object to remove.</param>
      <exception cref="T:System.ArgumentNullException"><paramref name="asnEncodedData">asnEncodedData</paramref> is null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedDataCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"></see> object.</summary>
      <returns>An object used to synchronize access to the <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"></see> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"></see> object into an array.</summary>
      <param name="array">The array that the <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"></see> object is to be copied into.</param>
      <param name="index">The location where the copy operation starts.</param>
      <exception cref="T:System.ArgumentException">The length for <paramref name="index">index</paramref> is invalid.</exception>
      <exception cref="T:System.ArgumentNullException"><paramref name="array">array</paramref> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length for <paramref name="index">index</paramref> is out of range.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an <see cref="T:System.Security.Cryptography.AsnEncodedDataEnumerator"></see> object that can be used to navigate the <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"></see> object.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.AsnEncodedDataEnumerator"></see> object that can be used to navigate the collection.</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsnEncodedDataEnumerator">
      <summary>Provides the ability to navigate through an <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"></see> object. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedDataEnumerator.Current">
      <summary>Gets the current <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object in an <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"></see> object.</summary>
      <returns>The current <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object in the collection.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataEnumerator.MoveNext">
      <summary>Advances to the next <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object in an <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"></see> object.</summary>
      <returns>true, if the enumerator was successfully advanced to the next element; false, if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataEnumerator.Reset">
      <summary>Sets an enumerator to its initial position.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedDataEnumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the current <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object in an <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"></see> object.</summary>
      <returns>The current <see cref="T:System.Security.Cryptography.AsnEncodedData"></see> object.</returns>
    </member>
  </members>
</doc></span>